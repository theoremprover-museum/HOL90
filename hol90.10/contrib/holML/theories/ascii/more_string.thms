thid = (more_string, 784033120, 7837)
axioms = []
definitions =
[((getchar_DEF),
  [],
  `((! :(integer -> bool) -> bool) (\(i :integer).
   (((= :string -> string -> bool) (getchar $0))
   (((LET :(bool -> string) -> bool -> string) (\(b7 :bool).
   (((LET :(integer -> string) -> integer -> string) (\(i2 :integer).
   (((LET :(bool -> string) -> bool -> string) (\(b6 :bool).
   (((LET :(integer -> string) -> integer -> string) (\(i3 :integer).
   (((LET :(bool -> string) -> bool -> string) (\(b5 :bool).
   (((LET :(integer -> string) -> integer -> string) (\(i4 :integer).
   (((LET :(bool -> string) -> bool -> string) (\(b4 :bool).
   (((LET :(integer -> string) -> integer -> string) (\(i5 :integer).
   (((LET :(bool -> string) -> bool -> string) (\(b3 :bool).
   (((LET :(integer -> string) -> integer -> string) (\(i6 :integer).
   (((LET :(bool -> string) -> bool -> string) (\(b2 :bool).
   (((LET :(integer -> string) -> integer -> string) (\(i7 :integer).
   (((LET :(bool -> string) -> bool -> string) (\(b1 :bool).
   (((LET :(integer -> string) -> integer -> string) (\(i8 :integer).
   (((LET :(bool -> string) -> bool -> string) (\(b0 :bool). ((STRING
   ((((((((ASCII $14) $12) $10) $8) $6) $4) $2) $0)) "")))
   ((((COND :bool -> bool -> bool -> bool) ((below $0) (INT 1))) F)
   T)))) ((minus $1) ((((COND :bool -> integer -> integer -> integer)
   $0) (INT 2)) (INT 0)))))) ((((COND :bool -> bool -> bool -> bool)
   ((below $0) (INT 2))) F) T)))) ((minus $1)
   ((((COND :bool -> integer -> integer -> integer) $0) (INT 4)) (INT
   0)))))) ((((COND :bool -> bool -> bool -> bool) ((below $0) (INT
   4))) F) T)))) ((minus $1)
   ((((COND :bool -> integer -> integer -> integer) $0) (INT 8)) (INT
   0)))))) ((((COND :bool -> bool -> bool -> bool) ((below $0) (INT
   8))) F) T)))) ((minus $1)
   ((((COND :bool -> integer -> integer -> integer) $0) (INT 16)) (INT
   0)))))) ((((COND :bool -> bool -> bool -> bool) ((below $0) (INT
   16))) F) T)))) ((minus $1)
   ((((COND :bool -> integer -> integer -> integer) $0) (INT 32)) (INT
   0)))))) ((((COND :bool -> bool -> bool -> bool) ((below $0) (INT
   32))) F) T)))) ((minus $1)
   ((((COND :bool -> integer -> integer -> integer) $0) (INT 64)) (INT
   0)))))) ((((COND :bool -> bool -> bool -> bool) ((below $0) (INT
   64))) F) T)))) ((minus $1)
   ((((COND :bool -> integer -> integer -> integer) $0) (INT 128))
   (INT 0)))))) ((((COND :bool -> bool -> bool -> bool) ((below $0)
   (INT 128))) F) T)))))`),
 ((ord_str_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   ((! :(ascii -> bool) -> bool) (\(a :ascii).
   (((= :integer -> integer -> bool) (ord_str ((STRING $0) $1)))
   (ord_char $0))))))`),
 ((ord_char_DEF),
  [],
  `((! :(bool -> bool) -> bool) (\(b0 :bool).
   ((! :(bool -> bool) -> bool) (\(b1 :bool).
   ((! :(bool -> bool) -> bool) (\(b2 :bool).
   ((! :(bool -> bool) -> bool) (\(b3 :bool).
   ((! :(bool -> bool) -> bool) (\(b4 :bool).
   ((! :(bool -> bool) -> bool) (\(b5 :bool).
   ((! :(bool -> bool) -> bool) (\(b6 :bool).
   ((! :(bool -> bool) -> bool) (\(b7 :bool).
   (((= :integer -> integer -> bool) (ord_char ((((((((ASCII $0) $1)
   $2) $3) $4) $5) $6) $7))) (INT ((+
   ((((COND :bool -> num -> num -> num) $0) 128) 0)) ((+
   ((((COND :bool -> num -> num -> num) $1) 64) 0)) ((+
   ((((COND :bool -> num -> num -> num) $2) 32) 0)) ((+
   ((((COND :bool -> num -> num -> num) $3) 16) 0)) ((+
   ((((COND :bool -> num -> num -> num) $4) 8) 0)) ((+
   ((((COND :bool -> num -> num -> num) $5) 4) 0)) ((+
   ((((COND :bool -> num -> num -> num) $6) 2) 0))
   ((((COND :bool -> num -> num -> num) $7) 1)
   0))))))))))))))))))))))))))`),
 ((string_size_DEF),
  [],
  `((/\ (((= :integer -> integer -> bool) (string_size "")) (INT 0)))
   ((! :(string -> bool) -> bool) (\(s :string).
   ((! :(ascii -> bool) -> bool) (\(a :ascii).
   (((= :integer -> integer -> bool) (string_size ((STRING $0) $1)))
   ((plus (INT 1)) (string_size $1))))))))`),
 ((ltstring_DEF),
  [],
  `((/\ ((! :(string -> bool) -> bool) (\(s2 :string).
   (((= :bool -> bool -> bool) ((ltstring "") $0)) (~ (empty_str
   $0)))))) ((! :(ascii -> bool) -> bool) (\(a :ascii).
   ((! :(string -> bool) -> bool) (\(s :string).
   ((! :(string -> bool) -> bool) (\(s2 :string).
   (((= :bool -> bool -> bool) ((ltstring ((STRING $2) $1)) $0))
   ((((COND :bool -> bool -> bool -> bool)
   (((= :ascii -> ascii -> bool) $2) (first_char $0))) ((ltstring $1)
   (rest_string $0))) ((ltascii $2) (first_char $0)))))))))))`),
 ((rest_string_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   ((! :(ascii -> bool) -> bool) (\(a :ascii).
   (((= :string -> string -> bool) (rest_string ((STRING $0) $1)))
   $1)))))`),
 ((first_char_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   ((! :(ascii -> bool) -> bool) (\(a :ascii).
   (((= :ascii -> ascii -> bool) (first_char ((STRING $0) $1)))
   $0)))))`),
 ((empty_str_DEF),
  [],
  `((/\ (((= :bool -> bool -> bool) (empty_str "")) T))
   ((! :(string -> bool) -> bool) (\(s :string).
   ((! :(ascii -> bool) -> bool) (\(a :ascii).
   (((= :bool -> bool -> bool) (empty_str ((STRING $0) $1)))
   F))))))`),
 ((ltascii_DEF),
  [],
  `((! :(bool -> bool) -> bool) (\(b0 :bool).
   ((! :(bool -> bool) -> bool) (\(b1 :bool).
   ((! :(bool -> bool) -> bool) (\(b2 :bool).
   ((! :(bool -> bool) -> bool) (\(b3 :bool).
   ((! :(bool -> bool) -> bool) (\(b4 :bool).
   ((! :(bool -> bool) -> bool) (\(b5 :bool).
   ((! :(bool -> bool) -> bool) (\(b6 :bool).
   ((! :(bool -> bool) -> bool) (\(b7 :bool).
   (((= :(ascii -> bool) -> (ascii -> bool) -> bool) (ltascii
   ((((((((ASCII $0) $1) $2) $3) $4) $5) $6) $7))) (\(a2 :ascii).
   ((((COND :bool -> bool -> bool -> bool) ((/\ (~ $1)) (bit7 $0))) T)
   ((((COND :bool -> bool -> bool -> bool) ((/\ $1) (~ (bit7 $0)))) F)
   ((((COND :bool -> bool -> bool -> bool) ((/\ (~ $2)) (bit6 $0))) T)
   ((((COND :bool -> bool -> bool -> bool) ((/\ $2) (~ (bit6 $0)))) F)
   ((((COND :bool -> bool -> bool -> bool) ((/\ (~ $3)) (bit5 $0))) T)
   ((((COND :bool -> bool -> bool -> bool) ((/\ $3) (~ (bit5 $0)))) F)
   ((((COND :bool -> bool -> bool -> bool) ((/\ (~ $4)) (bit4 $0))) T)
   ((((COND :bool -> bool -> bool -> bool) ((/\ $4) (~ (bit4 $0)))) F)
   ((((COND :bool -> bool -> bool -> bool) ((/\ (~ $5)) (bit3 $0))) T)
   ((((COND :bool -> bool -> bool -> bool) ((/\ $5) (~ (bit3 $0)))) F)
   ((((COND :bool -> bool -> bool -> bool) ((/\ (~ $6)) (bit2 $0))) T)
   ((((COND :bool -> bool -> bool -> bool) ((/\ $6) (~ (bit2 $0)))) F)
   ((((COND :bool -> bool -> bool -> bool) ((/\ (~ $7)) (bit1 $0))) T)
   ((((COND :bool -> bool -> bool -> bool) ((/\ $7) (~ (bit1 $0)))) F)
   ((((COND :bool -> bool -> bool -> bool) ((/\ (~ $8)) (bit0 $0))) T)
   F)))))))))))))))))))))))))))))))))`),
 ((bit7_DEF),
  [],
  `((! :(bool -> bool) -> bool) (\(b0 :bool).
   ((! :(bool -> bool) -> bool) (\(b1 :bool).
   ((! :(bool -> bool) -> bool) (\(b2 :bool).
   ((! :(bool -> bool) -> bool) (\(b3 :bool).
   ((! :(bool -> bool) -> bool) (\(b4 :bool).
   ((! :(bool -> bool) -> bool) (\(b5 :bool).
   ((! :(bool -> bool) -> bool) (\(b6 :bool).
   ((! :(bool -> bool) -> bool) (\(b7 :bool).
   (((= :bool -> bool -> bool) (bit7 ((((((((ASCII $0) $1) $2) $3) $4)
   $5) $6) $7))) $0)))))))))))))))))`),
 ((bit6_DEF),
  [],
  `((! :(bool -> bool) -> bool) (\(b0 :bool).
   ((! :(bool -> bool) -> bool) (\(b1 :bool).
   ((! :(bool -> bool) -> bool) (\(b2 :bool).
   ((! :(bool -> bool) -> bool) (\(b3 :bool).
   ((! :(bool -> bool) -> bool) (\(b4 :bool).
   ((! :(bool -> bool) -> bool) (\(b5 :bool).
   ((! :(bool -> bool) -> bool) (\(b6 :bool).
   ((! :(bool -> bool) -> bool) (\(b7 :bool).
   (((= :bool -> bool -> bool) (bit6 ((((((((ASCII $0) $1) $2) $3) $4)
   $5) $6) $7))) $1)))))))))))))))))`),
 ((bit5_DEF),
  [],
  `((! :(bool -> bool) -> bool) (\(b0 :bool).
   ((! :(bool -> bool) -> bool) (\(b1 :bool).
   ((! :(bool -> bool) -> bool) (\(b2 :bool).
   ((! :(bool -> bool) -> bool) (\(b3 :bool).
   ((! :(bool -> bool) -> bool) (\(b4 :bool).
   ((! :(bool -> bool) -> bool) (\(b5 :bool).
   ((! :(bool -> bool) -> bool) (\(b6 :bool).
   ((! :(bool -> bool) -> bool) (\(b7 :bool).
   (((= :bool -> bool -> bool) (bit5 ((((((((ASCII $0) $1) $2) $3) $4)
   $5) $6) $7))) $2)))))))))))))))))`),
 ((bit4_DEF),
  [],
  `((! :(bool -> bool) -> bool) (\(b0 :bool).
   ((! :(bool -> bool) -> bool) (\(b1 :bool).
   ((! :(bool -> bool) -> bool) (\(b2 :bool).
   ((! :(bool -> bool) -> bool) (\(b3 :bool).
   ((! :(bool -> bool) -> bool) (\(b4 :bool).
   ((! :(bool -> bool) -> bool) (\(b5 :bool).
   ((! :(bool -> bool) -> bool) (\(b6 :bool).
   ((! :(bool -> bool) -> bool) (\(b7 :bool).
   (((= :bool -> bool -> bool) (bit4 ((((((((ASCII $0) $1) $2) $3) $4)
   $5) $6) $7))) $3)))))))))))))))))`),
 ((bit3_DEF),
  [],
  `((! :(bool -> bool) -> bool) (\(b0 :bool).
   ((! :(bool -> bool) -> bool) (\(b1 :bool).
   ((! :(bool -> bool) -> bool) (\(b2 :bool).
   ((! :(bool -> bool) -> bool) (\(b3 :bool).
   ((! :(bool -> bool) -> bool) (\(b4 :bool).
   ((! :(bool -> bool) -> bool) (\(b5 :bool).
   ((! :(bool -> bool) -> bool) (\(b6 :bool).
   ((! :(bool -> bool) -> bool) (\(b7 :bool).
   (((= :bool -> bool -> bool) (bit3 ((((((((ASCII $0) $1) $2) $3) $4)
   $5) $6) $7))) $4)))))))))))))))))`),
 ((bit2_DEF),
  [],
  `((! :(bool -> bool) -> bool) (\(b0 :bool).
   ((! :(bool -> bool) -> bool) (\(b1 :bool).
   ((! :(bool -> bool) -> bool) (\(b2 :bool).
   ((! :(bool -> bool) -> bool) (\(b3 :bool).
   ((! :(bool -> bool) -> bool) (\(b4 :bool).
   ((! :(bool -> bool) -> bool) (\(b5 :bool).
   ((! :(bool -> bool) -> bool) (\(b6 :bool).
   ((! :(bool -> bool) -> bool) (\(b7 :bool).
   (((= :bool -> bool -> bool) (bit2 ((((((((ASCII $0) $1) $2) $3) $4)
   $5) $6) $7))) $5)))))))))))))))))`),
 ((bit1_DEF),
  [],
  `((! :(bool -> bool) -> bool) (\(b0 :bool).
   ((! :(bool -> bool) -> bool) (\(b1 :bool).
   ((! :(bool -> bool) -> bool) (\(b2 :bool).
   ((! :(bool -> bool) -> bool) (\(b3 :bool).
   ((! :(bool -> bool) -> bool) (\(b4 :bool).
   ((! :(bool -> bool) -> bool) (\(b5 :bool).
   ((! :(bool -> bool) -> bool) (\(b6 :bool).
   ((! :(bool -> bool) -> bool) (\(b7 :bool).
   (((= :bool -> bool -> bool) (bit1 ((((((((ASCII $0) $1) $2) $3) $4)
   $5) $6) $7))) $6)))))))))))))))))`),
 ((bit0_DEF),
  [],
  `((! :(bool -> bool) -> bool) (\(b0 :bool).
   ((! :(bool -> bool) -> bool) (\(b1 :bool).
   ((! :(bool -> bool) -> bool) (\(b2 :bool).
   ((! :(bool -> bool) -> bool) (\(b3 :bool).
   ((! :(bool -> bool) -> bool) (\(b4 :bool).
   ((! :(bool -> bool) -> bool) (\(b5 :bool).
   ((! :(bool -> bool) -> bool) (\(b6 :bool).
   ((! :(bool -> bool) -> bool) (\(b7 :bool).
   (((= :bool -> bool -> bool) (bit0 ((((((((ASCII $0) $1) $2) $3) $4)
   $5) $6) $7))) $7)))))))))))))))))`)]
theorems =
[((ltascii_lemma),
  [],
  `((! :(bool -> bool) -> bool) (\(b7 :bool).
   ((! :(bool -> bool) -> bool) (\(b6 :bool).
   ((! :(bool -> bool) -> bool) (\(b5 :bool).
   ((! :(bool -> bool) -> bool) (\(b4 :bool).
   ((! :(bool -> bool) -> bool) (\(b3 :bool).
   ((! :(bool -> bool) -> bool) (\(b2 :bool).
   ((! :(bool -> bool) -> bool) (\(b1 :bool).
   ((! :(bool -> bool) -> bool) (\(b0 :bool).
   ((! :(bool -> bool) -> bool) (\(c7 :bool).
   ((! :(bool -> bool) -> bool) (\(c6 :bool).
   ((! :(bool -> bool) -> bool) (\(c5 :bool).
   ((! :(bool -> bool) -> bool) (\(c4 :bool).
   ((! :(bool -> bool) -> bool) (\(c3 :bool).
   ((! :(bool -> bool) -> bool) (\(c2 :bool).
   ((! :(bool -> bool) -> bool) (\(c1 :bool).
   ((! :(bool -> bool) -> bool) (\(c0 :bool).
   (((= :bool -> bool -> bool) ((ltascii ((((((((ASCII $15) $14) $13)
   $12) $11) $10) $9) $8)) ((((((((ASCII $7) $6) $5) $4) $3) $2) $1)
   $0))) ((((COND :bool -> bool -> bool -> bool) ((/\ (~ $15)) $7)) T)
   ((((COND :bool -> bool -> bool -> bool) ((/\ $15) (~ $7))) F)
   ((((COND :bool -> bool -> bool -> bool) ((/\ (~ $14)) $6)) T)
   ((((COND :bool -> bool -> bool -> bool) ((/\ $14) (~ $6))) F)
   ((((COND :bool -> bool -> bool -> bool) ((/\ (~ $13)) $5)) T)
   ((((COND :bool -> bool -> bool -> bool) ((/\ $13) (~ $5))) F)
   ((((COND :bool -> bool -> bool -> bool) ((/\ (~ $12)) $4)) T)
   ((((COND :bool -> bool -> bool -> bool) ((/\ $12) (~ $4))) F)
   ((((COND :bool -> bool -> bool -> bool) ((/\ (~ $11)) $3)) T)
   ((((COND :bool -> bool -> bool -> bool) ((/\ $11) (~ $3))) F)
   ((((COND :bool -> bool -> bool -> bool) ((/\ (~ $10)) $2)) T)
   ((((COND :bool -> bool -> bool -> bool) ((/\ $10) (~ $2))) F)
   ((((COND :bool -> bool -> bool -> bool) ((/\ (~ $9)) $1)) T)
   ((((COND :bool -> bool -> bool -> bool) ((/\ $9) (~ $1))) F)
   ((((COND :bool -> bool -> bool -> bool) ((/\ (~ $8)) $0)) T)
   F))))))))))))))))))))))))))))))))))))))))))))))))`)]
