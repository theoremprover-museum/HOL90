thid = (HOFML, 784042442, 112154)
axioms = []
definitions =
[((eval_topdec_h_DEF),
  [],
  `((/\ ((/\ ((! :(moddec_h -> bool) -> bool) (\(moddec_h :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(env_h -> bool) -> bool) (\(E :env_h). ((==>
   (((((eval_moddec_h $4) $3) $2) $1) (ENVep_h $0)))
   (((((eval_topdec_h (MODDEC_H $4)) $3) $2) $1) (BASISbp_h
   (env_h_in_basis_h $0))))))))))))))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(pack -> bool) -> bool) (\(p :pack). ((==> (((((eval_moddec_h
   $4) $3) $2) $1) (PACKep_h $0))) (((((eval_topdec_h (MODDEC_H $4))
   $3) $2) $1) (PACKbp_h $0))))))))))))))
   ((! :(sigdec_h -> bool) -> bool) (\(sigdec_h :sigdec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv_h -> bool) -> bool) (\(G :sigenv_h). ((==>
   (((((eval_sigdec_h $4) $3) (Inter_basis_h $2)) $1) $0))
   (((((eval_topdec_h (SIGDEC_H $4)) $3) $2) $1) (BASISbp_h
   (sigenv_h_in_basis_h $0)))))))))))))))))
   ((! :((topdec_h -> state -> basis_h -> state -> basis_pack_h ->
         bool) -> bool) -> bool)
   (\(P :topdec_h -> state -> basis_h -> state -> basis_pack_h ->
         bool). ((==> ((/\ ((! :(moddec_h -> bool) -> bool)
   (\(moddec_h :moddec_h). ((! :(state -> bool) -> bool)
   (\(s1 :state). ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(env_h -> bool) -> bool) (\(E :env_h). ((==>
   (((((eval_moddec_h $4) $3) $2) $1) (ENVep_h $0))) ((((($5 (MODDEC_H
   $4)) $3) $2) $1) (BASISbp_h (env_h_in_basis_h $0)))))))))))))))
   ((/\ ((! :(moddec_h -> bool) -> bool) (\(moddec_h :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(pack -> bool) -> bool) (\(p :pack). ((==> (((((eval_moddec_h
   $4) $3) $2) $1) (PACKep_h $0))) ((((($5 (MODDEC_H $4)) $3) $2) $1)
   (PACKbp_h $0)))))))))))))) ((! :(sigdec_h -> bool) -> bool)
   (\(sigdec_h :sigdec_h). ((! :(state -> bool) -> bool)
   (\(s1 :state). ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv_h -> bool) -> bool) (\(G :sigenv_h). ((==>
   (((((eval_sigdec_h $4) $3) (Inter_basis_h $2)) $1) $0)) ((((($5
   (SIGDEC_H $4)) $3) $2) $1) (BASISbp_h (sigenv_h_in_basis_h
   $0))))))))))))))))) ((! :(topdec_h -> bool) -> bool)
   (\(topdec_h :topdec_h). ((! :(state -> bool) -> bool)
   (\(s1 :state). ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(basis_pack_h -> bool) -> bool) (\(bp :basis_pack_h). ((==>
   (((((eval_topdec_h $4) $3) $2) $1) $0)) ((((($5 $4) $3) $2) $1)
   $0))))))))))))))))`),
 ((eval_funbind_h_DEF),
  [],
  `((! :(funbind_h -> bool) -> bool) (\(funbind_h :funbind_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(funenv_h -> bool) -> bool) (\(fe :funenv_h).
   (((= :bool -> bool -> bool) (((((eval_funbind_h $4) $3) $2) $1)
   $0))
   ((! :((strexp_h -> state -> basis_h -> state -> env_pack_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_strexp_h :strexp_h -> state -> basis_h -> state ->
                          env_pack_h -> bool).
   ((! :((moddec_h -> state -> basis_h -> state -> env_pack_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_moddec_h :moddec_h -> state -> basis_h -> state ->
                          env_pack_h -> bool).
   ((! :((strbind_h -> state -> basis_h -> state -> strenv_pack_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_strbind_h :strbind_h -> state -> basis_h -> state ->
                           strenv_pack_h -> bool).
   ((! :((funbind_h -> state -> basis_h -> state -> funenv_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_funbind_h :funbind_h -> state -> basis_h -> state ->
                           funenv_h -> bool). ((==>
   ((((HOFML_eval_structures_pred $3) $2) $1) $0)) ((((($0 $8) $7) $6)
   $5) $4)))))))))))))))))))))`),
 ((eval_strbind_h_DEF),
  [],
  `((! :(strbind_h -> bool) -> bool) (\(strbind_h :strbind_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(strenv_pack_h -> bool) -> bool) (\(sep :strenv_pack_h).
   (((= :bool -> bool -> bool) (((((eval_strbind_h $4) $3) $2) $1)
   $0))
   ((! :((strexp_h -> state -> basis_h -> state -> env_pack_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_strexp_h :strexp_h -> state -> basis_h -> state ->
                          env_pack_h -> bool).
   ((! :((moddec_h -> state -> basis_h -> state -> env_pack_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_moddec_h :moddec_h -> state -> basis_h -> state ->
                          env_pack_h -> bool).
   ((! :((strbind_h -> state -> basis_h -> state -> strenv_pack_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_strbind_h :strbind_h -> state -> basis_h -> state ->
                           strenv_pack_h -> bool).
   ((! :((funbind_h -> state -> basis_h -> state -> funenv_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_funbind_h :funbind_h -> state -> basis_h -> state ->
                           funenv_h -> bool). ((==>
   ((((HOFML_eval_structures_pred $3) $2) $1) $0)) ((((($1 $8) $7) $6)
   $5) $4)))))))))))))))))))))`),
 ((eval_moddec_h_DEF),
  [],
  `((! :(moddec_h -> bool) -> bool) (\(moddec_h :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(env_pack_h -> bool) -> bool) (\(ep :env_pack_h).
   (((= :bool -> bool -> bool) (((((eval_moddec_h $4) $3) $2) $1) $0))
   ((! :((strexp_h -> state -> basis_h -> state -> env_pack_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_strexp_h :strexp_h -> state -> basis_h -> state ->
                          env_pack_h -> bool).
   ((! :((moddec_h -> state -> basis_h -> state -> env_pack_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_moddec_h :moddec_h -> state -> basis_h -> state ->
                          env_pack_h -> bool).
   ((! :((strbind_h -> state -> basis_h -> state -> strenv_pack_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_strbind_h :strbind_h -> state -> basis_h -> state ->
                           strenv_pack_h -> bool).
   ((! :((funbind_h -> state -> basis_h -> state -> funenv_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_funbind_h :funbind_h -> state -> basis_h -> state ->
                           funenv_h -> bool). ((==>
   ((((HOFML_eval_structures_pred $3) $2) $1) $0)) ((((($2 $8) $7) $6)
   $5) $4)))))))))))))))))))))`),
 ((eval_strexp_h_DEF),
  [],
  `((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(env_pack_h -> bool) -> bool) (\(ep :env_pack_h).
   (((= :bool -> bool -> bool) (((((eval_strexp_h $4) $3) $2) $1) $0))
   ((! :((strexp_h -> state -> basis_h -> state -> env_pack_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_strexp_h :strexp_h -> state -> basis_h -> state ->
                          env_pack_h -> bool).
   ((! :((moddec_h -> state -> basis_h -> state -> env_pack_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_moddec_h :moddec_h -> state -> basis_h -> state ->
                          env_pack_h -> bool).
   ((! :((strbind_h -> state -> basis_h -> state -> strenv_pack_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_strbind_h :strbind_h -> state -> basis_h -> state ->
                           strenv_pack_h -> bool).
   ((! :((funbind_h -> state -> basis_h -> state -> funenv_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_funbind_h :funbind_h -> state -> basis_h -> state ->
                           funenv_h -> bool). ((==>
   ((((HOFML_eval_structures_pred $3) $2) $1) $0)) ((((($3 $8) $7) $6)
   $5) $4)))))))))))))))))))))`),
 ((HOFML_eval_structures_pred_DEF),
  [],
  `((! :((strexp_h -> state -> basis_h -> state -> env_pack_h ->
         bool) -> bool) -> bool)
   (\(eval_strexp_h :strexp_h -> state -> basis_h -> state ->
                     env_pack_h -> bool).
   ((! :((moddec_h -> state -> basis_h -> state -> env_pack_h ->
         bool) -> bool) -> bool)
   (\(eval_moddec_h :moddec_h -> state -> basis_h -> state ->
                     env_pack_h -> bool).
   ((! :((strbind_h -> state -> basis_h -> state -> strenv_pack_h ->
         bool) -> bool) -> bool)
   (\(eval_strbind_h :strbind_h -> state -> basis_h -> state ->
                      strenv_pack_h -> bool).
   ((! :((funbind_h -> state -> basis_h -> state -> funenv_h ->
         bool) -> bool) -> bool)
   (\(eval_funbind_h :funbind_h -> state -> basis_h -> state ->
                      funenv_h -> bool). (((= :bool -> bool -> bool)
   ((((HOFML_eval_structures_pred $3) $2) $1) $0)) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($7 $2) $1)
   $4) $0) (ENVep_h $3))) ((((($8 (STRUCTstrexp_h $2)) $1) $4) $0)
   (ENVep_h $3)))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($7 $2) $1)
   $4) $0) (PACKep_h $3))) ((((($8 (STRUCTstrexp_h $2)) $1) $4) $0)
   (PACKep_h $3)))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(strid long -> bool) -> bool) (\(longstrid :strid long).
   ((! :(state -> bool) -> bool) (\(s :state). ((==>
   (((= :env_h lift -> env_h lift -> bool)
   ((lift :env_h -> env_h lift) $2)) ((lookup_longstrid_basis_h $3)
   $1))) ((((($7 (LONGSTRIDstrexp_h $1)) $0) $3) $0) (ENVep_h
   $2)))))))))))) ((/\ ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(basis_h -> bool) -> bool) (\(B' :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(env_h -> bool) -> bool) (\(E' :env_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(funid long -> bool) -> bool) (\(longfunid :funid long).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h' :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((= :funclos_h lift -> funclos_h lift -> bool)
   ((lift :funclos_h -> funclos_h lift) (((((FUNCLOS_H $3) $7) $4)
   (NONE :int_h option)) $10))) ((lookup_longfunid_basis_h $11) $6)))
   ((/\ ((((($15 $5) $2) $11) $1) (ENVep_h $9))) ((((($15 $4) $1)
   ((add_basis_h $10) (strenv_h_in_basis_h ((strenv_h_map $3)
   ((cut_env_h $9) $7))))) $0) (ENVep_h $8))))) ((((($15 ((APPstrexp_h
   $6) $5)) $2) $11) $0) (ENVep_h $8)))))))))))))))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(basis_h -> bool) -> bool) (\(B' :basis_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(funid long -> bool) -> bool) (\(longfunid :funid long).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h' :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((/\
   (((= :funclos_h lift -> funclos_h lift -> bool)
   ((lift :funclos_h -> funclos_h lift) (((((FUNCLOS_H $2) $7) $3)
   (NONE :int_h option)) $8))) ((lookup_longfunid_basis_h $9) $6)))
   ((((($13 $4) $1) $9) $0) (PACKep_h $5)))) ((((($13 ((APPstrexp_h
   $6) $4)) $1) $9) $0) (PACKep_h $5)))))))))))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(basis_h -> bool) -> bool) (\(B' :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(funid long -> bool) -> bool) (\(longfunid :funid long).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h' :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((= :funclos_h lift -> funclos_h lift -> bool)
   ((lift :funclos_h -> funclos_h lift) (((((FUNCLOS_H $3) $8) $4)
   (NONE :int_h option)) $10))) ((lookup_longfunid_basis_h $11) $7)))
   ((/\ ((((($15 $5) $2) $11) $1) (ENVep_h $9))) ((((($15 $4) $1)
   ((add_basis_h $10) (strenv_h_in_basis_h ((strenv_h_map $3)
   ((cut_env_h $9) $8))))) $0) (PACKep_h $6))))) ((((($15
   ((APPstrexp_h $7) $5)) $2) $11) $0) (PACKep_h
   $6)))))))))))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(basis_h -> bool) -> bool) (\(B' :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(env_h -> bool) -> bool) (\(E' :env_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(int_h -> bool) -> bool) (\(i' :int_h).
   ((! :(funid long -> bool) -> bool) (\(longfunid :funid long).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h' :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((= :funclos_h lift -> funclos_h lift -> bool)
   ((lift :funclos_h -> funclos_h lift) (((((FUNCLOS_H $3) $8) $4)
   ((SOME :int_h -> int_h option) $7)) $11)))
   ((lookup_longfunid_basis_h $12) $6))) ((/\ ((((($16 $5) $2) $12)
   $1) (ENVep_h $10))) ((((($16 $4) $1) ((add_basis_h $11)
   (strenv_h_in_basis_h ((strenv_h_map $3) ((cut_env_h $10) $8)))))
   $0) (ENVep_h $9))))) ((((($16 ((APPstrexp_h $6) $5)) $2) $12) $0)
   (ENVep_h ((cut_env_h $9) $7))))))))))))))))))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(basis_h -> bool) -> bool) (\(B' :basis_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(int_h -> bool) -> bool) (\(i' :int_h).
   ((! :(funid long -> bool) -> bool) (\(longfunid :funid long).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h' :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((/\
   (((= :funclos_h lift -> funclos_h lift -> bool)
   ((lift :funclos_h -> funclos_h lift) (((((FUNCLOS_H $2) $8) $3)
   ((SOME :int_h -> int_h option) $7)) $9)))
   ((lookup_longfunid_basis_h $10) $6))) ((((($14 $4) $1) $10) $0)
   (PACKep_h $5)))) ((((($14 ((APPstrexp_h $6) $4)) $1) $10) $0)
   (PACKep_h $5)))))))))))))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(basis_h -> bool) -> bool) (\(B' :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(int_h -> bool) -> bool) (\(i' :int_h).
   ((! :(funid long -> bool) -> bool) (\(longfunid :funid long).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h' :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((= :funclos_h lift -> funclos_h lift -> bool)
   ((lift :funclos_h -> funclos_h lift) (((((FUNCLOS_H $3) $9) $4)
   ((SOME :int_h -> int_h option) $8)) $11)))
   ((lookup_longfunid_basis_h $12) $7))) ((/\ ((((($16 $5) $2) $12)
   $1) (ENVep_h $10))) ((((($16 $4) $1) ((add_basis_h $11)
   (strenv_h_in_basis_h ((strenv_h_map $3) ((cut_env_h $10) $9)))))
   $0) (PACKep_h $6))))) ((((($16 ((APPstrexp_h $7) $5)) $2) $12) $0)
   (PACKep_h $6)))))))))))))))))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(env_h -> bool) -> bool) (\(E' :env_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($10
   $4) $2) $7) $1) (ENVep_h $6))) ((((($11 $3) $1)
   ((add_env_h_to_basis_h $7) $6)) $0) (ENVep_h $5)))) ((((($11
   ((LETstrexp_h $4) $3)) $2) $7) $0) (ENVep_h $5))))))))))))))))))))
   ((/\ ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($8 $3) $1)
   $5) $0) (PACKep_h $4))) ((((($9 ((LETstrexp_h $3) $2)) $1) $5) $0)
   (PACKep_h $4)))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($10
   $4) $2) $7) $1) (ENVep_h $6))) ((((($11 $3) $1)
   ((add_env_h_to_basis_h $7) $6)) $0) (PACKep_h $5)))) ((((($11
   ((LETstrexp_h $4) $3)) $2) $7) $0) (PACKep_h $5))))))))))))))))))))
   ((/\ ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(env -> bool) -> bool) (\(E' :env).
   ((! :(dec -> bool) -> bool) (\(dec :dec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> (((((eval_dec
   $2) $1) (cut_env_h_to_env (env_h_of_basis_h $4))) $0) (ENVep $3)))
   ((((($7 (DECmoddec_h $2)) $1) $4) $0) (ENVep_h (env_in_env_h
   $3))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(dec -> bool) -> bool) (\(dec :dec).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> (((((eval_dec
   $3) $1) (cut_env_h_to_env (env_h_of_basis_h $4))) $0) (PACKep $2)))
   ((((($7 (DECmoddec_h $3)) $1) $4) $0) (PACKep_h $2))))))))))))))
   ((/\ ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(strenv_h -> bool) -> bool) (\(SE :strenv_h).
   ((! :(strbind_h -> bool) -> bool) (\(strbind_h :strbind_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($6 $2) $1)
   $4) $0) (STRENVsp_h $3))) ((((($7 (STRUCTUREmoddec_h $2)) $1) $4)
   $0) (ENVep_h (strenv_h_in_env_h $3))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strbind_h -> bool) -> bool) (\(strbind_h :strbind_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($6 $2) $1)
   $4) $0) (PACKsp_h $3))) ((((($7 (STRUCTUREmoddec_h $2)) $1) $4) $0)
   (PACKep_h $3)))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(env_h -> bool) -> bool) (\(E1 :env_h).
   ((! :(env_h -> bool) -> bool) (\(E2 :env_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h2 :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($10
   $4) $2) $7) $1) (ENVep_h $6))) ((((($10 $3) $1)
   ((add_env_h_to_basis_h $7) $6)) $0) (ENVep_h $5)))) ((((($10
   ((LOCALmoddec_h $4) $3)) $2) $7) $0) (ENVep_h
   $5)))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h2 :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($8 $3) $1)
   $5) $0) (PACKep_h $4))) ((((($8 ((LOCALmoddec_h $3) $2)) $1) $5)
   $0) (PACKep_h $4)))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h2 :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($10
   $4) $2) $7) $1) (ENVep_h $6))) ((((($10 $3) $1)
   ((add_env_h_to_basis_h $7) $6)) $0) (PACKep_h $5)))) ((((($10
   ((LOCALmoddec_h $4) $3)) $2) $7) $0) (PACKep_h
   $5)))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(env_h nonemptylist -> bool) -> bool)
   (\(E_1_n :env_h nonemptylist).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(longstrid_1_n :strid long nonemptylist).
   ((! :(state -> bool) -> bool) (\(s :state). ((==>
   (((= :env_h lift nonemptylist -> env_h lift nonemptylist -> bool)
   (((nonempty_MAP :(strid long -> env_h lift) ->
                    strid long nonemptylist ->
                    env_h lift nonemptylist) (lookup_longstrid_basis_h
   $3)) $1))
   (((nonempty_MAP :(env_h -> env_h lift) -> env_h nonemptylist ->
                    env_h lift nonemptylist)
   (lift :env_h -> env_h lift)) $2))) ((((($6 (OPENmoddec_h $1)) $0)
   $3) $0) (ENVep_h
   (((nonempty_FOLDL_WITH_INIT :(env_h -> env_h -> env_h) ->
                                env_h nonemptylist -> env_h)
   add_env_h) $2))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(state -> bool) -> bool) (\(s :state). ((((($4
   EMPTYmoddec_h) $0) $1) $0) (ENVep_h empty_env_h))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E1 :env_h).
   ((! :(env_h -> bool) -> bool) (\(E2 :env_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h2 :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($10
   $4) $2) $7) $1) (ENVep_h $6))) ((((($10 $3) $1)
   ((add_env_h_to_basis_h $7) $6)) $0) (ENVep_h $5)))) ((((($10
   ((SEQmoddec_h $4) $3)) $2) $7) $0) (ENVep_h ((add_env_h $6)
   $5))))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h2 :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($8 $3) $1)
   $5) $0) (PACKep_h $4))) ((((($8 ((SEQmoddec_h $3) $2)) $1) $5) $0)
   (PACKep_h $4)))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h2 :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($10
   $4) $2) $7) $1) (ENVep_h $6))) ((((($10 $3) $1)
   ((add_env_h_to_basis_h $7) $6)) $0) (PACKep_h $5)))) ((((($10
   ((SEQmoddec_h $4) $3)) $2) $7) $0) (PACKep_h $5))))))))))))))))))))
   ((/\ ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(funenv_h -> bool) -> bool) (\(f :funenv_h).
   ((! :(funbind_h -> bool) -> bool) (\(funbind_h :funbind_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($5 $2) $1)
   $4) $0) $3)) ((((($7 (FUNCTORmoddec_h $2)) $1) $4) $0) (ENVep_h
   (funenv_h_in_env_h $3))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($9 $3) $1)
   $5) $0) (ENVep_h $4))) ((((($7 ((((BINDstrbind_h $2)
   (NONE :sigexp_h option)) $3) (NONE :strbind_h option))) $1) $5) $0)
   (STRENVsp_h ((strenv_h_map $2) $4))))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($9 $3) $1)
   $5) $0) (PACKep_h $4))) ((((($7 ((((BINDstrbind_h $2)
   (NONE :sigexp_h option)) $3) (NONE :strbind_h option))) $1) $5) $0)
   (PACKsp_h $4)))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($12
   $4) $2) $8) $1) (ENVep_h $7))) (((((eval_sigexp_h $5) $1)
   (Inter_basis_h $8)) $0) $6))) ((((($10 ((((BINDstrbind_h $3)
   ((SOME :sigexp_h -> sigexp_h option) $5)) $4)
   (NONE :strbind_h option))) $2) $8) $0) (STRENVsp_h ((strenv_h_map
   $3) ((cut_env_h $7) $6)))))))))))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($10 $3) $1)
   $6) $0) (PACKep_h $5))) ((((($8 ((((BINDstrbind_h $2)
   ((SOME :sigexp_h -> sigexp_h option) $4)) $3)
   (NONE :strbind_h option))) $1) $6) $0) (PACKsp_h
   $5)))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(strenv_h -> bool) -> bool) (\(SE :strenv_h).
   ((! :(strbind_h -> bool) -> bool) (\(strbind_h :strbind_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($12
   $4) $2) $8) $1) (ENVep_h $7))) ((((($10 $5) $1) $8) $0) (STRENVsp_h
   $6)))) ((((($10 ((((BINDstrbind_h $3) (NONE :sigexp_h option)) $4)
   ((SOME :strbind_h -> strbind_h option) $5))) $2) $8) $0)
   (STRENVsp_h ((add_strenv_h ((strenv_h_map $3) $7))
   $6))))))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strbind_h -> bool) -> bool) (\(strbind_h :strbind_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($10 $3) $1)
   $6) $0) (PACKep_h $5))) ((((($8 ((((BINDstrbind_h $2)
   (NONE :sigexp_h option)) $3) ((SOME :strbind_h -> strbind_h option)
   $4))) $1) $6) $0) (PACKsp_h $5)))))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strbind_h -> bool) -> bool) (\(strbind_h :strbind_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($12
   $4) $2) $8) $1) (ENVep_h $7))) ((((($10 $5) $1) $8) $0) (PACKsp_h
   $6)))) ((((($10 ((((BINDstrbind_h $3) (NONE :sigexp_h option)) $4)
   ((SOME :strbind_h -> strbind_h option) $5))) $2) $8) $0) (PACKsp_h
   $6)))))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(strenv_h -> bool) -> bool) (\(SE :strenv_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(strbind_h -> bool) -> bool) (\(strbind_h :strbind_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(state -> bool) -> bool) (\(s4 :state). ((==> ((/\ ((((($15
   $5) $3) $11) $2) (ENVep_h $10))) ((/\ (((((eval_sigexp_h $7) $2)
   (Inter_basis_h $11)) $1) $9)) ((((($13 $6) $1) $11) $0) (STRENVsp_h
   $8))))) ((((($13 ((((BINDstrbind_h $4)
   ((SOME :sigexp_h -> sigexp_h option) $7)) $5)
   ((SOME :strbind_h -> strbind_h option) $6))) $3) $11) $0)
   (STRENVsp_h ((add_strenv_h ((strenv_h_map $4) ((cut_env_h $10)
   $9))) $8))))))))))))))))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(strbind_h -> bool) -> bool) (\(strbind_h :strbind_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($11 $3) $1)
   $7) $0) (PACKep_h $6))) ((((($9 ((((BINDstrbind_h $2)
   ((SOME :sigexp_h -> sigexp_h option) $5)) $3)
   ((SOME :strbind_h -> strbind_h option) $4))) $1) $7) $0) (PACKsp_h
   $6)))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(strbind_h -> bool) -> bool) (\(strbind_h :strbind_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(state -> bool) -> bool) (\(s4 :state). ((==> ((/\ ((((($15
   $5) $3) $11) $2) (ENVep_h $10))) ((/\ (((((eval_sigexp_h $7) $2)
   (Inter_basis_h $11)) $1) $9)) ((((($13 $6) $1) $11) $0) (PACKsp_h
   $8))))) ((((($13 ((((BINDstrbind_h $4)
   ((SOME :sigexp_h -> sigexp_h option) $7)) $5)
   ((SOME :strbind_h -> strbind_h option) $6))) $3) $11) $0) (PACKsp_h
   $8)))))))))))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==>
   (((((eval_sigexp_h $4) $1) (Inter_basis_h $7)) $0) $5)) ((((($8
   ((((((BINDfunbind_h $6) $2) $4) (NONE :sigexp_h option)) $3)
   (NONE :funbind_h option))) $1) $7) $0) ((funenv_h_map $6)
   (((((FUNCLOS_H $2) $5) $3) (NONE :int_h option))
   $7))))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(int_h -> bool) -> bool) (\(i' :int_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h' :sigexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((((eval_sigexp_h $6) $2) (Inter_basis_h $10)) $1) $8))
   (((((eval_sigexp_h $5) $1) ((add_strintenv_h_to_intbasis_h
   (Inter_basis_h $10)) ((strintenv_h_map $3) $8))) $0) $7))) ((((($11
   ((((((BINDfunbind_h $9) $3) $6)
   ((SOME :sigexp_h -> sigexp_h option) $5)) $4)
   (NONE :funbind_h option))) $2) $10) $0) ((funenv_h_map $9)
   (((((FUNCLOS_H $3) $8) $4) ((SOME :int_h -> int_h option) $7))
   $10))))))))))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(funbind_h -> bool) -> bool)
   (\(funbind_h :funbind_h). ((! :(funid -> bool) -> bool)
   (\(funid :funid). ((! :(funenv_h -> bool) -> bool) (\(f :funenv_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((((eval_sigexp_h $5) $2) (Inter_basis_h $10)) $1) $6)) ((((($11
   $9) $1) $10) $0) $7))) ((((($11 ((((((BINDfunbind_h $8) $3) $5)
   (NONE :sigexp_h option)) $4) ((SOME :funbind_h -> funbind_h option)
   $9))) $2) $10) $0) ((add_funenv_h ((funenv_h_map $8) (((((FUNCLOS_H
   $3) $6) $4) (NONE :int_h option)) $10)))
   $7)))))))))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(funbind_h -> bool) -> bool)
   (\(funbind_h :funbind_h). ((! :(funid -> bool) -> bool)
   (\(funid :funid). ((! :(funenv_h -> bool) -> bool) (\(f :funenv_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(int_h -> bool) -> bool) (\(i' :int_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h' :sigexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(state -> bool) -> bool) (\(s4 :state). ((==> ((/\
   (((((eval_sigexp_h $7) $3) (Inter_basis_h $13)) $2) $9)) ((/\
   (((((eval_sigexp_h $6) $2) ((add_strintenv_h_to_intbasis_h
   (Inter_basis_h $13)) ((strintenv_h_map $4) $9))) $1) $8)) ((((($14
   $12) $1) $13) $0) $10)))) ((((($14 ((((((BINDfunbind_h $11) $4) $7)
   ((SOME :sigexp_h -> sigexp_h option) $6)) $5)
   ((SOME :funbind_h -> funbind_h option) $12))) $3) $13) $0)
   ((add_funenv_h ((funenv_h_map $11) (((((FUNCLOS_H $4) $9) $5)
   ((SOME :int_h -> int_h option) $8)) $13)))
   $10)))))))))))))))))))))))))))))))) ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(funclos_h -> bool) -> bool)
   (\(funclos_h :funclos_h). ((! :(funid -> bool) -> bool)
   (\(funid :funid). ((! :(funid long -> bool) -> bool)
   (\(longfunid :funid long). ((! :(state -> bool) -> bool)
   (\(s :state). ((==> (((= :funclos_h lift -> funclos_h lift -> bool)
   ((lookup_longfunid_basis_h $4) $1))
   ((lift :funclos_h -> funclos_h lift) $3))) ((((($5
   ((REBINDfunbind_h $2) $1)) $0) $4) $0) ((funenv_h_map $2)
   $3)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((eval_sigdec_h_DEF),
  [],
  `((/\ ((/\ ((! :(sigbind_h -> bool) -> bool)
   (\(sigbind_h :sigbind_h). ((! :(state -> bool) -> bool)
   (\(s1 :state). ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv_h -> bool) -> bool) (\(G :sigenv_h). ((==>
   (((((eval_sigbind_h $4) $3) $2) $1) $0)) (((((eval_sigdec_h
   (SIGNATUREsigdec_h $4)) $3) $2) $1) $0))))))))))))) ((/\
   ((! :(state -> bool) -> bool) (\(s :state).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   (((((eval_sigdec_h EMPTYsigdec_h) $1) $0) $1) empty_sigenv_h))))))
   ((! :(sigdec_h -> bool) -> bool) (\(sigdec_h1 :sigdec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(sigenv_h -> bool) -> bool) (\(G1 :sigenv_h).
   ((! :(sigdec_h -> bool) -> bool) (\(sigdec_h2 :sigdec_h).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(sigenv_h -> bool) -> bool) (\(G2 :sigenv_h). ((==>
   ((? :(state -> bool) -> bool) (\(s2 :state). ((/\
   (((((eval_sigdec_h $7) $6) $5) $0) $4)) (((((eval_sigdec_h $3) $0)
   ((add_sigenv_h_to_intbasis_h $5) $4)) $2) $1)))))
   (((((eval_sigdec_h ((SEQsigdec_h $6) $2)) $5) $4) $1)
   ((add_sigenv_h $3) $0))))))))))))))))))))
   ((! :((sigdec_h -> state -> intbasis_h -> state -> sigenv_h ->
         bool) -> bool) -> bool)
   (\(P :sigdec_h -> state -> intbasis_h -> state -> sigenv_h ->
         bool). ((==> ((/\ ((! :(sigbind_h -> bool) -> bool)
   (\(sigbind_h :sigbind_h). ((! :(state -> bool) -> bool)
   (\(s1 :state). ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv_h -> bool) -> bool) (\(G :sigenv_h). ((==>
   (((((eval_sigbind_h $4) $3) $2) $1) $0)) ((((($5 (SIGNATUREsigdec_h
   $4)) $3) $2) $1) $0))))))))))))) ((/\ ((! :(state -> bool) -> bool)
   (\(s :state). ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((((($2 EMPTYsigdec_h) $1) $0) $1)
   empty_sigenv_h)))))) ((! :(sigdec_h -> bool) -> bool)
   (\(sigdec_h1 :sigdec_h). ((! :(state -> bool) -> bool)
   (\(s1 :state). ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((! :(sigenv_h -> bool) -> bool)
   (\(G1 :sigenv_h). ((! :(sigdec_h -> bool) -> bool)
   (\(sigdec_h2 :sigdec_h). ((! :(state -> bool) -> bool)
   (\(s3 :state). ((! :(sigenv_h -> bool) -> bool) (\(G2 :sigenv_h).
   ((==> ((? :(state -> bool) -> bool) (\(s2 :state). ((/\ ((((($8 $7)
   $6) $5) $0) $4)) ((((($8 $3) $0) ((add_sigenv_h_to_intbasis_h $5)
   $4)) $2) $1))))) ((((($7 ((SEQsigdec_h $6) $2)) $5) $4) $1)
   ((add_sigenv_h $3) $0))))))))))))))))))))
   ((! :(sigdec_h -> bool) -> bool) (\(sigdec_h :sigdec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv_h -> bool) -> bool) (\(G :sigenv_h). ((==>
   (((((eval_sigdec_h $4) $3) $2) $1) $0)) ((((($5 $4) $3) $2) $1)
   $0))))))))))))))))`),
 ((eval_sigbind_h_DEF),
  [],
  `((/\ ((/\ ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(int_h -> bool) -> bool) (\(i :int_h). ((==>
   (((((eval_sigexp_h $4) $3) $2) $1) $0))
   ((! :(sigid -> bool) -> bool) (\(sigid :sigid). (((((eval_sigbind_h
   (((BINDsigbind_h $0) $5) (NONE :sigbind_h option))) $4) $3) $2)
   ((sigenv_h_map $0) $1))))))))))))))))
   ((! :(sigbind_h -> bool) -> bool) (\(sigbind_h :sigbind_h).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(sigenv_h -> bool) -> bool) (\(G :sigenv_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(int_h -> bool) -> bool) (\(i :int_h). ((==>
   ((? :(state -> bool) -> bool) (\(s2 :state). ((/\
   (((((eval_sigbind_h $7) $0) $6) $5) $4)) (((((eval_sigexp_h $3) $2)
   $6) $0) $1))))) ((! :(sigid -> bool) -> bool) (\(sigid :sigid).
   (((((eval_sigbind_h (((BINDsigbind_h $0) $3)
   ((SOME :sigbind_h -> sigbind_h option) $7))) $2) $6) $5)
   ((add_sigenv_h ((sigenv_h_map $0) $1)) $4)))))))))))))))))))))
   ((! :((sigbind_h -> state -> intbasis_h -> state -> sigenv_h ->
         bool) -> bool) -> bool)
   (\(P :sigbind_h -> state -> intbasis_h -> state -> sigenv_h ->
         bool). ((==> ((/\ ((! :(sigexp_h -> bool) -> bool)
   (\(sigexp_h :sigexp_h). ((! :(state -> bool) -> bool)
   (\(s1 :state). ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(int_h -> bool) -> bool) (\(i :int_h). ((==>
   (((((eval_sigexp_h $4) $3) $2) $1) $0))
   ((! :(sigid -> bool) -> bool) (\(sigid :sigid). ((((($6
   (((BINDsigbind_h $0) $5) (NONE :sigbind_h option))) $4) $3) $2)
   ((sigenv_h_map $0) $1))))))))))))))))
   ((! :(sigbind_h -> bool) -> bool) (\(sigbind_h :sigbind_h).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(sigenv_h -> bool) -> bool) (\(G :sigenv_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(int_h -> bool) -> bool) (\(i :int_h). ((==>
   ((? :(state -> bool) -> bool) (\(s2 :state). ((/\ ((((($8 $7) $0)
   $6) $5) $4)) (((((eval_sigexp_h $3) $2) $6) $0) $1)))))
   ((! :(sigid -> bool) -> bool) (\(sigid :sigid). ((((($8
   (((BINDsigbind_h $0) $3) ((SOME :sigbind_h -> sigbind_h option)
   $7))) $2) $6) $5) ((add_sigenv_h ((sigenv_h_map $0) $1))
   $4))))))))))))))))))))) ((! :(sigbind_h -> bool) -> bool)
   (\(sigbind_h :sigbind_h). ((! :(state -> bool) -> bool)
   (\(s1 :state). ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv_h -> bool) -> bool) (\(G :sigenv_h). ((==>
   (((((eval_sigbind_h $4) $3) $2) $1) $0)) ((((($5 $4) $3) $2) $1)
   $0))))))))))))))))`),
 ((eval_strdesc_h_DEF),
  [],
  `((! :(strdesc_h -> bool) -> bool) (\(strdesc_h :strdesc_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(strintenv_h -> bool) -> bool) (\(int_h :strintenv_h).
   (((= :bool -> bool -> bool) (((((eval_strdesc_h $4) $3) $2) $1)
   $0))
   ((! :((sigexp_h -> state -> intbasis_h -> state -> int_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_sigexp_h :sigexp_h -> state -> intbasis_h -> state ->
                          int_h -> bool).
   ((! :((spec_h -> state -> intbasis_h -> state -> int_h -> bool) ->
        bool) -> bool)
   (\(poss_eval_spec_h :spec_h -> state -> intbasis_h -> state ->
                        int_h -> bool).
   ((! :((strdesc_h -> state -> intbasis_h -> state -> strintenv_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_strdesc_h :strdesc_h -> state -> intbasis_h ->
                           state -> strintenv_h -> bool). ((==>
   (((HOFML_eval_signatures_pred $2) $1) $0)) ((((($0 $7) $6) $5) $4)
   $3)))))))))))))))))))`),
 ((eval_spec_h_DEF),
  [],
  `((! :(spec_h -> bool) -> bool) (\(spec_h :spec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   (((= :bool -> bool -> bool) (((((eval_spec_h $4) $3) $2) $1) $0))
   ((! :((sigexp_h -> state -> intbasis_h -> state -> int_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_sigexp_h :sigexp_h -> state -> intbasis_h -> state ->
                          int_h -> bool).
   ((! :((spec_h -> state -> intbasis_h -> state -> int_h -> bool) ->
        bool) -> bool)
   (\(poss_eval_spec_h :spec_h -> state -> intbasis_h -> state ->
                        int_h -> bool).
   ((! :((strdesc_h -> state -> intbasis_h -> state -> strintenv_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_strdesc_h :strdesc_h -> state -> intbasis_h ->
                           state -> strintenv_h -> bool). ((==>
   (((HOFML_eval_signatures_pred $2) $1) $0)) ((((($1 $7) $6) $5) $4)
   $3)))))))))))))))))))`),
 ((eval_sigexp_h_DEF),
  [],
  `((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   (((= :bool -> bool -> bool) (((((eval_sigexp_h $4) $3) $2) $1) $0))
   ((! :((sigexp_h -> state -> intbasis_h -> state -> int_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_sigexp_h :sigexp_h -> state -> intbasis_h -> state ->
                          int_h -> bool).
   ((! :((spec_h -> state -> intbasis_h -> state -> int_h -> bool) ->
        bool) -> bool)
   (\(poss_eval_spec_h :spec_h -> state -> intbasis_h -> state ->
                        int_h -> bool).
   ((! :((strdesc_h -> state -> intbasis_h -> state -> strintenv_h ->
         bool) -> bool) -> bool)
   (\(poss_eval_strdesc_h :strdesc_h -> state -> intbasis_h ->
                           state -> strintenv_h -> bool). ((==>
   (((HOFML_eval_signatures_pred $2) $1) $0)) ((((($2 $7) $6) $5) $4)
   $3)))))))))))))))))))`),
 ((HOFML_eval_signatures_pred_DEF),
  [],
  `((! :((sigexp_h -> state -> intbasis_h -> state -> int_h ->
         bool) -> bool) -> bool)
   (\(eval_sigexp_h :sigexp_h -> state -> intbasis_h -> state ->
                     int_h -> bool).
   ((! :((spec_h -> state -> intbasis_h -> state -> int_h -> bool) ->
        bool) -> bool)
   (\(eval_spec_h :spec_h -> state -> intbasis_h -> state -> int_h ->
                   bool).
   ((! :((strdesc_h -> state -> intbasis_h -> state -> strintenv_h ->
         bool) -> bool) -> bool)
   (\(eval_strdesc_h :strdesc_h -> state -> intbasis_h -> state ->
                      strintenv_h -> bool).
   (((= :bool -> bool -> bool) (((HOFML_eval_signatures_pred $2) $1)
   $0)) ((/\ ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(spec_h -> bool) -> bool) (\(spec :spec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($6 $2) $1)
   $3) $0) $4)) ((((($7 (SIGsigexp_h $2)) $1) $3) $0) $4)))))))))))))
   ((/\ ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(state -> bool) -> bool) (\(s :state).
   ((! :(sigid -> bool) -> bool) (\(sigid :sigid). ((==>
   (((= :int_h lift -> int_h lift -> bool) ((lookup_sigid_intbasis_h
   $2) $0)) ((lift :int_h -> int_h lift) $3))) ((((($6 (SIGIDsigexp_h
   $0)) $1) $2) $1) $3))))))))))) ((/\
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(valdesc -> bool) -> bool) (\(valdesc :valdesc).
   ((! :(var set -> bool) -> bool) (\(vars :var set).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((eval_valdesc
   $3) $1) $0) $2)) ((((($6 (VALspec_h $3)) $1) $4) $0) (vars_in_int_h
   $2)))))))))))))) ((/\ ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((! :(excon set -> bool) -> bool)
   (\(excons :excon set). ((! :(exdesc -> bool) -> bool)
   (\(exdesc :exdesc). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((eval_exdesc
   $2) $1) $0) $3)) ((((($6 (EXCEPTIONspec_h $2)) $1) $4) $0)
   (excons_in_int_h $3)))))))))))))) ((/\
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(strintenv_h -> bool) -> bool) (\(SIE :strintenv_h).
   ((! :(strdesc_h -> bool) -> bool) (\(strdesc_h :strdesc_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($5 $2) $1)
   $4) $0) $3)) ((((($6 (STRUCTUREspec_h $2)) $1) $4) $0)
   (strintenv_h_in_int_h $3)))))))))))))) ((/\
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(int_h -> bool) -> bool) (\(I1 :int_h).
   ((! :(int_h -> bool) -> bool) (\(I2 :int_h).
   ((! :(spec_h -> bool) -> bool) (\(spec_h1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(spec_h2 :spec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) $6)) ((((($9 $3) $1) ((add_strintenv_h_to_intbasis_h
   $7) (strintenv_h_of_int_h $6))) $0) $5))) ((((($9 ((LOCALspec_h $4)
   $3)) $2) $7) $0) $5))))))))))))))))))) ((/\
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(int_h nonemptylist -> bool) -> bool)
   (\(nonempty_int_h_list :int_h nonemptylist).
   ((! :(int_h lift nonemptylist -> bool) -> bool)
   (\(nonempty_lift_int_h_list :int_h lift nonemptylist).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(nonempty_longstrid_list :strid long nonemptylist).
   ((! :(state -> bool) -> bool) (\(s :state). ((==> ((/\
   (((= :int_h lift nonemptylist -> int_h lift nonemptylist -> bool)
   (((nonempty_MAP :(strid long -> int_h lift) ->
                    strid long nonemptylist ->
                    int_h lift nonemptylist)
   (lookup_longstrid_intbasis_h $4)) $1)) $2))
   (((= :int_h lift nonemptylist -> int_h lift nonemptylist -> bool)
   (((nonempty_MAP :(int_h -> int_h lift) -> int_h nonemptylist ->
                    int_h lift nonemptylist)
   (lift :int_h -> int_h lift)) $3)) $2))) ((((($6 (OPENspec_h $1))
   $0) $4) $0)
   (((nonempty_FOLDL_WITH_INIT :(int_h -> int_h -> int_h) ->
                                int_h nonemptylist -> int_h)
   add_int_h) $3)))))))))))))) ((/\ ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((! :(int_h nonemptylist -> bool) -> bool)
   (\(nonempty_int_h_list :int_h nonemptylist).
   ((! :(int_h lift nonemptylist -> bool) -> bool)
   (\(nonempty_lift_int_h_list :int_h lift nonemptylist).
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(nonempty_sigid_list :sigid nonemptylist).
   ((! :(state -> bool) -> bool) (\(s :state). ((==> ((/\
   (((= :int_h lift nonemptylist -> int_h lift nonemptylist -> bool)
   (((nonempty_MAP :(sigid -> int_h lift) -> sigid nonemptylist ->
                    int_h lift nonemptylist) (lookup_sigid_intbasis_h
   $4)) $1)) $2))
   (((= :int_h lift nonemptylist -> int_h lift nonemptylist -> bool)
   (((nonempty_MAP :(int_h -> int_h lift) -> int_h nonemptylist ->
                    int_h lift nonemptylist)
   (lift :int_h -> int_h lift)) $3)) $2))) ((((($6 (INCLUDEspec_h $1))
   $0) $4) $0)
   (((nonempty_FOLDL_WITH_INIT :(int_h -> int_h -> int_h) ->
                                int_h nonemptylist -> int_h)
   add_int_h) $3)))))))))))))) ((/\ ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((! :(state -> bool) -> bool) (\(s :state).
   ((((($3 EMPTYspec_h) $0) $1) $0) empty_int_h)))))) ((/\
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(int_h -> bool) -> bool) (\(I1 :int_h).
   ((! :(int_h -> bool) -> bool) (\(I2 :int_h).
   ((! :(spec_h -> bool) -> bool) (\(spec_h1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(spec_h2 :spec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) $6)) ((((($9 $3) $1) ((add_strintenv_h_to_intbasis_h
   $7) (strintenv_h_of_int_h $6))) $0) $5))) ((((($9 ((SEQspec_h $4)
   $3)) $2) $7) $0) ((add_int_h $6) $5)))))))))))))))))))) ((/\
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(int_h -> bool) -> bool) (\(I1 :int_h).
   ((! :(int_h -> bool) -> bool) (\(I2 :int_h).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h' :sigexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($12
   $5) $2) $9) $1) $8)) ((((($12 $4) $1)
   ((add_strintenv_h_to_intbasis_h $9) ((strintenv_h_map $3) $8))) $0)
   $7))) ((((($11 ((((FUNCTORspec_h $6) $3) $5) $4)) $2) $9) $0)
   (funintenv_h_in_int_h ((funintenv_h_map $6)
   $8))))))))))))))))))))))))) ((/\ ((! :(int_h -> bool) -> bool)
   (\(i :int_h). ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((! :(sigexp_h -> bool) -> bool)
   (\(sigexp_h :sigexp_h). ((! :(strid -> bool) -> bool)
   (\(strid :strid). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($8 $3) $1)
   $4) $0) $5)) ((((($6 (((STRIDstrdesc_h $2) $3)
   (NONE :strdesc_h option))) $1) $4) $0) ((strintenv_h_map $2)
   $5)))))))))))))))) ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(strintenv_h -> bool) -> bool) (\(SIE :strintenv_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(strdesc_h -> bool) -> bool) (\(strdesc_h :strdesc_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($11
   $5) $2) $7) $1) $8)) ((((($9 $4) $1) $7) $0) $6))) ((((($9
   (((STRIDstrdesc_h $3) $5) ((SOME :strdesc_h -> strdesc_h option)
   $4))) $2) $7) $0) ((add_strintenv_h ((strintenv_h_map $3) $8))
   $6))))))))))))))))))))))))))))))))))))))))`),
 ((env_in_env_h_DEF),
  [],
  `((/\ ((! :(strenv -> bool) -> bool) (\(x1 :strenv).
   ((! :(varenv -> bool) -> bool) (\(x2 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x3 :exconenv).
   (((= :env_h -> env_h -> bool) (env_in_env_h (((ENV $2) $1) $0)))
   ((((ENV_H empty_funenv_h) (strenv_in_strenv_h $2)) $1) $0)))))))))
   ((/\ ((! :((strid # env) list finmap -> bool) -> bool)
   (\(x1 :(strid # env) list finmap).
   (((= :strenv_h -> strenv_h -> bool) (strenv_in_strenv_h (STRENV
   $0))) (STRENV_H (strenv_finmap_in_strenv_h_finmap $0)))))) ((/\
   ((! :((strid # env) list -> bool) -> bool)
   (\(x1 :(strid # env) list).
   (((= :(strid # env_h) list finmap -> (strid # env_h) list finmap ->
         bool) (strenv_finmap_in_strenv_h_finmap
   ((FINMAP :(strid # env) list -> (strid # env) list finmap) $0)))
   ((FINMAP :(strid # env_h) list -> (strid # env_h) list finmap)
   (strenv_list_in_strenv_h_list $0)))))) ((/\
   (((= :(strid # env_h) list -> (strid # env_h) list -> bool)
   (strenv_list_in_strenv_h_list (NIL :(strid # env) list)))
   (NIL :(strid # env_h) list))) ((/\
   ((! :(strid # env -> bool) -> bool) (\(x1 :strid # env).
   ((! :((strid # env) list -> bool) -> bool)
   (\(x2 :(strid # env) list).
   (((= :(strid # env_h) list -> (strid # env_h) list -> bool)
   (strenv_list_in_strenv_h_list
   (((CONS :strid # env -> (strid # env) list -> (strid # env) list)
   $1) $0)))
   (((CONS :strid # env_h -> (strid # env_h) list ->
            (strid # env_h) list) (strenv_pair_in_strenv_h_pair $1))
   (strenv_list_in_strenv_h_list $0))))))))
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(env -> bool) -> bool) (\(x2 :env).
   (((= :strid # env_h -> strid # env_h -> bool)
   (strenv_pair_in_strenv_h_pair (((, :strid -> env -> strid # env)
   $1) $0))) (((, :strid -> env_h -> strid # env_h) $1) (env_in_env_h
   $0))))))))))))`),
 ((cut_env_h_to_env_DEF),
  [],
  `((/\ ((! :(funenv_h -> bool) -> bool) (\(x1 :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2 :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :env -> env -> bool) (cut_env_h_to_env ((((ENV_H $3) $2) $1)
   $0))) (((ENV (cut_strenv_h_to_strenv $2)) $1) $0))))))))))) ((/\
   ((! :((strid # env_h) list finmap -> bool) -> bool)
   (\(x1 :(strid # env_h) list finmap).
   (((= :strenv -> strenv -> bool) (cut_strenv_h_to_strenv (STRENV_H
   $0))) (STRENV (cut_strenv_h_finmap_to_strenv_finmap $0)))))) ((/\
   ((! :((strid # env_h) list -> bool) -> bool)
   (\(x1 :(strid # env_h) list).
   (((= :(strid # env) list finmap -> (strid # env) list finmap ->
         bool) (cut_strenv_h_finmap_to_strenv_finmap
   ((FINMAP :(strid # env_h) list -> (strid # env_h) list finmap)
   $0))) ((FINMAP :(strid # env) list -> (strid # env) list finmap)
   (cut_strenv_h_list_to_strenv_list $0)))))) ((/\
   (((= :(strid # env) list -> (strid # env) list -> bool)
   (cut_strenv_h_list_to_strenv_list (NIL :(strid # env_h) list)))
   (NIL :(strid # env) list))) ((/\
   ((! :(strid # env_h -> bool) -> bool) (\(x1 :strid # env_h).
   ((! :((strid # env_h) list -> bool) -> bool)
   (\(x2 :(strid # env_h) list).
   (((= :(strid # env) list -> (strid # env) list -> bool)
   (cut_strenv_h_list_to_strenv_list
   (((CONS :strid # env_h -> (strid # env_h) list ->
            (strid # env_h) list) $1) $0)))
   (((CONS :strid # env -> (strid # env) list -> (strid # env) list)
   (cut_strenv_h_pair_to_strenv_pair $1))
   (cut_strenv_h_list_to_strenv_list $0))))))))
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :strid # env -> strid # env -> bool)
   (cut_strenv_h_pair_to_strenv_pair
   (((, :strid -> env_h -> strid # env_h) $1) $0)))
   (((, :strid -> env -> strid # env) $1) (cut_env_h_to_env
   $0))))))))))))`),
 ((cut_env_h_DEF),
  [],
  `((/\ ((! :(funenv_h -> bool) -> bool) (\(x1 :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2 :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :(int_h -> env_h) -> (int_h -> env_h) -> bool) (cut_env_h
   ((((ENV_H $3) $2) $1) $0))) (\(int_h :int_h). ((((ENV_H
   ((cut_funenv_h $4) (funintenv_h_of_int_h $0))) ((cut_strenv_h $3)
   (strintenv_h_of_int_h $0))) ((cut_varenv $2) (vars_of_int_h $0)))
   ((cut_exconenv $1) (excons_of_int_h $0)))))))))))))) ((/\
   ((! :((strid # env_h) list finmap -> bool) -> bool)
   (\(x1 :(strid # env_h) list finmap).
   (((= :(strintenv_h -> strenv_h) -> (strintenv_h -> strenv_h) ->
         bool) (cut_strenv_h (STRENV_H $0)))
   (\(strintenv_h :strintenv_h). (STRENV_H ((cut_strenv_h_finmap $1)
   $0))))))) ((/\ ((! :((strid # env_h) list -> bool) -> bool)
   (\(x1 :(strid # env_h) list).
   (((= :(strintenv_h -> (strid # env_h) list finmap) ->
         (strintenv_h -> (strid # env_h) list finmap) -> bool)
   (cut_strenv_h_finmap
   ((FINMAP :(strid # env_h) list -> (strid # env_h) list finmap)
   $0))) (\(strintenv_h :strintenv_h).
   ((FINMAP :(strid # env_h) list -> (strid # env_h) list finmap)
   ((cut_strenv_h_list $1) $0))))))) ((/\
   (((= :(strintenv_h -> (strid # env_h) list) ->
         (strintenv_h -> (strid # env_h) list) -> bool)
   (cut_strenv_h_list (NIL :(strid # env_h) list)))
   (\(strintenv_h :strintenv_h). (NIL :(strid # env_h) list)))) ((/\
   ((! :(strid # env_h -> bool) -> bool) (\(x1 :strid # env_h).
   ((! :((strid # env_h) list -> bool) -> bool)
   (\(x2 :(strid # env_h) list).
   (((= :(strintenv_h -> (strid # env_h) list) ->
         (strintenv_h -> (strid # env_h) list) -> bool)
   (cut_strenv_h_list
   (((CONS :strid # env_h -> (strid # env_h) list ->
            (strid # env_h) list) $1) $0)))
   (\(strintenv_h :strintenv_h).
   ((((COND :bool -> (strid # env_h) list -> (strid # env_h) list ->
             (strid # env_h) list)
   (((= :(strid # env_h) lift -> (strid # env_h) lift -> bool)
   ((cut_strenv_h_pair $2) $0)) (undefined :(strid # env_h) lift)))
   ((cut_strenv_h_list $1) $0))
   (((CONS :strid # env_h -> (strid # env_h) list ->
            (strid # env_h) list)
   ((lower :(strid # env_h) lift -> strid # env_h) ((cut_strenv_h_pair
   $2) $0))) ((cut_strenv_h_list $1) $0)))))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :(strintenv_h -> (strid # env_h) lift) ->
         (strintenv_h -> (strid # env_h) lift) -> bool)
   (cut_strenv_h_pair (((, :strid -> env_h -> strid # env_h) $1) $0)))
   (\(strintenv_h :strintenv_h).
   ((((COND :bool -> (strid # env_h) lift -> (strid # env_h) lift ->
             (strid # env_h) lift)
   (((= :int_h lift -> int_h lift -> bool) ((lookup_strid_strintenv_h
   $0) $2)) (undefined :int_h lift)))
   (undefined :(strid # env_h) lift))
   ((lift :strid # env_h -> (strid # env_h) lift)
   (((, :strid -> env_h -> strid # env_h) $2) ((cut_env_h $1)
   ((lower :int_h lift -> int_h) ((lookup_strid_strintenv_h $0)
   $2))))))))))))) ((/\
   ((! :((funid # funclos_h) list finmap -> bool) -> bool)
   (\(x1 :(funid # funclos_h) list finmap).
   (((= :(funintenv_h -> funenv_h) -> (funintenv_h -> funenv_h) ->
         bool) (cut_funenv_h (FUNENV_H $0)))
   (\(funintenv_h :funintenv_h). (FUNENV_H ((cut_funenv_h_finmap $1)
   $0))))))) ((/\ ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(x1 :(funid # funclos_h) list).
   (((= :(funintenv_h -> (funid # funclos_h) list finmap) ->
         (funintenv_h -> (funid # funclos_h) list finmap) -> bool)
   (cut_funenv_h_finmap
   ((FINMAP :(funid # funclos_h) list ->
             (funid # funclos_h) list finmap) $0)))
   (\(funintenv_h :funintenv_h).
   ((FINMAP :(funid # funclos_h) list ->
             (funid # funclos_h) list finmap) ((cut_funenv_h_list $1)
   $0))))))) ((/\
   (((= :(funintenv_h -> (funid # funclos_h) list) ->
         (funintenv_h -> (funid # funclos_h) list) -> bool)
   (cut_funenv_h_list (NIL :(funid # funclos_h) list)))
   (\(funintenv_h :funintenv_h). (NIL :(funid # funclos_h) list))))
   ((/\ ((! :(funid # funclos_h -> bool) -> bool)
   (\(x1 :funid # funclos_h).
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(x2 :(funid # funclos_h) list).
   (((= :(funintenv_h -> (funid # funclos_h) list) ->
         (funintenv_h -> (funid # funclos_h) list) -> bool)
   (cut_funenv_h_list
   (((CONS :funid # funclos_h -> (funid # funclos_h) list ->
            (funid # funclos_h) list) $1) $0)))
   (\(funintenv_h :funintenv_h).
   ((((COND :bool -> (funid # funclos_h) list ->
             (funid # funclos_h) list -> (funid # funclos_h) list)
   (((= :(funid # funclos_h) lift -> (funid # funclos_h) lift -> bool)
   ((cut_funenv_h_pair $2) $0))
   (undefined :(funid # funclos_h) lift))) ((cut_funenv_h_list $1)
   $0))
   (((CONS :funid # funclos_h -> (funid # funclos_h) list ->
            (funid # funclos_h) list)
   ((lower :(funid # funclos_h) lift -> funid # funclos_h)
   ((cut_funenv_h_pair $2) $0))) ((cut_funenv_h_list $1) $0))))))))))
   ((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funclos_h -> bool) -> bool) (\(x2 :funclos_h).
   (((= :(funintenv_h -> (funid # funclos_h) lift) ->
         (funintenv_h -> (funid # funclos_h) lift) -> bool)
   (cut_funenv_h_pair (((, :funid -> funclos_h -> funid # funclos_h)
   $1) $0))) (\(funintenv_h :funintenv_h).
   ((((COND :bool -> (funid # funclos_h) lift ->
             (funid # funclos_h) lift -> (funid # funclos_h) lift)
   (((= :int_h lift -> int_h lift -> bool) ((lookup_funid_funintenv_h
   $0) $2)) (undefined :int_h lift)))
   (undefined :(funid # funclos_h) lift))
   ((lift :funid # funclos_h -> (funid # funclos_h) lift)
   (((, :funid -> funclos_h -> funid # funclos_h) $2) ((cut_funclos_h
   $1) ((lower :int_h lift -> int_h) ((lookup_funid_funintenv_h $0)
   $2))))))))))))) ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(int_h option -> bool) -> bool) (\(x4 :int_h option).
   ((! :(basis_h -> bool) -> bool) (\(x5 :basis_h).
   (((= :(int_h -> funclos_h) -> (int_h -> funclos_h) -> bool)
   (cut_funclos_h (((((FUNCLOS_H $4) $3) $2) $1) $0))) (\(i :int_h).
   (((((FUNCLOS_H $5) $4) $3) ((SOME :int_h -> int_h option) $0))
   $1))))))))))))))))))))))))`),
 ((Inter_h_DEF),
  [],
  `((/\ ((! :((strid # env_h) list finmap -> bool) -> bool)
   (\(x1 :(strid # env_h) list finmap).
   (((= :strintenv_h -> strintenv_h -> bool)
   (strintenv_h_from_strenv_h (STRENV_H $0))) (STRINTENV_H
   (strint_h_finmap_from_strenv_h_finmap $0)))))) ((/\
   ((! :((strid # env_h) list -> bool) -> bool)
   (\(x1 :(strid # env_h) list).
   (((= :(strid # int_h) list finmap -> (strid # int_h) list finmap ->
         bool) (strint_h_finmap_from_strenv_h_finmap
   ((FINMAP :(strid # env_h) list -> (strid # env_h) list finmap)
   $0)))
   ((FINMAP :(strid # int_h) list -> (strid # int_h) list finmap)
   (strint_h_list_from_strenv_h_list $0)))))) ((/\
   (((= :(strid # int_h) list -> (strid # int_h) list -> bool)
   (strint_h_list_from_strenv_h_list (NIL :(strid # env_h) list)))
   (NIL :(strid # int_h) list))) ((/\
   ((! :(strid # env_h -> bool) -> bool) (\(x1 :strid # env_h).
   ((! :((strid # env_h) list -> bool) -> bool)
   (\(x2 :(strid # env_h) list).
   (((= :(strid # int_h) list -> (strid # int_h) list -> bool)
   (strint_h_list_from_strenv_h_list
   (((CONS :strid # env_h -> (strid # env_h) list ->
            (strid # env_h) list) $1) $0)))
   (((CONS :strid # int_h -> (strid # int_h) list ->
            (strid # int_h) list) (strid_int_h_from_strenv_h_pair $1))
   (strint_h_list_from_strenv_h_list $0)))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :strid # int_h -> strid # int_h -> bool)
   (strid_int_h_from_strenv_h_pair
   (((, :strid -> env_h -> strid # env_h) $1) $0)))
   (((, :strid -> int_h -> strid # int_h) $1) (Inter_h $0)))))))) ((/\
   ((! :((funid # funclos_h) list finmap -> bool) -> bool)
   (\(x1 :(funid # funclos_h) list finmap).
   (((= :funintenv_h -> funintenv_h -> bool)
   (funintenv_h_from_funenv_h (FUNENV_H $0))) (FUNINTENV_H
   (funint_h_finmap_from_funenv_finmap $0)))))) ((/\
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(x1 :(funid # funclos_h) list).
   (((= :(funid # int_h) list finmap -> (funid # int_h) list finmap ->
         bool) (funint_h_finmap_from_funenv_finmap
   ((FINMAP :(funid # funclos_h) list ->
             (funid # funclos_h) list finmap) $0)))
   ((FINMAP :(funid # int_h) list -> (funid # int_h) list finmap)
   (funint_h_list_from_funenv_list $0)))))) ((/\
   (((= :(funid # int_h) list -> (funid # int_h) list -> bool)
   (funint_h_list_from_funenv_list (NIL :(funid # funclos_h) list)))
   (NIL :(funid # int_h) list))) ((/\
   ((! :(funid # funclos_h -> bool) -> bool)
   (\(x1 :funid # funclos_h).
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(x2 :(funid # funclos_h) list).
   (((= :(funid # int_h) list -> (funid # int_h) list -> bool)
   (funint_h_list_from_funenv_list
   (((CONS :funid # funclos_h -> (funid # funclos_h) list ->
            (funid # funclos_h) list) $1) $0)))
   (((CONS :funid # int_h -> (funid # int_h) list ->
            (funid # int_h) list)
   (funid_int_h_from_funid_funclos_h_pair $1))
   (funint_h_list_from_funenv_list $0)))))))) ((/\
   ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funclos_h -> bool) -> bool) (\(x2 :funclos_h).
   (((= :funid # int_h -> funid # int_h -> bool)
   (funid_int_h_from_funid_funclos_h_pair
   (((, :funid -> funclos_h -> funid # funclos_h) $1) $0)))
   (((, :funid -> int_h -> funid # int_h) $1) (Inter_funclos_h
   $0)))))))) ((/\ ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(int_h option -> bool) -> bool) (\(x4 :int_h option).
   ((! :(basis_h -> bool) -> bool) (\(x5 :basis_h).
   (((= :int_h -> int_h -> bool) (Inter_funclos_h (((((FUNCLOS_H $4)
   $3) $2) $1) $0))) ((((COND :bool -> int_h -> int_h -> int_h)
   (((= :int_h option -> int_h option -> bool) $1)
   (NONE :int_h option))) ((Inter_strexp_h $2) (Inter_basis_h $0)))
   ((SOME_arg :int_h option -> int_h) $1)))))))))))))) ((/\
   ((! :(funenv_h -> bool) -> bool) (\(x1 :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2 :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :int_h -> int_h -> bool) (Inter_h ((((ENV_H $3) $2) $1) $0)))
   ((((INT_H (funintenv_h_from_funenv_h $3))
   (strintenv_h_from_strenv_h $2)) (vars_from_varenv $1))
   (excons_from_exconenv $0))))))))))))
   ((! :(sigenv_h -> bool) -> bool) (\(x1 :sigenv_h).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :intbasis_h -> intbasis_h -> bool) (Inter_basis_h ((BASIS_H
   $1) $0))) (((INTBASIS_H $1) (strintenv_h_of_int_h (Inter_h $0)))
   (funintenv_h_of_int_h (Inter_h $0))))))))))))))))))))`),
 ((Inter_strexp_h_DEF),
  [],
  `((/\ ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_strexp_h (STRUCTstrexp_h $0))) (\(IB :intbasis_h).
   ((Inter_moddec_h $1) $0)))))) ((/\
   ((! :(strid long -> bool) -> bool) (\(x1 :strid long).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_strexp_h (LONGSTRIDstrexp_h $0))) (\(IB :intbasis_h).
   ((lower :int_h lift -> int_h) ((lookup_longstrid_intbasis_h $0)
   $1))))))) ((/\ ((! :(funid long -> bool) -> bool)
   (\(x1 :funid long). ((! :(strexp_h -> bool) -> bool)
   (\(x2 :strexp_h).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_strexp_h ((APPstrexp_h $1) $0))) (\(IB :intbasis_h).
   ((lower :int_h lift -> int_h) ((lookup_longfunid_intbasis_h $0)
   $2))))))))) ((/\ ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(x2 :strexp_h).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_strexp_h ((LETstrexp_h $1) $0))) (\(IB :intbasis_h).
   ((Inter_strexp_h $1) ((add_funintenv_h_to_intbasis_h
   ((add_strintenv_h_to_intbasis_h $0) (strintenv_h_of_int_h
   ((Inter_moddec_h $2) $0)))) (funintenv_h_of_int_h ((Inter_moddec_h
   $2) $0))))))))))) ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_moddec_h (DECmoddec_h $0))) (\(IB :intbasis_h). ((Inter_dec
   $1) $0)))))) ((/\ ((! :(strbind_h -> bool) -> bool)
   (\(x1 :strbind_h).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_moddec_h (STRUCTUREmoddec_h $0))) (\(IB :intbasis_h).
   (strintenv_h_in_int_h ((Inter_strbind_h $1) $0))))))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_moddec_h ((LOCALmoddec_h $1) $0))) (\(IB :intbasis_h).
   ((Inter_moddec_h $1) ((add_funintenv_h_to_intbasis_h
   ((add_strintenv_h_to_intbasis_h $0) (strintenv_h_of_int_h
   ((Inter_moddec_h $2) $0)))) (funintenv_h_of_int_h ((Inter_moddec_h
   $2) $0))))))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_moddec_h (OPENmoddec_h $0))) (\(IB :intbasis_h).
   (((nonempty_FOLDL_WITH_INIT :(int_h -> int_h -> int_h) ->
                                int_h nonemptylist -> int_h)
   add_int_h)
   (((nonempty_MAP :(int_h lift -> int_h) ->
                    int_h lift nonemptylist -> int_h nonemptylist)
   (lower :int_h lift -> int_h))
   (((nonempty_MAP :(strid long -> int_h lift) ->
                    strid long nonemptylist ->
                    int_h lift nonemptylist)
   (lookup_longstrid_intbasis_h $0)) $1)))))))) ((/\
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_moddec_h EMPTYmoddec_h)) (\(IB :intbasis_h). empty_int_h)))
   ((/\ ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_moddec_h ((SEQmoddec_h $1) $0))) (\(IB :intbasis_h).
   ((add_int_h ((Inter_moddec_h $2) $0)) ((Inter_moddec_h $1)
   ((add_funintenv_h_to_intbasis_h ((add_strintenv_h_to_intbasis_h $0)
   (strintenv_h_of_int_h ((Inter_moddec_h $2) $0))))
   (funintenv_h_of_int_h ((Inter_moddec_h $2) $0)))))))))))) ((/\
   ((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_moddec_h (FUNCTORmoddec_h $0))) (\(IB :intbasis_h).
   (funintenv_h_in_int_h ((Inter_funbind_h $1) $0))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_h option -> bool) -> bool) (\(x2 :sigexp_h option).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(strbind_h option -> bool) -> bool) (\(x4 :strbind_h option).
   (((= :(intbasis_h -> strintenv_h) -> (intbasis_h -> strintenv_h) ->
         bool) (Inter_strbind_h ((((BINDstrbind_h $3) $2) $1) $0)))
   (\(IB :intbasis_h). ((add_strintenv_h ((strintenv_h_map $4)
   ((Inter_sigexp_h_option $3) $0))) ((Inter_strbind_h_option $1)
   $0))))))))))))) ((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h option -> bool) -> bool) (\(x4 :sigexp_h option).
   ((! :(strexp_h -> bool) -> bool) (\(x5 :strexp_h).
   ((! :(funbind_h option -> bool) -> bool) (\(x6 :funbind_h option).
   (((= :(intbasis_h -> funintenv_h) -> (intbasis_h -> funintenv_h) ->
         bool) (Inter_funbind_h ((((((BINDfunbind_h $5) $4) $3) $2)
   $1) $0))) (\(IB :intbasis_h). ((add_funintenv_h
   ((Inter_funbind_h_option $1) $0)) ((funintenv_h_map $6)
   ((Inter_sigexp_h_option $3) ((add_strintenv_h_to_intbasis_h $0)
   ((strintenv_h_map $5) ((Inter_sigexp_h $4) $0)))))))))))))))))))))
   ((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funid long -> bool) -> bool) (\(x2 :funid long).
   (((= :(intbasis_h -> funintenv_h) -> (intbasis_h -> funintenv_h) ->
         bool) (Inter_funbind_h ((REBINDfunbind_h $1) $0)))
   (\(IB :intbasis_h). ((funintenv_h_map $2)
   ((lower :int_h lift -> int_h) ((lookup_longfunid_intbasis_h $0)
   $1)))))))))) ((/\
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_sigexp_h_option (NONE :sigexp_h option)))
   (\(IB :intbasis_h). empty_int_h))) ((/\
   ((! :(sigexp_h -> bool) -> bool) (\(x1 :sigexp_h).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_sigexp_h_option ((SOME :sigexp_h -> sigexp_h option) $0)))
   (Inter_sigexp_h $0))))) ((/\
   (((= :(intbasis_h -> strintenv_h) -> (intbasis_h -> strintenv_h) ->
         bool) (Inter_strbind_h_option (NONE :strbind_h option)))
   (\(IB :intbasis_h). empty_strintenv_h))) ((/\
   ((! :(strbind_h -> bool) -> bool) (\(x1 :strbind_h).
   (((= :(intbasis_h -> strintenv_h) -> (intbasis_h -> strintenv_h) ->
         bool) (Inter_strbind_h_option
   ((SOME :strbind_h -> strbind_h option) $0))) (Inter_strbind_h
   $0))))) ((/\
   (((= :(intbasis_h -> funintenv_h) -> (intbasis_h -> funintenv_h) ->
         bool) (Inter_funbind_h_option (NONE :funbind_h option)))
   (\(IB :intbasis_h). empty_funintenv_h)))
   ((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h).
   (((= :(intbasis_h -> funintenv_h) -> (intbasis_h -> funintenv_h) ->
         bool) (Inter_funbind_h_option
   ((SOME :funbind_h -> funbind_h option) $0))) (Inter_funbind_h
   $0)))))))))))))))))))))))`),
 ((Inter_sigexp_h_DEF),
  [],
  `((/\ ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_sigexp_h (SIGsigexp_h $0))) (\(IB :intbasis_h).
   ((Inter_spec_h $1) $0)))))) ((/\ ((! :(sigid -> bool) -> bool)
   (\(x1 :sigid).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_sigexp_h (SIGIDsigexp_h $0))) (\(IB :intbasis_h).
   ((lower :int_h lift -> int_h) ((lookup_sigid_intbasis_h $0)
   $1))))))) ((/\ ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_spec_h (VALspec_h $0))) (\(IB :intbasis_h). (vars_in_int_h
   (Inter_valdesc $1))))))) ((/\ ((! :(exdesc -> bool) -> bool)
   (\(x1 :exdesc).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_spec_h (EXCEPTIONspec_h $0))) (\(IB :intbasis_h).
   (excons_in_int_h (Inter_exdesc $1))))))) ((/\
   ((! :(strdesc_h -> bool) -> bool) (\(x1 :strdesc_h).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_spec_h (STRUCTUREspec_h $0))) (\(IB :intbasis_h).
   (strintenv_h_in_int_h ((Inter_strdesc_h $1) $0))))))) ((/\
   ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_spec_h ((LOCALspec_h $1) $0))) (\(IB :intbasis_h).
   ((Inter_spec_h $1) ((add_funintenv_h_to_intbasis_h
   ((add_strintenv_h_to_intbasis_h $0) (strintenv_h_of_int_h
   ((Inter_spec_h $2) $0)))) (funintenv_h_of_int_h ((Inter_spec_h $2)
   $0))))))))))) ((/\ ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_spec_h (OPENspec_h $0))) (\(IB :intbasis_h).
   (((nonempty_FOLDL_WITH_INIT :(int_h -> int_h -> int_h) ->
                                int_h nonemptylist -> int_h)
   add_int_h)
   (((nonempty_MAP :(int_h lift -> int_h) ->
                    int_h lift nonemptylist -> int_h nonemptylist)
   (lower :int_h lift -> int_h))
   (((nonempty_MAP :(strid long -> int_h lift) ->
                    strid long nonemptylist ->
                    int_h lift nonemptylist)
   (lookup_longstrid_intbasis_h $0)) $1)))))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_spec_h (INCLUDEspec_h $0))) (\(IB :intbasis_h).
   (((nonempty_FOLDL_WITH_INIT :(int_h -> int_h -> int_h) ->
                                int_h nonemptylist -> int_h)
   add_int_h)
   (((nonempty_MAP :(int_h lift -> int_h) ->
                    int_h lift nonemptylist -> int_h nonemptylist)
   (lower :int_h lift -> int_h))
   (((nonempty_MAP :(sigid -> int_h lift) -> sigid nonemptylist ->
                    int_h lift nonemptylist) (lookup_sigid_intbasis_h
   $0)) $1)))))))) ((/\
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_spec_h EMPTYspec_h)) (\(IB :intbasis_h). empty_int_h))) ((/\
   ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_spec_h ((SEQspec_h $1) $0))) (\(IB :intbasis_h). ((add_int_h
   ((Inter_spec_h $2) $0)) ((Inter_spec_h $1)
   ((add_funintenv_h_to_intbasis_h ((add_strintenv_h_to_intbasis_h $0)
   (strintenv_h_of_int_h ((Inter_spec_h $2) $0))))
   (funintenv_h_of_int_h ((Inter_spec_h $2) $0)))))))))))) ((/\
   ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4 :sigexp_h).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_spec_h ((((FUNCTORspec_h $3) $2) $1) $0)))
   (\(IB :intbasis_h). (funintenv_h_in_int_h ((funintenv_h_map $4)
   ((Inter_sigexp_h $1) ((add_strintenv_h_to_intbasis_h $0)
   ((strintenv_h_map $3) ((Inter_sigexp_h $2) $0))))))))))))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x2 :sigexp_h).
   ((! :(strdesc_h option -> bool) -> bool) (\(x3 :strdesc_h option).
   (((= :(intbasis_h -> strintenv_h) -> (intbasis_h -> strintenv_h) ->
         bool) (Inter_strdesc_h (((STRIDstrdesc_h $2) $1) $0)))
   (\(IB :intbasis_h). ((add_strintenv_h ((strintenv_h_map $3)
   ((Inter_sigexp_h $2) $0))) ((Inter_strdesc_h_option $1)
   $0))))))))))) ((/\
   (((= :(intbasis_h -> strintenv_h) -> (intbasis_h -> strintenv_h) ->
         bool) (Inter_strdesc_h_option (NONE :strdesc_h option)))
   (\(IB :intbasis_h). empty_strintenv_h)))
   ((! :(strdesc_h -> bool) -> bool) (\(x1 :strdesc_h).
   (((= :(intbasis_h -> strintenv_h) -> (intbasis_h -> strintenv_h) ->
         bool) (Inter_strdesc_h_option
   ((SOME :strdesc_h -> strdesc_h option) $0))) (Inter_strdesc_h
   $0)))))))))))))))))`),
 ((Inter_exdesc_DEF),
  [],
  `((/\ ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(exdesc option -> bool) -> bool) (\(x2 :exdesc option).
   (((= :excon set -> excon set -> bool) (Inter_exdesc ((EXCONexdesc
   $1) $0))) (((UNION :excon set -> excon set -> excon set)
   (((INSERT :excon -> excon set -> excon set) $1)
   (EMPTY :excon set))) (Inter_exdesc_option $0)))))))) ((/\
   (((= :excon set -> excon set -> bool) (Inter_exdesc_option
   (NONE :exdesc option))) (EMPTY :excon set)))
   ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :excon set -> excon set -> bool) (Inter_exdesc_option
   ((SOME :exdesc -> exdesc option) $0))) (Inter_exdesc $0))))))`),
 ((Inter_valdesc_DEF),
  [],
  `((/\ ((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(valdesc option -> bool) -> bool) (\(x2 :valdesc option).
   (((= :var set -> var set -> bool) (Inter_valdesc ((VARvaldesc $1)
   $0))) (((UNION :var set -> var set -> var set)
   (((INSERT :var -> var set -> var set) $1) (EMPTY :var set)))
   (Inter_valdesc_option $0)))))))) ((/\
   (((= :var set -> var set -> bool) (Inter_valdesc_option
   (NONE :valdesc option))) (EMPTY :var set)))
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :var set -> var set -> bool) (Inter_valdesc_option
   ((SOME :valdesc -> valdesc option) $0))) (Inter_valdesc $0))))))`),
 ((Inter_dec_DEF),
  [],
  `((/\ ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_dec (VALdec $0))) (\(IB :intbasis_h). (vars_in_int_h
   (Inter_valbind $1))))))) ((/\ ((! :(exbind -> bool) -> bool)
   (\(x1 :exbind).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_dec (EXCEPTdec $0))) (\(IB :intbasis_h). (excons_in_int_h
   (Inter_exbind $1))))))) ((/\ ((! :(dec -> bool) -> bool)
   (\(x1 :dec). ((! :(dec -> bool) -> bool) (\(x2 :dec).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_dec ((LOCALdec $1) $0))) (\(IB :intbasis_h). ((Inter_dec $1)
   $0)))))))) ((/\ ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_dec (OPENdec $0))) (\(IB :intbasis_h).
   (((nonempty_FOLDL_WITH_INIT :(int_h -> int_h -> int_h) ->
                                int_h nonemptylist -> int_h)
   add_int_h)
   (((nonempty_MAP :(int_h lift -> int_h) ->
                    int_h lift nonemptylist -> int_h nonemptylist)
   (lower :int_h lift -> int_h))
   (((nonempty_MAP :(strid long -> int_h lift) ->
                    strid long nonemptylist ->
                    int_h lift nonemptylist)
   (lookup_longstrid_intbasis_h $0)) $1)))))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec).
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_dec ((SEQdec $1) $0))) (\(IB :intbasis_h). ((add_int_h
   ((Inter_dec $2) $0)) ((Inter_dec $1) $0))))))))) ((/\
   (((= :(intbasis_h -> int_h) -> (intbasis_h -> int_h) -> bool)
   (Inter_dec EMPTYdec)) (\(IB :intbasis_h). empty_int_h))) ((/\
   ((! :(pat -> bool) -> bool) (\(x1 :pat).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(valbind option -> bool) -> bool) (\(x3 :valbind option).
   (((= :var set -> var set -> bool) (Inter_valbind (((PLAINvalbind
   $2) $1) $0))) (((UNION :var set -> var set -> var set) (Inter_pat
   $2)) (Inter_valbind_option $0)))))))))) ((/\
   ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :var set -> var set -> bool) (Inter_valbind (RECvalbind $0)))
   (Inter_valbind $0))))) ((/\ (((= :var set -> var set -> bool)
   (Inter_valbind_option (NONE :valbind option))) (EMPTY :var set)))
   ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :var set -> var set -> bool) (Inter_valbind_option
   ((SOME :valbind -> valbind option) $0))) (Inter_valbind
   $0)))))))))))))`),
 ((Inter_pat_DEF),
  [],
  `((/\ ((! :(atpat -> bool) -> bool) (\(x1 :atpat).
   (((= :var set -> var set -> bool) (Inter_pat (ATPATpat $0)))
   (Inter_atpat $0))))) ((/\ ((! :(con long -> bool) -> bool)
   (\(x1 :con long). ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :var set -> var set -> bool) (Inter_pat ((CONpat $1) $0)))
   (Inter_atpat $0))))))) ((/\ ((! :(excon long -> bool) -> bool)
   (\(x1 :excon long). ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :var set -> var set -> bool) (Inter_pat ((EXCONpat $1) $0)))
   (Inter_atpat $0))))))) ((/\ ((! :(var -> bool) -> bool)
   (\(x1 :var). ((! :(pat -> bool) -> bool) (\(x2 :pat).
   (((= :var set -> var set -> bool) (Inter_pat ((LAYEREDpat $1) $0)))
   (((UNION :var set -> var set -> var set)
   (((INSERT :var -> var set -> var set) $1) (EMPTY :var set)))
   (Inter_pat $0)))))))) ((/\ (((= :var set -> var set -> bool)
   (Inter_atpat WILDCARDatpat)) (EMPTY :var set))) ((/\
   ((! :(scon -> bool) -> bool) (\(x1 :scon).
   (((= :var set -> var set -> bool) (Inter_atpat (SCONatpat $0)))
   (EMPTY :var set))))) ((/\ ((! :(var -> bool) -> bool) (\(x1 :var).
   (((= :var set -> var set -> bool) (Inter_atpat (VARatpat $0)))
   (((INSERT :var -> var set -> var set) $0) (EMPTY :var set))))))
   ((/\ ((! :(con long -> bool) -> bool) (\(x1 :con long).
   (((= :var set -> var set -> bool) (Inter_atpat (CONatpat $0)))
   (EMPTY :var set))))) ((/\ ((! :(excon long -> bool) -> bool)
   (\(x1 :excon long). (((= :var set -> var set -> bool) (Inter_atpat
   (EXCONatpat $0))) (EMPTY :var set))))) ((/\
   ((! :(patrow option -> bool) -> bool) (\(x1 :patrow option).
   (((= :var set -> var set -> bool) (Inter_atpat (RECORDatpat $0)))
   (Inter_patrow_option $0))))) ((/\ ((! :(pat -> bool) -> bool)
   (\(x1 :pat). (((= :var set -> var set -> bool) (Inter_atpat
   (PARatpat $0))) (Inter_pat $0))))) ((/\
   (((= :var set -> var set -> bool) (Inter_patrow DOTDOTDOT))
   (EMPTY :var set))) ((/\ ((! :(label -> bool) -> bool)
   (\(x1 :label). ((! :(pat -> bool) -> bool) (\(x2 :pat).
   ((! :(patrow option -> bool) -> bool) (\(x3 :patrow option).
   (((= :var set -> var set -> bool) (Inter_patrow (((PATROW $2) $1)
   $0))) (((UNION :var set -> var set -> var set) (Inter_pat $1))
   (Inter_patrow_option $0)))))))))) ((/\
   (((= :var set -> var set -> bool) (Inter_patrow_option
   (NONE :patrow option))) (EMPTY :var set)))
   ((! :(patrow -> bool) -> bool) (\(x1 :patrow).
   (((= :var set -> var set -> bool) (Inter_patrow_option
   ((SOME :patrow -> patrow option) $0))) (Inter_patrow
   $0))))))))))))))))))`),
 ((Inter_exbind_DEF),
  [],
  `((/\ ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(exbind option -> bool) -> bool) (\(x2 :exbind option).
   (((= :excon set -> excon set -> bool) (Inter_exbind ((EXBIND1 $1)
   $0))) (((UNION :excon set -> excon set -> excon set)
   (((INSERT :excon -> excon set -> excon set) $1)
   (EMPTY :excon set))) (Inter_exbind_option $0)))))))) ((/\
   ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(excon long -> bool) -> bool) (\(x2 :excon long).
   ((! :(exbind option -> bool) -> bool) (\(x3 :exbind option).
   (((= :excon set -> excon set -> bool) (Inter_exbind (((EXBIND2 $2)
   $1) $0))) (((UNION :excon set -> excon set -> excon set)
   (((INSERT :excon -> excon set -> excon set) $2)
   (EMPTY :excon set))) (Inter_exbind_option $0)))))))))) ((/\
   (((= :excon set -> excon set -> bool) (Inter_exbind_option
   (NONE :exbind option))) (EMPTY :excon set)))
   ((! :(exbind -> bool) -> bool) (\(x1 :exbind).
   (((= :excon set -> excon set -> bool) (Inter_exbind_option
   ((SOME :exbind -> exbind option) $0))) (Inter_exbind $0)))))))`),
 ((lookup_sigid_intbasis_h_DEF),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(si :sigenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(st :strintenv_h).
   ((! :(funintenv_h -> bool) -> bool) (\(f :funintenv_h).
   ((! :(sigid -> bool) -> bool) (\(sigid :sigid).
   (((= :int_h lift -> int_h lift -> bool) ((lookup_sigid_intbasis_h
   (((INTBASIS_H $3) $2) $1)) $0)) ((lookup_sigid_sigenv_h $3)
   $0))))))))))`),
 ((lookup_sigid_sigenv_h_DEF),
  [],
  `((! :((sigid -> int_h lift) -> bool) -> bool)
   (\(l :sigid -> int_h lift). ((! :(sigid -> bool) -> bool)
   (\(sigid :sigid). (((= :int_h lift -> int_h lift -> bool)
   ((lookup_sigid_sigenv_h (SIGENV_H $1)) $0)) ($1 $0))))))`),
 ((lookup_longfunid_basis_h_DEF),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(x1 :sigenv_h).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :(funid long -> funclos_h lift) ->
         (funid long -> funclos_h lift) -> bool)
   (lookup_longfunid_basis_h ((BASIS_H $1) $0)))
   (\(funid :funid long). ((lookup_longfunid_env_h $1) $0)))))))`),
 ((lookup_longfunid_env_h_DEF),
  [],
  `((/\ ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   (((= :funclos_h lift -> funclos_h lift -> bool)
   ((lookup_longfunid_env_h $1) ((BASE :funid -> funid long) $0)))
   ((lookup_funid_funenv_h (funenv_h_of_env_h $1)) $0)))))))
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(funid long -> bool) -> bool) (\(lf :funid long).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   (((= :funclos_h lift -> funclos_h lift -> bool)
   ((lookup_longfunid_env_h $2)
   (((QUALIFIED :strid -> funid long -> funid long) $0) $1)))
   ((((COND :bool -> funclos_h lift -> funclos_h lift ->
             funclos_h lift) (((= :env_h lift -> env_h lift -> bool)
   ((lookupstrid_strenv_h (strenv_h_of_env_h $2)) $0))
   (undefined :env_h lift))) (undefined :funclos_h lift))
   ((lookup_longfunid_env_h ((lower :env_h lift -> env_h)
   ((lookupstrid_strenv_h (strenv_h_of_env_h $2)) $0)))
   $1))))))))))`),
 ((lookup_funid_env_h_DEF),
  [],
  `((! :(funenv_h -> bool) -> bool) (\(x1 :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2 :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :(funid -> funclos_h lift) -> (funid -> funclos_h lift) ->
         bool) (lookup_funid_env_h ((((ENV_H $3) $2) $1) $0)))
   (\(funid :funid). ((lookup_funid_funenv_h $4) $0)))))))))))`),
 ((lookup_longfunid_intbasis_h_DEF),
  [],
  `((/\ ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   (((= :int_h lift -> int_h lift -> bool)
   ((lookup_longfunid_intbasis_h $1) ((BASE :funid -> funid long)
   $0))) ((lookup_funid_funintenv_h (funintenv_h_of_intbasis_h $1))
   $0))))))) ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(funid long -> bool) -> bool) (\(lf :funid long).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   (((= :int_h lift -> int_h lift -> bool)
   ((lookup_longfunid_intbasis_h $2)
   (((QUALIFIED :strid -> funid long -> funid long) $0) $1)))
   ((((COND :bool -> int_h lift -> int_h lift -> int_h lift)
   (((= :int_h lift -> int_h lift -> bool) ((lookup_strid_strintenv_h
   (strintenv_h_of_intbasis_h $2)) $0)) (undefined :int_h lift)))
   (undefined :int_h lift)) ((lookup_longfunid_int_h
   ((lower :int_h lift -> int_h) ((lookup_strid_strintenv_h
   (strintenv_h_of_intbasis_h $2)) $0))) $1))))))))))`),
 ((lookup_longfunid_int_h_DEF),
  [],
  `((/\ ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   (((= :int_h lift -> int_h lift -> bool) ((lookup_longfunid_int_h
   $1) ((BASE :funid -> funid long) $0))) ((lookup_funid_funintenv_h
   (funintenv_h_of_int_h $1)) $0))))))) ((! :(int_h -> bool) -> bool)
   (\(i :int_h). ((! :(funid long -> bool) -> bool)
   (\(lf :funid long). ((! :(strid -> bool) -> bool) (\(strid :strid).
   (((= :int_h lift -> int_h lift -> bool) ((lookup_longfunid_int_h
   $2) (((QUALIFIED :strid -> funid long -> funid long) $0) $1)))
   ((((COND :bool -> int_h lift -> int_h lift -> int_h lift)
   (((= :int_h lift -> int_h lift -> bool) ((lookup_strid_strintenv_h
   (strintenv_h_of_int_h $2)) $0)) (undefined :int_h lift)))
   (undefined :int_h lift)) ((lookup_longfunid_int_h
   ((lower :int_h lift -> int_h) ((lookup_strid_strintenv_h
   (strintenv_h_of_int_h $2)) $0))) $1))))))))))`),
 ((lookup_funid_funintenv_h_DEF),
  [],
  `((! :((funid # int_h) list finmap -> bool) -> bool)
   (\(x1 :(funid # int_h) list finmap).
   (((= :(funid -> int_h lift) -> (funid -> int_h lift) -> bool)
   (lookup_funid_funintenv_h (FUNINTENV_H $0))) (\(funid :funid).
   (((finmap_lookup :funid -> (funid # int_h) list finmap ->
                     int_h lift) $0) $1)))))`),
 ((lookup_funid_funenv_h_DEF),
  [],
  `((! :((funid # funclos_h) list finmap -> bool) -> bool)
   (\(x1 :(funid # funclos_h) list finmap).
   (((= :(funid -> funclos_h lift) -> (funid -> funclos_h lift) ->
         bool) (lookup_funid_funenv_h (FUNENV_H $0)))
   (\(funid :funid).
   (((finmap_lookup :funid -> (funid # funclos_h) list finmap ->
                     funclos_h lift) $0) $1)))))`),
 ((lookup_longstrid_intbasis_h_DEF),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(s :sigenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(i :strintenv_h).
   ((! :(funintenv_h -> bool) -> bool) (\(f :funintenv_h).
   ((! :(strid long -> bool) -> bool) (\(ls :strid long).
   (((= :int_h lift -> int_h lift -> bool)
   ((lookup_longstrid_intbasis_h (((INTBASIS_H $3) $2) $1)) $0))
   ((lookup_longstrid_strintenv_h $2) $0))))))))))`),
 ((lookup_longstrid_strintenv_h_DEF),
  [],
  `((/\ ((! :(strintenv_h -> bool) -> bool) (\(i :strintenv_h).
   ((! :(strid -> bool) -> bool) (\(s :strid).
   (((= :int_h lift -> int_h lift -> bool)
   ((lookup_longstrid_strintenv_h $1) ((BASE :strid -> strid long)
   $0))) ((lookup_strid_strintenv_h $1) $0)))))))
   ((! :(strintenv_h -> bool) -> bool) (\(i :strintenv_h).
   ((! :(strid long -> bool) -> bool) (\(ls :strid long).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   (((= :int_h lift -> int_h lift -> bool)
   ((lookup_longstrid_strintenv_h $2)
   (((QUALIFIED :strid -> strid long -> strid long) $0) $1)))
   ((((COND :bool -> int_h lift -> int_h lift -> int_h lift)
   (((= :int_h lift -> int_h lift -> bool) ((lookup_strid_strintenv_h
   $2) $0)) (undefined :int_h lift))) (undefined :int_h lift))
   ((lookup_longstrid_strintenv_h (strintenv_h_of_int_h
   ((lower :int_h lift -> int_h) ((lookup_strid_strintenv_h $2) $0))))
   $1))))))))))`),
 ((lookup_strid_int_h_DEF),
  [],
  `((/\ ((! :(funintenv_h -> bool) -> bool) (\(x1 :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(x2 :strintenv_h).
   ((! :(var set -> bool) -> bool) (\(x3 :var set).
   ((! :(excon set -> bool) -> bool) (\(x4 :excon set).
   (((= :(strid -> int_h lift) -> (strid -> int_h lift) -> bool)
   (lookup_strid_int_h ((((INT_H $3) $2) $1) $0))) (\(strid :strid).
   ((lookup_strid_strintenv_h $3) $0))))))))))))
   ((! :((strid # int_h) list finmap -> bool) -> bool)
   (\(x1 :(strid # int_h) list finmap).
   (((= :(strid -> int_h lift) -> (strid -> int_h lift) -> bool)
   (lookup_strid_strintenv_h (STRINTENV_H $0))) (\(strid :strid).
   (((finmap_lookup :strid -> (strid # int_h) list finmap ->
                     int_h lift) $0) $1))))))`),
 ((lookup_longstrid_basis_h_DEF),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(x1 :sigenv_h).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :(strid long -> env_h lift) -> (strid long -> env_h lift) ->
         bool) (lookup_longstrid_basis_h ((BASIS_H $1) $0)))
   (\(ls :strid long). ((lookuplongstrid_env_h $1) $0)))))))`),
 ((lookuplongexcon_env_h_DEF),
  [],
  `((/\ ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(excon -> bool) -> bool) (\(ex :excon).
   (((= :exname lift -> exname lift -> bool) ((lookuplongexcon_env_h
   $1) ((BASE :excon -> excon long) $0))) ((lookupexcon_exconenv
   (exconenv_of_env_h $1)) $0))))))) ((! :(env_h -> bool) -> bool)
   (\(E :env_h). ((! :(excon long -> bool) -> bool)
   (\(lex :excon long). ((! :(strid -> bool) -> bool)
   (\(strid :strid). (((= :exname lift -> exname lift -> bool)
   ((lookuplongexcon_env_h $2)
   (((QUALIFIED :strid -> excon long -> excon long) $0) $1)))
   ((((COND :bool -> exname lift -> exname lift -> exname lift)
   (((= :env_h lift -> env_h lift -> bool) ((lookupstrid_strenv_h
   (strenv_h_of_env_h $2)) $0)) (undefined :env_h lift)))
   (undefined :exname lift)) ((lookuplongexcon_env_h
   ((lower :env_h lift -> env_h) ((lookupstrid_strenv_h
   (strenv_h_of_env_h $2)) $0))) $1))))))))))`),
 ((lookuplongvar_env_h_DEF),
  [],
  `((/\ ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(var -> bool) -> bool) (\(v :var).
   (((= :val lift -> val lift -> bool) ((lookuplongvar_env_h $1)
   ((BASE :var -> var long) $0))) ((lookupvar_varenv (varenv_of_env_h
   $1)) $0))))))) ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(var long -> bool) -> bool) (\(lv :var long).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   (((= :val lift -> val lift -> bool) ((lookuplongvar_env_h $2)
   (((QUALIFIED :strid -> var long -> var long) $0) $1)))
   ((((COND :bool -> val lift -> val lift -> val lift)
   (((= :env_h lift -> env_h lift -> bool) ((lookupstrid_strenv_h
   (strenv_h_of_env_h $2)) $0)) (undefined :env_h lift)))
   (undefined :val lift)) ((lookuplongvar_env_h
   ((lower :env_h lift -> env_h) ((lookupstrid_strenv_h
   (strenv_h_of_env_h $2)) $0))) $1))))))))))`),
 ((lookupexcon_env_h_DEF),
  [],
  `((! :(funenv_h -> bool) -> bool) (\(x1 :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2 :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :(excon -> exname lift) -> (excon -> exname lift) -> bool)
   (lookupexcon_env_h ((((ENV_H $3) $2) $1) $0))) (\(ec :excon).
   ((lookupexcon_exconenv $1) $0)))))))))))`),
 ((lookupvar_env_h_DEF),
  [],
  `((! :(funenv_h -> bool) -> bool) (\(x1 :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2 :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :(var -> val lift) -> (var -> val lift) -> bool)
   (lookupvar_env_h ((((ENV_H $3) $2) $1) $0))) (\(v :var).
   ((lookupvar_varenv $2) $0)))))))))))`),
 ((lookuplongstrid_env_h_DEF),
  [],
  `((/\ ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(strid -> bool) -> bool) (\(s :strid).
   (((= :env_h lift -> env_h lift -> bool) ((lookuplongstrid_env_h $1)
   ((BASE :strid -> strid long) $0))) ((lookupstrid_strenv_h
   (strenv_h_of_env_h $1)) $0))))))) ((! :(env_h -> bool) -> bool)
   (\(E :env_h). ((! :(strid long -> bool) -> bool)
   (\(ls :strid long). ((! :(strid -> bool) -> bool) (\(strid :strid).
   (((= :env_h lift -> env_h lift -> bool) ((lookuplongstrid_env_h $2)
   (((QUALIFIED :strid -> strid long -> strid long) $0) $1)))
   ((((COND :bool -> env_h lift -> env_h lift -> env_h lift)
   (((= :env_h lift -> env_h lift -> bool) ((lookupstrid_strenv_h
   (strenv_h_of_env_h $2)) $0)) (undefined :env_h lift)))
   (undefined :env_h lift)) ((lookuplongstrid_env_h
   ((lower :env_h lift -> env_h) ((lookupstrid_strenv_h
   (strenv_h_of_env_h $2)) $0))) $1))))))))))`),
 ((lookupstrid_env_h_DEF),
  [],
  `((/\ ((! :(funenv_h -> bool) -> bool) (\(x1 :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2 :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :(strid -> env_h lift) -> (strid -> env_h lift) -> bool)
   (lookupstrid_env_h ((((ENV_H $3) $2) $1) $0))) (\(strid :strid).
   ((lookupstrid_strenv_h $3) $0))))))))))))
   ((! :((strid # env_h) list finmap -> bool) -> bool)
   (\(x1 :(strid # env_h) list finmap).
   (((= :(strid -> env_h lift) -> (strid -> env_h lift) -> bool)
   (lookupstrid_strenv_h (STRENV_H $0))) (\(strid :strid).
   (((finmap_lookup :strid -> (strid # env_h) list finmap ->
                     env_h lift) $0) $1))))))`),
 ((funenv_h_in_basis_h_DEF),
  [],
  `((! :(funenv_h -> bool) -> bool) (\(f :funenv_h).
   (((= :basis_h -> basis_h -> bool) (funenv_h_in_basis_h $0))
   ((BASIS_H (SIGENV_H (\(x :sigid). (undefined :int_h lift))))
   (funenv_h_in_env_h $0)))))`),
 ((sigenv_h_in_basis_h_DEF),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(s :sigenv_h).
   (((= :basis_h -> basis_h -> bool) (sigenv_h_in_basis_h $0))
   ((BASIS_H $0) empty_env_h))))`),
 ((strenv_h_in_basis_h_DEF),
  [],
  `((! :(strenv_h -> bool) -> bool) (\(s :strenv_h).
   (((= :basis_h -> basis_h -> bool) (strenv_h_in_basis_h $0))
   (env_h_in_basis_h (strenv_h_in_env_h $0)))))`),
 ((env_h_in_basis_h_DEF),
  [],
  `((! :(env_h -> bool) -> bool) (\(e :env_h).
   (((= :basis_h -> basis_h -> bool) (env_h_in_basis_h $0)) ((BASIS_H
   (SIGENV_H (\(x :sigid). (undefined :int_h lift)))) $0))))`),
 ((strintenv_h_in_int_h_DEF),
  [],
  `((! :(strintenv_h -> bool) -> bool) (\(x :strintenv_h).
   (((= :int_h -> int_h -> bool) (strintenv_h_in_int_h $0)) ((((INT_H
   empty_funintenv_h) $0) (EMPTY :var set)) (EMPTY :excon set)))))`),
 ((funintenv_h_in_int_h_DEF),
  [],
  `((! :(funintenv_h -> bool) -> bool) (\(x :funintenv_h).
   (((= :int_h -> int_h -> bool) (funintenv_h_in_int_h $0)) ((((INT_H
   $0) empty_strintenv_h) (EMPTY :var set)) (EMPTY :excon set)))))`),
 ((excons_in_int_h_DEF),
  [],
  `((! :(excon set -> bool) -> bool) (\(x :excon set).
   (((= :int_h -> int_h -> bool) (excons_in_int_h $0)) ((((INT_H
   empty_funintenv_h) empty_strintenv_h) (EMPTY :var set)) $0))))`),
 ((vars_in_int_h_DEF),
  [],
  `((! :(var set -> bool) -> bool) (\(x :var set).
   (((= :int_h -> int_h -> bool) (vars_in_int_h $0)) ((((INT_H
   empty_funintenv_h) empty_strintenv_h) $0) (EMPTY :excon set)))))`),
 ((funenv_h_in_env_h_DEF),
  [],
  `((! :(funenv_h -> bool) -> bool) (\(f :funenv_h).
   (((= :env_h -> env_h -> bool) (funenv_h_in_env_h $0)) ((((ENV_H $0)
   empty_strenv_h) empty_varenv) empty_exconenv))))`),
 ((strenv_h_in_env_h_DEF),
  [],
  `((! :(strenv_h -> bool) -> bool) (\(s :strenv_h).
   (((= :env_h -> env_h -> bool) (strenv_h_in_env_h $0)) ((((ENV_H
   empty_funenv_h) $0) empty_varenv) empty_exconenv))))`),
 ((add_strintenv_h_to_intbasis_h_DEF),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(s :sigenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(sie :strintenv_h).
   ((! :(funintenv_h -> bool) -> bool) (\(f :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(sie' :strintenv_h).
   (((= :intbasis_h -> intbasis_h -> bool)
   ((add_strintenv_h_to_intbasis_h (((INTBASIS_H $3) $2) $1)) $0))
   (((INTBASIS_H $3) ((add_strintenv_h $2) $0)) $1))))))))))`),
 ((add_sigenv_h_to_intbasis_h_DEF),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(s :sigenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(i :strintenv_h).
   ((! :(funintenv_h -> bool) -> bool) (\(f :funintenv_h).
   ((! :(sigenv_h -> bool) -> bool) (\(s' :sigenv_h).
   (((= :intbasis_h -> intbasis_h -> bool)
   ((add_sigenv_h_to_intbasis_h (((INTBASIS_H $3) $2) $1)) $0))
   (((INTBASIS_H ((add_sigenv_h $3) $0)) $2) $1))))))))))`),
 ((add_funintenv_h_to_intbasis_h_DEF),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(s :sigenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(i :strintenv_h).
   ((! :(funintenv_h -> bool) -> bool) (\(f :funintenv_h).
   ((! :(funintenv_h -> bool) -> bool) (\(f' :funintenv_h).
   (((= :intbasis_h -> intbasis_h -> bool)
   ((add_funintenv_h_to_intbasis_h (((INTBASIS_H $3) $2) $1)) $0))
   (((INTBASIS_H $3) $2) ((add_funintenv_h $1) $0)))))))))))`),
 ((add_funenv_h_to_basis_h_DEF),
  [],
  `((! :(basis_h -> bool) -> bool) (\(b :basis_h).
   ((! :(funenv_h -> bool) -> bool) (\(f :funenv_h).
   (((= :basis_h -> basis_h -> bool) ((add_funenv_h_to_basis_h $1)
   $0)) ((BASIS_H (sigenv_h_of_basis_h $1)) ((add_funenv_h_to_env_h
   (env_h_of_basis_h $1)) $0)))))))`),
 ((add_funenv_h_to_env_h_DEF),
  [],
  `((! :(env_h -> bool) -> bool) (\(e :env_h).
   ((! :(funenv_h -> bool) -> bool) (\(f :funenv_h).
   (((= :env_h -> env_h -> bool) ((add_funenv_h_to_env_h $1) $0))
   ((((ENV_H ((add_funenv_h (funenv_h_of_env_h $1)) $0))
   (strenv_h_of_env_h $1)) (varenv_of_env_h $1)) (exconenv_of_env_h
   $1)))))))`),
 ((add_env_h_to_basis_h_DEF),
  [],
  `((! :(basis_h -> bool) -> bool) (\(b :basis_h).
   ((! :(env_h -> bool) -> bool) (\(e :env_h).
   (((= :basis_h -> basis_h -> bool) ((add_env_h_to_basis_h $1) $0))
   ((BASIS_H (sigenv_h_of_basis_h $1)) ((add_env_h (env_h_of_basis_h
   $1)) $0)))))))`),
 ((add_int_h_DEF),
  [],
  `((! :(funintenv_h -> bool) -> bool) (\(x1 :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(x2 :strintenv_h).
   ((! :(var set -> bool) -> bool) (\(x3 :var set).
   ((! :(excon set -> bool) -> bool) (\(x4 :excon set).
   (((= :(int_h -> int_h) -> (int_h -> int_h) -> bool) (add_int_h
   ((((INT_H $3) $2) $1) $0))) (\(int_h :int_h). ((((INT_H
   ((add_funintenv_h $4) (funintenv_h_of_int_h $0))) ((add_strintenv_h
   $3) (strintenv_h_of_int_h $0)))
   (((UNION :var set -> var set -> var set) $2) (vars_of_int_h $0)))
   (((UNION :excon set -> excon set -> excon set) $1) (excons_of_int_h
   $0)))))))))))))`),
 ((add_funintenv_h_DEF),
  [],
  `((! :(funintenv_h -> bool) -> bool) (\(int_h :funintenv_h).
   ((! :(funintenv_h -> bool) -> bool) (\(int_h' :funintenv_h).
   (((= :funintenv_h -> funintenv_h -> bool) ((add_funintenv_h $1)
   $0)) (FUNINTENV_H
   ((((finmap_modify :(funid -> funid -> bool) ->
                      (funid # int_h) list finmap ->
                      (funid # int_h) list finmap ->
                      (funid # int_h) list finmap) less_funid)
   (FUNINTENV_H_arg $1)) (FUNINTENV_H_arg $0))))))))`),
 ((add_strintenv_h_DEF),
  [],
  `((! :(strintenv_h -> bool) -> bool) (\(SIE1 :strintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(SIE2 :strintenv_h).
   (((= :strintenv_h -> strintenv_h -> bool) ((add_strintenv_h $1)
   $0)) (STRINTENV_H
   ((((finmap_modify :(strid -> strid -> bool) ->
                      (strid # int_h) list finmap ->
                      (strid # int_h) list finmap ->
                      (strid # int_h) list finmap) less_strid)
   (STRINTENV_H_arg $0)) (STRINTENV_H_arg $1))))))))`),
 ((add_basis_h_DEF),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(x1 :sigenv_h).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :(basis_h -> basis_h) -> (basis_h -> basis_h) -> bool)
   (add_basis_h ((BASIS_H $1) $0))) (\(B :basis_h). ((BASIS_H
   ((add_sigenv_h $2) (sigenv_h_of_basis_h $0))) ((add_env_h $1)
   (env_h_of_basis_h $0)))))))))`),
 ((add_env_h_DEF),
  [],
  `((! :(funenv_h -> bool) -> bool) (\(x1 :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2 :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :(env_h -> env_h) -> (env_h -> env_h) -> bool) (add_env_h
   ((((ENV_H $3) $2) $1) $0))) (\(E :env_h). ((((ENV_H ((add_funenv_h
   $4) (funenv_h_of_env_h $0))) ((add_strenv_h $3) (strenv_h_of_env_h
   $0))) ((add_varenv $2) (varenv_of_env_h $0))) ((add_exconenv $1)
   (exconenv_of_env_h $0)))))))))))))`),
 ((add_sigenv_DEF),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(s1 :sigenv_h).
   ((! :(sigenv_h -> bool) -> bool) (\(s2 :sigenv_h).
   (((= :sigenv_h -> sigenv_h -> bool) ((add_sigenv_h $1) $0))
   (SIGENV_H (\(x :sigid).
   ((((COND :bool -> int_h lift -> int_h lift -> int_h lift)
   (((= :int_h lift -> int_h lift -> bool) ((SIGENV_H_arg $2) $0))
   (undefined :int_h lift))) ((SIGENV_H_arg $1) $0)) ((SIGENV_H_arg
   $2) $0)))))))))`),
 ((add_strenv_h_DEF),
  [],
  `((! :(strenv_h -> bool) -> bool) (\(se1 :strenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(se2 :strenv_h).
   (((= :strenv_h -> strenv_h -> bool) ((add_strenv_h $1) $0))
   (STRENV_H
   ((((finmap_modify :(strid -> strid -> bool) ->
                      (strid # env_h) list finmap ->
                      (strid # env_h) list finmap ->
                      (strid # env_h) list finmap) less_strid)
   (STRENV_H_arg $1)) (STRENV_H_arg $0))))))))`),
 ((add_funenv_h_DEF),
  [],
  `((! :(funenv_h -> bool) -> bool) (\(fe1 :funenv_h).
   ((! :(funenv_h -> bool) -> bool) (\(fe2 :funenv_h).
   (((= :funenv_h -> funenv_h -> bool) ((add_funenv_h $1) $0))
   (FUNENV_H
   ((((finmap_modify :(funid -> funid -> bool) ->
                      (funid # funclos_h) list finmap ->
                      (funid # funclos_h) list finmap ->
                      (funid # funclos_h) list finmap) less_funid)
   (FUNENV_H_arg $1)) (FUNENV_H_arg $0))))))))`),
 ((strenv_h_map_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(si :strid).
   ((! :(env_h -> bool) -> bool) (\(e :env_h).
   (((= :strenv_h -> strenv_h -> bool) ((strenv_h_map $1) $0))
   (STRENV_H
   ((FINMAP :(strid # env_h) list -> (strid # env_h) list finmap)
   (((CONS :strid # env_h -> (strid # env_h) list ->
            (strid # env_h) list)
   (((, :strid -> env_h -> strid # env_h) $1) $0))
   (NIL :(strid # env_h) list)))))))))`),
 ((sigenv_h_map_DEF),
  [],
  `((! :(sigid -> bool) -> bool) (\(si :sigid).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   (((= :sigenv_h -> sigenv_h -> bool) ((sigenv_h_map $1) $0))
   (SIGENV_H (\(x :sigid).
   ((((COND :bool -> int_h lift -> int_h lift -> int_h lift)
   (((= :sigid -> sigid -> bool) $0) $2)) ((lift :int_h -> int_h lift)
   $1)) (undefined :int_h lift)))))))))`),
 ((strintenv_h_map_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(si :strid).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   (((= :strintenv_h -> strintenv_h -> bool) ((strintenv_h_map $1)
   $0)) (STRINTENV_H
   ((FINMAP :(strid # int_h) list -> (strid # int_h) list finmap)
   (((CONS :strid # int_h -> (strid # int_h) list ->
            (strid # int_h) list)
   (((, :strid -> int_h -> strid # int_h) $1) $0))
   (NIL :(strid # int_h) list)))))))))`),
 ((funintenv_h_map_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(fi :funid).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   (((= :funintenv_h -> funintenv_h -> bool) ((funintenv_h_map $1)
   $0)) (FUNINTENV_H
   ((FINMAP :(funid # int_h) list -> (funid # int_h) list finmap)
   (((CONS :funid # int_h -> (funid # int_h) list ->
            (funid # int_h) list)
   (((, :funid -> int_h -> funid # int_h) $1) $0))
   (NIL :(funid # int_h) list)))))))))`),
 ((funenv_h_map_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(fi :funid).
   ((! :(funclos_h -> bool) -> bool) (\(fc :funclos_h).
   (((= :funenv_h -> funenv_h -> bool) ((funenv_h_map $1) $0))
   (FUNENV_H
   ((FINMAP :(funid # funclos_h) list ->
             (funid # funclos_h) list finmap)
   (((CONS :funid # funclos_h -> (funid # funclos_h) list ->
            (funid # funclos_h) list)
   (((, :funid -> funclos_h -> funid # funclos_h) $1) $0))
   (NIL :(funid # funclos_h) list)))))))))`),
 ((insert_into_sigenv_h_DEF),
  [],
  `((! :((sigid -> int_h lift) -> bool) -> bool)
   (\(se :sigid -> int_h lift). ((! :(sigid -> bool) -> bool)
   (\(sigid :sigid). ((! :(int_h -> bool) -> bool) (\(int_h :int_h).
   (((= :sigenv_h -> sigenv_h -> bool) (((insert_into_sigenv_h
   (SIGENV_H $2)) $1) $0)) (SIGENV_H (\(x :sigid).
   ((((COND :bool -> int_h lift -> int_h lift -> int_h lift)
   (((= :sigid -> sigid -> bool) $0) $2)) ((lift :int_h -> int_h lift)
   $1)) ($3 $0)))))))))))`),
 ((insert_into_funintenv_h_DEF),
  [],
  `((! :((funid # int_h) list finmap -> bool) -> bool)
   (\(x1 :(funid # int_h) list finmap).
   (((= :(funid -> int_h -> funintenv_h) ->
         (funid -> int_h -> funintenv_h) -> bool)
   (insert_into_funintenv_h (FUNINTENV_H $0))) (\(funid :funid).
   (\(int_h :int_h). (FUNINTENV_H
   (((((finmap_insert :(funid -> funid -> bool) -> funid -> int_h ->
                       (funid # int_h) list finmap ->
                       (funid # int_h) list finmap) less_funid) $1)
   $0) $2)))))))`),
 ((insert_into_strintenv_h_DEF),
  [],
  `((! :((strid # int_h) list finmap -> bool) -> bool)
   (\(x1 :(strid # int_h) list finmap).
   (((= :(strid -> int_h -> strintenv_h) ->
         (strid -> int_h -> strintenv_h) -> bool)
   (insert_into_strintenv_h (STRINTENV_H $0))) (\(strid :strid).
   (\(int_h :int_h). (STRINTENV_H
   (((((finmap_insert :(strid -> strid -> bool) -> strid -> int_h ->
                       (strid # int_h) list finmap ->
                       (strid # int_h) list finmap) less_strid) $1)
   $0) $2)))))))`),
 ((insert_into_strenv_h_DEF),
  [],
  `((! :((strid # env_h) list finmap -> bool) -> bool)
   (\(x1 :(strid # env_h) list finmap).
   (((= :(strid -> env_h -> strenv_h) ->
         (strid -> env_h -> strenv_h) -> bool) (insert_into_strenv_h
   (STRENV_H $0))) (\(strid :strid). (\(e :env_h). (STRENV_H
   (((((finmap_insert :(strid -> strid -> bool) -> strid -> env_h ->
                       (strid # env_h) list finmap ->
                       (strid # env_h) list finmap) less_strid) $1)
   $0) $2)))))))`),
 ((insert_into_funenv_h_DEF),
  [],
  `((! :((funid # funclos_h) list finmap -> bool) -> bool)
   (\(x1 :(funid # funclos_h) list finmap).
   (((= :(funid -> funclos_h -> funenv_h) ->
         (funid -> funclos_h -> funenv_h) -> bool)
   (insert_into_funenv_h (FUNENV_H $0))) (\(funid :funid).
   (\(fcl :funclos_h). (FUNENV_H
   (((((finmap_insert :(funid -> funid -> bool) -> funid ->
                       funclos_h -> (funid # funclos_h) list finmap ->
                       (funid # funclos_h) list finmap) less_funid)
   $1) $0) $2)))))))`),
 ((empty_int_h_DEF),
  [],
  `(((= :int_h -> int_h -> bool) empty_int_h) ((((INT_H
   empty_funintenv_h) empty_strintenv_h) (EMPTY :var set))
   (EMPTY :excon set)))`),
 ((empty_funintenv_h_DEF),
  [],
  `(((= :funintenv_h -> funintenv_h -> bool) empty_funintenv_h)
   (FUNINTENV_H (empty_finmap :(funid # int_h) list finmap)))`),
 ((empty_strintenv_h_DEF),
  [],
  `(((= :strintenv_h -> strintenv_h -> bool) empty_strintenv_h)
   (STRINTENV_H (empty_finmap :(strid # int_h) list finmap)))`),
 ((empty_env_h_DEF),
  [],
  `(((= :env_h -> env_h -> bool) empty_env_h) ((((ENV_H
   empty_funenv_h) empty_strenv_h) empty_varenv) empty_exconenv))`),
 ((empty_funenv_h_DEF),
  [],
  `(((= :funenv_h -> funenv_h -> bool) empty_funenv_h) (FUNENV_H
   (empty_finmap :(funid # funclos_h) list finmap)))`),
 ((empty_strenv_h_DEF),
  [],
  `(((= :strenv_h -> strenv_h -> bool) empty_strenv_h) (STRENV_H
   (empty_finmap :(strid # env_h) list finmap)))`),
 ((empty_sigenv_h_DEF),
  [],
  `(((= :sigenv_h -> sigenv_h -> bool) empty_sigenv_h) (SIGENV_H
   (\(x :sigid). (undefined :int_h lift))))`),
 ((strintenv_h_of_intbasis_h_DEF),
  [],
  `((! :(funintenv_h -> bool) -> bool) (\(f :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(st :strintenv_h).
   ((! :(sigenv_h -> bool) -> bool) (\(si :sigenv_h).
   (((= :strintenv_h -> strintenv_h -> bool)
   (strintenv_h_of_intbasis_h (((INTBASIS_H $0) $1) $2))) $1)))))))`),
 ((sigenv_h_of_intbasis_h_DEF),
  [],
  `((! :(funintenv_h -> bool) -> bool) (\(f :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(st :strintenv_h).
   ((! :(sigenv_h -> bool) -> bool) (\(si :sigenv_h).
   (((= :sigenv_h -> sigenv_h -> bool) (sigenv_h_of_intbasis_h
   (((INTBASIS_H $0) $1) $2))) $0)))))))`),
 ((funintenv_h_of_intbasis_h_DEF),
  [],
  `((! :(funintenv_h -> bool) -> bool) (\(f :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(st :strintenv_h).
   ((! :(sigenv_h -> bool) -> bool) (\(si :sigenv_h).
   (((= :funintenv_h -> funintenv_h -> bool)
   (funintenv_h_of_intbasis_h (((INTBASIS_H $0) $1) $2))) $2)))))))`),
 ((excons_of_int_h_DEF),
  [],
  `((! :(funintenv_h -> bool) -> bool) (\(x1 :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(x2 :strintenv_h).
   ((! :(var set -> bool) -> bool) (\(x3 :var set).
   ((! :(excon set -> bool) -> bool) (\(x4 :excon set).
   (((= :excon set -> excon set -> bool) (excons_of_int_h ((((INT_H
   $3) $2) $1) $0))) $0)))))))))`),
 ((vars_of_int_h_DEF),
  [],
  `((! :(funintenv_h -> bool) -> bool) (\(x1 :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(x2 :strintenv_h).
   ((! :(var set -> bool) -> bool) (\(x3 :var set).
   ((! :(excon set -> bool) -> bool) (\(x4 :excon set).
   (((= :var set -> var set -> bool) (vars_of_int_h ((((INT_H $3) $2)
   $1) $0))) $1)))))))))`),
 ((strintenv_h_of_int_h_DEF),
  [],
  `((! :(funintenv_h -> bool) -> bool) (\(x1 :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(x2 :strintenv_h).
   ((! :(var set -> bool) -> bool) (\(x3 :var set).
   ((! :(excon set -> bool) -> bool) (\(x4 :excon set).
   (((= :strintenv_h -> strintenv_h -> bool) (strintenv_h_of_int_h
   ((((INT_H $3) $2) $1) $0))) $2)))))))))`),
 ((funintenv_h_of_int_h_DEF),
  [],
  `((! :(funintenv_h -> bool) -> bool) (\(x1 :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(x2 :strintenv_h).
   ((! :(var set -> bool) -> bool) (\(x3 :var set).
   ((! :(excon set -> bool) -> bool) (\(x4 :excon set).
   (((= :funintenv_h -> funintenv_h -> bool) (funintenv_h_of_int_h
   ((((INT_H $3) $2) $1) $0))) $3)))))))))`),
 ((env_h_of_basis_h_DEF),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(x1 :sigenv_h).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :env_h -> env_h -> bool) (env_h_of_basis_h ((BASIS_H $1) $0)))
   $0)))))`),
 ((sigenv_h_of_basis_h_DEF),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(x1 :sigenv_h).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :sigenv_h -> sigenv_h -> bool) (sigenv_h_of_basis_h ((BASIS_H
   $1) $0))) $1)))))`),
 ((exconenv_of_env_h_DEF),
  [],
  `((! :(funenv_h -> bool) -> bool) (\(x1 :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2 :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :exconenv -> exconenv -> bool) (exconenv_of_env_h ((((ENV_H
   $3) $2) $1) $0))) $0)))))))))`),
 ((varenv_of_env_h_DEF),
  [],
  `((! :(funenv_h -> bool) -> bool) (\(x1 :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2 :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :varenv -> varenv -> bool) (varenv_of_env_h ((((ENV_H $3) $2)
   $1) $0))) $1)))))))))`),
 ((strenv_h_of_env_h_DEF),
  [],
  `((! :(funenv_h -> bool) -> bool) (\(x1 :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2 :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :strenv_h -> strenv_h -> bool) (strenv_h_of_env_h ((((ENV_H
   $3) $2) $1) $0))) $2)))))))))`),
 ((funenv_h_of_env_h_DEF),
  [],
  `((! :(funenv_h -> bool) -> bool) (\(x1 :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2 :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :funenv_h -> funenv_h -> bool) (funenv_h_of_env_h ((((ENV_H
   $3) $2) $1) $0))) $3)))))))))`),
 ((FUNINTENV_H_arg_DEF),
  [],
  `((! :((funid # int_h) list finmap -> bool) -> bool)
   (\(x1 :(funid # int_h) list finmap).
   (((= :(funid # int_h) list finmap -> (funid # int_h) list finmap ->
         bool) (FUNINTENV_H_arg (FUNINTENV_H $0))) $0)))`),
 ((STRINTENV_H_arg_DEF),
  [],
  `((! :((strid # int_h) list finmap -> bool) -> bool)
   (\(x1 :(strid # int_h) list finmap).
   (((= :(strid # int_h) list finmap -> (strid # int_h) list finmap ->
         bool) (STRINTENV_H_arg (STRINTENV_H $0))) $0)))`),
 ((SIGENV_H_arg_DEF),
  [],
  `((! :((sigid -> int_h lift) -> bool) -> bool)
   (\(se :sigid -> int_h lift).
   (((= :(sigid -> int_h lift) -> (sigid -> int_h lift) -> bool)
   (SIGENV_H_arg (SIGENV_H $0))) $0)))`),
 ((FUNENV_H_arg_DEF),
  [],
  `((! :((funid # funclos_h) list finmap -> bool) -> bool)
   (\(x1 :(funid # funclos_h) list finmap).
   (((= :(funid # funclos_h) list finmap ->
         (funid # funclos_h) list finmap -> bool) (FUNENV_H_arg
   (FUNENV_H $0))) $0)))`),
 ((STRENV_H_arg_DEF),
  [],
  `((! :((strid # env_h) list finmap -> bool) -> bool)
   (\(x1 :(strid # env_h) list finmap).
   (((= :(strid # env_h) list finmap -> (strid # env_h) list finmap ->
         bool) (STRENV_H_arg (STRENV_H $0))) $0)))`),
 ((PACKep_h_DEF),
  [],
  `((! :(pack -> bool) -> bool) (\(p :pack).
   (((= :env_pack_h -> env_pack_h -> bool) (PACKep_h $0))
   (ABS_env_pack_h
   (((Node :env_h + pack -> (env_h + pack) ltree list ->
            (env_h + pack) ltree) ((INR :pack -> env_h + pack) $0))
   (NIL :(env_h + pack) ltree list))))))`),
 ((ENVep_h_DEF),
  [],
  `((! :(env_h -> bool) -> bool) (\(e :env_h).
   (((= :env_pack_h -> env_pack_h -> bool) (ENVep_h $0))
   (ABS_env_pack_h
   (((Node :env_h + pack -> (env_h + pack) ltree list ->
            (env_h + pack) ltree) ((INL :env_h -> env_h + pack) $0))
   (NIL :(env_h + pack) ltree list))))))`),
 ((env_pack_h_ISO_DEF),
  [],
  `((/\ ((! :(env_pack_h -> bool) -> bool) (\(a :env_pack_h).
   (((= :env_pack_h -> env_pack_h -> bool) (ABS_env_pack_h
   (REP_env_pack_h $0))) $0))))
   ((! :((env_h + pack) ltree -> bool) -> bool)
   (\(r :(env_h + pack) ltree). (((= :bool -> bool -> bool)
   (((TRP :(env_h + pack -> (env_h + pack) ltree list -> bool) ->
           (env_h + pack) ltree -> bool) (\(v :env_h + pack).
   (\(tl :(env_h + pack) ltree list). ((\/ ((/\
   ((? :(env_h -> bool) -> bool) (\(e :env_h).
   (((= :env_h + pack -> env_h + pack -> bool) $2)
   ((INL :env_h -> env_h + pack) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(env_h + pack) ltree list -> num) $0)) 0))) ((/\
   ((? :(pack -> bool) -> bool) (\(p :pack).
   (((= :env_h + pack -> env_h + pack -> bool) $2)
   ((INR :pack -> env_h + pack) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(env_h + pack) ltree list -> num) $0)) 0)))))) $0))
   (((= :(env_h + pack) ltree -> (env_h + pack) ltree -> bool)
   (REP_env_pack_h (ABS_env_pack_h $0))) $0)))))`),
 ((env_pack_h_TY_DEF),
  [],
  `((? :((env_pack_h -> (env_h + pack) ltree) -> bool) -> bool)
   (\(rep :env_pack_h -> (env_h + pack) ltree).
   (((TYPE_DEFINITION :((env_h + pack) ltree -> bool) ->
                       (env_pack_h -> (env_h + pack) ltree) -> bool)
   ((TRP :(env_h + pack -> (env_h + pack) ltree list -> bool) ->
          (env_h + pack) ltree -> bool) (\(v :env_h + pack).
   (\(tl :(env_h + pack) ltree list). ((\/ ((/\
   ((? :(env_h -> bool) -> bool) (\(e :env_h).
   (((= :env_h + pack -> env_h + pack -> bool) $2)
   ((INL :env_h -> env_h + pack) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(env_h + pack) ltree list -> num) $0)) 0))) ((/\
   ((? :(pack -> bool) -> bool) (\(p :pack).
   (((= :env_h + pack -> env_h + pack -> bool) $2)
   ((INR :pack -> env_h + pack) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(env_h + pack) ltree list -> num) $0)) 0))))))) $0)))`),
 ((PACKsp_h_DEF),
  [],
  `((! :(pack -> bool) -> bool) (\(p :pack).
   (((= :strenv_pack_h -> strenv_pack_h -> bool) (PACKsp_h $0))
   (ABS_strenv_pack_h
   (((Node :strenv_h + pack -> (strenv_h + pack) ltree list ->
            (strenv_h + pack) ltree) ((INR :pack -> strenv_h + pack)
   $0)) (NIL :(strenv_h + pack) ltree list))))))`),
 ((STRENVsp_h_DEF),
  [],
  `((! :(strenv_h -> bool) -> bool) (\(s :strenv_h).
   (((= :strenv_pack_h -> strenv_pack_h -> bool) (STRENVsp_h $0))
   (ABS_strenv_pack_h
   (((Node :strenv_h + pack -> (strenv_h + pack) ltree list ->
            (strenv_h + pack) ltree)
   ((INL :strenv_h -> strenv_h + pack) $0))
   (NIL :(strenv_h + pack) ltree list))))))`),
 ((strenv_pack_h_ISO_DEF),
  [],
  `((/\ ((! :(strenv_pack_h -> bool) -> bool) (\(a :strenv_pack_h).
   (((= :strenv_pack_h -> strenv_pack_h -> bool) (ABS_strenv_pack_h
   (REP_strenv_pack_h $0))) $0))))
   ((! :((strenv_h + pack) ltree -> bool) -> bool)
   (\(r :(strenv_h + pack) ltree). (((= :bool -> bool -> bool)
   (((TRP :(strenv_h + pack -> (strenv_h + pack) ltree list ->
           bool) -> (strenv_h + pack) ltree -> bool)
   (\(v :strenv_h + pack). (\(tl :(strenv_h + pack) ltree list). ((\/
   ((/\ ((? :(strenv_h -> bool) -> bool) (\(s :strenv_h).
   (((= :strenv_h + pack -> strenv_h + pack -> bool) $2)
   ((INL :strenv_h -> strenv_h + pack) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(strenv_h + pack) ltree list -> num) $0)) 0))) ((/\
   ((? :(pack -> bool) -> bool) (\(p :pack).
   (((= :strenv_h + pack -> strenv_h + pack -> bool) $2)
   ((INR :pack -> strenv_h + pack) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(strenv_h + pack) ltree list -> num) $0)) 0)))))) $0))
   (((= :(strenv_h + pack) ltree -> (strenv_h + pack) ltree -> bool)
   (REP_strenv_pack_h (ABS_strenv_pack_h $0))) $0)))))`),
 ((strenv_pack_h_TY_DEF),
  [],
  `((? :((strenv_pack_h -> (strenv_h + pack) ltree) -> bool) -> bool)
   (\(rep :strenv_pack_h -> (strenv_h + pack) ltree).
   (((TYPE_DEFINITION :((strenv_h + pack) ltree -> bool) ->
                       (strenv_pack_h -> (strenv_h + pack) ltree) ->
                       bool)
   ((TRP :(strenv_h + pack -> (strenv_h + pack) ltree list -> bool) ->
          (strenv_h + pack) ltree -> bool) (\(v :strenv_h + pack).
   (\(tl :(strenv_h + pack) ltree list). ((\/ ((/\
   ((? :(strenv_h -> bool) -> bool) (\(s :strenv_h).
   (((= :strenv_h + pack -> strenv_h + pack -> bool) $2)
   ((INL :strenv_h -> strenv_h + pack) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(strenv_h + pack) ltree list -> num) $0)) 0))) ((/\
   ((? :(pack -> bool) -> bool) (\(p :pack).
   (((= :strenv_h + pack -> strenv_h + pack -> bool) $2)
   ((INR :pack -> strenv_h + pack) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(strenv_h + pack) ltree list -> num) $0)) 0)))))))
   $0)))`),
 ((PACKbp_h_DEF),
  [],
  `((! :(pack -> bool) -> bool) (\(p :pack).
   (((= :basis_pack_h -> basis_pack_h -> bool) (PACKbp_h $0))
   (ABS_basis_pack_h
   (((Node :basis_h + pack -> (basis_h + pack) ltree list ->
            (basis_h + pack) ltree) ((INR :pack -> basis_h + pack)
   $0)) (NIL :(basis_h + pack) ltree list))))))`),
 ((BASISbp_h_DEF),
  [],
  `((! :(basis_h -> bool) -> bool) (\(b :basis_h).
   (((= :basis_pack_h -> basis_pack_h -> bool) (BASISbp_h $0))
   (ABS_basis_pack_h
   (((Node :basis_h + pack -> (basis_h + pack) ltree list ->
            (basis_h + pack) ltree) ((INL :basis_h -> basis_h + pack)
   $0)) (NIL :(basis_h + pack) ltree list))))))`),
 ((basis_pack_h_ISO_DEF),
  [],
  `((/\ ((! :(basis_pack_h -> bool) -> bool) (\(a :basis_pack_h).
   (((= :basis_pack_h -> basis_pack_h -> bool) (ABS_basis_pack_h
   (REP_basis_pack_h $0))) $0))))
   ((! :((basis_h + pack) ltree -> bool) -> bool)
   (\(r :(basis_h + pack) ltree). (((= :bool -> bool -> bool)
   (((TRP :(basis_h + pack -> (basis_h + pack) ltree list -> bool) ->
           (basis_h + pack) ltree -> bool) (\(v :basis_h + pack).
   (\(tl :(basis_h + pack) ltree list). ((\/ ((/\
   ((? :(basis_h -> bool) -> bool) (\(b :basis_h).
   (((= :basis_h + pack -> basis_h + pack -> bool) $2)
   ((INL :basis_h -> basis_h + pack) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(basis_h + pack) ltree list -> num) $0)) 0))) ((/\
   ((? :(pack -> bool) -> bool) (\(p :pack).
   (((= :basis_h + pack -> basis_h + pack -> bool) $2)
   ((INR :pack -> basis_h + pack) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(basis_h + pack) ltree list -> num) $0)) 0)))))) $0))
   (((= :(basis_h + pack) ltree -> (basis_h + pack) ltree -> bool)
   (REP_basis_pack_h (ABS_basis_pack_h $0))) $0)))))`),
 ((basis_pack_h_TY_DEF),
  [],
  `((? :((basis_pack_h -> (basis_h + pack) ltree) -> bool) -> bool)
   (\(rep :basis_pack_h -> (basis_h + pack) ltree).
   (((TYPE_DEFINITION :((basis_h + pack) ltree -> bool) ->
                       (basis_pack_h -> (basis_h + pack) ltree) ->
                       bool)
   ((TRP :(basis_h + pack -> (basis_h + pack) ltree list -> bool) ->
          (basis_h + pack) ltree -> bool) (\(v :basis_h + pack).
   (\(tl :(basis_h + pack) ltree list). ((\/ ((/\
   ((? :(basis_h -> bool) -> bool) (\(b :basis_h).
   (((= :basis_h + pack -> basis_h + pack -> bool) $2)
   ((INL :basis_h -> basis_h + pack) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(basis_h + pack) ltree list -> num) $0)) 0))) ((/\
   ((? :(pack -> bool) -> bool) (\(p :pack).
   (((= :basis_h + pack -> basis_h + pack -> bool) $2)
   ((INR :pack -> basis_h + pack) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(basis_h + pack) ltree list -> num) $0)) 0)))))))
   $0)))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_arg_DEF),
  [],
  `((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_arg
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))) $0)))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_arg2_DEF),
  [],
  `((/\
   ((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x2 :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_arg2
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1) $0))) $0))))))
   (((= :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_arg2
   int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h))
   ((@ :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) ->
        strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h)
   (\(x :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   T))))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_arg1_DEF),
  [],
  `((/\
   ((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x2 :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_arg1
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1) $0))) $1))))))
   (((= :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_arg1
   int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h))
   ((@ :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) ->
        strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h)
   (\(x :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   T))))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_strid_env_h_arg2_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :env_h -> env_h -> bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_strid_env_h_arg2
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_strid_env_h
   $1) $0))) $0)))))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_strid_env_h_arg1_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :strid -> strid -> bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_strid_env_h_arg1
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_strid_env_h
   $1) $0))) $1)))))`),
 ((int_STRENV_H_arg_DEF),
  [],
  `((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool) (int_STRENV_H_arg (int_STRENV_H $0))) $0)))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_SOME_int_h_arg_DEF),
  [],
  `((/\ ((! :(int_h -> bool) -> bool) (\(x1 :int_h).
   (((= :int_h -> int_h -> bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_SOME_int_h_arg
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_SOME_int_h $0)))
   $0)))) (((= :int_h -> int_h -> bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_SOME_int_h_arg
   int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NONE_int_h))
   ((@ :(int_h -> bool) -> int_h) (\(x :int_h). T))))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_arg_DEF),
  [],
  `((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_arg
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))) $0)))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_arg2_DEF),
  [],
  `((/\
   ((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x2 :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_arg2
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1) $0))) $0))))))
   (((= :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_arg2
   int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h))
   ((@ :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) ->
        funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h)
   (\(x :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   T))))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_arg1_DEF),
  [],
  `((/\
   ((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x2 :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_arg1
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1) $0))) $1))))))
   (((= :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_arg1
   int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h))
   ((@ :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) ->
        funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h)
   (\(x :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   T))))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_funid_funclos_h_arg2_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funclos_h -> bool) -> bool) (\(x2 :funclos_h).
   (((= :funclos_h -> funclos_h -> bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_funid_funclos_h_arg2
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_funid_funclos_h
   $1) $0))) $0)))))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_funid_funclos_h_arg1_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funclos_h -> bool) -> bool) (\(x2 :funclos_h).
   (((= :funid -> funid -> bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_funid_funclos_h_arg1
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_funid_funclos_h
   $1) $0))) $1)))))`),
 ((int_FUNENV_H_arg_DEF),
  [],
  `((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool) (int_FUNENV_H_arg (int_FUNENV_H $0))) $0)))`),
 ((int_FUNCLOS_H_arg5_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x4 :int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(basis_h -> bool) -> bool) (\(x5 :basis_h).
   (((= :basis_h -> basis_h -> bool) (int_FUNCLOS_H_arg5
   (((((int_FUNCLOS_H $4) $3) $2) $1) $0))) $0)))))))))))`),
 ((int_FUNCLOS_H_arg4_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x4 :int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(basis_h -> bool) -> bool) (\(x5 :basis_h).
   (((= :int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool) (int_FUNCLOS_H_arg4 (((((int_FUNCLOS_H $4) $3) $2) $1)
   $0))) $1)))))))))))`),
 ((int_FUNCLOS_H_arg3_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x4 :int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(basis_h -> bool) -> bool) (\(x5 :basis_h).
   (((= :strexp_h -> strexp_h -> bool) (int_FUNCLOS_H_arg3
   (((((int_FUNCLOS_H $4) $3) $2) $1) $0))) $2)))))))))))`),
 ((int_FUNCLOS_H_arg2_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x4 :int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(basis_h -> bool) -> bool) (\(x5 :basis_h).
   (((= :int_h -> int_h -> bool) (int_FUNCLOS_H_arg2
   (((((int_FUNCLOS_H $4) $3) $2) $1) $0))) $3)))))))))))`),
 ((int_FUNCLOS_H_arg1_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x4 :int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(basis_h -> bool) -> bool) (\(x5 :basis_h).
   (((= :strid -> strid -> bool) (int_FUNCLOS_H_arg1
   (((((int_FUNCLOS_H $4) $3) $2) $1) $0))) $4)))))))))))`),
 ((int_ENV_H_arg4_DEF),
  [],
  `((! :(funenv_h -> bool) -> bool) (\(x1 :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2 :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :exconenv -> exconenv -> bool) (int_ENV_H_arg4 ((((int_ENV_H
   $3) $2) $1) $0))) $0)))))))))`),
 ((int_ENV_H_arg3_DEF),
  [],
  `((! :(funenv_h -> bool) -> bool) (\(x1 :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2 :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :varenv -> varenv -> bool) (int_ENV_H_arg3 ((((int_ENV_H $3)
   $2) $1) $0))) $1)))))))))`),
 ((int_ENV_H_arg2_DEF),
  [],
  `((! :(funenv_h -> bool) -> bool) (\(x1 :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2 :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :strenv_h -> strenv_h -> bool) (int_ENV_H_arg2 ((((int_ENV_H
   $3) $2) $1) $0))) $2)))))))))`),
 ((int_ENV_H_arg1_DEF),
  [],
  `((! :(funenv_h -> bool) -> bool) (\(x1 :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2 :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :funenv_h -> funenv_h -> bool) (int_ENV_H_arg1 ((((int_ENV_H
   $3) $2) $1) $0))) $3)))))))))`),
 ((int_BASIS_H_arg2_DEF),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(x1 :sigenv_h).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :env_h -> env_h -> bool) (int_BASIS_H_arg2 ((int_BASIS_H $1)
   $0))) $0)))))`),
 ((int_BASIS_H_arg1_DEF),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(x1 :sigenv_h).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :sigenv_h -> sigenv_h -> bool) (int_BASIS_H_arg1 ((int_BASIS_H
   $1) $0))) $1)))))`),
 ((dist_aux_ftn_basis_h_DEF),
  [],
  `((/\ ((! :(sigenv_h -> bool) -> bool) (\(x1 :sigenv_h).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :num -> num -> bool) (dist_aux_ftn_basis_h ((int_BASIS_H $1)
   $0))) 0)))))) ((/\ ((! :(funenv_h -> bool) -> bool)
   (\(x1 :funenv_h). ((! :(strenv_h -> bool) -> bool)
   (\(x2 :strenv_h). ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :num -> num -> bool) (dist_aux_ftn_env_h ((((int_ENV_H $3) $2)
   $1) $0))) 1)))))))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(x1 :strid). ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x4 :int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(basis_h -> bool) -> bool) (\(x5 :basis_h).
   (((= :num -> num -> bool) (dist_aux_ftn_funclos_h
   (((((int_FUNCLOS_H $4) $3) $2) $1) $0))) 2)))))))))))) ((/\
   ((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool) (dist_aux_ftn_funenv_h (int_FUNENV_H
   $0))) 3)))) ((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funclos_h -> bool) -> bool) (\(x2 :funclos_h).
   (((= :num -> num -> bool)
   (dist_aux_ftn_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_funid_funclos_h
   $1) $0))) 4)))))) ((/\ (((= :num -> num -> bool)
   (dist_aux_ftn_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h))
   5)) ((/\
   ((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x2 :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (dist_aux_ftn_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1) $0))) 6)))))) ((/\
   ((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (dist_aux_ftn_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))) 7)))) ((/\ (((= :num -> num -> bool)
   (dist_aux_ftn_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h
   int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NONE_int_h)) 8)) ((/\
   ((! :(int_h -> bool) -> bool) (\(x1 :int_h).
   (((= :num -> num -> bool)
   (dist_aux_ftn_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_SOME_int_h $0)))
   9)))) ((/\
   ((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool) (dist_aux_ftn_strenv_h (int_STRENV_H
   $0))) 10)))) ((/\ ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :num -> num -> bool)
   (dist_aux_ftn_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_strid_env_h
   $1) $0))) 11)))))) ((/\ (((= :num -> num -> bool)
   (dist_aux_ftn_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h))
   12)) ((/\
   ((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x2 :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (dist_aux_ftn_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1) $0))) 13))))))
   ((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (dist_aux_ftn_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))) 14)))))))))))))))))`),
 ((STRENV_H),
  [],
  `(((= :((strid # env_h) list finmap -> strenv_h) ->
         ((strid # env_h) list finmap -> strenv_h) -> bool) STRENV_H)
   (\(x0 :(strid # env_h) list finmap). (int_STRENV_H
   (int_inj_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))))`),
 ((int_inv_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h),
  [],
  `((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :(strid # env_h) list finmap -> (strid # env_h) list finmap ->
         bool)
   (int_inv_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0)))
   ((FINMAP :(strid # env_h) list -> (strid # env_h) list finmap)
   (int_inv_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0)))))`),
 ((int_inj_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h),
  [],
  `((! :((strid # env_h) list -> bool) -> bool)
   (\(x0 :(strid # env_h) list).
   (((= :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_inj_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   ((FINMAP :(strid # env_h) list -> (strid # env_h) list finmap)
   $0)))
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (int_inj_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0)))))`),
 ((int_inv_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h),
  [],
  `((/\ (((= :(strid # env_h) list -> (strid # env_h) list -> bool)
   (int_inv_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h))
   (NIL :(strid # env_h) list)))
   ((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x2 :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :(strid # env_h) list -> (strid # env_h) list -> bool)
   (int_inv_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1) $0)))
   (((CONS :strid # env_h -> (strid # env_h) list ->
            (strid # env_h) list)
   (int_inv_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1))
   (int_inv_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))))))))`),
 ((int_inj_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h),
  [],
  `((/\
   (((= :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_inj_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (NIL :(strid # env_h) list)))
   int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h))
   ((! :((strid # env_h) list -> bool) -> bool)
   (\(x1 :(strid # env_h) list). ((! :(strid # env_h -> bool) -> bool)
   (\(x0 :strid # env_h).
   (((= :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_inj_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((CONS :strid # env_h -> (strid # env_h) list ->
            (strid # env_h) list) $0) $1)))
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (int_inj_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))
   (int_inj_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1))))))))`),
 ((int_inv_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :strid # env_h -> strid # env_h -> bool)
   (int_inv_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_strid_env_h
   $1) $0))) (((, :strid -> env_h -> strid # env_h) $1) $0))))))`),
 ((int_inj_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h),
  [],
  `((! :(env_h -> bool) -> bool) (\(x1 :env_h).
   ((! :(strid -> bool) -> bool) (\(x0 :strid).
   (((= :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_inj_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((, :strid -> env_h -> strid # env_h) $0) $1)))
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_strid_env_h
   $0) $1))))))`),
 ((FUNCLOS_H),
  [],
  `(((= :(strid -> int_h -> strexp_h -> int_h option -> basis_h ->
         funclos_h) ->
         (strid -> int_h -> strexp_h -> int_h option -> basis_h ->
         funclos_h) -> bool) FUNCLOS_H) (\(x0 :strid). (\(x1 :int_h).
   (\(x2 :strexp_h). (\(x3 :int_h option). (\(x4 :basis_h).
   (((((int_FUNCLOS_H $4) $3) $2)
   (int_inj_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1)) $0)))))))`),
 ((int_inv_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h),
  [],
  `((/\ (((= :int_h option -> int_h option -> bool)
   (int_inv_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h
   int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NONE_int_h))
   (NONE :int_h option))) ((! :(int_h -> bool) -> bool) (\(x1 :int_h).
   (((= :int_h option -> int_h option -> bool)
   (int_inv_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_SOME_int_h $0)))
   ((SOME :int_h -> int_h option) $0)))))`),
 ((int_inj_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h),
  [],
  `((/\
   (((= :int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_inj_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (NONE :int_h option)))
   int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NONE_int_h))
   ((! :(int_h -> bool) -> bool) (\(x0 :int_h).
   (((= :int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_inj_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h
   ((SOME :int_h -> int_h option) $0)))
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_SOME_int_h
   $0)))))`),
 ((FUNENV_H),
  [],
  `(((= :((funid # funclos_h) list finmap -> funenv_h) ->
         ((funid # funclos_h) list finmap -> funenv_h) -> bool)
   FUNENV_H) (\(x0 :(funid # funclos_h) list finmap). (int_FUNENV_H
   (int_inj_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))))`),
 ((int_inv_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h),
  [],
  `((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :(funid # funclos_h) list finmap ->
         (funid # funclos_h) list finmap -> bool)
   (int_inv_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0)))
   ((FINMAP :(funid # funclos_h) list ->
             (funid # funclos_h) list finmap)
   (int_inv_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0)))))`),
 ((int_inj_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h),
  [],
  `((! :((funid # funclos_h) list -> bool) -> bool)
   (\(x0 :(funid # funclos_h) list).
   (((= :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_inj_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   ((FINMAP :(funid # funclos_h) list ->
             (funid # funclos_h) list finmap) $0)))
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (int_inj_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0)))))`),
 ((int_inv_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h),
  [],
  `((/\
   (((= :(funid # funclos_h) list -> (funid # funclos_h) list -> bool)
   (int_inv_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h))
   (NIL :(funid # funclos_h) list)))
   ((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x2 :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :(funid # funclos_h) list -> (funid # funclos_h) list -> bool)
   (int_inv_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1) $0)))
   (((CONS :funid # funclos_h -> (funid # funclos_h) list ->
            (funid # funclos_h) list)
   (int_inv_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1))
   (int_inv_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))))))))`),
 ((int_inj_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h),
  [],
  `((/\
   (((= :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_inj_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (NIL :(funid # funclos_h) list)))
   int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h))
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(x1 :(funid # funclos_h) list).
   ((! :(funid # funclos_h -> bool) -> bool)
   (\(x0 :funid # funclos_h).
   (((= :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_inj_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((CONS :funid # funclos_h -> (funid # funclos_h) list ->
            (funid # funclos_h) list) $0) $1)))
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (int_inj_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))
   (int_inj_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1))))))))`),
 ((int_inv_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funclos_h -> bool) -> bool) (\(x2 :funclos_h).
   (((= :funid # funclos_h -> funid # funclos_h -> bool)
   (int_inv_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_funid_funclos_h
   $1) $0))) (((, :funid -> funclos_h -> funid # funclos_h) $1)
   $0))))))`),
 ((int_inj_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h),
  [],
  `((! :(funclos_h -> bool) -> bool) (\(x1 :funclos_h).
   ((! :(funid -> bool) -> bool) (\(x0 :funid).
   (((= :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_inj_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((, :funid -> funclos_h -> funid # funclos_h) $0) $1)))
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_funid_funclos_h
   $0) $1))))))`),
 ((ENV_H),
  [],
  `(((= :(funenv_h -> strenv_h -> varenv -> exconenv -> env_h) ->
         (funenv_h -> strenv_h -> varenv -> exconenv -> env_h) ->
         bool) ENV_H) (\(x0 :funenv_h). (\(x1 :strenv_h).
   (\(x2 :varenv). (\(x3 :exconenv). ((((int_ENV_H $3) $2) $1)
   $0))))))`),
 ((BASIS_H),
  [],
  `(((= :(sigenv_h -> env_h -> basis_h) ->
         (sigenv_h -> env_h -> basis_h) -> bool) BASIS_H)
   (\(x0 :sigenv_h). (\(x1 :env_h). ((int_BASIS_H $1) $0))))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_DEF),
  [],
  `((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   (JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   $0))))))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_DEF),
  [],
  `((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x2 :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1) $0))
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   $1))
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   $0))))))))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_DEF),
  [],
  `(((= :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h)
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_strid_env_h_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_strid_env_h
   $1) $0))
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_strid_env_h
   $1) (env_h_rep $0))))))))`),
 ((int_STRENV_H_DEF),
  [],
  `((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :strenv_h -> strenv_h -> bool) (int_STRENV_H $0))
   (strenv_h_abs (JOINT_int_STRENV_H
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   $0))))))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_SOME_int_h_DEF),
  [],
  `((! :(int_h -> bool) -> bool) (\(x1 :int_h).
   (((= :int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_SOME_int_h $0))
   (int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   (JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_SOME_int_h
   $0)))))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NONE_int_h_DEF),
  [],
  `(((= :int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NONE_int_h)
   (int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NONE_int_h))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_DEF),
  [],
  `((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   (JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   $0))))))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_DEF),
  [],
  `((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x2 :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1) $0))
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   $1))
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   $0))))))))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_DEF),
  [],
  `(((= :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h)
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h))`),
 ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_funid_funclos_h_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funclos_h -> bool) -> bool) (\(x2 :funclos_h).
   (((= :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   ((int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_funid_funclos_h
   $1) $0))
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_funid_funclos_h
   $1) (funclos_h_rep $0))))))))`),
 ((int_FUNENV_H_DEF),
  [],
  `((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x1 :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :funenv_h -> funenv_h -> bool) (int_FUNENV_H $0))
   (funenv_h_abs (JOINT_int_FUNENV_H
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   $0))))))`),
 ((int_FUNCLOS_H_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(x4 :int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(basis_h -> bool) -> bool) (\(x5 :basis_h).
   (((= :funclos_h -> funclos_h -> bool) (((((int_FUNCLOS_H $4) $3)
   $2) $1) $0)) (funclos_h_abs (((((JOINT_int_FUNCLOS_H $4) $3) $2)
   (int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep $1))
   (basis_h_rep $0))))))))))))))`),
 ((int_ENV_H_DEF),
  [],
  `((! :(funenv_h -> bool) -> bool) (\(x1 :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2 :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :env_h -> env_h -> bool) ((((int_ENV_H $3) $2) $1) $0))
   (env_h_abs ((((JOINT_int_ENV_H (funenv_h_rep $3)) (strenv_h_rep
   $2)) $1) $0)))))))))))`),
 ((int_BASIS_H_DEF),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(x1 :sigenv_h).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :basis_h -> basis_h -> bool) ((int_BASIS_H $1) $0))
   (basis_h_abs ((JOINT_int_BASIS_H $1) (env_h_rep $0))))))))`),
 ((funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_REP_ABS),
  [],
  `((/\
   ((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(a :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   $0))) $0))))
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(r :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 6)) $0))
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   $0))) $0)))))`),
 ((funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_TY_DEF),
  [],
  `((? :((funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
        bool) -> bool)
   (\(rep :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
           joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((TYPE_DEFINITION :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       bool) ->
                       (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
                       bool)
   (\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 6))) $0)))`),
 ((funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_REP_ABS),
  [],
  `((/\
   ((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(a :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   $0))) $0))))
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(r :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 7)) $0))
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   $0))) $0)))))`),
 ((funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_TY_DEF),
  [],
  `((? :((funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
        bool) -> bool)
   (\(rep :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
           joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((TYPE_DEFINITION :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       bool) ->
                       (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
                       bool)
   (\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 7))) $0)))`),
 ((int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_REP_ABS),
  [],
  `((/\
   ((! :(int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(a :int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   (int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep $0)))
   $0))))
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(r :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 8)) $0))
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   (int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs $0)))
   $0)))))`),
 ((int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_TY_DEF),
  [],
  `((? :((int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
        bool) -> bool)
   (\(rep :int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
           joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((TYPE_DEFINITION :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       bool) ->
                       (int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
                       bool)
   (\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 8))) $0)))`),
 ((strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_REP_ABS),
  [],
  `((/\
   ((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(a :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   $0))) $0))))
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(r :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 11)) $0))
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   $0))) $0)))))`),
 ((strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_TY_DEF),
  [],
  `((? :((strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
        bool) -> bool)
   (\(rep :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
           joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((TYPE_DEFINITION :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       bool) ->
                       (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
                       bool)
   (\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 11))) $0)))`),
 ((strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_REP_ABS),
  [],
  `((/\
   ((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(a :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   $0))) $0))))
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(r :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 12)) $0))
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   $0))) $0)))))`),
 ((strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_TY_DEF),
  [],
  `((? :((strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
        bool) -> bool)
   (\(rep :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
           joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((TYPE_DEFINITION :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       bool) ->
                       (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
                       bool)
   (\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 12))) $0)))`),
 ((strenv_h_REP_ABS),
  [],
  `((/\ ((! :(strenv_h -> bool) -> bool) (\(a :strenv_h).
   (((= :strenv_h -> strenv_h -> bool) (strenv_h_abs (strenv_h_rep
   $0))) $0))))
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(r :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 9)) $0))
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool) (strenv_h_rep (strenv_h_abs $0))) $0)))))`),
 ((strenv_h_TY_DEF),
  [],
  `((? :((strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
        bool) -> bool)
   (\(rep :strenv_h ->
           joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((TYPE_DEFINITION :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       bool) ->
                       (strenv_h ->
                       joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
                       bool)
   (\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 9))) $0)))`),
 ((funenv_h_REP_ABS),
  [],
  `((/\ ((! :(funenv_h -> bool) -> bool) (\(a :funenv_h).
   (((= :funenv_h -> funenv_h -> bool) (funenv_h_abs (funenv_h_rep
   $0))) $0))))
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(r :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 4)) $0))
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool) (funenv_h_rep (funenv_h_abs $0))) $0)))))`),
 ((funenv_h_TY_DEF),
  [],
  `((? :((funenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
        bool) -> bool)
   (\(rep :funenv_h ->
           joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((TYPE_DEFINITION :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       bool) ->
                       (funenv_h ->
                       joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
                       bool)
   (\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 4))) $0)))`),
 ((env_h_REP_ABS),
  [],
  `((/\ ((! :(env_h -> bool) -> bool) (\(a :env_h).
   (((= :env_h -> env_h -> bool) (env_h_abs (env_h_rep $0))) $0))))
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(r :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 2)) $0))
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool) (env_h_rep (env_h_abs $0))) $0)))))`),
 ((env_h_TY_DEF),
  [],
  `((? :((env_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
        bool) -> bool)
   (\(rep :env_h ->
           joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((TYPE_DEFINITION :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       bool) ->
                       (env_h ->
                       joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
                       bool)
   (\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 2))) $0)))`),
 ((basis_h_REP_ABS),
  [],
  `((/\ ((! :(basis_h -> bool) -> bool) (\(a :basis_h).
   (((= :basis_h -> basis_h -> bool) (basis_h_abs (basis_h_rep $0)))
   $0))))
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(r :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 1)) $0))
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool) (basis_h_rep (basis_h_abs $0))) $0)))))`),
 ((basis_h_TY_DEF),
  [],
  `((? :((basis_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
        bool) -> bool)
   (\(rep :basis_h ->
           joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((TYPE_DEFINITION :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       bool) ->
                       (basis_h ->
                       joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
                       bool)
   (\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 1))) $0)))`),
 ((funclos_h_REP_ABS),
  [],
  `((/\ ((! :(funclos_h -> bool) -> bool) (\(a :funclos_h).
   (((= :funclos_h -> funclos_h -> bool) (funclos_h_abs (funclos_h_rep
   $0))) $0))))
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(r :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 3)) $0))
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool) (funclos_h_rep (funclos_h_abs $0))) $0)))))`),
 ((funclos_h_TY_DEF),
  [],
  `((? :((funclos_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
        bool) -> bool)
   (\(rep :funclos_h ->
           joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((TYPE_DEFINITION :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       bool) ->
                       (funclos_h ->
                       joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
                       bool)
   (\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 3))) $0)))`),
 ((funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_REP_ABS),
  [],
  `((/\
   ((! :(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(a :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   $0))) $0))))
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(r :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 5)) $0))
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   $0))) $0)))))`),
 ((funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_TY_DEF),
  [],
  `((? :((funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
        bool) -> bool)
   (\(rep :funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
           joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((TYPE_DEFINITION :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       bool) ->
                       (funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
                       bool)
   (\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 5))) $0)))`),
 ((strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_REP_ABS),
  [],
  `((/\
   ((! :(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(a :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   $0))) $0))))
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(r :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 10)) $0))
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_rep
   (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_abs
   $0))) $0)))))`),
 ((strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_TY_DEF),
  [],
  `((? :((strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
        bool) -> bool)
   (\(rep :strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
           joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((TYPE_DEFINITION :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       bool) ->
                       (strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h) ->
                       bool)
   (\(x :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 10))) $0)))`),
 ((joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select_DEF),
  [],
  `((/\ ((! :(sigenv_h -> bool) -> bool) (\(s :sigenv_h).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   ((JOINT_int_BASIS_H $1) $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 2)) 1) 0))))))) ((/\
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(varenv -> bool) -> bool) (\(v' :varenv).
   ((! :(exconenv -> bool) -> bool) (\(e :exconenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   ((((JOINT_int_ENV_H $3) $2) $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $3)) 4)) (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $2)) 9))) 2) 0))))))))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(s0 :strid). ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(strexp_h -> bool) -> bool) (\(s1 :strexp_h).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   (((((JOINT_int_FUNCLOS_H $4) $3) $2) $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $1)) 8)) (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 1))) 3) 0))))))))))))) ((/\
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   (JOINT_int_FUNENV_H $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 7)) 4) 0))))) ((/\ ((! :(funid -> bool) -> bool)
   (\(f' :funid).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_funid_funclos_h
   $1) $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 3)) 5) 0))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h))
   6)) ((/\
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1) $0))) ((((COND :bool -> num -> num -> num) ((/\
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $1)) 5)) (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 6))) 6) 0))))))) ((/\
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   (JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 6)) 7) 0))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NONE_int_h))
   8)) ((/\ ((! :(int_h -> bool) -> bool) (\(i :int_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   (JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_SOME_int_h
   $0))) 8)))) ((/\
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   (JOINT_int_STRENV_H $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 12)) 9) 0))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(s :strid).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_strid_env_h
   $1) $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 2)) 10) 0))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h))
   11)) ((/\
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1) $0))) ((((COND :bool -> num -> num -> num) ((/\
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $1)) 10)) (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 11))) 11) 0)))))))
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   (JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_select
   $0)) 11)) 12) 0))))))))))))))))))`),
 ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_DEF),
  [],
  `((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))
   (ABS_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((Node :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INR :int_h + one + strid + one + one + one ->
          one + int_h + one + strid + one + one + one)
   ((INR :one + strid + one + one + one ->
          int_h + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INR :one + one + one -> strid + one + one + one)
   ((INR :one + one -> one + one + one) ((INR :one -> one + one)
   one)))))))))))))))
   (((CONS :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list)
   (REP_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))
   (NIL :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree list)))))))`),
 ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_DEF),
  [],
  `((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1) $0))
   (ABS_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((Node :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INR :int_h + one + strid + one + one + one ->
          one + int_h + one + strid + one + one + one)
   ((INR :one + strid + one + one + one ->
          int_h + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INR :one + one + one -> strid + one + one + one)
   ((INR :one + one -> one + one + one) ((INL :one -> one + one)
   one)))))))))))))))
   (((CONS :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list)
   (REP_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1))
   (((CONS :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list)
   (REP_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))
   (NIL :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree list))))))))))`),
 ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_DEF),
  [],
  `(((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h)
   (ABS_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((Node :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INR :int_h + one + strid + one + one + one ->
          one + int_h + one + strid + one + one + one)
   ((INR :one + strid + one + one + one ->
          int_h + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INR :one + one + one -> strid + one + one + one)
   ((INL :one -> one + one + one) one))))))))))))))
   (NIL :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree list))))`),
 ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_strid_env_h_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_strid_env_h
   $1) $0))
   (ABS_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((Node :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INR :int_h + one + strid + one + one + one ->
          one + int_h + one + strid + one + one + one)
   ((INR :one + strid + one + one + one ->
          int_h + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INL :strid -> strid + one + one + one) $1)))))))))))))
   (((CONS :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list)
   (REP_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))
   (NIL :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree list)))))))))`),
 ((JOINT_int_STRENV_H_DEF),
  [],
  `((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool) (JOINT_int_STRENV_H $0))
   (ABS_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((Node :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INR :int_h + one + strid + one + one + one ->
          one + int_h + one + strid + one + one + one)
   ((INR :one + strid + one + one + one ->
          int_h + one + strid + one + one + one)
   ((INL :one -> one + strid + one + one + one) one))))))))))))
   (((CONS :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list)
   (REP_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))
   (NIL :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree list)))))))`),
 ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_SOME_int_h_DEF),
  [],
  `((! :(int_h -> bool) -> bool) (\(i :int_h).
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_SOME_int_h
   $0))
   (ABS_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((Node :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INR :int_h + one + strid + one + one + one ->
          one + int_h + one + strid + one + one + one)
   ((INL :int_h -> int_h + one + strid + one + one + one)
   $0)))))))))))
   (NIL :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree list))))))`),
 ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NONE_int_h_DEF),
  [],
  `(((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NONE_int_h)
   (ABS_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((Node :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INL :one -> one + int_h + one + strid + one + one + one)
   one))))))))))
   (NIL :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree list))))`),
 ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_DEF),
  [],
  `((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))
   (ABS_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((Node :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INL :one -> one + one + int_h + one + strid + one + one + one)
   one)))))))))
   (((CONS :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list)
   (REP_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))
   (NIL :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree list)))))))`),
 ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_DEF),
  [],
  `((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1) $0))
   (ABS_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((Node :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INL :one ->
          one + one + one + int_h + one + strid + one + one + one)
   one))))))))
   (((CONS :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list)
   (REP_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1))
   (((CONS :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list)
   (REP_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))
   (NIL :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree list))))))))))`),
 ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_DEF),
  [],
  `(((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h)
   (ABS_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((Node :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INL :one ->
          one + one + one + one + int_h + one + strid + one + one +
          one) one)))))))
   (NIL :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree list))))`),
 ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_funid_funclos_h_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(f' :funid).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_funid_funclos_h
   $1) $0))
   (ABS_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((Node :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INL :funid ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one) $1))))))
   (((CONS :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list)
   (REP_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))
   (NIL :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree list)))))))))`),
 ((JOINT_int_FUNENV_H_DEF),
  [],
  `((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool) (JOINT_int_FUNENV_H $0))
   (ABS_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((Node :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INL :one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one) one)))))
   (((CONS :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list)
   (REP_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))
   (NIL :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree list)))))))`),
 ((JOINT_int_FUNCLOS_H_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(s0 :strid).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(strexp_h -> bool) -> bool) (\(s1 :strexp_h).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool) (((((JOINT_int_FUNCLOS_H $4) $3) $2) $1) $0))
   (ABS_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((Node :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INL :strid # int_h # strexp_h ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   (((, :strid -> int_h # strexp_h -> strid # int_h # strexp_h) $4)
   (((, :int_h -> strexp_h -> int_h # strexp_h) $3) $2))))))
   (((CONS :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list)
   (REP_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1))
   (((CONS :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list)
   (REP_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))
   (NIL :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree list))))))))))))))))`),
 ((JOINT_int_ENV_H_DEF),
  [],
  `((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(varenv -> bool) -> bool) (\(v' :varenv).
   ((! :(exconenv -> bool) -> bool) (\(e :exconenv).
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool) ((((JOINT_int_ENV_H $3) $2) $1) $0))
   (ABS_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((Node :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INL :varenv # exconenv ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one) (((, :varenv -> exconenv -> varenv # exconenv) $1)
   $0))))
   (((CONS :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list)
   (REP_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $3))
   (((CONS :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list)
   (REP_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $2))
   (NIL :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree list))))))))))))))`),
 ((JOINT_int_BASIS_H_DEF),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(s :sigenv_h).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool) ((JOINT_int_BASIS_H $1) $0))
   (ABS_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (((Node :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree)
   ((INL :sigenv_h ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one) $1))
   (((CONS :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list ->
            (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one) ltree list)
   (REP_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))
   (NIL :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree list)))))))))`),
 ((joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_ISO_DEF),
  [],
  `((/\
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(a :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         bool)
   (ABS_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (REP_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))) $0))))
   ((! :((sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree -> bool) -> bool)
   (\(r :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree). (((= :bool -> bool -> bool)
   (((TRP :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
            one + funid + one + one + one + one + int_h + one +
            strid + one + one + one ->
           (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
           one + funid + one + one + one + one + int_h + one + strid +
           one + one + one) ltree list -> bool) ->
           (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
           one + funid + one + one + one + one + int_h + one + strid +
           one + one + one) ltree -> bool)
   (\(v :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one).
   (\(tl :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one) ltree list). ((\/ ((/\
   ((? :(sigenv_h -> bool) -> bool) (\(s :sigenv_h).
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $2)
   ((INL :sigenv_h ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(varenv -> bool) -> bool) (\(v :varenv).
   ((? :(exconenv -> bool) -> bool) (\(e :exconenv).
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $3)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INL :varenv # exconenv ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one) (((, :varenv -> exconenv -> varenv # exconenv) $1)
   $0))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   ((? :(strid -> bool) -> bool) (\(s0 :strid).
   ((? :(int_h -> bool) -> bool) (\(i :int_h).
   ((? :(strexp_h -> bool) -> bool) (\(s1 :strexp_h).
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $4)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INL :strid # int_h # strexp_h ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   (((, :strid -> int_h # strexp_h -> strid # int_h # strexp_h) $2)
   (((, :int_h -> strexp_h -> int_h # strexp_h) $1) $0)))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $1)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INL :one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one) one)))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(funid -> bool) -> bool) (\(f :funid).
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $2)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INL :funid ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one) $0))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $1)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INL :one ->
          one + one + one + one + int_h + one + strid + one + one +
          one) one)))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) 0))) ((\/ ((/\
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $1)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INL :one ->
          one + one + one + int_h + one + strid + one + one + one)
   one))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $1)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INL :one -> one + one + int_h + one + strid + one + one + one)
   one)))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $1)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INL :one -> one + int_h + one + strid + one + one + one)
   one))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) 0))) ((\/ ((/\
   ((? :(int_h -> bool) -> bool) (\(i :int_h).
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $2)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INR :int_h + one + strid + one + one + one ->
          one + int_h + one + strid + one + one + one)
   ((INL :int_h -> int_h + one + strid + one + one + one)
   $0)))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) 0))) ((\/ ((/\
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $1)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INR :int_h + one + strid + one + one + one ->
          one + int_h + one + strid + one + one + one)
   ((INR :one + strid + one + one + one ->
          int_h + one + strid + one + one + one)
   ((INL :one -> one + strid + one + one + one) one)))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(strid -> bool) -> bool) (\(s :strid).
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $2)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INR :int_h + one + strid + one + one + one ->
          one + int_h + one + strid + one + one + one)
   ((INR :one + strid + one + one + one ->
          int_h + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INL :strid -> strid + one + one + one) $0))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $1)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INR :int_h + one + strid + one + one + one ->
          one + int_h + one + strid + one + one + one)
   ((INR :one + strid + one + one + one ->
          int_h + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INR :one + one + one -> strid + one + one + one)
   ((INL :one -> one + one + one) one)))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) 0))) ((\/ ((/\
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $1)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INR :int_h + one + strid + one + one + one ->
          one + int_h + one + strid + one + one + one)
   ((INR :one + strid + one + one + one ->
          int_h + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INR :one + one + one -> strid + one + one + one)
   ((INR :one + one -> one + one + one) ((INL :one -> one + one)
   one)))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC (SUC 0))))) ((/\
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $1)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INR :int_h + one + strid + one + one + one ->
          one + int_h + one + strid + one + one + one)
   ((INR :one + strid + one + one + one ->
          int_h + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INR :one + one + one -> strid + one + one + one)
   ((INR :one + one -> one + one + one) ((INR :one -> one + one)
   one)))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC 0)))))))))))))))))))) $0))
   (((= :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree ->
         (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree -> bool)
   (REP_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   (ABS_joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))) $0)))))`),
 ((joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_TY_DEF),
  [],
  `((? :((joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one) ltree) -> bool) -> bool)
   (\(rep :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
           (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
           one + funid + one + one + one + one + int_h + one + strid +
           one + one + one) ltree).
   (((TYPE_DEFINITION :((sigenv_h + varenv # exconenv +
                        strid # int_h # strexp_h + one + funid + one +
                        one + one + one + int_h + one + strid + one +
                        one + one) ltree -> bool) ->
                       (joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
                       (sigenv_h + varenv # exconenv +
                       strid # int_h # strexp_h + one + funid + one +
                       one + one + one + int_h + one + strid + one +
                       one + one) ltree) -> bool)
   ((TRP :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
           one + funid + one + one + one + one + int_h + one + strid +
           one + one + one ->
          (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one) ltree list -> bool) ->
          (sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one) ltree -> bool)
   (\(v :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one).
   (\(tl :(sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one) ltree list). ((\/ ((/\
   ((? :(sigenv_h -> bool) -> bool) (\(s :sigenv_h).
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $2)
   ((INL :sigenv_h ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(varenv -> bool) -> bool) (\(v :varenv).
   ((? :(exconenv -> bool) -> bool) (\(e :exconenv).
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $3)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INL :varenv # exconenv ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one) (((, :varenv -> exconenv -> varenv # exconenv) $1)
   $0))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   ((? :(strid -> bool) -> bool) (\(s0 :strid).
   ((? :(int_h -> bool) -> bool) (\(i :int_h).
   ((? :(strexp_h -> bool) -> bool) (\(s1 :strexp_h).
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $4)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INL :strid # int_h # strexp_h ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   (((, :strid -> int_h # strexp_h -> strid # int_h # strexp_h) $2)
   (((, :int_h -> strexp_h -> int_h # strexp_h) $1) $0)))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $1)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INL :one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one) one)))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(funid -> bool) -> bool) (\(f :funid).
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $2)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INL :funid ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one) $0))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $1)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INL :one ->
          one + one + one + one + int_h + one + strid + one + one +
          one) one)))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) 0))) ((\/ ((/\
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $1)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INL :one ->
          one + one + one + int_h + one + strid + one + one + one)
   one))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $1)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INL :one -> one + one + int_h + one + strid + one + one + one)
   one)))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $1)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INL :one -> one + int_h + one + strid + one + one + one)
   one))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) 0))) ((\/ ((/\
   ((? :(int_h -> bool) -> bool) (\(i :int_h).
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $2)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INR :int_h + one + strid + one + one + one ->
          one + int_h + one + strid + one + one + one)
   ((INL :int_h -> int_h + one + strid + one + one + one)
   $0)))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) 0))) ((\/ ((/\
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $1)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INR :int_h + one + strid + one + one + one ->
          one + int_h + one + strid + one + one + one)
   ((INR :one + strid + one + one + one ->
          int_h + one + strid + one + one + one)
   ((INL :one -> one + strid + one + one + one) one)))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(strid -> bool) -> bool) (\(s :strid).
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $2)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INR :int_h + one + strid + one + one + one ->
          one + int_h + one + strid + one + one + one)
   ((INR :one + strid + one + one + one ->
          int_h + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INL :strid -> strid + one + one + one) $0))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $1)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INR :int_h + one + strid + one + one + one ->
          one + int_h + one + strid + one + one + one)
   ((INR :one + strid + one + one + one ->
          int_h + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INR :one + one + one -> strid + one + one + one)
   ((INL :one -> one + one + one) one)))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) 0))) ((\/ ((/\
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $1)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INR :int_h + one + strid + one + one + one ->
          one + int_h + one + strid + one + one + one)
   ((INR :one + strid + one + one + one ->
          int_h + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INR :one + one + one -> strid + one + one + one)
   ((INR :one + one -> one + one + one) ((INL :one -> one + one)
   one)))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC (SUC 0))))) ((/\
   (((= :sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one ->
         sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
         one + funid + one + one + one + one + int_h + one + strid +
         one + one + one -> bool) $1)
   ((INR :varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one ->
          sigenv_h + varenv # exconenv + strid # int_h # strexp_h +
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one ->
          varenv # exconenv + strid # int_h # strexp_h + one + funid +
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + funid + one + one + one + one + int_h + one + strid +
          one + one + one ->
          strid # int_h # strexp_h + one + funid + one + one + one +
          one + int_h + one + strid + one + one + one)
   ((INR :funid + one + one + one + one + int_h + one + strid + one +
          one + one ->
          one + funid + one + one + one + one + int_h + one + strid +
          one + one + one)
   ((INR :one + one + one + one + int_h + one + strid + one + one +
          one ->
          funid + one + one + one + one + int_h + one + strid + one +
          one + one)
   ((INR :one + one + one + int_h + one + strid + one + one + one ->
          one + one + one + one + int_h + one + strid + one + one +
          one)
   ((INR :one + one + int_h + one + strid + one + one + one ->
          one + one + one + int_h + one + strid + one + one + one)
   ((INR :one + int_h + one + strid + one + one + one ->
          one + one + int_h + one + strid + one + one + one)
   ((INR :int_h + one + strid + one + one + one ->
          one + int_h + one + strid + one + one + one)
   ((INR :one + strid + one + one + one ->
          int_h + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INR :one + one + one -> strid + one + one + one)
   ((INR :one + one -> one + one + one) ((INR :one -> one + one)
   one)))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h + varenv # exconenv +
             strid # int_h # strexp_h + one + funid + one + one +
             one + one + int_h + one + strid + one + one + one) ltree
             list -> num) $0)) (SUC 0))))))))))))))))))))) $0)))`),
 ((INTBASIS_H_DEF),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(s0 :sigenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(s1 :strintenv_h).
   ((! :(funintenv_h -> bool) -> bool) (\(f' :funintenv_h).
   (((= :intbasis_h -> intbasis_h -> bool) (((INTBASIS_H $2) $1) $0))
   (ABS_intbasis_h
   (((Node :sigenv_h # strintenv_h # funintenv_h ->
            (sigenv_h # strintenv_h # funintenv_h) ltree list ->
            (sigenv_h # strintenv_h # funintenv_h) ltree)
   (((, :sigenv_h -> strintenv_h # funintenv_h ->
         sigenv_h # strintenv_h # funintenv_h) $2)
   (((, :strintenv_h -> funintenv_h -> strintenv_h # funintenv_h) $1)
   $0)))
   (NIL :(sigenv_h # strintenv_h # funintenv_h) ltree
         list))))))))))`),
 ((intbasis_h_ISO_DEF),
  [],
  `((/\ ((! :(intbasis_h -> bool) -> bool) (\(a :intbasis_h).
   (((= :intbasis_h -> intbasis_h -> bool) (ABS_intbasis_h
   (REP_intbasis_h $0))) $0))))
   ((! :((sigenv_h # strintenv_h # funintenv_h) ltree -> bool) ->
        bool) (\(r :(sigenv_h # strintenv_h # funintenv_h) ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(sigenv_h # strintenv_h # funintenv_h ->
           (sigenv_h # strintenv_h # funintenv_h) ltree list ->
           bool) -> (sigenv_h # strintenv_h # funintenv_h) ltree ->
           bool) (\(v :sigenv_h # strintenv_h # funintenv_h).
   (\(tl :(sigenv_h # strintenv_h # funintenv_h) ltree list). ((/\
   ((? :(sigenv_h -> bool) -> bool) (\(s0 :sigenv_h).
   ((? :(strintenv_h -> bool) -> bool) (\(s1 :strintenv_h).
   ((? :(funintenv_h -> bool) -> bool) (\(f :funintenv_h).
   (((= :sigenv_h # strintenv_h # funintenv_h ->
         sigenv_h # strintenv_h # funintenv_h -> bool) $4)
   (((, :sigenv_h -> strintenv_h # funintenv_h ->
         sigenv_h # strintenv_h # funintenv_h) $2)
   (((, :strintenv_h -> funintenv_h -> strintenv_h # funintenv_h) $1)
   $0)))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h # strintenv_h # funintenv_h) ltree list -> num)
   $0)) 0))))) $0))
   (((= :(sigenv_h # strintenv_h # funintenv_h) ltree ->
         (sigenv_h # strintenv_h # funintenv_h) ltree -> bool)
   (REP_intbasis_h (ABS_intbasis_h $0))) $0)))))`),
 ((intbasis_h_TY_DEF),
  [],
  `((? :((intbasis_h ->
         (sigenv_h # strintenv_h # funintenv_h) ltree) -> bool) ->
        bool)
   (\(rep :intbasis_h ->
           (sigenv_h # strintenv_h # funintenv_h) ltree).
   (((TYPE_DEFINITION :((sigenv_h # strintenv_h # funintenv_h)
                        ltree -> bool) ->
                       (intbasis_h ->
                       (sigenv_h # strintenv_h # funintenv_h)
                       ltree) -> bool)
   ((TRP :(sigenv_h # strintenv_h # funintenv_h ->
          (sigenv_h # strintenv_h # funintenv_h) ltree list ->
          bool) -> (sigenv_h # strintenv_h # funintenv_h) ltree ->
          bool) (\(v :sigenv_h # strintenv_h # funintenv_h).
   (\(tl :(sigenv_h # strintenv_h # funintenv_h) ltree list). ((/\
   ((? :(sigenv_h -> bool) -> bool) (\(s0 :sigenv_h).
   ((? :(strintenv_h -> bool) -> bool) (\(s1 :strintenv_h).
   ((? :(funintenv_h -> bool) -> bool) (\(f :funintenv_h).
   (((= :sigenv_h # strintenv_h # funintenv_h ->
         sigenv_h # strintenv_h # funintenv_h -> bool) $4)
   (((, :sigenv_h -> strintenv_h # funintenv_h ->
         sigenv_h # strintenv_h # funintenv_h) $2)
   (((, :strintenv_h -> funintenv_h -> strintenv_h # funintenv_h) $1)
   $0)))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv_h # strintenv_h # funintenv_h) ltree list -> num)
   $0)) 0)))))) $0)))`),
 ((SIGENV_H_DEF),
  [],
  `((! :((sigid -> int_h lift) -> bool) -> bool)
   (\(f' :sigid -> int_h lift). (((= :sigenv_h -> sigenv_h -> bool)
   (SIGENV_H $0)) (ABS_sigenv_h
   (((Node :(sigid -> int_h lift) ->
            (sigid -> int_h lift) ltree list ->
            (sigid -> int_h lift) ltree) $0)
   (NIL :(sigid -> int_h lift) ltree list))))))`),
 ((sigenv_h_ISO_DEF),
  [],
  `((/\ ((! :(sigenv_h -> bool) -> bool) (\(a :sigenv_h).
   (((= :sigenv_h -> sigenv_h -> bool) (ABS_sigenv_h (REP_sigenv_h
   $0))) $0)))) ((! :((sigid -> int_h lift) ltree -> bool) -> bool)
   (\(r :(sigid -> int_h lift) ltree). (((= :bool -> bool -> bool)
   (((TRP :((sigid -> int_h lift) ->
           (sigid -> int_h lift) ltree list -> bool) ->
           (sigid -> int_h lift) ltree -> bool)
   (\(v :sigid -> int_h lift).
   (\(tl :(sigid -> int_h lift) ltree list). ((/\
   ((? :((sigid -> int_h lift) -> bool) -> bool)
   (\(f :sigid -> int_h lift).
   (((= :(sigid -> int_h lift) -> (sigid -> int_h lift) -> bool) $2)
   $0)))) (((= :num -> num -> bool)
   ((LENGTH :(sigid -> int_h lift) ltree list -> num) $0)) 0))))) $0))
   (((= :(sigid -> int_h lift) ltree -> (sigid -> int_h lift) ltree ->
         bool) (REP_sigenv_h (ABS_sigenv_h $0))) $0)))))`),
 ((sigenv_h_TY_DEF),
  [],
  `((? :((sigenv_h -> (sigid -> int_h lift) ltree) -> bool) -> bool)
   (\(rep :sigenv_h -> (sigid -> int_h lift) ltree).
   (((TYPE_DEFINITION :((sigid -> int_h lift) ltree -> bool) ->
                       (sigenv_h -> (sigid -> int_h lift) ltree) ->
                       bool)
   ((TRP :((sigid -> int_h lift) ->
          (sigid -> int_h lift) ltree list -> bool) ->
          (sigid -> int_h lift) ltree -> bool)
   (\(v :sigid -> int_h lift).
   (\(tl :(sigid -> int_h lift) ltree list). ((/\
   ((? :((sigid -> int_h lift) -> bool) -> bool)
   (\(f :sigid -> int_h lift).
   (((= :(sigid -> int_h lift) -> (sigid -> int_h lift) -> bool) $2)
   $0)))) (((= :num -> num -> bool)
   ((LENGTH :(sigid -> int_h lift) ltree list -> num) $0)) 0))))))
   $0)))`),
 ((int_STRINTENV_H_arg_DEF),
  [],
  `((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x1 :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h).
   (((= :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
         strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
         bool) (int_STRINTENV_H_arg (int_STRINTENV_H $0))) $0)))`),
 ((int_funintenv_h_int_h_strintenv_h_FINMAP_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_arg_DEF),
  [],
  `((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x1 :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         bool)
   (int_funintenv_h_int_h_strintenv_h_FINMAP_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_arg
   (int_funintenv_h_int_h_strintenv_h_FINMAP_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0))) $0)))`),
 ((int_funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h_arg2_DEF),
  [],
  `((/\
   ((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool) ->
        bool) (\(x1 :strid_int_h_prod_funintenv_h_int_h_strintenv_h).
   ((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x2 :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         bool)
   (int_funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h_arg2
   ((int_funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h
   $1) $0))) $0))))))
   (((= :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         bool)
   (int_funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h_arg2
   int_funintenv_h_int_h_strintenv_h_NIL_strid_int_h_prod_funintenv_h_int_h_strintenv_h))
   ((@ :(strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) ->
        strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h)
   (\(x :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   T))))`),
 ((int_funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h_arg1_DEF),
  [],
  `((/\
   ((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool) ->
        bool) (\(x1 :strid_int_h_prod_funintenv_h_int_h_strintenv_h).
   ((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x2 :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :strid_int_h_prod_funintenv_h_int_h_strintenv_h ->
         strid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool)
   (int_funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h_arg1
   ((int_funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h
   $1) $0))) $1))))))
   (((= :strid_int_h_prod_funintenv_h_int_h_strintenv_h ->
         strid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool)
   (int_funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h_arg1
   int_funintenv_h_int_h_strintenv_h_NIL_strid_int_h_prod_funintenv_h_int_h_strintenv_h))
   ((@ :(strid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool) ->
        strid_int_h_prod_funintenv_h_int_h_strintenv_h)
   (\(x :strid_int_h_prod_funintenv_h_int_h_strintenv_h). T))))`),
 ((int_funintenv_h_int_h_strintenv_h_ch44_strid_int_h_arg2_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   (((= :int_h -> int_h -> bool)
   (int_funintenv_h_int_h_strintenv_h_ch44_strid_int_h_arg2
   ((int_funintenv_h_int_h_strintenv_h_ch44_strid_int_h $1) $0)))
   $0)))))`),
 ((int_funintenv_h_int_h_strintenv_h_ch44_strid_int_h_arg1_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   (((= :strid -> strid -> bool)
   (int_funintenv_h_int_h_strintenv_h_ch44_strid_int_h_arg1
   ((int_funintenv_h_int_h_strintenv_h_ch44_strid_int_h $1) $0)))
   $1)))))`),
 ((int_INT_H_arg4_DEF),
  [],
  `((! :(funintenv_h -> bool) -> bool) (\(x1 :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(x2 :strintenv_h).
   ((! :(var set -> bool) -> bool) (\(x3 :var set).
   ((! :(excon set -> bool) -> bool) (\(x4 :excon set).
   (((= :excon set -> excon set -> bool) (int_INT_H_arg4 ((((int_INT_H
   $3) $2) $1) $0))) $0)))))))))`),
 ((int_INT_H_arg3_DEF),
  [],
  `((! :(funintenv_h -> bool) -> bool) (\(x1 :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(x2 :strintenv_h).
   ((! :(var set -> bool) -> bool) (\(x3 :var set).
   ((! :(excon set -> bool) -> bool) (\(x4 :excon set).
   (((= :var set -> var set -> bool) (int_INT_H_arg3 ((((int_INT_H $3)
   $2) $1) $0))) $1)))))))))`),
 ((int_INT_H_arg2_DEF),
  [],
  `((! :(funintenv_h -> bool) -> bool) (\(x1 :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(x2 :strintenv_h).
   ((! :(var set -> bool) -> bool) (\(x3 :var set).
   ((! :(excon set -> bool) -> bool) (\(x4 :excon set).
   (((= :strintenv_h -> strintenv_h -> bool) (int_INT_H_arg2
   ((((int_INT_H $3) $2) $1) $0))) $2)))))))))`),
 ((int_INT_H_arg1_DEF),
  [],
  `((! :(funintenv_h -> bool) -> bool) (\(x1 :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(x2 :strintenv_h).
   ((! :(var set -> bool) -> bool) (\(x3 :var set).
   ((! :(excon set -> bool) -> bool) (\(x4 :excon set).
   (((= :funintenv_h -> funintenv_h -> bool) (int_INT_H_arg1
   ((((int_INT_H $3) $2) $1) $0))) $3)))))))))`),
 ((int_FUNINTENV_H_arg_DEF),
  [],
  `((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x1 :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h).
   (((= :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
         funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
         bool) (int_FUNINTENV_H_arg (int_FUNINTENV_H $0))) $0)))`),
 ((int_funintenv_h_int_h_strintenv_h_FINMAP_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_arg_DEF),
  [],
  `((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x1 :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         bool)
   (int_funintenv_h_int_h_strintenv_h_FINMAP_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_arg
   (int_funintenv_h_int_h_strintenv_h_FINMAP_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0))) $0)))`),
 ((int_funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h_arg2_DEF),
  [],
  `((/\
   ((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool) ->
        bool) (\(x1 :funid_int_h_prod_funintenv_h_int_h_strintenv_h).
   ((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x2 :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         bool)
   (int_funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h_arg2
   ((int_funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h
   $1) $0))) $0))))))
   (((= :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         bool)
   (int_funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h_arg2
   int_funintenv_h_int_h_strintenv_h_NIL_funid_int_h_prod_funintenv_h_int_h_strintenv_h))
   ((@ :(funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) ->
        funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h)
   (\(x :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   T))))`),
 ((int_funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h_arg1_DEF),
  [],
  `((/\
   ((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool) ->
        bool) (\(x1 :funid_int_h_prod_funintenv_h_int_h_strintenv_h).
   ((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x2 :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :funid_int_h_prod_funintenv_h_int_h_strintenv_h ->
         funid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool)
   (int_funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h_arg1
   ((int_funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h
   $1) $0))) $1))))))
   (((= :funid_int_h_prod_funintenv_h_int_h_strintenv_h ->
         funid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool)
   (int_funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h_arg1
   int_funintenv_h_int_h_strintenv_h_NIL_funid_int_h_prod_funintenv_h_int_h_strintenv_h))
   ((@ :(funid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool) ->
        funid_int_h_prod_funintenv_h_int_h_strintenv_h)
   (\(x :funid_int_h_prod_funintenv_h_int_h_strintenv_h). T))))`),
 ((int_funintenv_h_int_h_strintenv_h_ch44_funid_int_h_arg2_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   (((= :int_h -> int_h -> bool)
   (int_funintenv_h_int_h_strintenv_h_ch44_funid_int_h_arg2
   ((int_funintenv_h_int_h_strintenv_h_ch44_funid_int_h $1) $0)))
   $0)))))`),
 ((int_funintenv_h_int_h_strintenv_h_ch44_funid_int_h_arg1_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   (((= :funid -> funid -> bool)
   (int_funintenv_h_int_h_strintenv_h_ch44_funid_int_h_arg1
   ((int_funintenv_h_int_h_strintenv_h_ch44_funid_int_h $1) $0)))
   $1)))))`),
 ((dist_aux_ftn_funid_int_h_prod_funintenv_h_int_h_strintenv_h_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   (((= :num -> num -> bool)
   (dist_aux_ftn_funid_int_h_prod_funintenv_h_int_h_strintenv_h
   ((int_funintenv_h_int_h_strintenv_h_ch44_funid_int_h $1) $0)))
   0)))))) ((/\ (((= :num -> num -> bool)
   (dist_aux_ftn_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   int_funintenv_h_int_h_strintenv_h_NIL_funid_int_h_prod_funintenv_h_int_h_strintenv_h))
   1)) ((/\
   ((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool) ->
        bool) (\(x1 :funid_int_h_prod_funintenv_h_int_h_strintenv_h).
   ((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x2 :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :num -> num -> bool)
   (dist_aux_ftn_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   ((int_funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h
   $1) $0))) 2)))))) ((/\
   ((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x1 :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :num -> num -> bool)
   (dist_aux_ftn_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h
   (int_funintenv_h_int_h_strintenv_h_FINMAP_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0))) 3)))) ((/\
   ((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x1 :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h).
   (((= :num -> num -> bool) (dist_aux_ftn_funintenv_h
   (int_FUNINTENV_H $0))) 4)))) ((/\
   ((! :(funintenv_h -> bool) -> bool) (\(x1 :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(x2 :strintenv_h).
   ((! :(var set -> bool) -> bool) (\(x3 :var set).
   ((! :(excon set -> bool) -> bool) (\(x4 :excon set).
   (((= :num -> num -> bool) (dist_aux_ftn_int_h ((((int_INT_H $3) $2)
   $1) $0))) 5)))))))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(x1 :strid). ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   (((= :num -> num -> bool)
   (dist_aux_ftn_strid_int_h_prod_funintenv_h_int_h_strintenv_h
   ((int_funintenv_h_int_h_strintenv_h_ch44_strid_int_h $1) $0)))
   6)))))) ((/\ (((= :num -> num -> bool)
   (dist_aux_ftn_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   int_funintenv_h_int_h_strintenv_h_NIL_strid_int_h_prod_funintenv_h_int_h_strintenv_h))
   7)) ((/\
   ((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool) ->
        bool) (\(x1 :strid_int_h_prod_funintenv_h_int_h_strintenv_h).
   ((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x2 :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :num -> num -> bool)
   (dist_aux_ftn_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   ((int_funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h
   $1) $0))) 8)))))) ((/\
   ((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x1 :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :num -> num -> bool)
   (dist_aux_ftn_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h
   (int_funintenv_h_int_h_strintenv_h_FINMAP_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0))) 9))))
   ((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x1 :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h).
   (((= :num -> num -> bool) (dist_aux_ftn_strintenv_h
   (int_STRINTENV_H $0))) 10)))))))))))))`),
 ((STRINTENV_H),
  [],
  `(((= :((strid # int_h) list finmap -> strintenv_h) ->
         ((strid # int_h) list finmap -> strintenv_h) -> bool)
   STRINTENV_H) (\(x0 :(strid # int_h) list finmap). (int_STRINTENV_H
   (int_inj_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h
   $0))))`),
 ((int_inv_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h),
  [],
  `((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x1 :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :(strid # int_h) list finmap -> (strid # int_h) list finmap ->
         bool)
   (int_inv_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h
   (int_funintenv_h_int_h_strintenv_h_FINMAP_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0)))
   ((FINMAP :(strid # int_h) list -> (strid # int_h) list finmap)
   (int_inv_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0)))))`),
 ((int_inj_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h),
  [],
  `((! :((strid # int_h) list -> bool) -> bool)
   (\(x0 :(strid # int_h) list).
   (((= :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
         strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
         bool)
   (int_inj_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h
   ((FINMAP :(strid # int_h) list -> (strid # int_h) list finmap)
   $0)))
   (int_funintenv_h_int_h_strintenv_h_FINMAP_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   (int_inj_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0)))))`),
 ((int_inv_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h),
  [],
  `((/\ (((= :(strid # int_h) list -> (strid # int_h) list -> bool)
   (int_inv_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   int_funintenv_h_int_h_strintenv_h_NIL_strid_int_h_prod_funintenv_h_int_h_strintenv_h))
   (NIL :(strid # int_h) list)))
   ((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool) ->
        bool) (\(x1 :strid_int_h_prod_funintenv_h_int_h_strintenv_h).
   ((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x2 :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :(strid # int_h) list -> (strid # int_h) list -> bool)
   (int_inv_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   ((int_funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h
   $1) $0)))
   (((CONS :strid # int_h -> (strid # int_h) list ->
            (strid # int_h) list)
   (int_inv_strid_int_h_prod_funintenv_h_int_h_strintenv_h $1))
   (int_inv_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0))))))))`),
 ((int_inj_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h),
  [],
  `((/\
   (((= :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         bool)
   (int_inj_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   (NIL :(strid # int_h) list)))
   int_funintenv_h_int_h_strintenv_h_NIL_strid_int_h_prod_funintenv_h_int_h_strintenv_h))
   ((! :((strid # int_h) list -> bool) -> bool)
   (\(x1 :(strid # int_h) list). ((! :(strid # int_h -> bool) -> bool)
   (\(x0 :strid # int_h).
   (((= :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         bool)
   (int_inj_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   (((CONS :strid # int_h -> (strid # int_h) list ->
            (strid # int_h) list) $0) $1)))
   ((int_funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h
   (int_inj_strid_int_h_prod_funintenv_h_int_h_strintenv_h $0))
   (int_inj_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $1))))))))`),
 ((int_inv_strid_int_h_prod_funintenv_h_int_h_strintenv_h),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   (((= :strid # int_h -> strid # int_h -> bool)
   (int_inv_strid_int_h_prod_funintenv_h_int_h_strintenv_h
   ((int_funintenv_h_int_h_strintenv_h_ch44_strid_int_h $1) $0)))
   (((, :strid -> int_h -> strid # int_h) $1) $0))))))`),
 ((int_inj_strid_int_h_prod_funintenv_h_int_h_strintenv_h),
  [],
  `((! :(int_h -> bool) -> bool) (\(x1 :int_h).
   ((! :(strid -> bool) -> bool) (\(x0 :strid).
   (((= :strid_int_h_prod_funintenv_h_int_h_strintenv_h ->
         strid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool)
   (int_inj_strid_int_h_prod_funintenv_h_int_h_strintenv_h
   (((, :strid -> int_h -> strid # int_h) $0) $1)))
   ((int_funintenv_h_int_h_strintenv_h_ch44_strid_int_h $0)
   $1))))))`),
 ((INT_H),
  [],
  `(((= :(funintenv_h -> strintenv_h -> var set -> excon set ->
         int_h) ->
         (funintenv_h -> strintenv_h -> var set -> excon set ->
         int_h) -> bool) INT_H) (\(x0 :funintenv_h).
   (\(x1 :strintenv_h). (\(x2 :var set). (\(x3 :excon set).
   ((((int_INT_H $3) $2) $1) $0))))))`),
 ((FUNINTENV_H),
  [],
  `(((= :((funid # int_h) list finmap -> funintenv_h) ->
         ((funid # int_h) list finmap -> funintenv_h) -> bool)
   FUNINTENV_H) (\(x0 :(funid # int_h) list finmap). (int_FUNINTENV_H
   (int_inj_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h
   $0))))`),
 ((int_inv_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h),
  [],
  `((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x1 :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :(funid # int_h) list finmap -> (funid # int_h) list finmap ->
         bool)
   (int_inv_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h
   (int_funintenv_h_int_h_strintenv_h_FINMAP_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0)))
   ((FINMAP :(funid # int_h) list -> (funid # int_h) list finmap)
   (int_inv_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0)))))`),
 ((int_inj_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h),
  [],
  `((! :((funid # int_h) list -> bool) -> bool)
   (\(x0 :(funid # int_h) list).
   (((= :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
         funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
         bool)
   (int_inj_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h
   ((FINMAP :(funid # int_h) list -> (funid # int_h) list finmap)
   $0)))
   (int_funintenv_h_int_h_strintenv_h_FINMAP_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   (int_inj_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0)))))`),
 ((int_inv_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h),
  [],
  `((/\ (((= :(funid # int_h) list -> (funid # int_h) list -> bool)
   (int_inv_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   int_funintenv_h_int_h_strintenv_h_NIL_funid_int_h_prod_funintenv_h_int_h_strintenv_h))
   (NIL :(funid # int_h) list)))
   ((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool) ->
        bool) (\(x1 :funid_int_h_prod_funintenv_h_int_h_strintenv_h).
   ((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x2 :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :(funid # int_h) list -> (funid # int_h) list -> bool)
   (int_inv_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   ((int_funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h
   $1) $0)))
   (((CONS :funid # int_h -> (funid # int_h) list ->
            (funid # int_h) list)
   (int_inv_funid_int_h_prod_funintenv_h_int_h_strintenv_h $1))
   (int_inv_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0))))))))`),
 ((int_inj_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h),
  [],
  `((/\
   (((= :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         bool)
   (int_inj_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   (NIL :(funid # int_h) list)))
   int_funintenv_h_int_h_strintenv_h_NIL_funid_int_h_prod_funintenv_h_int_h_strintenv_h))
   ((! :((funid # int_h) list -> bool) -> bool)
   (\(x1 :(funid # int_h) list). ((! :(funid # int_h -> bool) -> bool)
   (\(x0 :funid # int_h).
   (((= :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         bool)
   (int_inj_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   (((CONS :funid # int_h -> (funid # int_h) list ->
            (funid # int_h) list) $0) $1)))
   ((int_funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h
   (int_inj_funid_int_h_prod_funintenv_h_int_h_strintenv_h $0))
   (int_inj_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $1))))))))`),
 ((int_inv_funid_int_h_prod_funintenv_h_int_h_strintenv_h),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   (((= :funid # int_h -> funid # int_h -> bool)
   (int_inv_funid_int_h_prod_funintenv_h_int_h_strintenv_h
   ((int_funintenv_h_int_h_strintenv_h_ch44_funid_int_h $1) $0)))
   (((, :funid -> int_h -> funid # int_h) $1) $0))))))`),
 ((int_inj_funid_int_h_prod_funintenv_h_int_h_strintenv_h),
  [],
  `((! :(int_h -> bool) -> bool) (\(x1 :int_h).
   ((! :(funid -> bool) -> bool) (\(x0 :funid).
   (((= :funid_int_h_prod_funintenv_h_int_h_strintenv_h ->
         funid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool)
   (int_inj_funid_int_h_prod_funintenv_h_int_h_strintenv_h
   (((, :funid -> int_h -> funid # int_h) $0) $1)))
   ((int_funintenv_h_int_h_strintenv_h_ch44_funid_int_h $0)
   $1))))))`),
 ((int_STRINTENV_H_DEF),
  [],
  `((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x1 :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h).
   (((= :strintenv_h -> strintenv_h -> bool) (int_STRINTENV_H $0))
   (strintenv_h_abs (JOINT_int_STRINTENV_H
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_rep
   $0))))))`),
 ((int_funintenv_h_int_h_strintenv_h_FINMAP_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_DEF),
  [],
  `((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x1 :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
         strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
         bool)
   (int_funintenv_h_int_h_strintenv_h_FINMAP_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0))
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_abs
   (JOINT_int_funintenv_h_int_h_strintenv_h_FINMAP_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_rep
   $0))))))`),
 ((int_funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h_DEF),
  [],
  `((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool) ->
        bool) (\(x1 :strid_int_h_prod_funintenv_h_int_h_strintenv_h).
   ((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x2 :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         bool)
   ((int_funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h
   $1) $0))
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_abs
   ((JOINT_int_funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_rep $1))
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_rep
   $0))))))))`),
 ((int_funintenv_h_int_h_strintenv_h_NIL_strid_int_h_prod_funintenv_h_int_h_strintenv_h_DEF),
  [],
  `(((= :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         bool)
   int_funintenv_h_int_h_strintenv_h_NIL_strid_int_h_prod_funintenv_h_int_h_strintenv_h)
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_abs
   JOINT_int_funintenv_h_int_h_strintenv_h_NIL_strid_int_h_prod_funintenv_h_int_h_strintenv_h))`),
 ((int_funintenv_h_int_h_strintenv_h_ch44_strid_int_h_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   (((= :strid_int_h_prod_funintenv_h_int_h_strintenv_h ->
         strid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool)
   ((int_funintenv_h_int_h_strintenv_h_ch44_strid_int_h $1) $0))
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_abs
   ((JOINT_int_funintenv_h_int_h_strintenv_h_ch44_strid_int_h $1)
   (int_h_rep $0))))))))`),
 ((int_INT_H_DEF),
  [],
  `((! :(funintenv_h -> bool) -> bool) (\(x1 :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(x2 :strintenv_h).
   ((! :(var set -> bool) -> bool) (\(x3 :var set).
   ((! :(excon set -> bool) -> bool) (\(x4 :excon set).
   (((= :int_h -> int_h -> bool) ((((int_INT_H $3) $2) $1) $0))
   (int_h_abs ((((JOINT_int_INT_H (funintenv_h_rep $3))
   (strintenv_h_rep $2)) $1) $0)))))))))))`),
 ((int_FUNINTENV_H_DEF),
  [],
  `((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x1 :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h).
   (((= :funintenv_h -> funintenv_h -> bool) (int_FUNINTENV_H $0))
   (funintenv_h_abs (JOINT_int_FUNINTENV_H
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_rep
   $0))))))`),
 ((int_funintenv_h_int_h_strintenv_h_FINMAP_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_DEF),
  [],
  `((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x1 :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
         funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
         bool)
   (int_funintenv_h_int_h_strintenv_h_FINMAP_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0))
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_abs
   (JOINT_int_funintenv_h_int_h_strintenv_h_FINMAP_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_rep
   $0))))))`),
 ((int_funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h_DEF),
  [],
  `((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool) ->
        bool) (\(x1 :funid_int_h_prod_funintenv_h_int_h_strintenv_h).
   ((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(x2 :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         bool)
   ((int_funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h
   $1) $0))
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_abs
   ((JOINT_int_funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_rep $1))
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_rep
   $0))))))))`),
 ((int_funintenv_h_int_h_strintenv_h_NIL_funid_int_h_prod_funintenv_h_int_h_strintenv_h_DEF),
  [],
  `(((= :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         bool)
   int_funintenv_h_int_h_strintenv_h_NIL_funid_int_h_prod_funintenv_h_int_h_strintenv_h)
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_abs
   JOINT_int_funintenv_h_int_h_strintenv_h_NIL_funid_int_h_prod_funintenv_h_int_h_strintenv_h))`),
 ((int_funintenv_h_int_h_strintenv_h_ch44_funid_int_h_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   (((= :funid_int_h_prod_funintenv_h_int_h_strintenv_h ->
         funid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool)
   ((int_funintenv_h_int_h_strintenv_h_ch44_funid_int_h $1) $0))
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_abs
   ((JOINT_int_funintenv_h_int_h_strintenv_h_ch44_funid_int_h $1)
   (int_h_rep $0))))))))`),
 ((funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_REP_ABS),
  [],
  `((/\
   ((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(a :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         bool)
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_abs
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_rep
   $0))) $0))))
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(r :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 2)) $0))
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool)
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_rep
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_abs
   $0))) $0)))))`),
 ((funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_TY_DEF),
  [],
  `((? :((funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h) ->
        bool) -> bool)
   (\(rep :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
           joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((TYPE_DEFINITION :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
                       bool) ->
                       (funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
                       joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h) ->
                       bool)
   (\(x :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 2))) $0)))`),
 ((funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_REP_ABS),
  [],
  `((/\
   ((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(a :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h).
   (((= :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
         funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
         bool)
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_abs
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_rep
   $0))) $0))))
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(r :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 3)) $0))
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool)
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_rep
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_abs
   $0))) $0)))))`),
 ((funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_TY_DEF),
  [],
  `((? :((funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h) ->
        bool) -> bool)
   (\(rep :funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
           joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((TYPE_DEFINITION :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
                       bool) ->
                       (funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
                       joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h) ->
                       bool)
   (\(x :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 3))) $0)))`),
 ((funintenv_h_REP_ABS),
  [],
  `((/\ ((! :(funintenv_h -> bool) -> bool) (\(a :funintenv_h).
   (((= :funintenv_h -> funintenv_h -> bool) (funintenv_h_abs
   (funintenv_h_rep $0))) $0))))
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(r :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 4)) $0))
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool) (funintenv_h_rep (funintenv_h_abs $0))) $0)))))`),
 ((funintenv_h_TY_DEF),
  [],
  `((? :((funintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h) ->
        bool) -> bool)
   (\(rep :funintenv_h ->
           joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((TYPE_DEFINITION :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
                       bool) ->
                       (funintenv_h ->
                       joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h) ->
                       bool)
   (\(x :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 4))) $0)))`),
 ((strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_REP_ABS),
  [],
  `((/\
   ((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(a :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h).
   (((= :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         bool)
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_abs
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_rep
   $0))) $0))))
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(r :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 7)) $0))
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool)
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_rep
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_abs
   $0))) $0)))))`),
 ((strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_TY_DEF),
  [],
  `((? :((strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h) ->
        bool) -> bool)
   (\(rep :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
           joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((TYPE_DEFINITION :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
                       bool) ->
                       (strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h ->
                       joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h) ->
                       bool)
   (\(x :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 7))) $0)))`),
 ((strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_REP_ABS),
  [],
  `((/\
   ((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
        bool) -> bool)
   (\(a :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h).
   (((= :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
         strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
         bool)
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_abs
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_rep
   $0))) $0))))
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(r :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 8)) $0))
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool)
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_rep
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_abs
   $0))) $0)))))`),
 ((strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_TY_DEF),
  [],
  `((? :((strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h) ->
        bool) -> bool)
   (\(rep :strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
           joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((TYPE_DEFINITION :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
                       bool) ->
                       (strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h ->
                       joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h) ->
                       bool)
   (\(x :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 8))) $0)))`),
 ((strintenv_h_REP_ABS),
  [],
  `((/\ ((! :(strintenv_h -> bool) -> bool) (\(a :strintenv_h).
   (((= :strintenv_h -> strintenv_h -> bool) (strintenv_h_abs
   (strintenv_h_rep $0))) $0))))
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(r :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 9)) $0))
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool) (strintenv_h_rep (strintenv_h_abs $0))) $0)))))`),
 ((strintenv_h_TY_DEF),
  [],
  `((? :((strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h) ->
        bool) -> bool)
   (\(rep :strintenv_h ->
           joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((TYPE_DEFINITION :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
                       bool) ->
                       (strintenv_h ->
                       joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h) ->
                       bool)
   (\(x :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 9))) $0)))`),
 ((int_h_REP_ABS),
  [],
  `((/\ ((! :(int_h -> bool) -> bool) (\(a :int_h).
   (((= :int_h -> int_h -> bool) (int_h_abs (int_h_rep $0))) $0))))
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(r :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 5)) $0))
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool) (int_h_rep (int_h_abs $0))) $0)))))`),
 ((int_h_TY_DEF),
  [],
  `((? :((int_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h) ->
        bool) -> bool)
   (\(rep :int_h ->
           joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((TYPE_DEFINITION :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
                       bool) ->
                       (int_h ->
                       joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h) ->
                       bool)
   (\(x :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 5))) $0)))`),
 ((funid_int_h_prod_funintenv_h_int_h_strintenv_h_REP_ABS),
  [],
  `((/\
   ((! :(funid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool) ->
        bool) (\(a :funid_int_h_prod_funintenv_h_int_h_strintenv_h).
   (((= :funid_int_h_prod_funintenv_h_int_h_strintenv_h ->
         funid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool)
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_abs
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_rep $0))) $0))))
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(r :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 1)) $0))
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool) (funid_int_h_prod_funintenv_h_int_h_strintenv_h_rep
   (funid_int_h_prod_funintenv_h_int_h_strintenv_h_abs $0)))
   $0)))))`),
 ((funid_int_h_prod_funintenv_h_int_h_strintenv_h_TY_DEF),
  [],
  `((? :((funid_int_h_prod_funintenv_h_int_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h) ->
        bool) -> bool)
   (\(rep :funid_int_h_prod_funintenv_h_int_h_strintenv_h ->
           joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((TYPE_DEFINITION :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
                       bool) ->
                       (funid_int_h_prod_funintenv_h_int_h_strintenv_h ->
                       joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h) ->
                       bool)
   (\(x :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 1))) $0)))`),
 ((strid_int_h_prod_funintenv_h_int_h_strintenv_h_REP_ABS),
  [],
  `((/\
   ((! :(strid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool) ->
        bool) (\(a :strid_int_h_prod_funintenv_h_int_h_strintenv_h).
   (((= :strid_int_h_prod_funintenv_h_int_h_strintenv_h ->
         strid_int_h_prod_funintenv_h_int_h_strintenv_h -> bool)
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_abs
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_rep $0))) $0))))
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(r :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 6)) $0))
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool) (strid_int_h_prod_funintenv_h_int_h_strintenv_h_rep
   (strid_int_h_prod_funintenv_h_int_h_strintenv_h_abs $0)))
   $0)))))`),
 ((strid_int_h_prod_funintenv_h_int_h_strintenv_h_TY_DEF),
  [],
  `((? :((strid_int_h_prod_funintenv_h_int_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h) ->
        bool) -> bool)
   (\(rep :strid_int_h_prod_funintenv_h_int_h_strintenv_h ->
           joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((TYPE_DEFINITION :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
                       bool) ->
                       (strid_int_h_prod_funintenv_h_int_h_strintenv_h ->
                       joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h) ->
                       bool)
   (\(x :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 6))) $0)))`),
 ((joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(f' :funid).
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   ((JOINT_int_funintenv_h_int_h_strintenv_h_ch44_funid_int_h $1)
   $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 5)) 1) 0))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   JOINT_int_funintenv_h_int_h_strintenv_h_NIL_funid_int_h_prod_funintenv_h_int_h_strintenv_h))
   2)) ((/\
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   ((JOINT_int_funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h
   $1) $0))) ((((COND :bool -> num -> num -> num) ((/\
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $1)) 1)) (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 2))) 2) 0))))))) ((/\
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   (JOINT_int_funintenv_h_int_h_strintenv_h_FINMAP_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 2)) 3) 0))))) ((/\
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   (JOINT_int_FUNINTENV_H $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 3)) 4) 0))))) ((/\
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   ((! :(var set -> bool) -> bool) (\(s0 :var set).
   ((! :(excon set -> bool) -> bool) (\(s1 :excon set).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   ((((JOINT_int_INT_H $3) $2) $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $3)) 4)) (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $2)) 9))) 5) 0))))))))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(s :strid).
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   ((JOINT_int_funintenv_h_int_h_strintenv_h_ch44_strid_int_h $1)
   $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 5)) 6) 0))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   JOINT_int_funintenv_h_int_h_strintenv_h_NIL_strid_int_h_prod_funintenv_h_int_h_strintenv_h))
   7)) ((/\
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   ((JOINT_int_funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h
   $1) $0))) ((((COND :bool -> num -> num -> num) ((/\
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $1)) 6)) (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 7))) 7) 0))))))) ((/\
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   (JOINT_int_funintenv_h_int_h_strintenv_h_FINMAP_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 7)) 8) 0)))))
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   (JOINT_int_STRINTENV_H $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_select
   $0)) 8)) 9) 0))))))))))))))`),
 ((JOINT_int_STRINTENV_H_DEF),
  [],
  `((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool) (JOINT_int_STRINTENV_H $0))
   (ABS_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   (((Node :funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INR :var set # excon set + strid + one + one + one + one ->
          one + var set # excon set + strid + one + one + one + one)
   ((INR :strid + one + one + one + one ->
          var set # excon set + strid + one + one + one + one)
   ((INR :one + one + one + one -> strid + one + one + one + one)
   ((INR :one + one + one -> one + one + one + one)
   ((INR :one + one -> one + one + one) ((INR :one -> one + one)
   one)))))))))))
   (((CONS :(funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list)
   (REP_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   $0))
   (NIL :(funid + one + one + one + one + var set # excon set +
         strid + one + one + one + one) ltree list)))))))`),
 ((JOINT_int_funintenv_h_int_h_strintenv_h_FINMAP_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_DEF),
  [],
  `((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool)
   (JOINT_int_funintenv_h_int_h_strintenv_h_FINMAP_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0))
   (ABS_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   (((Node :funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INR :var set # excon set + strid + one + one + one + one ->
          one + var set # excon set + strid + one + one + one + one)
   ((INR :strid + one + one + one + one ->
          var set # excon set + strid + one + one + one + one)
   ((INR :one + one + one + one -> strid + one + one + one + one)
   ((INR :one + one + one -> one + one + one + one)
   ((INR :one + one -> one + one + one) ((INL :one -> one + one)
   one)))))))))))
   (((CONS :(funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list)
   (REP_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   $0))
   (NIL :(funid + one + one + one + one + var set # excon set +
         strid + one + one + one + one) ltree list)))))))`),
 ((JOINT_int_funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h_DEF),
  [],
  `((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool)
   ((JOINT_int_funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h
   $1) $0))
   (ABS_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   (((Node :funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INR :var set # excon set + strid + one + one + one + one ->
          one + var set # excon set + strid + one + one + one + one)
   ((INR :strid + one + one + one + one ->
          var set # excon set + strid + one + one + one + one)
   ((INR :one + one + one + one -> strid + one + one + one + one)
   ((INR :one + one + one -> one + one + one + one)
   ((INL :one -> one + one + one) one))))))))))
   (((CONS :(funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list)
   (REP_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   $1))
   (((CONS :(funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list)
   (REP_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   $0))
   (NIL :(funid + one + one + one + one + var set # excon set +
         strid + one + one + one + one) ltree list))))))))))`),
 ((JOINT_int_funintenv_h_int_h_strintenv_h_NIL_strid_int_h_prod_funintenv_h_int_h_strintenv_h_DEF),
  [],
  `(((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool)
   JOINT_int_funintenv_h_int_h_strintenv_h_NIL_strid_int_h_prod_funintenv_h_int_h_strintenv_h)
   (ABS_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   (((Node :funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INR :var set # excon set + strid + one + one + one + one ->
          one + var set # excon set + strid + one + one + one + one)
   ((INR :strid + one + one + one + one ->
          var set # excon set + strid + one + one + one + one)
   ((INR :one + one + one + one -> strid + one + one + one + one)
   ((INL :one -> one + one + one + one) one)))))))))
   (NIL :(funid + one + one + one + one + var set # excon set +
         strid + one + one + one + one) ltree list))))`),
 ((JOINT_int_funintenv_h_int_h_strintenv_h_ch44_strid_int_h_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool)
   ((JOINT_int_funintenv_h_int_h_strintenv_h_ch44_strid_int_h $1) $0))
   (ABS_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   (((Node :funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INR :var set # excon set + strid + one + one + one + one ->
          one + var set # excon set + strid + one + one + one + one)
   ((INR :strid + one + one + one + one ->
          var set # excon set + strid + one + one + one + one)
   ((INL :strid -> strid + one + one + one + one) $1))))))))
   (((CONS :(funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list)
   (REP_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   $0))
   (NIL :(funid + one + one + one + one + var set # excon set +
         strid + one + one + one + one) ltree list)))))))))`),
 ((JOINT_int_INT_H_DEF),
  [],
  `((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   ((! :(var set -> bool) -> bool) (\(s0 :var set).
   ((! :(excon set -> bool) -> bool) (\(s1 :excon set).
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool) ((((JOINT_int_INT_H $3) $2) $1) $0))
   (ABS_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   (((Node :funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INR :var set # excon set + strid + one + one + one + one ->
          one + var set # excon set + strid + one + one + one + one)
   ((INL :var set # excon set ->
          var set # excon set + strid + one + one + one + one)
   (((, :var set -> excon set -> var set # excon set) $1) $0))))))))
   (((CONS :(funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list)
   (REP_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   $3))
   (((CONS :(funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list)
   (REP_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   $2))
   (NIL :(funid + one + one + one + one + var set # excon set +
         strid + one + one + one + one) ltree list))))))))))))))`),
 ((JOINT_int_FUNINTENV_H_DEF),
  [],
  `((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool) (JOINT_int_FUNINTENV_H $0))
   (ABS_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   (((Node :funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INL :one ->
          one + var set # excon set + strid + one + one + one + one)
   one))))))
   (((CONS :(funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list)
   (REP_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   $0))
   (NIL :(funid + one + one + one + one + var set # excon set +
         strid + one + one + one + one) ltree list)))))))`),
 ((JOINT_int_funintenv_h_int_h_strintenv_h_FINMAP_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_DEF),
  [],
  `((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool)
   (JOINT_int_funintenv_h_int_h_strintenv_h_FINMAP_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0))
   (ABS_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   (((Node :funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INL :one ->
          one + one + var set # excon set + strid + one + one + one +
          one) one)))))
   (((CONS :(funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list)
   (REP_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   $0))
   (NIL :(funid + one + one + one + one + var set # excon set +
         strid + one + one + one + one) ltree list)))))))`),
 ((JOINT_int_funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h_DEF),
  [],
  `((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool)
   ((JOINT_int_funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h
   $1) $0))
   (ABS_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   (((Node :funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INL :one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one) one))))
   (((CONS :(funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list)
   (REP_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   $1))
   (((CONS :(funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list)
   (REP_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   $0))
   (NIL :(funid + one + one + one + one + var set # excon set +
         strid + one + one + one + one) ltree list))))))))))`),
 ((JOINT_int_funintenv_h_int_h_strintenv_h_NIL_funid_int_h_prod_funintenv_h_int_h_strintenv_h_DEF),
  [],
  `(((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool)
   JOINT_int_funintenv_h_int_h_strintenv_h_NIL_funid_int_h_prod_funintenv_h_int_h_strintenv_h)
   (ABS_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   (((Node :funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INL :one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one) one)))
   (NIL :(funid + one + one + one + one + var set # excon set +
         strid + one + one + one + one) ltree list))))`),
 ((JOINT_int_funintenv_h_int_h_strintenv_h_ch44_funid_int_h_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(f' :funid).
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool)
   ((JOINT_int_funintenv_h_int_h_strintenv_h_ch44_funid_int_h $1) $0))
   (ABS_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   (((Node :funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree)
   ((INL :funid ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one) $1))
   (((CONS :(funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list ->
            (funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one) ltree list)
   (REP_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   $0))
   (NIL :(funid + one + one + one + one + var set # excon set +
         strid + one + one + one + one) ltree list)))))))))`),
 ((joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_ISO_DEF),
  [],
  `((/\
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(a :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         bool)
   (ABS_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   (REP_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   $0))) $0))))
   ((! :((funid + one + one + one + one + var set # excon set +
         strid + one + one + one + one) ltree -> bool) -> bool)
   (\(r :(funid + one + one + one + one + var set # excon set +
         strid + one + one + one + one) ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(funid + one + one + one + one + var set # excon set +
            strid + one + one + one + one ->
           (funid + one + one + one + one + var set # excon set +
           strid + one + one + one + one) ltree list -> bool) ->
           (funid + one + one + one + one + var set # excon set +
           strid + one + one + one + one) ltree -> bool)
   (\(v :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one).
   (\(tl :(funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one) ltree list). ((\/ ((/\
   ((? :(funid -> bool) -> bool) (\(f :funid).
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $2)
   ((INL :funid ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INL :one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one) one)))) (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   0))) ((\/ ((/\
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INL :one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one) one))))) (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   (SUC (SUC 0))))) ((\/ ((/\
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INL :one ->
          one + one + var set # excon set + strid + one + one + one +
          one) one)))))) (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INL :one ->
          one + var set # excon set + strid + one + one + one + one)
   one))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\ ((? :(var set -> bool) -> bool)
   (\(s0 :var set). ((? :(excon set -> bool) -> bool)
   (\(s1 :excon set).
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $3)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INR :var set # excon set + strid + one + one + one + one ->
          one + var set # excon set + strid + one + one + one + one)
   ((INL :var set # excon set ->
          var set # excon set + strid + one + one + one + one)
   (((, :var set -> excon set -> var set # excon set) $1)
   $0))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   (SUC (SUC 0))))) ((\/ ((/\ ((? :(strid -> bool) -> bool)
   (\(s :strid).
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $2)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INR :var set # excon set + strid + one + one + one + one ->
          one + var set # excon set + strid + one + one + one + one)
   ((INR :strid + one + one + one + one ->
          var set # excon set + strid + one + one + one + one)
   ((INL :strid -> strid + one + one + one + one) $0)))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INR :var set # excon set + strid + one + one + one + one ->
          one + var set # excon set + strid + one + one + one + one)
   ((INR :strid + one + one + one + one ->
          var set # excon set + strid + one + one + one + one)
   ((INR :one + one + one + one -> strid + one + one + one + one)
   ((INL :one -> one + one + one + one) one))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   0))) ((\/ ((/\
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INR :var set # excon set + strid + one + one + one + one ->
          one + var set # excon set + strid + one + one + one + one)
   ((INR :strid + one + one + one + one ->
          var set # excon set + strid + one + one + one + one)
   ((INR :one + one + one + one -> strid + one + one + one + one)
   ((INR :one + one + one -> one + one + one + one)
   ((INL :one -> one + one + one) one)))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   (SUC (SUC 0))))) ((\/ ((/\
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INR :var set # excon set + strid + one + one + one + one ->
          one + var set # excon set + strid + one + one + one + one)
   ((INR :strid + one + one + one + one ->
          var set # excon set + strid + one + one + one + one)
   ((INR :one + one + one + one -> strid + one + one + one + one)
   ((INR :one + one + one -> one + one + one + one)
   ((INR :one + one -> one + one + one) ((INL :one -> one + one)
   one)))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   (SUC 0)))) ((/\
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INR :var set # excon set + strid + one + one + one + one ->
          one + var set # excon set + strid + one + one + one + one)
   ((INR :strid + one + one + one + one ->
          var set # excon set + strid + one + one + one + one)
   ((INR :one + one + one + one -> strid + one + one + one + one)
   ((INR :one + one + one -> one + one + one + one)
   ((INR :one + one -> one + one + one) ((INR :one -> one + one)
   one)))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   (SUC 0)))))))))))))))) $0))
   (((= :(funid + one + one + one + one + var set # excon set +
         strid + one + one + one + one) ltree ->
         (funid + one + one + one + one + var set # excon set +
         strid + one + one + one + one) ltree -> bool)
   (REP_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   (ABS_joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h
   $0))) $0)))))`),
 ((joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_TY_DEF),
  [],
  `((? :((joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         (funid + one + one + one + one + var set # excon set +
         strid + one + one + one + one) ltree) -> bool) -> bool)
   (\(rep :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
           (funid + one + one + one + one + var set # excon set +
           strid + one + one + one + one) ltree).
   (((TYPE_DEFINITION :((funid + one + one + one + one +
                        var set # excon set + strid + one + one +
                        one + one) ltree -> bool) ->
                       (joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
                       (funid + one + one + one + one +
                       var set # excon set + strid + one + one + one +
                       one) ltree) -> bool)
   ((TRP :(funid + one + one + one + one + var set # excon set +
           strid + one + one + one + one ->
          (funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one) ltree list -> bool) ->
          (funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one) ltree -> bool)
   (\(v :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one).
   (\(tl :(funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one) ltree list). ((\/ ((/\
   ((? :(funid -> bool) -> bool) (\(f :funid).
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $2)
   ((INL :funid ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INL :one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one) one)))) (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   0))) ((\/ ((/\
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INL :one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one) one))))) (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   (SUC (SUC 0))))) ((\/ ((/\
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INL :one ->
          one + one + var set # excon set + strid + one + one + one +
          one) one)))))) (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INL :one ->
          one + var set # excon set + strid + one + one + one + one)
   one))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\ ((? :(var set -> bool) -> bool)
   (\(s0 :var set). ((? :(excon set -> bool) -> bool)
   (\(s1 :excon set).
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $3)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INR :var set # excon set + strid + one + one + one + one ->
          one + var set # excon set + strid + one + one + one + one)
   ((INL :var set # excon set ->
          var set # excon set + strid + one + one + one + one)
   (((, :var set -> excon set -> var set # excon set) $1)
   $0))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   (SUC (SUC 0))))) ((\/ ((/\ ((? :(strid -> bool) -> bool)
   (\(s :strid).
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $2)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INR :var set # excon set + strid + one + one + one + one ->
          one + var set # excon set + strid + one + one + one + one)
   ((INR :strid + one + one + one + one ->
          var set # excon set + strid + one + one + one + one)
   ((INL :strid -> strid + one + one + one + one) $0)))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INR :var set # excon set + strid + one + one + one + one ->
          one + var set # excon set + strid + one + one + one + one)
   ((INR :strid + one + one + one + one ->
          var set # excon set + strid + one + one + one + one)
   ((INR :one + one + one + one -> strid + one + one + one + one)
   ((INL :one -> one + one + one + one) one))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   0))) ((\/ ((/\
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INR :var set # excon set + strid + one + one + one + one ->
          one + var set # excon set + strid + one + one + one + one)
   ((INR :strid + one + one + one + one ->
          var set # excon set + strid + one + one + one + one)
   ((INR :one + one + one + one -> strid + one + one + one + one)
   ((INR :one + one + one -> one + one + one + one)
   ((INL :one -> one + one + one) one)))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   (SUC (SUC 0))))) ((\/ ((/\
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INR :var set # excon set + strid + one + one + one + one ->
          one + var set # excon set + strid + one + one + one + one)
   ((INR :strid + one + one + one + one ->
          var set # excon set + strid + one + one + one + one)
   ((INR :one + one + one + one -> strid + one + one + one + one)
   ((INR :one + one + one -> one + one + one + one)
   ((INR :one + one -> one + one + one) ((INL :one -> one + one)
   one)))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   (SUC 0)))) ((/\
   (((= :funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one ->
         funid + one + one + one + one + var set # excon set + strid +
         one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + var set # excon set + strid + one +
          one + one + one ->
          funid + one + one + one + one + var set # excon set +
          strid + one + one + one + one)
   ((INR :one + one + one + var set # excon set + strid + one + one +
          one + one ->
          one + one + one + one + var set # excon set + strid + one +
          one + one + one)
   ((INR :one + one + var set # excon set + strid + one + one + one +
          one ->
          one + one + one + var set # excon set + strid + one + one +
          one + one)
   ((INR :one + var set # excon set + strid + one + one + one + one ->
          one + one + var set # excon set + strid + one + one + one +
          one)
   ((INR :var set # excon set + strid + one + one + one + one ->
          one + var set # excon set + strid + one + one + one + one)
   ((INR :strid + one + one + one + one ->
          var set # excon set + strid + one + one + one + one)
   ((INR :one + one + one + one -> strid + one + one + one + one)
   ((INR :one + one + one -> one + one + one + one)
   ((INR :one + one -> one + one + one) ((INR :one -> one + one)
   one)))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid + one + one + one + one + var set # excon set +
             strid + one + one + one + one) ltree list -> num) $0))
   (SUC 0))))))))))))))))) $0)))`),
 ((SIGDEC_H_DEF),
  [],
  `((! :(sigdec_h -> bool) -> bool) (\(s :sigdec_h).
   (((= :topdec_h -> topdec_h -> bool) (SIGDEC_H $0)) (ABS_topdec_h
   (((Node :moddec_h + sigdec_h -> (moddec_h + sigdec_h) ltree list ->
            (moddec_h + sigdec_h) ltree)
   ((INR :sigdec_h -> moddec_h + sigdec_h) $0))
   (NIL :(moddec_h + sigdec_h) ltree list))))))`),
 ((MODDEC_H_DEF),
  [],
  `((! :(moddec_h -> bool) -> bool) (\(m :moddec_h).
   (((= :topdec_h -> topdec_h -> bool) (MODDEC_H $0)) (ABS_topdec_h
   (((Node :moddec_h + sigdec_h -> (moddec_h + sigdec_h) ltree list ->
            (moddec_h + sigdec_h) ltree)
   ((INL :moddec_h -> moddec_h + sigdec_h) $0))
   (NIL :(moddec_h + sigdec_h) ltree list))))))`),
 ((topdec_h_ISO_DEF),
  [],
  `((/\ ((! :(topdec_h -> bool) -> bool) (\(a :topdec_h).
   (((= :topdec_h -> topdec_h -> bool) (ABS_topdec_h (REP_topdec_h
   $0))) $0)))) ((! :((moddec_h + sigdec_h) ltree -> bool) -> bool)
   (\(r :(moddec_h + sigdec_h) ltree). (((= :bool -> bool -> bool)
   (((TRP :(moddec_h + sigdec_h -> (moddec_h + sigdec_h) ltree list ->
           bool) -> (moddec_h + sigdec_h) ltree -> bool)
   (\(v :moddec_h + sigdec_h).
   (\(tl :(moddec_h + sigdec_h) ltree list). ((\/ ((/\
   ((? :(moddec_h -> bool) -> bool) (\(m :moddec_h).
   (((= :moddec_h + sigdec_h -> moddec_h + sigdec_h -> bool) $2)
   ((INL :moddec_h -> moddec_h + sigdec_h) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(moddec_h + sigdec_h) ltree list -> num) $0)) 0))) ((/\
   ((? :(sigdec_h -> bool) -> bool) (\(s :sigdec_h).
   (((= :moddec_h + sigdec_h -> moddec_h + sigdec_h -> bool) $2)
   ((INR :sigdec_h -> moddec_h + sigdec_h) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(moddec_h + sigdec_h) ltree list -> num) $0)) 0))))))
   $0))
   (((= :(moddec_h + sigdec_h) ltree -> (moddec_h + sigdec_h) ltree ->
         bool) (REP_topdec_h (ABS_topdec_h $0))) $0)))))`),
 ((topdec_h_TY_DEF),
  [],
  `((? :((topdec_h -> (moddec_h + sigdec_h) ltree) -> bool) -> bool)
   (\(rep :topdec_h -> (moddec_h + sigdec_h) ltree).
   (((TYPE_DEFINITION :((moddec_h + sigdec_h) ltree -> bool) ->
                       (topdec_h -> (moddec_h + sigdec_h) ltree) ->
                       bool)
   ((TRP :(moddec_h + sigdec_h -> (moddec_h + sigdec_h) ltree list ->
          bool) -> (moddec_h + sigdec_h) ltree -> bool)
   (\(v :moddec_h + sigdec_h).
   (\(tl :(moddec_h + sigdec_h) ltree list). ((\/ ((/\
   ((? :(moddec_h -> bool) -> bool) (\(m :moddec_h).
   (((= :moddec_h + sigdec_h -> moddec_h + sigdec_h -> bool) $2)
   ((INL :moddec_h -> moddec_h + sigdec_h) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(moddec_h + sigdec_h) ltree list -> num) $0)) 0))) ((/\
   ((? :(sigdec_h -> bool) -> bool) (\(s :sigdec_h).
   (((= :moddec_h + sigdec_h -> moddec_h + sigdec_h -> bool) $2)
   ((INR :sigdec_h -> moddec_h + sigdec_h) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(moddec_h + sigdec_h) ltree list -> num) $0)) 0)))))))
   $0)))`),
 ((int_LETstrexp_h_arg2_DEF),
  [],
  `((/\ ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(x2 :strexp_h).
   (((= :strexp_h -> strexp_h -> bool) (int_LETstrexp_h_arg2
   ((int_LETstrexp_h $1) $0))) $0)))))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   (((= :strexp_h -> strexp_h -> bool) (int_LETstrexp_h_arg2
   (int_STRUCTstrexp_h $0))) ((@ :(strexp_h -> bool) -> strexp_h)
   (\(x :strexp_h). T)))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(x1 :strid long). (((= :strexp_h -> strexp_h -> bool)
   (int_LETstrexp_h_arg2 (int_LONGSTRIDstrexp_h $0)))
   ((@ :(strexp_h -> bool) -> strexp_h) (\(x :strexp_h). T))))))
   ((! :(funid long -> bool) -> bool) (\(x1 :funid long).
   ((! :(strexp_h -> bool) -> bool) (\(x2 :strexp_h).
   (((= :strexp_h -> strexp_h -> bool) (int_LETstrexp_h_arg2
   ((int_APPstrexp_h $1) $0))) ((@ :(strexp_h -> bool) -> strexp_h)
   (\(x :strexp_h). T))))))))))`),
 ((int_LETstrexp_h_arg1_DEF),
  [],
  `((/\ ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(x2 :strexp_h).
   (((= :moddec_h -> moddec_h -> bool) (int_LETstrexp_h_arg1
   ((int_LETstrexp_h $1) $0))) $1)))))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   (((= :moddec_h -> moddec_h -> bool) (int_LETstrexp_h_arg1
   (int_STRUCTstrexp_h $0))) ((@ :(moddec_h -> bool) -> moddec_h)
   (\(x :moddec_h). T)))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(x1 :strid long). (((= :moddec_h -> moddec_h -> bool)
   (int_LETstrexp_h_arg1 (int_LONGSTRIDstrexp_h $0)))
   ((@ :(moddec_h -> bool) -> moddec_h) (\(x :moddec_h). T))))))
   ((! :(funid long -> bool) -> bool) (\(x1 :funid long).
   ((! :(strexp_h -> bool) -> bool) (\(x2 :strexp_h).
   (((= :moddec_h -> moddec_h -> bool) (int_LETstrexp_h_arg1
   ((int_APPstrexp_h $1) $0))) ((@ :(moddec_h -> bool) -> moddec_h)
   (\(x :moddec_h). T))))))))))`),
 ((int_APPstrexp_h_arg2_DEF),
  [],
  `((/\ ((! :(funid long -> bool) -> bool) (\(x1 :funid long).
   ((! :(strexp_h -> bool) -> bool) (\(x2 :strexp_h).
   (((= :strexp_h -> strexp_h -> bool) (int_APPstrexp_h_arg2
   ((int_APPstrexp_h $1) $0))) $0)))))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   (((= :strexp_h -> strexp_h -> bool) (int_APPstrexp_h_arg2
   (int_STRUCTstrexp_h $0))) ((@ :(strexp_h -> bool) -> strexp_h)
   (\(x :strexp_h). T)))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(x1 :strid long). (((= :strexp_h -> strexp_h -> bool)
   (int_APPstrexp_h_arg2 (int_LONGSTRIDstrexp_h $0)))
   ((@ :(strexp_h -> bool) -> strexp_h) (\(x :strexp_h). T))))))
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(x2 :strexp_h).
   (((= :strexp_h -> strexp_h -> bool) (int_APPstrexp_h_arg2
   ((int_LETstrexp_h $1) $0))) ((@ :(strexp_h -> bool) -> strexp_h)
   (\(x :strexp_h). T))))))))))`),
 ((int_APPstrexp_h_arg1_DEF),
  [],
  `((/\ ((! :(funid long -> bool) -> bool) (\(x1 :funid long).
   ((! :(strexp_h -> bool) -> bool) (\(x2 :strexp_h).
   (((= :funid long -> funid long -> bool) (int_APPstrexp_h_arg1
   ((int_APPstrexp_h $1) $0))) $1)))))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   (((= :funid long -> funid long -> bool) (int_APPstrexp_h_arg1
   (int_STRUCTstrexp_h $0))) ((@ :(funid long -> bool) -> funid long)
   (\(x :funid long). T)))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(x1 :strid long). (((= :funid long -> funid long -> bool)
   (int_APPstrexp_h_arg1 (int_LONGSTRIDstrexp_h $0)))
   ((@ :(funid long -> bool) -> funid long) (\(x :funid long). T))))))
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(x2 :strexp_h).
   (((= :funid long -> funid long -> bool) (int_APPstrexp_h_arg1
   ((int_LETstrexp_h $1) $0)))
   ((@ :(funid long -> bool) -> funid long) (\(x :funid long).
   T))))))))))`),
 ((int_LONGSTRIDstrexp_h_arg_DEF),
  [],
  `((/\ ((! :(strid long -> bool) -> bool) (\(x1 :strid long).
   (((= :strid long -> strid long -> bool) (int_LONGSTRIDstrexp_h_arg
   (int_LONGSTRIDstrexp_h $0))) $0)))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   (((= :strid long -> strid long -> bool) (int_LONGSTRIDstrexp_h_arg
   (int_STRUCTstrexp_h $0))) ((@ :(strid long -> bool) -> strid long)
   (\(x :strid long). T)))))) ((/\ ((! :(funid long -> bool) -> bool)
   (\(x1 :funid long). ((! :(strexp_h -> bool) -> bool)
   (\(x2 :strexp_h). (((= :strid long -> strid long -> bool)
   (int_LONGSTRIDstrexp_h_arg ((int_APPstrexp_h $1) $0)))
   ((@ :(strid long -> bool) -> strid long) (\(x :strid long).
   T)))))))) ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(x2 :strexp_h).
   (((= :strid long -> strid long -> bool) (int_LONGSTRIDstrexp_h_arg
   ((int_LETstrexp_h $1) $0)))
   ((@ :(strid long -> bool) -> strid long) (\(x :strid long).
   T))))))))))`),
 ((int_STRUCTstrexp_h_arg_DEF),
  [],
  `((/\ ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   (((= :moddec_h -> moddec_h -> bool) (int_STRUCTstrexp_h_arg
   (int_STRUCTstrexp_h $0))) $0)))) ((/\
   ((! :(strid long -> bool) -> bool) (\(x1 :strid long).
   (((= :moddec_h -> moddec_h -> bool) (int_STRUCTstrexp_h_arg
   (int_LONGSTRIDstrexp_h $0))) ((@ :(moddec_h -> bool) -> moddec_h)
   (\(x :moddec_h). T)))))) ((/\ ((! :(funid long -> bool) -> bool)
   (\(x1 :funid long). ((! :(strexp_h -> bool) -> bool)
   (\(x2 :strexp_h). (((= :moddec_h -> moddec_h -> bool)
   (int_STRUCTstrexp_h_arg ((int_APPstrexp_h $1) $0)))
   ((@ :(moddec_h -> bool) -> moddec_h) (\(x :moddec_h). T))))))))
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(x2 :strexp_h).
   (((= :moddec_h -> moddec_h -> bool) (int_STRUCTstrexp_h_arg
   ((int_LETstrexp_h $1) $0))) ((@ :(moddec_h -> bool) -> moddec_h)
   (\(x :moddec_h). T))))))))))`),
 ((int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_strbind_h_arg_DEF),
  [],
  `((/\ ((! :(strbind_h -> bool) -> bool) (\(x1 :strbind_h).
   (((= :strbind_h -> strbind_h -> bool)
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_strbind_h_arg
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_strbind_h $0)))
   $0)))) (((= :strbind_h -> strbind_h -> bool)
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_strbind_h_arg
   int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_strbind_h))
   ((@ :(strbind_h -> bool) -> strbind_h) (\(x :strbind_h). T))))`),
 ((int_BINDstrbind_h_arg4_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x2 :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x4 :strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool) (int_BINDstrbind_h_arg4 ((((int_BINDstrbind_h $3) $2)
   $1) $0))) $0)))))))))`),
 ((int_BINDstrbind_h_arg3_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x2 :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x4 :strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :strexp_h -> strexp_h -> bool) (int_BINDstrbind_h_arg3
   ((((int_BINDstrbind_h $3) $2) $1) $0))) $1)))))))))`),
 ((int_BINDstrbind_h_arg2_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x2 :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x4 :strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool) (int_BINDstrbind_h_arg2 ((((int_BINDstrbind_h $3) $2)
   $1) $0))) $2)))))))))`),
 ((int_BINDstrbind_h_arg1_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x2 :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x4 :strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :strid -> strid -> bool) (int_BINDstrbind_h_arg1
   ((((int_BINDstrbind_h $3) $2) $1) $0))) $3)))))))))`),
 ((int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_sigexp_h_arg_DEF),
  [],
  `((/\ ((! :(sigexp_h -> bool) -> bool) (\(x1 :sigexp_h).
   (((= :sigexp_h -> sigexp_h -> bool)
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_sigexp_h_arg
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_sigexp_h $0)))
   $0)))) (((= :sigexp_h -> sigexp_h -> bool)
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_sigexp_h_arg
   int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_sigexp_h))
   ((@ :(sigexp_h -> bool) -> sigexp_h) (\(x :sigexp_h). T))))`),
 ((int_FUNCTORmoddec_h_arg_DEF),
  [],
  `((/\ ((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h).
   (((= :funbind_h -> funbind_h -> bool) (int_FUNCTORmoddec_h_arg
   (int_FUNCTORmoddec_h $0))) $0)))) ((/\ ((! :(dec -> bool) -> bool)
   (\(x1 :dec). (((= :funbind_h -> funbind_h -> bool)
   (int_FUNCTORmoddec_h_arg (int_DECmoddec_h $0)))
   ((@ :(funbind_h -> bool) -> funbind_h) (\(x :funbind_h). T))))))
   ((/\ ((! :(strbind_h -> bool) -> bool) (\(x1 :strbind_h).
   (((= :funbind_h -> funbind_h -> bool) (int_FUNCTORmoddec_h_arg
   (int_STRUCTUREmoddec_h $0))) ((@ :(funbind_h -> bool) -> funbind_h)
   (\(x :funbind_h). T)))))) ((/\ ((! :(moddec_h -> bool) -> bool)
   (\(x1 :moddec_h). ((! :(moddec_h -> bool) -> bool)
   (\(x2 :moddec_h). (((= :funbind_h -> funbind_h -> bool)
   (int_FUNCTORmoddec_h_arg ((int_LOCALmoddec_h $1) $0)))
   ((@ :(funbind_h -> bool) -> funbind_h) (\(x :funbind_h). T))))))))
   ((/\ ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :funbind_h -> funbind_h -> bool) (int_FUNCTORmoddec_h_arg
   (int_OPENmoddec_h $0))) ((@ :(funbind_h -> bool) -> funbind_h)
   (\(x :funbind_h). T)))))) ((/\
   (((= :funbind_h -> funbind_h -> bool) (int_FUNCTORmoddec_h_arg
   int_EMPTYmoddec_h)) ((@ :(funbind_h -> bool) -> funbind_h)
   (\(x :funbind_h). T)))) ((! :(moddec_h -> bool) -> bool)
   (\(x1 :moddec_h). ((! :(moddec_h -> bool) -> bool)
   (\(x2 :moddec_h). (((= :funbind_h -> funbind_h -> bool)
   (int_FUNCTORmoddec_h_arg ((int_SEQmoddec_h $1) $0)))
   ((@ :(funbind_h -> bool) -> funbind_h) (\(x :funbind_h).
   T)))))))))))))`),
 ((int_SEQmoddec_h_arg2_DEF),
  [],
  `((/\ ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   (((= :moddec_h -> moddec_h -> bool) (int_SEQmoddec_h_arg2
   ((int_SEQmoddec_h $1) $0))) $0)))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   (((= :moddec_h -> moddec_h -> bool) (int_SEQmoddec_h_arg2
   (int_DECmoddec_h $0))) ((@ :(moddec_h -> bool) -> moddec_h)
   (\(x :moddec_h). T)))))) ((/\ ((! :(strbind_h -> bool) -> bool)
   (\(x1 :strbind_h). (((= :moddec_h -> moddec_h -> bool)
   (int_SEQmoddec_h_arg2 (int_STRUCTUREmoddec_h $0)))
   ((@ :(moddec_h -> bool) -> moddec_h) (\(x :moddec_h). T)))))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   (((= :moddec_h -> moddec_h -> bool) (int_SEQmoddec_h_arg2
   ((int_LOCALmoddec_h $1) $0))) ((@ :(moddec_h -> bool) -> moddec_h)
   (\(x :moddec_h). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :moddec_h -> moddec_h -> bool) (int_SEQmoddec_h_arg2
   (int_OPENmoddec_h $0))) ((@ :(moddec_h -> bool) -> moddec_h)
   (\(x :moddec_h). T)))))) ((/\ (((= :moddec_h -> moddec_h -> bool)
   (int_SEQmoddec_h_arg2 int_EMPTYmoddec_h))
   ((@ :(moddec_h -> bool) -> moddec_h) (\(x :moddec_h). T))))
   ((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h).
   (((= :moddec_h -> moddec_h -> bool) (int_SEQmoddec_h_arg2
   (int_FUNCTORmoddec_h $0))) ((@ :(moddec_h -> bool) -> moddec_h)
   (\(x :moddec_h). T)))))))))))`),
 ((int_SEQmoddec_h_arg1_DEF),
  [],
  `((/\ ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   (((= :moddec_h -> moddec_h -> bool) (int_SEQmoddec_h_arg1
   ((int_SEQmoddec_h $1) $0))) $1)))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   (((= :moddec_h -> moddec_h -> bool) (int_SEQmoddec_h_arg1
   (int_DECmoddec_h $0))) ((@ :(moddec_h -> bool) -> moddec_h)
   (\(x :moddec_h). T)))))) ((/\ ((! :(strbind_h -> bool) -> bool)
   (\(x1 :strbind_h). (((= :moddec_h -> moddec_h -> bool)
   (int_SEQmoddec_h_arg1 (int_STRUCTUREmoddec_h $0)))
   ((@ :(moddec_h -> bool) -> moddec_h) (\(x :moddec_h). T)))))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   (((= :moddec_h -> moddec_h -> bool) (int_SEQmoddec_h_arg1
   ((int_LOCALmoddec_h $1) $0))) ((@ :(moddec_h -> bool) -> moddec_h)
   (\(x :moddec_h). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :moddec_h -> moddec_h -> bool) (int_SEQmoddec_h_arg1
   (int_OPENmoddec_h $0))) ((@ :(moddec_h -> bool) -> moddec_h)
   (\(x :moddec_h). T)))))) ((/\ (((= :moddec_h -> moddec_h -> bool)
   (int_SEQmoddec_h_arg1 int_EMPTYmoddec_h))
   ((@ :(moddec_h -> bool) -> moddec_h) (\(x :moddec_h). T))))
   ((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h).
   (((= :moddec_h -> moddec_h -> bool) (int_SEQmoddec_h_arg1
   (int_FUNCTORmoddec_h $0))) ((@ :(moddec_h -> bool) -> moddec_h)
   (\(x :moddec_h). T)))))))))))`),
 ((int_OPENmoddec_h_arg_DEF),
  [],
  `((/\ ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENmoddec_h_arg (int_OPENmoddec_h $0))) $0)))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENmoddec_h_arg (int_DECmoddec_h $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))))) ((/\
   ((! :(strbind_h -> bool) -> bool) (\(x1 :strbind_h).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENmoddec_h_arg (int_STRUCTUREmoddec_h $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENmoddec_h_arg ((int_LOCALmoddec_h $1) $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))))))) ((/\
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENmoddec_h_arg int_EMPTYmoddec_h))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENmoddec_h_arg ((int_SEQmoddec_h $1) $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T))))))))
   ((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENmoddec_h_arg (int_FUNCTORmoddec_h $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))))))))))`),
 ((int_LOCALmoddec_h_arg2_DEF),
  [],
  `((/\ ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   (((= :moddec_h -> moddec_h -> bool) (int_LOCALmoddec_h_arg2
   ((int_LOCALmoddec_h $1) $0))) $0)))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   (((= :moddec_h -> moddec_h -> bool) (int_LOCALmoddec_h_arg2
   (int_DECmoddec_h $0))) ((@ :(moddec_h -> bool) -> moddec_h)
   (\(x :moddec_h). T)))))) ((/\ ((! :(strbind_h -> bool) -> bool)
   (\(x1 :strbind_h). (((= :moddec_h -> moddec_h -> bool)
   (int_LOCALmoddec_h_arg2 (int_STRUCTUREmoddec_h $0)))
   ((@ :(moddec_h -> bool) -> moddec_h) (\(x :moddec_h). T)))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :moddec_h -> moddec_h -> bool) (int_LOCALmoddec_h_arg2
   (int_OPENmoddec_h $0))) ((@ :(moddec_h -> bool) -> moddec_h)
   (\(x :moddec_h). T)))))) ((/\ (((= :moddec_h -> moddec_h -> bool)
   (int_LOCALmoddec_h_arg2 int_EMPTYmoddec_h))
   ((@ :(moddec_h -> bool) -> moddec_h) (\(x :moddec_h). T)))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   (((= :moddec_h -> moddec_h -> bool) (int_LOCALmoddec_h_arg2
   ((int_SEQmoddec_h $1) $0))) ((@ :(moddec_h -> bool) -> moddec_h)
   (\(x :moddec_h). T)))))))) ((! :(funbind_h -> bool) -> bool)
   (\(x1 :funbind_h). (((= :moddec_h -> moddec_h -> bool)
   (int_LOCALmoddec_h_arg2 (int_FUNCTORmoddec_h $0)))
   ((@ :(moddec_h -> bool) -> moddec_h) (\(x :moddec_h).
   T)))))))))))`),
 ((int_LOCALmoddec_h_arg1_DEF),
  [],
  `((/\ ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   (((= :moddec_h -> moddec_h -> bool) (int_LOCALmoddec_h_arg1
   ((int_LOCALmoddec_h $1) $0))) $1)))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   (((= :moddec_h -> moddec_h -> bool) (int_LOCALmoddec_h_arg1
   (int_DECmoddec_h $0))) ((@ :(moddec_h -> bool) -> moddec_h)
   (\(x :moddec_h). T)))))) ((/\ ((! :(strbind_h -> bool) -> bool)
   (\(x1 :strbind_h). (((= :moddec_h -> moddec_h -> bool)
   (int_LOCALmoddec_h_arg1 (int_STRUCTUREmoddec_h $0)))
   ((@ :(moddec_h -> bool) -> moddec_h) (\(x :moddec_h). T)))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :moddec_h -> moddec_h -> bool) (int_LOCALmoddec_h_arg1
   (int_OPENmoddec_h $0))) ((@ :(moddec_h -> bool) -> moddec_h)
   (\(x :moddec_h). T)))))) ((/\ (((= :moddec_h -> moddec_h -> bool)
   (int_LOCALmoddec_h_arg1 int_EMPTYmoddec_h))
   ((@ :(moddec_h -> bool) -> moddec_h) (\(x :moddec_h). T)))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   (((= :moddec_h -> moddec_h -> bool) (int_LOCALmoddec_h_arg1
   ((int_SEQmoddec_h $1) $0))) ((@ :(moddec_h -> bool) -> moddec_h)
   (\(x :moddec_h). T)))))))) ((! :(funbind_h -> bool) -> bool)
   (\(x1 :funbind_h). (((= :moddec_h -> moddec_h -> bool)
   (int_LOCALmoddec_h_arg1 (int_FUNCTORmoddec_h $0)))
   ((@ :(moddec_h -> bool) -> moddec_h) (\(x :moddec_h).
   T)))))))))))`),
 ((int_STRUCTUREmoddec_h_arg_DEF),
  [],
  `((/\ ((! :(strbind_h -> bool) -> bool) (\(x1 :strbind_h).
   (((= :strbind_h -> strbind_h -> bool) (int_STRUCTUREmoddec_h_arg
   (int_STRUCTUREmoddec_h $0))) $0)))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   (((= :strbind_h -> strbind_h -> bool) (int_STRUCTUREmoddec_h_arg
   (int_DECmoddec_h $0))) ((@ :(strbind_h -> bool) -> strbind_h)
   (\(x :strbind_h). T)))))) ((/\ ((! :(moddec_h -> bool) -> bool)
   (\(x1 :moddec_h). ((! :(moddec_h -> bool) -> bool)
   (\(x2 :moddec_h). (((= :strbind_h -> strbind_h -> bool)
   (int_STRUCTUREmoddec_h_arg ((int_LOCALmoddec_h $1) $0)))
   ((@ :(strbind_h -> bool) -> strbind_h) (\(x :strbind_h). T))))))))
   ((/\ ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :strbind_h -> strbind_h -> bool) (int_STRUCTUREmoddec_h_arg
   (int_OPENmoddec_h $0))) ((@ :(strbind_h -> bool) -> strbind_h)
   (\(x :strbind_h). T)))))) ((/\
   (((= :strbind_h -> strbind_h -> bool) (int_STRUCTUREmoddec_h_arg
   int_EMPTYmoddec_h)) ((@ :(strbind_h -> bool) -> strbind_h)
   (\(x :strbind_h). T)))) ((/\ ((! :(moddec_h -> bool) -> bool)
   (\(x1 :moddec_h). ((! :(moddec_h -> bool) -> bool)
   (\(x2 :moddec_h). (((= :strbind_h -> strbind_h -> bool)
   (int_STRUCTUREmoddec_h_arg ((int_SEQmoddec_h $1) $0)))
   ((@ :(strbind_h -> bool) -> strbind_h) (\(x :strbind_h). T))))))))
   ((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h).
   (((= :strbind_h -> strbind_h -> bool) (int_STRUCTUREmoddec_h_arg
   (int_FUNCTORmoddec_h $0))) ((@ :(strbind_h -> bool) -> strbind_h)
   (\(x :strbind_h). T)))))))))))`),
 ((int_DECmoddec_h_arg_DEF),
  [],
  `((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   (((= :dec -> dec -> bool) (int_DECmoddec_h_arg (int_DECmoddec_h
   $0))) $0)))) ((/\ ((! :(strbind_h -> bool) -> bool)
   (\(x1 :strbind_h). (((= :dec -> dec -> bool) (int_DECmoddec_h_arg
   (int_STRUCTUREmoddec_h $0))) ((@ :(dec -> bool) -> dec) (\(x :dec).
   T)))))) ((/\ ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   (((= :dec -> dec -> bool) (int_DECmoddec_h_arg ((int_LOCALmoddec_h
   $1) $0))) ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :dec -> dec -> bool)
   (int_DECmoddec_h_arg (int_OPENmoddec_h $0)))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))) ((/\
   (((= :dec -> dec -> bool) (int_DECmoddec_h_arg int_EMPTYmoddec_h))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T)))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   (((= :dec -> dec -> bool) (int_DECmoddec_h_arg ((int_SEQmoddec_h
   $1) $0))) ((@ :(dec -> bool) -> dec) (\(x :dec). T))))))))
   ((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h).
   (((= :dec -> dec -> bool) (int_DECmoddec_h_arg (int_FUNCTORmoddec_h
   $0))) ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))))))))`),
 ((int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_funbind_h_arg_DEF),
  [],
  `((/\ ((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h).
   (((= :funbind_h -> funbind_h -> bool)
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_funbind_h_arg
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_funbind_h $0)))
   $0)))) (((= :funbind_h -> funbind_h -> bool)
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_funbind_h_arg
   int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_funbind_h))
   ((@ :(funbind_h -> bool) -> funbind_h) (\(x :funbind_h). T))))`),
 ((int_REBINDfunbind_h_arg2_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funid long -> bool) -> bool) (\(x2 :funid long).
   (((= :funid long -> funid long -> bool) (int_REBINDfunbind_h_arg2
   ((int_REBINDfunbind_h $1) $0))) $0))))))
   ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x4 :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(x5 :strexp_h).
   ((! :(funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x6 :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :funid long -> funid long -> bool) (int_REBINDfunbind_h_arg2
   ((((((int_BINDfunbind_h $5) $4) $3) $2) $1) $0)))
   ((@ :(funid long -> bool) -> funid long) (\(x :funid long).
   T))))))))))))))))`),
 ((int_REBINDfunbind_h_arg1_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funid long -> bool) -> bool) (\(x2 :funid long).
   (((= :funid -> funid -> bool) (int_REBINDfunbind_h_arg1
   ((int_REBINDfunbind_h $1) $0))) $1))))))
   ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x4 :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(x5 :strexp_h).
   ((! :(funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x6 :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :funid -> funid -> bool) (int_REBINDfunbind_h_arg1
   ((((((int_BINDfunbind_h $5) $4) $3) $2) $1) $0)))
   ((@ :(funid -> bool) -> funid) (\(x :funid). T))))))))))))))))`),
 ((int_BINDfunbind_h_arg6_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x4 :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(x5 :strexp_h).
   ((! :(funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x6 :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool) (int_BINDfunbind_h_arg6 ((((((int_BINDfunbind_h $5) $4)
   $3) $2) $1) $0))) $0)))))))))))))) ((! :(funid -> bool) -> bool)
   (\(x1 :funid). ((! :(funid long -> bool) -> bool)
   (\(x2 :funid long).
   (((= :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool) (int_BINDfunbind_h_arg6 ((int_REBINDfunbind_h $1) $0)))
   ((@ :(funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) ->
        funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h)
   (\(x :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   T))))))))`),
 ((int_BINDfunbind_h_arg5_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x4 :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(x5 :strexp_h).
   ((! :(funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x6 :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :strexp_h -> strexp_h -> bool) (int_BINDfunbind_h_arg5
   ((((((int_BINDfunbind_h $5) $4) $3) $2) $1) $0))) $1))))))))))))))
   ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funid long -> bool) -> bool) (\(x2 :funid long).
   (((= :strexp_h -> strexp_h -> bool) (int_BINDfunbind_h_arg5
   ((int_REBINDfunbind_h $1) $0)))
   ((@ :(strexp_h -> bool) -> strexp_h) (\(x :strexp_h). T))))))))`),
 ((int_BINDfunbind_h_arg4_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x4 :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(x5 :strexp_h).
   ((! :(funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x6 :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool) (int_BINDfunbind_h_arg4 ((((((int_BINDfunbind_h $5) $4)
   $3) $2) $1) $0))) $2)))))))))))))) ((! :(funid -> bool) -> bool)
   (\(x1 :funid). ((! :(funid long -> bool) -> bool)
   (\(x2 :funid long).
   (((= :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool) (int_BINDfunbind_h_arg4 ((int_REBINDfunbind_h $1) $0)))
   ((@ :(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) ->
        sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h)
   (\(x :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   T))))))))`),
 ((int_BINDfunbind_h_arg3_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x4 :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(x5 :strexp_h).
   ((! :(funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x6 :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :sigexp_h -> sigexp_h -> bool) (int_BINDfunbind_h_arg3
   ((((((int_BINDfunbind_h $5) $4) $3) $2) $1) $0))) $3))))))))))))))
   ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funid long -> bool) -> bool) (\(x2 :funid long).
   (((= :sigexp_h -> sigexp_h -> bool) (int_BINDfunbind_h_arg3
   ((int_REBINDfunbind_h $1) $0)))
   ((@ :(sigexp_h -> bool) -> sigexp_h) (\(x :sigexp_h). T))))))))`),
 ((int_BINDfunbind_h_arg2_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x4 :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(x5 :strexp_h).
   ((! :(funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x6 :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :strid -> strid -> bool) (int_BINDfunbind_h_arg2
   ((((((int_BINDfunbind_h $5) $4) $3) $2) $1) $0))) $4))))))))))))))
   ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funid long -> bool) -> bool) (\(x2 :funid long).
   (((= :strid -> strid -> bool) (int_BINDfunbind_h_arg2
   ((int_REBINDfunbind_h $1) $0))) ((@ :(strid -> bool) -> strid)
   (\(x :strid). T))))))))`),
 ((int_BINDfunbind_h_arg1_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x4 :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(x5 :strexp_h).
   ((! :(funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x6 :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :funid -> funid -> bool) (int_BINDfunbind_h_arg1
   ((((((int_BINDfunbind_h $5) $4) $3) $2) $1) $0))) $5))))))))))))))
   ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funid long -> bool) -> bool) (\(x2 :funid long).
   (((= :funid -> funid -> bool) (int_BINDfunbind_h_arg1
   ((int_REBINDfunbind_h $1) $0))) ((@ :(funid -> bool) -> funid)
   (\(x :funid). T))))))))`),
 ((dist_aux_ftn_funbind_h_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x4 :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(x5 :strexp_h).
   ((! :(funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x6 :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :num -> num -> bool) (dist_aux_ftn_funbind_h
   ((((((int_BINDfunbind_h $5) $4) $3) $2) $1) $0))) 0))))))))))))))
   ((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funid long -> bool) -> bool) (\(x2 :funid long).
   (((= :num -> num -> bool) (dist_aux_ftn_funbind_h
   ((int_REBINDfunbind_h $1) $0))) 1)))))) ((/\
   (((= :num -> num -> bool)
   (dist_aux_ftn_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_funbind_h)) 2)) ((/\
   ((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h).
   (((= :num -> num -> bool)
   (dist_aux_ftn_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_funbind_h $0)))
   3)))) ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   (((= :num -> num -> bool) (dist_aux_ftn_moddec_h (int_DECmoddec_h
   $0))) 4)))) ((/\ ((! :(strbind_h -> bool) -> bool)
   (\(x1 :strbind_h). (((= :num -> num -> bool) (dist_aux_ftn_moddec_h
   (int_STRUCTUREmoddec_h $0))) 5)))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   (((= :num -> num -> bool) (dist_aux_ftn_moddec_h
   ((int_LOCALmoddec_h $1) $0))) 6)))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :num -> num -> bool)
   (dist_aux_ftn_moddec_h (int_OPENmoddec_h $0))) 7)))) ((/\
   (((= :num -> num -> bool) (dist_aux_ftn_moddec_h
   int_EMPTYmoddec_h)) 8)) ((/\ ((! :(moddec_h -> bool) -> bool)
   (\(x1 :moddec_h). ((! :(moddec_h -> bool) -> bool)
   (\(x2 :moddec_h). (((= :num -> num -> bool) (dist_aux_ftn_moddec_h
   ((int_SEQmoddec_h $1) $0))) 9)))))) ((/\
   ((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h).
   (((= :num -> num -> bool) (dist_aux_ftn_moddec_h
   (int_FUNCTORmoddec_h $0))) 10)))) ((/\ (((= :num -> num -> bool)
   (dist_aux_ftn_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_sigexp_h)) 11)) ((/\
   ((! :(sigexp_h -> bool) -> bool) (\(x1 :sigexp_h).
   (((= :num -> num -> bool)
   (dist_aux_ftn_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_sigexp_h $0)))
   12)))) ((/\ ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x2 :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x4 :strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :num -> num -> bool) (dist_aux_ftn_strbind_h
   ((((int_BINDstrbind_h $3) $2) $1) $0))) 13)))))))))) ((/\
   (((= :num -> num -> bool)
   (dist_aux_ftn_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_strbind_h)) 14))
   ((/\ ((! :(strbind_h -> bool) -> bool) (\(x1 :strbind_h).
   (((= :num -> num -> bool)
   (dist_aux_ftn_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_strbind_h $0)))
   15)))) ((/\ ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   (((= :num -> num -> bool) (dist_aux_ftn_strexp_h
   (int_STRUCTstrexp_h $0))) 16)))) ((/\
   ((! :(strid long -> bool) -> bool) (\(x1 :strid long).
   (((= :num -> num -> bool) (dist_aux_ftn_strexp_h
   (int_LONGSTRIDstrexp_h $0))) 17)))) ((/\
   ((! :(funid long -> bool) -> bool) (\(x1 :funid long).
   ((! :(strexp_h -> bool) -> bool) (\(x2 :strexp_h).
   (((= :num -> num -> bool) (dist_aux_ftn_strexp_h ((int_APPstrexp_h
   $1) $0))) 18)))))) ((! :(moddec_h -> bool) -> bool)
   (\(x1 :moddec_h). ((! :(strexp_h -> bool) -> bool)
   (\(x2 :strexp_h). (((= :num -> num -> bool) (dist_aux_ftn_strexp_h
   ((int_LETstrexp_h $1) $0))) 19))))))))))))))))))))))))`),
 ((LETstrexp_h),
  [],
  `(((= :(moddec_h -> strexp_h -> strexp_h) ->
         (moddec_h -> strexp_h -> strexp_h) -> bool) LETstrexp_h)
   (\(x0 :moddec_h). (\(x1 :strexp_h). ((int_LETstrexp_h $1) $0))))`),
 ((APPstrexp_h),
  [],
  `(((= :(funid long -> strexp_h -> strexp_h) ->
         (funid long -> strexp_h -> strexp_h) -> bool) APPstrexp_h)
   (\(x0 :funid long). (\(x1 :strexp_h). ((int_APPstrexp_h $1)
   $0))))`),
 ((LONGSTRIDstrexp_h),
  [],
  `(((= :(strid long -> strexp_h) -> (strid long -> strexp_h) -> bool)
   LONGSTRIDstrexp_h) (\(x0 :strid long). (int_LONGSTRIDstrexp_h
   $0)))`),
 ((STRUCTstrexp_h),
  [],
  `(((= :(moddec_h -> strexp_h) -> (moddec_h -> strexp_h) -> bool)
   STRUCTstrexp_h) (\(x0 :moddec_h). (int_STRUCTstrexp_h $0)))`),
 ((BINDstrbind_h),
  [],
  `(((= :(strid -> sigexp_h option -> strexp_h -> strbind_h option ->
         strbind_h) ->
         (strid -> sigexp_h option -> strexp_h -> strbind_h option ->
         strbind_h) -> bool) BINDstrbind_h) (\(x0 :strid).
   (\(x1 :sigexp_h option). (\(x2 :strexp_h).
   (\(x3 :strbind_h option). ((((int_BINDstrbind_h $3)
   (int_inj_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h $2))
   $1) (int_inj_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   $0)))))))`),
 ((int_inv_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h),
  [],
  `((/\ (((= :strbind_h option -> strbind_h option -> bool)
   (int_inv_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_strbind_h))
   (NONE :strbind_h option))) ((! :(strbind_h -> bool) -> bool)
   (\(x1 :strbind_h).
   (((= :strbind_h option -> strbind_h option -> bool)
   (int_inv_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_strbind_h $0)))
   ((SOME :strbind_h -> strbind_h option) $0)))))`),
 ((int_inj_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h),
  [],
  `((/\
   (((= :strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool)
   (int_inj_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   (NONE :strbind_h option)))
   int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_strbind_h))
   ((! :(strbind_h -> bool) -> bool) (\(x0 :strbind_h).
   (((= :strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool)
   (int_inj_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   ((SOME :strbind_h -> strbind_h option) $0)))
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_strbind_h
   $0)))))`),
 ((REBINDfunbind_h),
  [],
  `(((= :(funid -> funid long -> funbind_h) ->
         (funid -> funid long -> funbind_h) -> bool) REBINDfunbind_h)
   (\(x0 :funid). (\(x1 :funid long). ((int_REBINDfunbind_h $1)
   $0))))`),
 ((BINDfunbind_h),
  [],
  `(((= :(funid -> strid -> sigexp_h -> sigexp_h option -> strexp_h ->
         funbind_h option -> funbind_h) ->
         (funid -> strid -> sigexp_h -> sigexp_h option -> strexp_h ->
         funbind_h option -> funbind_h) -> bool) BINDfunbind_h)
   (\(x0 :funid). (\(x1 :strid). (\(x2 :sigexp_h).
   (\(x3 :sigexp_h option). (\(x4 :strexp_h).
   (\(x5 :funbind_h option). ((((((int_BINDfunbind_h $5) $4) $3)
   (int_inj_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h $2))
   $1) (int_inj_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   $0)))))))))`),
 ((int_inv_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h),
  [],
  `((/\ (((= :sigexp_h option -> sigexp_h option -> bool)
   (int_inv_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_sigexp_h))
   (NONE :sigexp_h option))) ((! :(sigexp_h -> bool) -> bool)
   (\(x1 :sigexp_h). (((= :sigexp_h option -> sigexp_h option -> bool)
   (int_inv_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_sigexp_h $0)))
   ((SOME :sigexp_h -> sigexp_h option) $0)))))`),
 ((int_inj_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h),
  [],
  `((/\
   (((= :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool)
   (int_inj_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   (NONE :sigexp_h option)))
   int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_sigexp_h))
   ((! :(sigexp_h -> bool) -> bool) (\(x0 :sigexp_h).
   (((= :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool)
   (int_inj_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   ((SOME :sigexp_h -> sigexp_h option) $0)))
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_sigexp_h $0)))))`),
 ((FUNCTORmoddec_h),
  [],
  `(((= :(funbind_h -> moddec_h) -> (funbind_h -> moddec_h) -> bool)
   FUNCTORmoddec_h) (\(x0 :funbind_h). (int_FUNCTORmoddec_h $0)))`),
 ((SEQmoddec_h),
  [],
  `(((= :(moddec_h -> moddec_h -> moddec_h) ->
         (moddec_h -> moddec_h -> moddec_h) -> bool) SEQmoddec_h)
   (\(x0 :moddec_h). (\(x1 :moddec_h). ((int_SEQmoddec_h $1) $0))))`),
 ((EMPTYmoddec_h),
  [],
  `(((= :moddec_h -> moddec_h -> bool) EMPTYmoddec_h)
   int_EMPTYmoddec_h)`),
 ((OPENmoddec_h),
  [],
  `(((= :(strid long nonemptylist -> moddec_h) ->
         (strid long nonemptylist -> moddec_h) -> bool) OPENmoddec_h)
   (\(x0 :strid long nonemptylist). (int_OPENmoddec_h $0)))`),
 ((LOCALmoddec_h),
  [],
  `(((= :(moddec_h -> moddec_h -> moddec_h) ->
         (moddec_h -> moddec_h -> moddec_h) -> bool) LOCALmoddec_h)
   (\(x0 :moddec_h). (\(x1 :moddec_h). ((int_LOCALmoddec_h $1)
   $0))))`),
 ((STRUCTUREmoddec_h),
  [],
  `(((= :(strbind_h -> moddec_h) -> (strbind_h -> moddec_h) -> bool)
   STRUCTUREmoddec_h) (\(x0 :strbind_h). (int_STRUCTUREmoddec_h
   $0)))`),
 ((DECmoddec_h),
  [],
  `(((= :(dec -> moddec_h) -> (dec -> moddec_h) -> bool) DECmoddec_h)
   (\(x0 :dec). (int_DECmoddec_h $0)))`),
 ((int_inv_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h),
  [],
  `((/\ (((= :funbind_h option -> funbind_h option -> bool)
   (int_inv_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_funbind_h))
   (NONE :funbind_h option))) ((! :(funbind_h -> bool) -> bool)
   (\(x1 :funbind_h).
   (((= :funbind_h option -> funbind_h option -> bool)
   (int_inv_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_funbind_h $0)))
   ((SOME :funbind_h -> funbind_h option) $0)))))`),
 ((int_inj_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h),
  [],
  `((/\
   (((= :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool)
   (int_inj_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   (NONE :funbind_h option)))
   int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_funbind_h))
   ((! :(funbind_h -> bool) -> bool) (\(x0 :funbind_h).
   (((= :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool)
   (int_inj_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h
   ((SOME :funbind_h -> funbind_h option) $0)))
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_funbind_h
   $0)))))`),
 ((int_LETstrexp_h_DEF),
  [],
  `((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(x2 :strexp_h).
   (((= :strexp_h -> strexp_h -> bool) ((int_LETstrexp_h $1) $0))
   (strexp_h_abs ((JOINT_int_LETstrexp_h (moddec_h_rep $1))
   (strexp_h_rep $0))))))))`),
 ((int_APPstrexp_h_DEF),
  [],
  `((! :(funid long -> bool) -> bool) (\(x1 :funid long).
   ((! :(strexp_h -> bool) -> bool) (\(x2 :strexp_h).
   (((= :strexp_h -> strexp_h -> bool) ((int_APPstrexp_h $1) $0))
   (strexp_h_abs ((JOINT_int_APPstrexp_h $1) (strexp_h_rep
   $0))))))))`),
 ((int_LONGSTRIDstrexp_h_DEF),
  [],
  `((! :(strid long -> bool) -> bool) (\(x1 :strid long).
   (((= :strexp_h -> strexp_h -> bool) (int_LONGSTRIDstrexp_h $0))
   (strexp_h_abs (JOINT_int_LONGSTRIDstrexp_h $0)))))`),
 ((int_STRUCTstrexp_h_DEF),
  [],
  `((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   (((= :strexp_h -> strexp_h -> bool) (int_STRUCTstrexp_h $0))
   (strexp_h_abs (JOINT_int_STRUCTstrexp_h (moddec_h_rep $0))))))`),
 ((int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_strbind_h_DEF),
  [],
  `((! :(strbind_h -> bool) -> bool) (\(x1 :strbind_h).
   (((= :strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool)
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_strbind_h $0))
   (strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_abs
   (JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_strbind_h
   (strbind_h_rep $0))))))`),
 ((int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_strbind_h_DEF),
  [],
  `(((= :strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool)
   int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_strbind_h)
   (strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_abs
   JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_strbind_h))`),
 ((int_BINDstrbind_h_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x2 :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x4 :strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :strbind_h -> strbind_h -> bool) ((((int_BINDstrbind_h $3) $2)
   $1) $0)) (strbind_h_abs ((((JOINT_int_BINDstrbind_h $3)
   (sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_rep $2))
   (strexp_h_rep $1))
   (strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_rep
   $0))))))))))))`),
 ((int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_sigexp_h_DEF),
  [],
  `((! :(sigexp_h -> bool) -> bool) (\(x1 :sigexp_h).
   (((= :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool)
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_sigexp_h $0))
   (sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_abs
   (JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_sigexp_h
   $0)))))`),
 ((int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_sigexp_h_DEF),
  [],
  `(((= :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool)
   int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_sigexp_h)
   (sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_abs
   JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_sigexp_h))`),
 ((int_FUNCTORmoddec_h_DEF),
  [],
  `((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h).
   (((= :moddec_h -> moddec_h -> bool) (int_FUNCTORmoddec_h $0))
   (moddec_h_abs (JOINT_int_FUNCTORmoddec_h (funbind_h_rep $0))))))`),
 ((int_SEQmoddec_h_DEF),
  [],
  `((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   (((= :moddec_h -> moddec_h -> bool) ((int_SEQmoddec_h $1) $0))
   (moddec_h_abs ((JOINT_int_SEQmoddec_h (moddec_h_rep $1))
   (moddec_h_rep $0))))))))`),
 ((int_EMPTYmoddec_h_DEF),
  [],
  `(((= :moddec_h -> moddec_h -> bool) int_EMPTYmoddec_h)
   (moddec_h_abs JOINT_int_EMPTYmoddec_h))`),
 ((int_OPENmoddec_h_DEF),
  [],
  `((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :moddec_h -> moddec_h -> bool) (int_OPENmoddec_h $0))
   (moddec_h_abs (JOINT_int_OPENmoddec_h $0)))))`),
 ((int_LOCALmoddec_h_DEF),
  [],
  `((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   (((= :moddec_h -> moddec_h -> bool) ((int_LOCALmoddec_h $1) $0))
   (moddec_h_abs ((JOINT_int_LOCALmoddec_h (moddec_h_rep $1))
   (moddec_h_rep $0))))))))`),
 ((int_STRUCTUREmoddec_h_DEF),
  [],
  `((! :(strbind_h -> bool) -> bool) (\(x1 :strbind_h).
   (((= :moddec_h -> moddec_h -> bool) (int_STRUCTUREmoddec_h $0))
   (moddec_h_abs (JOINT_int_STRUCTUREmoddec_h (strbind_h_rep
   $0))))))`),
 ((int_DECmoddec_h_DEF),
  [],
  `((! :(dec -> bool) -> bool) (\(x1 :dec).
   (((= :moddec_h -> moddec_h -> bool) (int_DECmoddec_h $0))
   (moddec_h_abs (JOINT_int_DECmoddec_h $0)))))`),
 ((int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_funbind_h_DEF),
  [],
  `((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h).
   (((= :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool)
   (int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_funbind_h $0))
   (funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_abs
   (JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_funbind_h
   (funbind_h_rep $0))))))`),
 ((int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_funbind_h_DEF),
  [],
  `(((= :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool)
   int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_funbind_h)
   (funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_abs
   JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_funbind_h))`),
 ((int_REBINDfunbind_h_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funid long -> bool) -> bool) (\(x2 :funid long).
   (((= :funbind_h -> funbind_h -> bool) ((int_REBINDfunbind_h $1)
   $0)) (funbind_h_abs ((JOINT_int_REBINDfunbind_h $1) $0)))))))`),
 ((int_BINDfunbind_h_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x4 :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(x5 :strexp_h).
   ((! :(funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(x6 :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :funbind_h -> funbind_h -> bool) ((((((int_BINDfunbind_h $5)
   $4) $3) $2) $1) $0)) (funbind_h_abs ((((((JOINT_int_BINDfunbind_h
   $5) $4) $3)
   (sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_rep $2))
   (strexp_h_rep $1))
   (funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_rep
   $0))))))))))))))))`),
 ((funbind_h_REP_ABS),
  [],
  `((/\ ((! :(funbind_h -> bool) -> bool) (\(a :funbind_h).
   (((= :funbind_h -> funbind_h -> bool) (funbind_h_abs (funbind_h_rep
   $0))) $0))))
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(r :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 1)) $0))
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool) (funbind_h_rep (funbind_h_abs $0))) $0)))))`),
 ((funbind_h_TY_DEF),
  [],
  `((? :((funbind_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h) ->
        bool) -> bool)
   (\(rep :funbind_h ->
           joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((TYPE_DEFINITION :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
                       bool) ->
                       (funbind_h ->
                       joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h) ->
                       bool)
   (\(x :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 1))) $0)))`),
 ((funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_REP_ABS),
  [],
  `((/\
   ((! :(funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(a :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool)
   (funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_abs
   (funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_rep $0)))
   $0))))
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(r :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 2)) $0))
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool)
   (funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_rep
   (funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_abs $0)))
   $0)))))`),
 ((funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_TY_DEF),
  [],
  `((? :((funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h) ->
        bool) -> bool)
   (\(rep :funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
           joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((TYPE_DEFINITION :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
                       bool) ->
                       (funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
                       joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h) ->
                       bool)
   (\(x :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 2))) $0)))`),
 ((moddec_h_REP_ABS),
  [],
  `((/\ ((! :(moddec_h -> bool) -> bool) (\(a :moddec_h).
   (((= :moddec_h -> moddec_h -> bool) (moddec_h_abs (moddec_h_rep
   $0))) $0))))
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(r :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 3)) $0))
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool) (moddec_h_rep (moddec_h_abs $0))) $0)))))`),
 ((moddec_h_TY_DEF),
  [],
  `((? :((moddec_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h) ->
        bool) -> bool)
   (\(rep :moddec_h ->
           joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((TYPE_DEFINITION :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
                       bool) ->
                       (moddec_h ->
                       joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h) ->
                       bool)
   (\(x :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 3))) $0)))`),
 ((sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_REP_ABS),
  [],
  `((/\
   ((! :(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(a :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool)
   (sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_abs
   (sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_rep $0)))
   $0))))
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(r :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 4)) $0))
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool)
   (sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_rep
   (sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_abs $0)))
   $0)))))`),
 ((sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_TY_DEF),
  [],
  `((? :((sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h) ->
        bool) -> bool)
   (\(rep :sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
           joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((TYPE_DEFINITION :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
                       bool) ->
                       (sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
                       joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h) ->
                       bool)
   (\(x :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 4))) $0)))`),
 ((strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_REP_ABS),
  [],
  `((/\
   ((! :(strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
        bool) -> bool)
   (\(a :strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h).
   (((= :strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         bool)
   (strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_abs
   (strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_rep $0)))
   $0))))
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(r :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 6)) $0))
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool)
   (strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_rep
   (strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_abs $0)))
   $0)))))`),
 ((strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_TY_DEF),
  [],
  `((? :((strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h) ->
        bool) -> bool)
   (\(rep :strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
           joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((TYPE_DEFINITION :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
                       bool) ->
                       (strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h ->
                       joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h) ->
                       bool)
   (\(x :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 6))) $0)))`),
 ((strexp_h_REP_ABS),
  [],
  `((/\ ((! :(strexp_h -> bool) -> bool) (\(a :strexp_h).
   (((= :strexp_h -> strexp_h -> bool) (strexp_h_abs (strexp_h_rep
   $0))) $0))))
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(r :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 7)) $0))
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool) (strexp_h_rep (strexp_h_abs $0))) $0)))))`),
 ((strexp_h_TY_DEF),
  [],
  `((? :((strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h) ->
        bool) -> bool)
   (\(rep :strexp_h ->
           joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((TYPE_DEFINITION :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
                       bool) ->
                       (strexp_h ->
                       joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h) ->
                       bool)
   (\(x :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 7))) $0)))`),
 ((strbind_h_REP_ABS),
  [],
  `((/\ ((! :(strbind_h -> bool) -> bool) (\(a :strbind_h).
   (((= :strbind_h -> strbind_h -> bool) (strbind_h_abs (strbind_h_rep
   $0))) $0))))
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(r :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 5)) $0))
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool) (strbind_h_rep (strbind_h_abs $0))) $0)))))`),
 ((strbind_h_TY_DEF),
  [],
  `((? :((strbind_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h) ->
        bool) -> bool)
   (\(rep :strbind_h ->
           joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((TYPE_DEFINITION :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
                       bool) ->
                       (strbind_h ->
                       joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h) ->
                       bool)
   (\(x :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 5))) $0)))`),
 ((joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(f' :funid).
   ((! :(strid -> bool) -> bool) (\(s0 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(s1 :sigexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j3 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   ((((((JOINT_int_BINDfunbind_h $5) $4) $3) $2) $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $2)) 4)) ((/\ (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $1)) 7)) (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 2)))) 1) 0))))))))))))))) ((/\ ((! :(funid -> bool) -> bool)
   (\(f' :funid). ((! :(funid long -> bool) -> bool)
   (\(l :funid long). (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   ((JOINT_int_REBINDfunbind_h $1) $0))) 1)))))) ((/\
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_funbind_h))
   2)) ((/\
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   (JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_funbind_h
   $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 1)) 2) 0))))) ((/\ ((! :(dec -> bool) -> bool) (\(d :dec).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   (JOINT_int_DECmoddec_h $0))) 3)))) ((/\
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   (JOINT_int_STRUCTUREmoddec_h $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 5)) 3) 0))))) ((/\
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   ((JOINT_int_LOCALmoddec_h $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $1)) 3)) (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 3))) 3) 0))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist). (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   (JOINT_int_OPENmoddec_h $0))) 3)))) ((/\ (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   JOINT_int_EMPTYmoddec_h)) 3)) ((/\
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   ((JOINT_int_SEQmoddec_h $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $1)) 3)) (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 3))) 3) 0))))))) ((/\
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   (JOINT_int_FUNCTORmoddec_h $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 1)) 3) 0))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_sigexp_h)) 4))
   ((/\ ((! :(sigexp_h -> bool) -> bool) (\(s :sigexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   (JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_sigexp_h
   $0))) 4)))) ((/\ ((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j3 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   ((((JOINT_int_BINDstrbind_h $3) $2) $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $2)) 4)) ((/\ (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $1)) 7)) (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 6)))) 5) 0))))))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_strbind_h))
   6)) ((/\
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   (JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_strbind_h
   $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 5)) 6) 0))))) ((/\
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   (JOINT_int_STRUCTstrexp_h $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 3)) 7) 0))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(l :strid long). (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   (JOINT_int_LONGSTRIDstrexp_h $0))) 7)))) ((/\
   ((! :(funid long -> bool) -> bool) (\(l' :funid long).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   ((JOINT_int_APPstrexp_h $1) $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 7)) 7) 0)))))))
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   ((JOINT_int_LETstrexp_h $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $1)) 3)) (((= :num -> num -> bool)
   (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_select
   $0)) 7))) 7) 0)))))))))))))))))))))))))`),
 ((JOINT_int_LETstrexp_h_DEF),
  [],
  `((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool) ((JOINT_int_LETstrexp_h $1) $0))
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + strid long + funid long + one ->
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + strid long + funid long + one ->
          one + one + one + strid long + funid long + one)
   ((INR :one + strid long + funid long + one ->
          one + one + strid long + funid long + one)
   ((INR :strid long + funid long + one ->
          one + strid long + funid long + one)
   ((INR :funid long + one -> strid long + funid long + one)
   ((INR :one -> funid long + one) one))))))))))))))))))))
   (((CONS :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $1))
   (((CONS :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $0))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list))))))))))`),
 ((JOINT_int_APPstrexp_h_DEF),
  [],
  `((! :(funid long -> bool) -> bool) (\(l' :funid long).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool) ((JOINT_int_APPstrexp_h $1) $0))
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + strid long + funid long + one ->
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + strid long + funid long + one ->
          one + one + one + strid long + funid long + one)
   ((INR :one + strid long + funid long + one ->
          one + one + strid long + funid long + one)
   ((INR :strid long + funid long + one ->
          one + strid long + funid long + one)
   ((INR :funid long + one -> strid long + funid long + one)
   ((INL :funid long -> funid long + one) $1))))))))))))))))))))
   (((CONS :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $0))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list)))))))))`),
 ((JOINT_int_LONGSTRIDstrexp_h_DEF),
  [],
  `((! :(strid long -> bool) -> bool) (\(l :strid long).
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool) (JOINT_int_LONGSTRIDstrexp_h $0))
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + strid long + funid long + one ->
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + strid long + funid long + one ->
          one + one + one + strid long + funid long + one)
   ((INR :one + strid long + funid long + one ->
          one + one + strid long + funid long + one)
   ((INR :strid long + funid long + one ->
          one + strid long + funid long + one)
   ((INL :strid long -> strid long + funid long + one)
   $0)))))))))))))))))))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list))))))`),
 ((JOINT_int_STRUCTstrexp_h_DEF),
  [],
  `((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool) (JOINT_int_STRUCTstrexp_h $0))
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + strid long + funid long + one ->
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + strid long + funid long + one ->
          one + one + one + strid long + funid long + one)
   ((INR :one + strid long + funid long + one ->
          one + one + strid long + funid long + one)
   ((INL :one -> one + strid long + funid long + one)
   one))))))))))))))))))
   (((CONS :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $0))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list)))))))`),
 ((JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_strbind_h_DEF),
  [],
  `((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool)
   (JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_strbind_h
   $0))
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + strid long + funid long + one ->
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + strid long + funid long + one ->
          one + one + one + strid long + funid long + one)
   ((INL :one -> one + one + strid long + funid long + one)
   one)))))))))))))))))
   (((CONS :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $0))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list)))))))`),
 ((JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_strbind_h_DEF),
  [],
  `(((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool)
   JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_strbind_h)
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + strid long + funid long + one ->
          strid + one + one + one + strid long + funid long + one)
   ((INL :one -> one + one + one + strid long + funid long + one)
   one))))))))))))))))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list))))`),
 ((JOINT_int_BINDstrbind_h_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j3 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool) ((((JOINT_int_BINDstrbind_h $3) $2) $1) $0))
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INL :strid ->
          strid + one + one + one + strid long + funid long + one)
   $3)))))))))))))))
   (((CONS :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $2))
   (((CONS :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $1))
   (((CONS :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $0))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list)))))))))))))))`),
 ((JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_sigexp_h_DEF),
  [],
  `((! :(sigexp_h -> bool) -> bool) (\(s :sigexp_h).
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool)
   (JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_sigexp_h $0))
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INL :sigexp_h ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one) $0))))))))))))))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list))))))`),
 ((JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_sigexp_h_DEF),
  [],
  `(((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool)
   JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_sigexp_h)
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one) one)))))))))))))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list))))`),
 ((JOINT_int_FUNCTORmoddec_h_DEF),
  [],
  `((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool) (JOINT_int_FUNCTORmoddec_h $0))
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) one))))))))))))
   (((CONS :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $0))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list)))))))`),
 ((JOINT_int_SEQmoddec_h_DEF),
  [],
  `((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool) ((JOINT_int_SEQmoddec_h $1) $0))
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) one)))))))))))
   (((CONS :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $1))
   (((CONS :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $0))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list))))))))))`),
 ((JOINT_int_EMPTYmoddec_h_DEF),
  [],
  `(((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool) JOINT_int_EMPTYmoddec_h)
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INL :one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) one))))))))))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list))))`),
 ((JOINT_int_OPENmoddec_h_DEF),
  [],
  `((! :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist).
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool) (JOINT_int_OPENmoddec_h $0))
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INL :strid long nonemptylist ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   $0)))))))))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list))))))`),
 ((JOINT_int_LOCALmoddec_h_DEF),
  [],
  `((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool) ((JOINT_int_LOCALmoddec_h $1) $0))
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INL :one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one) one))))))))
   (((CONS :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $1))
   (((CONS :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $0))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list))))))))))`),
 ((JOINT_int_STRUCTUREmoddec_h_DEF),
  [],
  `((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool) (JOINT_int_STRUCTUREmoddec_h $0))
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one) one)))))))
   (((CONS :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $0))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list)))))))`),
 ((JOINT_int_DECmoddec_h_DEF),
  [],
  `((! :(dec -> bool) -> bool) (\(d :dec).
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool) (JOINT_int_DECmoddec_h $0))
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :dec ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) $0))))))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list))))))`),
 ((JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_funbind_h_DEF),
  [],
  `((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool)
   (JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_funbind_h
   $0))
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) one)))))
   (((CONS :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $0))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list)))))))`),
 ((JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_funbind_h_DEF),
  [],
  `(((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool)
   JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_funbind_h)
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INL :one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) one))))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list))))`),
 ((JOINT_int_REBINDfunbind_h_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(f' :funid).
   ((! :(funid long -> bool) -> bool) (\(l :funid long).
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool) ((JOINT_int_REBINDfunbind_h $1) $0))
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :funid # funid long ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   (((, :funid -> funid long -> funid # funid long) $1) $0))))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list))))))))`),
 ((JOINT_int_BINDfunbind_h_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(f' :funid).
   ((! :(strid -> bool) -> bool) (\(s0 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(s1 :sigexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j3 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool) ((((((JOINT_int_BINDfunbind_h $5) $4) $3) $2) $1) $0))
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (((Node :funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree)
   ((INL :funid # strid # sigexp_h ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   (((, :funid -> strid # sigexp_h -> funid # strid # sigexp_h) $5)
   (((, :strid -> sigexp_h -> strid # sigexp_h) $4) $3))))
   (((CONS :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $2))
   (((CONS :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $1))
   (((CONS :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list ->
            (funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one) ltree list)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $0))
   (NIL :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree list)))))))))))))))))))`),
 ((joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_ISO_DEF),
  [],
  `((/\
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(a :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         bool)
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $0))) $0))))
   ((! :((funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree -> bool) -> bool)
   (\(r :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree). (((= :bool -> bool -> bool)
   (((TRP :(funid # strid # sigexp_h + funid # funid long + one +
            one + dec + one + one + strid long nonemptylist + one +
            one + one + one + sigexp_h + strid + one + one + one +
            strid long + funid long + one ->
           (funid # strid # sigexp_h + funid # funid long + one +
           one + dec + one + one + strid long nonemptylist + one +
           one + one + one + sigexp_h + strid + one + one + one +
           strid long + funid long + one) ltree list -> bool) ->
           (funid # strid # sigexp_h + funid # funid long + one +
           one + dec + one + one + strid long nonemptylist + one +
           one + one + one + sigexp_h + strid + one + one + one +
           strid long + funid long + one) ltree -> bool)
   (\(v :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one).
   (\(tl :(funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) ltree list). ((\/ ((/\
   ((? :(funid -> bool) -> bool) (\(f :funid).
   ((? :(strid -> bool) -> bool) (\(s0 :strid).
   ((? :(sigexp_h -> bool) -> bool) (\(s1 :sigexp_h).
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $4)
   ((INL :funid # strid # sigexp_h ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   (((, :funid -> strid # sigexp_h -> funid # strid # sigexp_h) $2)
   (((, :strid -> sigexp_h -> strid # sigexp_h) $1) $0)))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC (SUC (SUC 0)))))) ((\/ ((/\ ((? :(funid -> bool) -> bool)
   (\(f :funid). ((? :(funid long -> bool) -> bool) (\(l :funid long).
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $3)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :funid # funid long ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   (((, :funid -> funid long -> funid # funid long) $1) $0)))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   0))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INL :one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) one)))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   0))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) one))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\ ((? :(dec -> bool) -> bool) (\(d :dec).
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $2)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :dec ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) $0)))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   0))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one) one)))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INL :one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one) one))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC (SUC 0))))) ((\/ ((/\
   ((? :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist).
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $2)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INL :strid long nonemptylist ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   $0)))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   0))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INL :one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) one)))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   0))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) one))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC (SUC 0))))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) one)))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one) one))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   0))) ((\/ ((/\ ((? :(sigexp_h -> bool) -> bool) (\(s :sigexp_h).
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $2)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INL :sigexp_h ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one) $0)))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   0))) ((\/ ((/\ ((? :(strid -> bool) -> bool) (\(s :strid).
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $2)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INL :strid ->
          strid + one + one + one + strid long + funid long + one)
   $0)))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC (SUC (SUC 0)))))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + strid long + funid long + one ->
          strid + one + one + one + strid long + funid long + one)
   ((INL :one -> one + one + one + strid long + funid long + one)
   one))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   0))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + strid long + funid long + one ->
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + strid long + funid long + one ->
          one + one + one + strid long + funid long + one)
   ((INL :one -> one + one + strid long + funid long + one)
   one)))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + strid long + funid long + one ->
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + strid long + funid long + one ->
          one + one + one + strid long + funid long + one)
   ((INR :one + strid long + funid long + one ->
          one + one + strid long + funid long + one)
   ((INL :one -> one + strid long + funid long + one)
   one))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\ ((? :(strid long -> bool) -> bool)
   (\(l :strid long).
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $2)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + strid long + funid long + one ->
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + strid long + funid long + one ->
          one + one + one + strid long + funid long + one)
   ((INR :one + strid long + funid long + one ->
          one + one + strid long + funid long + one)
   ((INR :strid long + funid long + one ->
          one + strid long + funid long + one)
   ((INL :strid long -> strid long + funid long + one)
   $0)))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   0))) ((\/ ((/\ ((? :(funid long -> bool) -> bool)
   (\(l :funid long).
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $2)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + strid long + funid long + one ->
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + strid long + funid long + one ->
          one + one + one + strid long + funid long + one)
   ((INR :one + strid long + funid long + one ->
          one + one + strid long + funid long + one)
   ((INR :strid long + funid long + one ->
          one + strid long + funid long + one)
   ((INR :funid long + one -> strid long + funid long + one)
   ((INL :funid long -> funid long + one) $0)))))))))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC 0)))) ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + strid long + funid long + one ->
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + strid long + funid long + one ->
          one + one + one + strid long + funid long + one)
   ((INR :one + strid long + funid long + one ->
          one + one + strid long + funid long + one)
   ((INR :strid long + funid long + one ->
          one + strid long + funid long + one)
   ((INR :funid long + one -> strid long + funid long + one)
   ((INR :one -> funid long + one) one)))))))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC (SUC 0)))))))))))))))))))))))))) $0))
   (((= :(funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree ->
         (funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree -> bool)
   (REP_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   (ABS_joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h
   $0))) $0)))))`),
 ((joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_TY_DEF),
  [],
  `((? :((joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         (funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one) ltree) -> bool) -> bool)
   (\(rep :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
           (funid # strid # sigexp_h + funid # funid long + one +
           one + dec + one + one + strid long nonemptylist + one +
           one + one + one + sigexp_h + strid + one + one + one +
           strid long + funid long + one) ltree).
   (((TYPE_DEFINITION :((funid # strid # sigexp_h +
                        funid # funid long + one + one + dec + one +
                        one + strid long nonemptylist + one + one +
                        one + one + sigexp_h + strid + one + one +
                        one + strid long + funid long + one) ltree ->
                       bool) ->
                       (joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
                       (funid # strid # sigexp_h +
                       funid # funid long + one + one + dec + one +
                       one + strid long nonemptylist + one + one +
                       one + one + sigexp_h + strid + one + one +
                       one + strid long + funid long + one) ltree) ->
                       bool)
   ((TRP :(funid # strid # sigexp_h + funid # funid long + one + one +
           dec + one + one + strid long nonemptylist + one + one +
           one + one + sigexp_h + strid + one + one + one +
           strid long + funid long + one ->
          (funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) ltree list -> bool) ->
          (funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) ltree -> bool)
   (\(v :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one).
   (\(tl :(funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) ltree list). ((\/ ((/\
   ((? :(funid -> bool) -> bool) (\(f :funid).
   ((? :(strid -> bool) -> bool) (\(s0 :strid).
   ((? :(sigexp_h -> bool) -> bool) (\(s1 :sigexp_h).
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $4)
   ((INL :funid # strid # sigexp_h ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   (((, :funid -> strid # sigexp_h -> funid # strid # sigexp_h) $2)
   (((, :strid -> sigexp_h -> strid # sigexp_h) $1) $0)))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC (SUC (SUC 0)))))) ((\/ ((/\ ((? :(funid -> bool) -> bool)
   (\(f :funid). ((? :(funid long -> bool) -> bool) (\(l :funid long).
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $3)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :funid # funid long ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   (((, :funid -> funid long -> funid # funid long) $1) $0)))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   0))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INL :one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) one)))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   0))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) one))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\ ((? :(dec -> bool) -> bool) (\(d :dec).
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $2)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :dec ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) $0)))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   0))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one) one)))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INL :one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one) one))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC (SUC 0))))) ((\/ ((/\
   ((? :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist).
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $2)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INL :strid long nonemptylist ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   $0)))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   0))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INL :one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) one)))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   0))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) one))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC (SUC 0))))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one) one)))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INL :one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one) one))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   0))) ((\/ ((/\ ((? :(sigexp_h -> bool) -> bool) (\(s :sigexp_h).
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $2)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INL :sigexp_h ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one) $0)))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   0))) ((\/ ((/\ ((? :(strid -> bool) -> bool) (\(s :strid).
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $2)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INL :strid ->
          strid + one + one + one + strid long + funid long + one)
   $0)))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC (SUC (SUC 0)))))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + strid long + funid long + one ->
          strid + one + one + one + strid long + funid long + one)
   ((INL :one -> one + one + one + strid long + funid long + one)
   one))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   0))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + strid long + funid long + one ->
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + strid long + funid long + one ->
          one + one + one + strid long + funid long + one)
   ((INL :one -> one + one + strid long + funid long + one)
   one)))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + strid long + funid long + one ->
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + strid long + funid long + one ->
          one + one + one + strid long + funid long + one)
   ((INR :one + strid long + funid long + one ->
          one + one + strid long + funid long + one)
   ((INL :one -> one + strid long + funid long + one)
   one))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\ ((? :(strid long -> bool) -> bool)
   (\(l :strid long).
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $2)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + strid long + funid long + one ->
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + strid long + funid long + one ->
          one + one + one + strid long + funid long + one)
   ((INR :one + strid long + funid long + one ->
          one + one + strid long + funid long + one)
   ((INR :strid long + funid long + one ->
          one + strid long + funid long + one)
   ((INL :strid long -> strid long + funid long + one)
   $0)))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   0))) ((\/ ((/\ ((? :(funid long -> bool) -> bool)
   (\(l :funid long).
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $2)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + strid long + funid long + one ->
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + strid long + funid long + one ->
          one + one + one + strid long + funid long + one)
   ((INR :one + strid long + funid long + one ->
          one + one + strid long + funid long + one)
   ((INR :strid long + funid long + one ->
          one + strid long + funid long + one)
   ((INR :funid long + one -> strid long + funid long + one)
   ((INL :funid long -> funid long + one) $0)))))))))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC 0)))) ((/\
   (((= :funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one ->
         funid # strid # sigexp_h + funid # funid long + one + one +
         dec + one + one + strid long nonemptylist + one + one + one +
         one + sigexp_h + strid + one + one + one + strid long +
         funid long + one -> bool) $1)
   ((INR :funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          funid # strid # sigexp_h + funid # funid long + one + one +
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          funid # funid long + one + one + dec + one + one +
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + dec + one + one + strid long nonemptylist +
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + dec + one + one + strid long nonemptylist + one +
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          dec + one + one + strid long nonemptylist + one + one +
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + strid long nonemptylist + one + one + one +
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one ->
          one + strid long nonemptylist + one + one + one + one +
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          strid long nonemptylist + one + one + one + one + sigexp_h +
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one ->
          one + one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :one + sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + one + sigexp_h + strid + one + one + one +
          strid long + funid long + one)
   ((INR :sigexp_h + strid + one + one + one + strid long +
          funid long + one ->
          one + sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :strid + one + one + one + strid long + funid long + one ->
          sigexp_h + strid + one + one + one + strid long +
          funid long + one)
   ((INR :one + one + one + strid long + funid long + one ->
          strid + one + one + one + strid long + funid long + one)
   ((INR :one + one + strid long + funid long + one ->
          one + one + one + strid long + funid long + one)
   ((INR :one + strid long + funid long + one ->
          one + one + strid long + funid long + one)
   ((INR :strid long + funid long + one ->
          one + strid long + funid long + one)
   ((INR :funid long + one -> strid long + funid long + one)
   ((INR :one -> funid long + one) one)))))))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp_h + funid # funid long + one +
             one + dec + one + one + strid long nonemptylist + one +
             one + one + one + sigexp_h + strid + one + one + one +
             strid long + funid long + one) ltree list -> num) $0))
   (SUC (SUC 0))))))))))))))))))))))))))) $0)))`),
 ((SEQsigdec_h_DEF),
  [],
  `((! :(sigdec_h -> bool) -> bool) (\(s1 :sigdec_h).
   ((! :(sigdec_h -> bool) -> bool) (\(s2 :sigdec_h).
   (((= :sigdec_h -> sigdec_h -> bool) ((SEQsigdec_h $1) $0))
   (ABS_sigdec_h
   (((Node :sigbind_h + one + one ->
            (sigbind_h + one + one) ltree list ->
            (sigbind_h + one + one) ltree)
   ((INR :one + one -> sigbind_h + one + one) ((INR :one -> one + one)
   one)))
   (((CONS :(sigbind_h + one + one) ltree ->
            (sigbind_h + one + one) ltree list ->
            (sigbind_h + one + one) ltree list) (REP_sigdec_h $1))
   (((CONS :(sigbind_h + one + one) ltree ->
            (sigbind_h + one + one) ltree list ->
            (sigbind_h + one + one) ltree list) (REP_sigdec_h $0))
   (NIL :(sigbind_h + one + one) ltree list))))))))))`),
 ((EMPTYsigdec_h_DEF),
  [],
  `(((= :sigdec_h -> sigdec_h -> bool) EMPTYsigdec_h) (ABS_sigdec_h
   (((Node :sigbind_h + one + one ->
            (sigbind_h + one + one) ltree list ->
            (sigbind_h + one + one) ltree)
   ((INR :one + one -> sigbind_h + one + one) ((INL :one -> one + one)
   one))) (NIL :(sigbind_h + one + one) ltree list))))`),
 ((SIGNATUREsigdec_h_DEF),
  [],
  `((! :(sigbind_h -> bool) -> bool) (\(s :sigbind_h).
   (((= :sigdec_h -> sigdec_h -> bool) (SIGNATUREsigdec_h $0))
   (ABS_sigdec_h
   (((Node :sigbind_h + one + one ->
            (sigbind_h + one + one) ltree list ->
            (sigbind_h + one + one) ltree)
   ((INL :sigbind_h -> sigbind_h + one + one) $0))
   (NIL :(sigbind_h + one + one) ltree list))))))`),
 ((sigdec_h_ISO_DEF),
  [],
  `((/\ ((! :(sigdec_h -> bool) -> bool) (\(a :sigdec_h).
   (((= :sigdec_h -> sigdec_h -> bool) (ABS_sigdec_h (REP_sigdec_h
   $0))) $0)))) ((! :((sigbind_h + one + one) ltree -> bool) -> bool)
   (\(r :(sigbind_h + one + one) ltree). (((= :bool -> bool -> bool)
   (((TRP :(sigbind_h + one + one ->
           (sigbind_h + one + one) ltree list -> bool) ->
           (sigbind_h + one + one) ltree -> bool)
   (\(v :sigbind_h + one + one).
   (\(tl :(sigbind_h + one + one) ltree list). ((\/ ((/\
   ((? :(sigbind_h -> bool) -> bool) (\(s :sigbind_h).
   (((= :sigbind_h + one + one -> sigbind_h + one + one -> bool) $2)
   ((INL :sigbind_h -> sigbind_h + one + one) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigbind_h + one + one) ltree list -> num) $0)) 0))) ((\/
   ((/\ (((= :sigbind_h + one + one -> sigbind_h + one + one -> bool)
   $1) ((INR :one + one -> sigbind_h + one + one)
   ((INL :one -> one + one) one)))) (((= :num -> num -> bool)
   ((LENGTH :(sigbind_h + one + one) ltree list -> num) $0)) 0))) ((/\
   (((= :sigbind_h + one + one -> sigbind_h + one + one -> bool) $1)
   ((INR :one + one -> sigbind_h + one + one) ((INR :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(sigbind_h + one + one) ltree list -> num) $0)) (SUC (SUC
   0))))))))) $0))
   (((= :(sigbind_h + one + one) ltree ->
         (sigbind_h + one + one) ltree -> bool) (REP_sigdec_h
   (ABS_sigdec_h $0))) $0)))))`),
 ((sigdec_h_TY_DEF),
  [],
  `((? :((sigdec_h -> (sigbind_h + one + one) ltree) -> bool) -> bool)
   (\(rep :sigdec_h -> (sigbind_h + one + one) ltree).
   (((TYPE_DEFINITION :((sigbind_h + one + one) ltree -> bool) ->
                       (sigdec_h -> (sigbind_h + one + one) ltree) ->
                       bool)
   ((TRP :(sigbind_h + one + one ->
          (sigbind_h + one + one) ltree list -> bool) ->
          (sigbind_h + one + one) ltree -> bool)
   (\(v :sigbind_h + one + one).
   (\(tl :(sigbind_h + one + one) ltree list). ((\/ ((/\
   ((? :(sigbind_h -> bool) -> bool) (\(s :sigbind_h).
   (((= :sigbind_h + one + one -> sigbind_h + one + one -> bool) $2)
   ((INL :sigbind_h -> sigbind_h + one + one) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigbind_h + one + one) ltree list -> num) $0)) 0))) ((\/
   ((/\ (((= :sigbind_h + one + one -> sigbind_h + one + one -> bool)
   $1) ((INR :one + one -> sigbind_h + one + one)
   ((INL :one -> one + one) one)))) (((= :num -> num -> bool)
   ((LENGTH :(sigbind_h + one + one) ltree list -> num) $0)) 0))) ((/\
   (((= :sigbind_h + one + one -> sigbind_h + one + one -> bool) $1)
   ((INR :one + one -> sigbind_h + one + one) ((INR :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(sigbind_h + one + one) ltree list -> num) $0)) (SUC (SUC
   0)))))))))) $0)))`),
 ((int_sigbind_h_SOME_sigbind_h_arg_DEF),
  [],
  `((/\ ((! :(sigbind_h -> bool) -> bool) (\(x1 :sigbind_h).
   (((= :sigbind_h -> sigbind_h -> bool)
   (int_sigbind_h_SOME_sigbind_h_arg (int_sigbind_h_SOME_sigbind_h
   $0))) $0)))) (((= :sigbind_h -> sigbind_h -> bool)
   (int_sigbind_h_SOME_sigbind_h_arg int_sigbind_h_NONE_sigbind_h))
   ((@ :(sigbind_h -> bool) -> sigbind_h) (\(x :sigbind_h). T))))`),
 ((int_BINDsigbind_h_arg3_DEF),
  [],
  `((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   ((! :(sigexp_h -> bool) -> bool) (\(x2 :sigexp_h).
   ((! :(sigbind_h_option_sigbind_h -> bool) -> bool)
   (\(x3 :sigbind_h_option_sigbind_h).
   (((= :sigbind_h_option_sigbind_h -> sigbind_h_option_sigbind_h ->
         bool) (int_BINDsigbind_h_arg3 (((int_BINDsigbind_h $2) $1)
   $0))) $0)))))))`),
 ((int_BINDsigbind_h_arg2_DEF),
  [],
  `((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   ((! :(sigexp_h -> bool) -> bool) (\(x2 :sigexp_h).
   ((! :(sigbind_h_option_sigbind_h -> bool) -> bool)
   (\(x3 :sigbind_h_option_sigbind_h).
   (((= :sigexp_h -> sigexp_h -> bool) (int_BINDsigbind_h_arg2
   (((int_BINDsigbind_h $2) $1) $0))) $1)))))))`),
 ((int_BINDsigbind_h_arg1_DEF),
  [],
  `((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   ((! :(sigexp_h -> bool) -> bool) (\(x2 :sigexp_h).
   ((! :(sigbind_h_option_sigbind_h -> bool) -> bool)
   (\(x3 :sigbind_h_option_sigbind_h). (((= :sigid -> sigid -> bool)
   (int_BINDsigbind_h_arg1 (((int_BINDsigbind_h $2) $1) $0)))
   $2)))))))`),
 ((dist_aux_ftn_sigbind_h_DEF),
  [],
  `((/\ ((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   ((! :(sigexp_h -> bool) -> bool) (\(x2 :sigexp_h).
   ((! :(sigbind_h_option_sigbind_h -> bool) -> bool)
   (\(x3 :sigbind_h_option_sigbind_h). (((= :num -> num -> bool)
   (dist_aux_ftn_sigbind_h (((int_BINDsigbind_h $2) $1) $0)))
   0)))))))) ((/\ (((= :num -> num -> bool)
   (dist_aux_ftn_sigbind_h_option_sigbind_h
   int_sigbind_h_NONE_sigbind_h)) 1))
   ((! :(sigbind_h -> bool) -> bool) (\(x1 :sigbind_h).
   (((= :num -> num -> bool) (dist_aux_ftn_sigbind_h_option_sigbind_h
   (int_sigbind_h_SOME_sigbind_h $0))) 2)))))`),
 ((BINDsigbind_h),
  [],
  `(((= :(sigid -> sigexp_h -> sigbind_h option -> sigbind_h) ->
         (sigid -> sigexp_h -> sigbind_h option -> sigbind_h) -> bool)
   BINDsigbind_h) (\(x0 :sigid). (\(x1 :sigexp_h).
   (\(x2 :sigbind_h option). (((int_BINDsigbind_h $2) $1)
   (int_inj_sigbind_h_option_sigbind_h $0))))))`),
 ((int_inv_sigbind_h_option_sigbind_h),
  [],
  `((/\ (((= :sigbind_h option -> sigbind_h option -> bool)
   (int_inv_sigbind_h_option_sigbind_h int_sigbind_h_NONE_sigbind_h))
   (NONE :sigbind_h option))) ((! :(sigbind_h -> bool) -> bool)
   (\(x1 :sigbind_h).
   (((= :sigbind_h option -> sigbind_h option -> bool)
   (int_inv_sigbind_h_option_sigbind_h (int_sigbind_h_SOME_sigbind_h
   $0))) ((SOME :sigbind_h -> sigbind_h option) $0)))))`),
 ((int_inj_sigbind_h_option_sigbind_h),
  [],
  `((/\
   (((= :sigbind_h_option_sigbind_h -> sigbind_h_option_sigbind_h ->
         bool) (int_inj_sigbind_h_option_sigbind_h
   (NONE :sigbind_h option))) int_sigbind_h_NONE_sigbind_h))
   ((! :(sigbind_h -> bool) -> bool) (\(x0 :sigbind_h).
   (((= :sigbind_h_option_sigbind_h -> sigbind_h_option_sigbind_h ->
         bool) (int_inj_sigbind_h_option_sigbind_h
   ((SOME :sigbind_h -> sigbind_h option) $0)))
   (int_sigbind_h_SOME_sigbind_h $0)))))`),
 ((int_sigbind_h_SOME_sigbind_h_DEF),
  [],
  `((! :(sigbind_h -> bool) -> bool) (\(x1 :sigbind_h).
   (((= :sigbind_h_option_sigbind_h -> sigbind_h_option_sigbind_h ->
         bool) (int_sigbind_h_SOME_sigbind_h $0))
   (sigbind_h_option_sigbind_h_abs (JOINT_int_sigbind_h_SOME_sigbind_h
   (sigbind_h_rep $0))))))`),
 ((int_sigbind_h_NONE_sigbind_h_DEF),
  [],
  `(((= :sigbind_h_option_sigbind_h -> sigbind_h_option_sigbind_h ->
         bool) int_sigbind_h_NONE_sigbind_h)
   (sigbind_h_option_sigbind_h_abs
   JOINT_int_sigbind_h_NONE_sigbind_h))`),
 ((int_BINDsigbind_h_DEF),
  [],
  `((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   ((! :(sigexp_h -> bool) -> bool) (\(x2 :sigexp_h).
   ((! :(sigbind_h_option_sigbind_h -> bool) -> bool)
   (\(x3 :sigbind_h_option_sigbind_h).
   (((= :sigbind_h -> sigbind_h -> bool) (((int_BINDsigbind_h $2) $1)
   $0)) (sigbind_h_abs (((JOINT_int_BINDsigbind_h $2) $1)
   (sigbind_h_option_sigbind_h_rep $0))))))))))`),
 ((sigbind_h_option_sigbind_h_REP_ABS),
  [],
  `((/\ ((! :(sigbind_h_option_sigbind_h -> bool) -> bool)
   (\(a :sigbind_h_option_sigbind_h).
   (((= :sigbind_h_option_sigbind_h -> sigbind_h_option_sigbind_h ->
         bool) (sigbind_h_option_sigbind_h_abs
   (sigbind_h_option_sigbind_h_rep $0))) $0))))
   ((! :(joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> bool) ->
        bool) (\(r :joint_ty_sigbind_h_sigbind_h_option_sigbind_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_sigbind_h_sigbind_h_option_sigbind_h).
   (((= :num -> num -> bool)
   (joint_ty_sigbind_h_sigbind_h_option_sigbind_h_select $0)) 2)) $0))
   (((= :joint_ty_sigbind_h_sigbind_h_option_sigbind_h ->
         joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> bool)
   (sigbind_h_option_sigbind_h_rep (sigbind_h_option_sigbind_h_abs
   $0))) $0)))))`),
 ((sigbind_h_option_sigbind_h_TY_DEF),
  [],
  `((? :((sigbind_h_option_sigbind_h ->
         joint_ty_sigbind_h_sigbind_h_option_sigbind_h) -> bool) ->
        bool)
   (\(rep :sigbind_h_option_sigbind_h ->
           joint_ty_sigbind_h_sigbind_h_option_sigbind_h).
   (((TYPE_DEFINITION :(joint_ty_sigbind_h_sigbind_h_option_sigbind_h ->
                       bool) ->
                       (sigbind_h_option_sigbind_h ->
                       joint_ty_sigbind_h_sigbind_h_option_sigbind_h) ->
                       bool)
   (\(x :joint_ty_sigbind_h_sigbind_h_option_sigbind_h).
   (((= :num -> num -> bool)
   (joint_ty_sigbind_h_sigbind_h_option_sigbind_h_select $0)) 2)))
   $0)))`),
 ((sigbind_h_REP_ABS),
  [],
  `((/\ ((! :(sigbind_h -> bool) -> bool) (\(a :sigbind_h).
   (((= :sigbind_h -> sigbind_h -> bool) (sigbind_h_abs (sigbind_h_rep
   $0))) $0))))
   ((! :(joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> bool) ->
        bool) (\(r :joint_ty_sigbind_h_sigbind_h_option_sigbind_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_sigbind_h_sigbind_h_option_sigbind_h).
   (((= :num -> num -> bool)
   (joint_ty_sigbind_h_sigbind_h_option_sigbind_h_select $0)) 1)) $0))
   (((= :joint_ty_sigbind_h_sigbind_h_option_sigbind_h ->
         joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> bool)
   (sigbind_h_rep (sigbind_h_abs $0))) $0)))))`),
 ((sigbind_h_TY_DEF),
  [],
  `((? :((sigbind_h ->
         joint_ty_sigbind_h_sigbind_h_option_sigbind_h) -> bool) ->
        bool)
   (\(rep :sigbind_h ->
           joint_ty_sigbind_h_sigbind_h_option_sigbind_h).
   (((TYPE_DEFINITION :(joint_ty_sigbind_h_sigbind_h_option_sigbind_h ->
                       bool) ->
                       (sigbind_h ->
                       joint_ty_sigbind_h_sigbind_h_option_sigbind_h) ->
                       bool)
   (\(x :joint_ty_sigbind_h_sigbind_h_option_sigbind_h).
   (((= :num -> num -> bool)
   (joint_ty_sigbind_h_sigbind_h_option_sigbind_h_select $0)) 1)))
   $0)))`),
 ((joint_ty_sigbind_h_sigbind_h_option_sigbind_h_select_DEF),
  [],
  `((/\ ((! :(sigid -> bool) -> bool) (\(s0 :sigid).
   ((! :(sigexp_h -> bool) -> bool) (\(s1 :sigexp_h).
   ((! :(joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> bool) ->
        bool) (\(j :joint_ty_sigbind_h_sigbind_h_option_sigbind_h).
   (((= :num -> num -> bool)
   (joint_ty_sigbind_h_sigbind_h_option_sigbind_h_select
   (((JOINT_int_BINDsigbind_h $2) $1) $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_sigbind_h_sigbind_h_option_sigbind_h_select $0)) 2)) 1)
   0))))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigbind_h_sigbind_h_option_sigbind_h_select
   JOINT_int_sigbind_h_NONE_sigbind_h)) 2))
   ((! :(joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> bool) ->
        bool) (\(j :joint_ty_sigbind_h_sigbind_h_option_sigbind_h).
   (((= :num -> num -> bool)
   (joint_ty_sigbind_h_sigbind_h_option_sigbind_h_select
   (JOINT_int_sigbind_h_SOME_sigbind_h $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_sigbind_h_sigbind_h_option_sigbind_h_select $0)) 1)) 2)
   0))))))`),
 ((JOINT_int_sigbind_h_SOME_sigbind_h_DEF),
  [],
  `((! :(joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> bool) ->
        bool) (\(j :joint_ty_sigbind_h_sigbind_h_option_sigbind_h).
   (((= :joint_ty_sigbind_h_sigbind_h_option_sigbind_h ->
         joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> bool)
   (JOINT_int_sigbind_h_SOME_sigbind_h $0))
   (ABS_joint_ty_sigbind_h_sigbind_h_option_sigbind_h
   (((Node :sigid # sigexp_h + one + one ->
            (sigid # sigexp_h + one + one) ltree list ->
            (sigid # sigexp_h + one + one) ltree)
   ((INR :one + one -> sigid # sigexp_h + one + one)
   ((INR :one -> one + one) one)))
   (((CONS :(sigid # sigexp_h + one + one) ltree ->
            (sigid # sigexp_h + one + one) ltree list ->
            (sigid # sigexp_h + one + one) ltree list)
   (REP_joint_ty_sigbind_h_sigbind_h_option_sigbind_h $0))
   (NIL :(sigid # sigexp_h + one + one) ltree list)))))))`),
 ((JOINT_int_sigbind_h_NONE_sigbind_h_DEF),
  [],
  `(((= :joint_ty_sigbind_h_sigbind_h_option_sigbind_h ->
         joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> bool)
   JOINT_int_sigbind_h_NONE_sigbind_h)
   (ABS_joint_ty_sigbind_h_sigbind_h_option_sigbind_h
   (((Node :sigid # sigexp_h + one + one ->
            (sigid # sigexp_h + one + one) ltree list ->
            (sigid # sigexp_h + one + one) ltree)
   ((INR :one + one -> sigid # sigexp_h + one + one)
   ((INL :one -> one + one) one)))
   (NIL :(sigid # sigexp_h + one + one) ltree list))))`),
 ((JOINT_int_BINDsigbind_h_DEF),
  [],
  `((! :(sigid -> bool) -> bool) (\(s0 :sigid).
   ((! :(sigexp_h -> bool) -> bool) (\(s1 :sigexp_h).
   ((! :(joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> bool) ->
        bool) (\(j :joint_ty_sigbind_h_sigbind_h_option_sigbind_h).
   (((= :joint_ty_sigbind_h_sigbind_h_option_sigbind_h ->
         joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> bool)
   (((JOINT_int_BINDsigbind_h $2) $1) $0))
   (ABS_joint_ty_sigbind_h_sigbind_h_option_sigbind_h
   (((Node :sigid # sigexp_h + one + one ->
            (sigid # sigexp_h + one + one) ltree list ->
            (sigid # sigexp_h + one + one) ltree)
   ((INL :sigid # sigexp_h -> sigid # sigexp_h + one + one)
   (((, :sigid -> sigexp_h -> sigid # sigexp_h) $2) $1)))
   (((CONS :(sigid # sigexp_h + one + one) ltree ->
            (sigid # sigexp_h + one + one) ltree list ->
            (sigid # sigexp_h + one + one) ltree list)
   (REP_joint_ty_sigbind_h_sigbind_h_option_sigbind_h $0))
   (NIL :(sigid # sigexp_h + one + one) ltree list)))))))))))`),
 ((joint_ty_sigbind_h_sigbind_h_option_sigbind_h_ISO_DEF),
  [],
  `((/\
   ((! :(joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> bool) ->
        bool) (\(a :joint_ty_sigbind_h_sigbind_h_option_sigbind_h).
   (((= :joint_ty_sigbind_h_sigbind_h_option_sigbind_h ->
         joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> bool)
   (ABS_joint_ty_sigbind_h_sigbind_h_option_sigbind_h
   (REP_joint_ty_sigbind_h_sigbind_h_option_sigbind_h $0))) $0))))
   ((! :((sigid # sigexp_h + one + one) ltree -> bool) -> bool)
   (\(r :(sigid # sigexp_h + one + one) ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(sigid # sigexp_h + one + one ->
           (sigid # sigexp_h + one + one) ltree list -> bool) ->
           (sigid # sigexp_h + one + one) ltree -> bool)
   (\(v :sigid # sigexp_h + one + one).
   (\(tl :(sigid # sigexp_h + one + one) ltree list). ((\/ ((/\
   ((? :(sigid -> bool) -> bool) (\(s0 :sigid).
   ((? :(sigexp_h -> bool) -> bool) (\(s1 :sigexp_h).
   (((= :sigid # sigexp_h + one + one ->
         sigid # sigexp_h + one + one -> bool) $3)
   ((INL :sigid # sigexp_h -> sigid # sigexp_h + one + one)
   (((, :sigid -> sigexp_h -> sigid # sigexp_h) $1) $0))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigid # sigexp_h + one + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\
   (((= :sigid # sigexp_h + one + one ->
         sigid # sigexp_h + one + one -> bool) $1)
   ((INR :one + one -> sigid # sigexp_h + one + one)
   ((INL :one -> one + one) one)))) (((= :num -> num -> bool)
   ((LENGTH :(sigid # sigexp_h + one + one) ltree list -> num) $0))
   0))) ((/\
   (((= :sigid # sigexp_h + one + one ->
         sigid # sigexp_h + one + one -> bool) $1)
   ((INR :one + one -> sigid # sigexp_h + one + one)
   ((INR :one -> one + one) one)))) (((= :num -> num -> bool)
   ((LENGTH :(sigid # sigexp_h + one + one) ltree list -> num) $0))
   (SUC 0)))))))) $0))
   (((= :(sigid # sigexp_h + one + one) ltree ->
         (sigid # sigexp_h + one + one) ltree -> bool)
   (REP_joint_ty_sigbind_h_sigbind_h_option_sigbind_h
   (ABS_joint_ty_sigbind_h_sigbind_h_option_sigbind_h $0))) $0)))))`),
 ((joint_ty_sigbind_h_sigbind_h_option_sigbind_h_TY_DEF),
  [],
  `((? :((joint_ty_sigbind_h_sigbind_h_option_sigbind_h ->
         (sigid # sigexp_h + one + one) ltree) -> bool) -> bool)
   (\(rep :joint_ty_sigbind_h_sigbind_h_option_sigbind_h ->
           (sigid # sigexp_h + one + one) ltree).
   (((TYPE_DEFINITION :((sigid # sigexp_h + one + one) ltree ->
                       bool) ->
                       (joint_ty_sigbind_h_sigbind_h_option_sigbind_h ->
                       (sigid # sigexp_h + one + one) ltree) -> bool)
   ((TRP :(sigid # sigexp_h + one + one ->
          (sigid # sigexp_h + one + one) ltree list -> bool) ->
          (sigid # sigexp_h + one + one) ltree -> bool)
   (\(v :sigid # sigexp_h + one + one).
   (\(tl :(sigid # sigexp_h + one + one) ltree list). ((\/ ((/\
   ((? :(sigid -> bool) -> bool) (\(s0 :sigid).
   ((? :(sigexp_h -> bool) -> bool) (\(s1 :sigexp_h).
   (((= :sigid # sigexp_h + one + one ->
         sigid # sigexp_h + one + one -> bool) $3)
   ((INL :sigid # sigexp_h -> sigid # sigexp_h + one + one)
   (((, :sigid -> sigexp_h -> sigid # sigexp_h) $1) $0))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigid # sigexp_h + one + one) ltree list -> num) $0))
   (SUC 0)))) ((\/ ((/\
   (((= :sigid # sigexp_h + one + one ->
         sigid # sigexp_h + one + one -> bool) $1)
   ((INR :one + one -> sigid # sigexp_h + one + one)
   ((INL :one -> one + one) one)))) (((= :num -> num -> bool)
   ((LENGTH :(sigid # sigexp_h + one + one) ltree list -> num) $0))
   0))) ((/\
   (((= :sigid # sigexp_h + one + one ->
         sigid # sigexp_h + one + one -> bool) $1)
   ((INR :one + one -> sigid # sigexp_h + one + one)
   ((INR :one -> one + one) one)))) (((= :num -> num -> bool)
   ((LENGTH :(sigid # sigexp_h + one + one) ltree list -> num) $0))
   (SUC 0))))))))) $0)))`),
 ((int_sigexp_h_spec_h_strdesc_h_SOME_strdesc_h_arg_DEF),
  [],
  `((/\ ((! :(strdesc_h -> bool) -> bool) (\(x1 :strdesc_h).
   (((= :strdesc_h -> strdesc_h -> bool)
   (int_sigexp_h_spec_h_strdesc_h_SOME_strdesc_h_arg
   (int_sigexp_h_spec_h_strdesc_h_SOME_strdesc_h $0))) $0))))
   (((= :strdesc_h -> strdesc_h -> bool)
   (int_sigexp_h_spec_h_strdesc_h_SOME_strdesc_h_arg
   int_sigexp_h_spec_h_strdesc_h_NONE_strdesc_h))
   ((@ :(strdesc_h -> bool) -> strdesc_h) (\(x :strdesc_h). T))))`),
 ((int_STRIDstrdesc_h_arg3_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x2 :sigexp_h).
   ((! :(strdesc_h_option_sigexp_h_spec_h_strdesc_h -> bool) -> bool)
   (\(x3 :strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         strdesc_h_option_sigexp_h_spec_h_strdesc_h -> bool)
   (int_STRIDstrdesc_h_arg3 (((int_STRIDstrdesc_h $2) $1) $0)))
   $0)))))))`),
 ((int_STRIDstrdesc_h_arg2_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x2 :sigexp_h).
   ((! :(strdesc_h_option_sigexp_h_spec_h_strdesc_h -> bool) -> bool)
   (\(x3 :strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :sigexp_h -> sigexp_h -> bool) (int_STRIDstrdesc_h_arg2
   (((int_STRIDstrdesc_h $2) $1) $0))) $1)))))))`),
 ((int_STRIDstrdesc_h_arg1_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x2 :sigexp_h).
   ((! :(strdesc_h_option_sigexp_h_spec_h_strdesc_h -> bool) -> bool)
   (\(x3 :strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :strid -> strid -> bool) (int_STRIDstrdesc_h_arg1
   (((int_STRIDstrdesc_h $2) $1) $0))) $2)))))))`),
 ((int_FUNCTORspec_h_arg4_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4 :sigexp_h).
   (((= :sigexp_h -> sigexp_h -> bool) (int_FUNCTORspec_h_arg4
   ((((int_FUNCTORspec_h $3) $2) $1) $0))) $0)))))))))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :sigexp_h -> sigexp_h -> bool) (int_FUNCTORspec_h_arg4
   (int_VALspec_h $0))) ((@ :(sigexp_h -> bool) -> sigexp_h)
   (\(x :sigexp_h). T)))))) ((/\ ((! :(exdesc -> bool) -> bool)
   (\(x1 :exdesc). (((= :sigexp_h -> sigexp_h -> bool)
   (int_FUNCTORspec_h_arg4 (int_EXCEPTIONspec_h $0)))
   ((@ :(sigexp_h -> bool) -> sigexp_h) (\(x :sigexp_h). T)))))) ((/\
   ((! :(strdesc_h -> bool) -> bool) (\(x1 :strdesc_h).
   (((= :sigexp_h -> sigexp_h -> bool) (int_FUNCTORspec_h_arg4
   (int_STRUCTUREspec_h $0))) ((@ :(sigexp_h -> bool) -> sigexp_h)
   (\(x :sigexp_h). T)))))) ((/\ ((! :(spec_h -> bool) -> bool)
   (\(x1 :spec_h). ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :sigexp_h -> sigexp_h -> bool) (int_FUNCTORspec_h_arg4
   ((int_LOCALspec_h $1) $0))) ((@ :(sigexp_h -> bool) -> sigexp_h)
   (\(x :sigexp_h). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :sigexp_h -> sigexp_h -> bool) (int_FUNCTORspec_h_arg4
   (int_OPENspec_h $0))) ((@ :(sigexp_h -> bool) -> sigexp_h)
   (\(x :sigexp_h). T)))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :sigexp_h -> sigexp_h -> bool)
   (int_FUNCTORspec_h_arg4 (int_INCLUDEspec_h $0)))
   ((@ :(sigexp_h -> bool) -> sigexp_h) (\(x :sigexp_h). T)))))) ((/\
   (((= :sigexp_h -> sigexp_h -> bool) (int_FUNCTORspec_h_arg4
   int_EMPTYspec_h)) ((@ :(sigexp_h -> bool) -> sigexp_h)
   (\(x :sigexp_h). T)))) ((! :(spec_h -> bool) -> bool)
   (\(x1 :spec_h). ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :sigexp_h -> sigexp_h -> bool) (int_FUNCTORspec_h_arg4
   ((int_SEQspec_h $1) $0))) ((@ :(sigexp_h -> bool) -> sigexp_h)
   (\(x :sigexp_h). T)))))))))))))))`),
 ((int_FUNCTORspec_h_arg3_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4 :sigexp_h).
   (((= :sigexp_h -> sigexp_h -> bool) (int_FUNCTORspec_h_arg3
   ((((int_FUNCTORspec_h $3) $2) $1) $0))) $1)))))))))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :sigexp_h -> sigexp_h -> bool) (int_FUNCTORspec_h_arg3
   (int_VALspec_h $0))) ((@ :(sigexp_h -> bool) -> sigexp_h)
   (\(x :sigexp_h). T)))))) ((/\ ((! :(exdesc -> bool) -> bool)
   (\(x1 :exdesc). (((= :sigexp_h -> sigexp_h -> bool)
   (int_FUNCTORspec_h_arg3 (int_EXCEPTIONspec_h $0)))
   ((@ :(sigexp_h -> bool) -> sigexp_h) (\(x :sigexp_h). T)))))) ((/\
   ((! :(strdesc_h -> bool) -> bool) (\(x1 :strdesc_h).
   (((= :sigexp_h -> sigexp_h -> bool) (int_FUNCTORspec_h_arg3
   (int_STRUCTUREspec_h $0))) ((@ :(sigexp_h -> bool) -> sigexp_h)
   (\(x :sigexp_h). T)))))) ((/\ ((! :(spec_h -> bool) -> bool)
   (\(x1 :spec_h). ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :sigexp_h -> sigexp_h -> bool) (int_FUNCTORspec_h_arg3
   ((int_LOCALspec_h $1) $0))) ((@ :(sigexp_h -> bool) -> sigexp_h)
   (\(x :sigexp_h). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :sigexp_h -> sigexp_h -> bool) (int_FUNCTORspec_h_arg3
   (int_OPENspec_h $0))) ((@ :(sigexp_h -> bool) -> sigexp_h)
   (\(x :sigexp_h). T)))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :sigexp_h -> sigexp_h -> bool)
   (int_FUNCTORspec_h_arg3 (int_INCLUDEspec_h $0)))
   ((@ :(sigexp_h -> bool) -> sigexp_h) (\(x :sigexp_h). T)))))) ((/\
   (((= :sigexp_h -> sigexp_h -> bool) (int_FUNCTORspec_h_arg3
   int_EMPTYspec_h)) ((@ :(sigexp_h -> bool) -> sigexp_h)
   (\(x :sigexp_h). T)))) ((! :(spec_h -> bool) -> bool)
   (\(x1 :spec_h). ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :sigexp_h -> sigexp_h -> bool) (int_FUNCTORspec_h_arg3
   ((int_SEQspec_h $1) $0))) ((@ :(sigexp_h -> bool) -> sigexp_h)
   (\(x :sigexp_h). T)))))))))))))))`),
 ((int_FUNCTORspec_h_arg2_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4 :sigexp_h).
   (((= :strid -> strid -> bool) (int_FUNCTORspec_h_arg2
   ((((int_FUNCTORspec_h $3) $2) $1) $0))) $2)))))))))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :strid -> strid -> bool) (int_FUNCTORspec_h_arg2
   (int_VALspec_h $0))) ((@ :(strid -> bool) -> strid) (\(x :strid).
   T)))))) ((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :strid -> strid -> bool) (int_FUNCTORspec_h_arg2
   (int_EXCEPTIONspec_h $0))) ((@ :(strid -> bool) -> strid)
   (\(x :strid). T)))))) ((/\ ((! :(strdesc_h -> bool) -> bool)
   (\(x1 :strdesc_h). (((= :strid -> strid -> bool)
   (int_FUNCTORspec_h_arg2 (int_STRUCTUREspec_h $0)))
   ((@ :(strid -> bool) -> strid) (\(x :strid). T)))))) ((/\
   ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :strid -> strid -> bool) (int_FUNCTORspec_h_arg2
   ((int_LOCALspec_h $1) $0))) ((@ :(strid -> bool) -> strid)
   (\(x :strid). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :strid -> strid -> bool)
   (int_FUNCTORspec_h_arg2 (int_OPENspec_h $0)))
   ((@ :(strid -> bool) -> strid) (\(x :strid). T)))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :strid -> strid -> bool)
   (int_FUNCTORspec_h_arg2 (int_INCLUDEspec_h $0)))
   ((@ :(strid -> bool) -> strid) (\(x :strid). T)))))) ((/\
   (((= :strid -> strid -> bool) (int_FUNCTORspec_h_arg2
   int_EMPTYspec_h)) ((@ :(strid -> bool) -> strid) (\(x :strid).
   T)))) ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :strid -> strid -> bool) (int_FUNCTORspec_h_arg2
   ((int_SEQspec_h $1) $0))) ((@ :(strid -> bool) -> strid)
   (\(x :strid). T)))))))))))))))`),
 ((int_FUNCTORspec_h_arg1_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4 :sigexp_h).
   (((= :funid -> funid -> bool) (int_FUNCTORspec_h_arg1
   ((((int_FUNCTORspec_h $3) $2) $1) $0))) $3)))))))))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :funid -> funid -> bool) (int_FUNCTORspec_h_arg1
   (int_VALspec_h $0))) ((@ :(funid -> bool) -> funid) (\(x :funid).
   T)))))) ((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :funid -> funid -> bool) (int_FUNCTORspec_h_arg1
   (int_EXCEPTIONspec_h $0))) ((@ :(funid -> bool) -> funid)
   (\(x :funid). T)))))) ((/\ ((! :(strdesc_h -> bool) -> bool)
   (\(x1 :strdesc_h). (((= :funid -> funid -> bool)
   (int_FUNCTORspec_h_arg1 (int_STRUCTUREspec_h $0)))
   ((@ :(funid -> bool) -> funid) (\(x :funid). T)))))) ((/\
   ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :funid -> funid -> bool) (int_FUNCTORspec_h_arg1
   ((int_LOCALspec_h $1) $0))) ((@ :(funid -> bool) -> funid)
   (\(x :funid). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :funid -> funid -> bool)
   (int_FUNCTORspec_h_arg1 (int_OPENspec_h $0)))
   ((@ :(funid -> bool) -> funid) (\(x :funid). T)))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :funid -> funid -> bool)
   (int_FUNCTORspec_h_arg1 (int_INCLUDEspec_h $0)))
   ((@ :(funid -> bool) -> funid) (\(x :funid). T)))))) ((/\
   (((= :funid -> funid -> bool) (int_FUNCTORspec_h_arg1
   int_EMPTYspec_h)) ((@ :(funid -> bool) -> funid) (\(x :funid).
   T)))) ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :funid -> funid -> bool) (int_FUNCTORspec_h_arg1
   ((int_SEQspec_h $1) $0))) ((@ :(funid -> bool) -> funid)
   (\(x :funid). T)))))))))))))))`),
 ((int_SEQspec_h_arg2_DEF),
  [],
  `((/\ ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :spec_h -> spec_h -> bool) (int_SEQspec_h_arg2 ((int_SEQspec_h
   $1) $0))) $0)))))) ((/\ ((! :(valdesc -> bool) -> bool)
   (\(x1 :valdesc). (((= :spec_h -> spec_h -> bool)
   (int_SEQspec_h_arg2 (int_VALspec_h $0)))
   ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h). T)))))) ((/\
   ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :spec_h -> spec_h -> bool) (int_SEQspec_h_arg2
   (int_EXCEPTIONspec_h $0))) ((@ :(spec_h -> bool) -> spec_h)
   (\(x :spec_h). T)))))) ((/\ ((! :(strdesc_h -> bool) -> bool)
   (\(x1 :strdesc_h). (((= :spec_h -> spec_h -> bool)
   (int_SEQspec_h_arg2 (int_STRUCTUREspec_h $0)))
   ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h). T)))))) ((/\
   ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :spec_h -> spec_h -> bool) (int_SEQspec_h_arg2
   ((int_LOCALspec_h $1) $0))) ((@ :(spec_h -> bool) -> spec_h)
   (\(x :spec_h). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :spec_h -> spec_h -> bool)
   (int_SEQspec_h_arg2 (int_OPENspec_h $0)))
   ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h). T)))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :spec_h -> spec_h -> bool)
   (int_SEQspec_h_arg2 (int_INCLUDEspec_h $0)))
   ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h). T)))))) ((/\
   (((= :spec_h -> spec_h -> bool) (int_SEQspec_h_arg2
   int_EMPTYspec_h)) ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h).
   T)))) ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4 :sigexp_h).
   (((= :spec_h -> spec_h -> bool) (int_SEQspec_h_arg2
   ((((int_FUNCTORspec_h $3) $2) $1) $0)))
   ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h).
   T)))))))))))))))))))`),
 ((int_SEQspec_h_arg1_DEF),
  [],
  `((/\ ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :spec_h -> spec_h -> bool) (int_SEQspec_h_arg1 ((int_SEQspec_h
   $1) $0))) $1)))))) ((/\ ((! :(valdesc -> bool) -> bool)
   (\(x1 :valdesc). (((= :spec_h -> spec_h -> bool)
   (int_SEQspec_h_arg1 (int_VALspec_h $0)))
   ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h). T)))))) ((/\
   ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :spec_h -> spec_h -> bool) (int_SEQspec_h_arg1
   (int_EXCEPTIONspec_h $0))) ((@ :(spec_h -> bool) -> spec_h)
   (\(x :spec_h). T)))))) ((/\ ((! :(strdesc_h -> bool) -> bool)
   (\(x1 :strdesc_h). (((= :spec_h -> spec_h -> bool)
   (int_SEQspec_h_arg1 (int_STRUCTUREspec_h $0)))
   ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h). T)))))) ((/\
   ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :spec_h -> spec_h -> bool) (int_SEQspec_h_arg1
   ((int_LOCALspec_h $1) $0))) ((@ :(spec_h -> bool) -> spec_h)
   (\(x :spec_h). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :spec_h -> spec_h -> bool)
   (int_SEQspec_h_arg1 (int_OPENspec_h $0)))
   ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h). T)))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :spec_h -> spec_h -> bool)
   (int_SEQspec_h_arg1 (int_INCLUDEspec_h $0)))
   ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h). T)))))) ((/\
   (((= :spec_h -> spec_h -> bool) (int_SEQspec_h_arg1
   int_EMPTYspec_h)) ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h).
   T)))) ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4 :sigexp_h).
   (((= :spec_h -> spec_h -> bool) (int_SEQspec_h_arg1
   ((((int_FUNCTORspec_h $3) $2) $1) $0)))
   ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h).
   T)))))))))))))))))))`),
 ((int_INCLUDEspec_h_arg_DEF),
  [],
  `((/\ ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist).
   (((= :sigid nonemptylist -> sigid nonemptylist -> bool)
   (int_INCLUDEspec_h_arg (int_INCLUDEspec_h $0))) $0)))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :sigid nonemptylist -> sigid nonemptylist -> bool)
   (int_INCLUDEspec_h_arg (int_VALspec_h $0)))
   ((@ :(sigid nonemptylist -> bool) -> sigid nonemptylist)
   (\(x :sigid nonemptylist). T)))))) ((/\
   ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :sigid nonemptylist -> sigid nonemptylist -> bool)
   (int_INCLUDEspec_h_arg (int_EXCEPTIONspec_h $0)))
   ((@ :(sigid nonemptylist -> bool) -> sigid nonemptylist)
   (\(x :sigid nonemptylist). T)))))) ((/\
   ((! :(strdesc_h -> bool) -> bool) (\(x1 :strdesc_h).
   (((= :sigid nonemptylist -> sigid nonemptylist -> bool)
   (int_INCLUDEspec_h_arg (int_STRUCTUREspec_h $0)))
   ((@ :(sigid nonemptylist -> bool) -> sigid nonemptylist)
   (\(x :sigid nonemptylist). T)))))) ((/\
   ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :sigid nonemptylist -> sigid nonemptylist -> bool)
   (int_INCLUDEspec_h_arg ((int_LOCALspec_h $1) $0)))
   ((@ :(sigid nonemptylist -> bool) -> sigid nonemptylist)
   (\(x :sigid nonemptylist). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :sigid nonemptylist -> sigid nonemptylist -> bool)
   (int_INCLUDEspec_h_arg (int_OPENspec_h $0)))
   ((@ :(sigid nonemptylist -> bool) -> sigid nonemptylist)
   (\(x :sigid nonemptylist). T)))))) ((/\
   (((= :sigid nonemptylist -> sigid nonemptylist -> bool)
   (int_INCLUDEspec_h_arg int_EMPTYspec_h))
   ((@ :(sigid nonemptylist -> bool) -> sigid nonemptylist)
   (\(x :sigid nonemptylist). T)))) ((/\
   ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :sigid nonemptylist -> sigid nonemptylist -> bool)
   (int_INCLUDEspec_h_arg ((int_SEQspec_h $1) $0)))
   ((@ :(sigid nonemptylist -> bool) -> sigid nonemptylist)
   (\(x :sigid nonemptylist). T)))))))) ((! :(funid -> bool) -> bool)
   (\(x1 :funid). ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4 :sigexp_h).
   (((= :sigid nonemptylist -> sigid nonemptylist -> bool)
   (int_INCLUDEspec_h_arg ((((int_FUNCTORspec_h $3) $2) $1) $0)))
   ((@ :(sigid nonemptylist -> bool) -> sigid nonemptylist)
   (\(x :sigid nonemptylist). T)))))))))))))))))))`),
 ((int_OPENspec_h_arg_DEF),
  [],
  `((/\ ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENspec_h_arg (int_OPENspec_h $0))) $0)))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENspec_h_arg (int_VALspec_h $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))))) ((/\
   ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENspec_h_arg (int_EXCEPTIONspec_h $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))))) ((/\
   ((! :(strdesc_h -> bool) -> bool) (\(x1 :strdesc_h).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENspec_h_arg (int_STRUCTUREspec_h $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))))) ((/\
   ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENspec_h_arg ((int_LOCALspec_h $1) $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENspec_h_arg (int_INCLUDEspec_h $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))))) ((/\
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENspec_h_arg int_EMPTYspec_h))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))) ((/\
   ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENspec_h_arg ((int_SEQspec_h $1) $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T))))))))
   ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4 :sigexp_h).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENspec_h_arg ((((int_FUNCTORspec_h $3) $2) $1) $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))))))))))))))))))`),
 ((int_LOCALspec_h_arg2_DEF),
  [],
  `((/\ ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :spec_h -> spec_h -> bool) (int_LOCALspec_h_arg2
   ((int_LOCALspec_h $1) $0))) $0)))))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :spec_h -> spec_h -> bool) (int_LOCALspec_h_arg2
   (int_VALspec_h $0))) ((@ :(spec_h -> bool) -> spec_h)
   (\(x :spec_h). T)))))) ((/\ ((! :(exdesc -> bool) -> bool)
   (\(x1 :exdesc). (((= :spec_h -> spec_h -> bool)
   (int_LOCALspec_h_arg2 (int_EXCEPTIONspec_h $0)))
   ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h). T)))))) ((/\
   ((! :(strdesc_h -> bool) -> bool) (\(x1 :strdesc_h).
   (((= :spec_h -> spec_h -> bool) (int_LOCALspec_h_arg2
   (int_STRUCTUREspec_h $0))) ((@ :(spec_h -> bool) -> spec_h)
   (\(x :spec_h). T)))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :spec_h -> spec_h -> bool)
   (int_LOCALspec_h_arg2 (int_OPENspec_h $0)))
   ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h). T)))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :spec_h -> spec_h -> bool)
   (int_LOCALspec_h_arg2 (int_INCLUDEspec_h $0)))
   ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h). T)))))) ((/\
   (((= :spec_h -> spec_h -> bool) (int_LOCALspec_h_arg2
   int_EMPTYspec_h)) ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h).
   T)))) ((/\ ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :spec_h -> spec_h -> bool) (int_LOCALspec_h_arg2
   ((int_SEQspec_h $1) $0))) ((@ :(spec_h -> bool) -> spec_h)
   (\(x :spec_h). T)))))))) ((! :(funid -> bool) -> bool)
   (\(x1 :funid). ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4 :sigexp_h).
   (((= :spec_h -> spec_h -> bool) (int_LOCALspec_h_arg2
   ((((int_FUNCTORspec_h $3) $2) $1) $0)))
   ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h).
   T)))))))))))))))))))`),
 ((int_LOCALspec_h_arg1_DEF),
  [],
  `((/\ ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :spec_h -> spec_h -> bool) (int_LOCALspec_h_arg1
   ((int_LOCALspec_h $1) $0))) $1)))))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :spec_h -> spec_h -> bool) (int_LOCALspec_h_arg1
   (int_VALspec_h $0))) ((@ :(spec_h -> bool) -> spec_h)
   (\(x :spec_h). T)))))) ((/\ ((! :(exdesc -> bool) -> bool)
   (\(x1 :exdesc). (((= :spec_h -> spec_h -> bool)
   (int_LOCALspec_h_arg1 (int_EXCEPTIONspec_h $0)))
   ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h). T)))))) ((/\
   ((! :(strdesc_h -> bool) -> bool) (\(x1 :strdesc_h).
   (((= :spec_h -> spec_h -> bool) (int_LOCALspec_h_arg1
   (int_STRUCTUREspec_h $0))) ((@ :(spec_h -> bool) -> spec_h)
   (\(x :spec_h). T)))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :spec_h -> spec_h -> bool)
   (int_LOCALspec_h_arg1 (int_OPENspec_h $0)))
   ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h). T)))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :spec_h -> spec_h -> bool)
   (int_LOCALspec_h_arg1 (int_INCLUDEspec_h $0)))
   ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h). T)))))) ((/\
   (((= :spec_h -> spec_h -> bool) (int_LOCALspec_h_arg1
   int_EMPTYspec_h)) ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h).
   T)))) ((/\ ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :spec_h -> spec_h -> bool) (int_LOCALspec_h_arg1
   ((int_SEQspec_h $1) $0))) ((@ :(spec_h -> bool) -> spec_h)
   (\(x :spec_h). T)))))))) ((! :(funid -> bool) -> bool)
   (\(x1 :funid). ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4 :sigexp_h).
   (((= :spec_h -> spec_h -> bool) (int_LOCALspec_h_arg1
   ((((int_FUNCTORspec_h $3) $2) $1) $0)))
   ((@ :(spec_h -> bool) -> spec_h) (\(x :spec_h).
   T)))))))))))))))))))`),
 ((int_STRUCTUREspec_h_arg_DEF),
  [],
  `((/\ ((! :(strdesc_h -> bool) -> bool) (\(x1 :strdesc_h).
   (((= :strdesc_h -> strdesc_h -> bool) (int_STRUCTUREspec_h_arg
   (int_STRUCTUREspec_h $0))) $0)))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :strdesc_h -> strdesc_h -> bool) (int_STRUCTUREspec_h_arg
   (int_VALspec_h $0))) ((@ :(strdesc_h -> bool) -> strdesc_h)
   (\(x :strdesc_h). T)))))) ((/\ ((! :(exdesc -> bool) -> bool)
   (\(x1 :exdesc). (((= :strdesc_h -> strdesc_h -> bool)
   (int_STRUCTUREspec_h_arg (int_EXCEPTIONspec_h $0)))
   ((@ :(strdesc_h -> bool) -> strdesc_h) (\(x :strdesc_h). T))))))
   ((/\ ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :strdesc_h -> strdesc_h -> bool) (int_STRUCTUREspec_h_arg
   ((int_LOCALspec_h $1) $0))) ((@ :(strdesc_h -> bool) -> strdesc_h)
   (\(x :strdesc_h). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :strdesc_h -> strdesc_h -> bool) (int_STRUCTUREspec_h_arg
   (int_OPENspec_h $0))) ((@ :(strdesc_h -> bool) -> strdesc_h)
   (\(x :strdesc_h). T)))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :strdesc_h -> strdesc_h -> bool)
   (int_STRUCTUREspec_h_arg (int_INCLUDEspec_h $0)))
   ((@ :(strdesc_h -> bool) -> strdesc_h) (\(x :strdesc_h). T))))))
   ((/\ (((= :strdesc_h -> strdesc_h -> bool) (int_STRUCTUREspec_h_arg
   int_EMPTYspec_h)) ((@ :(strdesc_h -> bool) -> strdesc_h)
   (\(x :strdesc_h). T)))) ((/\ ((! :(spec_h -> bool) -> bool)
   (\(x1 :spec_h). ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :strdesc_h -> strdesc_h -> bool) (int_STRUCTUREspec_h_arg
   ((int_SEQspec_h $1) $0))) ((@ :(strdesc_h -> bool) -> strdesc_h)
   (\(x :strdesc_h). T)))))))) ((! :(funid -> bool) -> bool)
   (\(x1 :funid). ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4 :sigexp_h).
   (((= :strdesc_h -> strdesc_h -> bool) (int_STRUCTUREspec_h_arg
   ((((int_FUNCTORspec_h $3) $2) $1) $0)))
   ((@ :(strdesc_h -> bool) -> strdesc_h) (\(x :strdesc_h).
   T)))))))))))))))))))`),
 ((int_EXCEPTIONspec_h_arg_DEF),
  [],
  `((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :exdesc -> exdesc -> bool) (int_EXCEPTIONspec_h_arg
   (int_EXCEPTIONspec_h $0))) $0)))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :exdesc -> exdesc -> bool) (int_EXCEPTIONspec_h_arg
   (int_VALspec_h $0))) ((@ :(exdesc -> bool) -> exdesc)
   (\(x :exdesc). T)))))) ((/\ ((! :(strdesc_h -> bool) -> bool)
   (\(x1 :strdesc_h). (((= :exdesc -> exdesc -> bool)
   (int_EXCEPTIONspec_h_arg (int_STRUCTUREspec_h $0)))
   ((@ :(exdesc -> bool) -> exdesc) (\(x :exdesc). T)))))) ((/\
   ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :exdesc -> exdesc -> bool) (int_EXCEPTIONspec_h_arg
   ((int_LOCALspec_h $1) $0))) ((@ :(exdesc -> bool) -> exdesc)
   (\(x :exdesc). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :exdesc -> exdesc -> bool)
   (int_EXCEPTIONspec_h_arg (int_OPENspec_h $0)))
   ((@ :(exdesc -> bool) -> exdesc) (\(x :exdesc). T)))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :exdesc -> exdesc -> bool)
   (int_EXCEPTIONspec_h_arg (int_INCLUDEspec_h $0)))
   ((@ :(exdesc -> bool) -> exdesc) (\(x :exdesc). T)))))) ((/\
   (((= :exdesc -> exdesc -> bool) (int_EXCEPTIONspec_h_arg
   int_EMPTYspec_h)) ((@ :(exdesc -> bool) -> exdesc) (\(x :exdesc).
   T)))) ((/\ ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :exdesc -> exdesc -> bool) (int_EXCEPTIONspec_h_arg
   ((int_SEQspec_h $1) $0))) ((@ :(exdesc -> bool) -> exdesc)
   (\(x :exdesc). T)))))))) ((! :(funid -> bool) -> bool)
   (\(x1 :funid). ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4 :sigexp_h).
   (((= :exdesc -> exdesc -> bool) (int_EXCEPTIONspec_h_arg
   ((((int_FUNCTORspec_h $3) $2) $1) $0)))
   ((@ :(exdesc -> bool) -> exdesc) (\(x :exdesc).
   T)))))))))))))))))))`),
 ((int_VALspec_h_arg_DEF),
  [],
  `((/\ ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :valdesc -> valdesc -> bool) (int_VALspec_h_arg (int_VALspec_h
   $0))) $0)))) ((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :valdesc -> valdesc -> bool) (int_VALspec_h_arg
   (int_EXCEPTIONspec_h $0))) ((@ :(valdesc -> bool) -> valdesc)
   (\(x :valdesc). T)))))) ((/\ ((! :(strdesc_h -> bool) -> bool)
   (\(x1 :strdesc_h). (((= :valdesc -> valdesc -> bool)
   (int_VALspec_h_arg (int_STRUCTUREspec_h $0)))
   ((@ :(valdesc -> bool) -> valdesc) (\(x :valdesc). T)))))) ((/\
   ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :valdesc -> valdesc -> bool) (int_VALspec_h_arg
   ((int_LOCALspec_h $1) $0))) ((@ :(valdesc -> bool) -> valdesc)
   (\(x :valdesc). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :valdesc -> valdesc -> bool)
   (int_VALspec_h_arg (int_OPENspec_h $0)))
   ((@ :(valdesc -> bool) -> valdesc) (\(x :valdesc). T)))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :valdesc -> valdesc -> bool)
   (int_VALspec_h_arg (int_INCLUDEspec_h $0)))
   ((@ :(valdesc -> bool) -> valdesc) (\(x :valdesc). T)))))) ((/\
   (((= :valdesc -> valdesc -> bool) (int_VALspec_h_arg
   int_EMPTYspec_h)) ((@ :(valdesc -> bool) -> valdesc)
   (\(x :valdesc). T)))) ((/\ ((! :(spec_h -> bool) -> bool)
   (\(x1 :spec_h). ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :valdesc -> valdesc -> bool) (int_VALspec_h_arg
   ((int_SEQspec_h $1) $0))) ((@ :(valdesc -> bool) -> valdesc)
   (\(x :valdesc). T)))))))) ((! :(funid -> bool) -> bool)
   (\(x1 :funid). ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4 :sigexp_h).
   (((= :valdesc -> valdesc -> bool) (int_VALspec_h_arg
   ((((int_FUNCTORspec_h $3) $2) $1) $0)))
   ((@ :(valdesc -> bool) -> valdesc) (\(x :valdesc).
   T)))))))))))))))))))`),
 ((int_SIGIDsigexp_h_arg_DEF),
  [],
  `((/\ ((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   (((= :sigid -> sigid -> bool) (int_SIGIDsigexp_h_arg
   (int_SIGIDsigexp_h $0))) $0)))) ((! :(spec_h -> bool) -> bool)
   (\(x1 :spec_h). (((= :sigid -> sigid -> bool)
   (int_SIGIDsigexp_h_arg (int_SIGsigexp_h $0)))
   ((@ :(sigid -> bool) -> sigid) (\(x :sigid). T))))))`),
 ((int_SIGsigexp_h_arg_DEF),
  [],
  `((/\ ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   (((= :spec_h -> spec_h -> bool) (int_SIGsigexp_h_arg
   (int_SIGsigexp_h $0))) $0)))) ((! :(sigid -> bool) -> bool)
   (\(x1 :sigid). (((= :spec_h -> spec_h -> bool) (int_SIGsigexp_h_arg
   (int_SIGIDsigexp_h $0))) ((@ :(spec_h -> bool) -> spec_h)
   (\(x :spec_h). T))))))`),
 ((dist_aux_ftn_sigexp_h_DEF),
  [],
  `((/\ ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   (((= :num -> num -> bool) (dist_aux_ftn_sigexp_h (int_SIGsigexp_h
   $0))) 0)))) ((/\ ((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   (((= :num -> num -> bool) (dist_aux_ftn_sigexp_h (int_SIGIDsigexp_h
   $0))) 1)))) ((/\ ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :num -> num -> bool) (dist_aux_ftn_spec_h (int_VALspec_h $0)))
   2)))) ((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :num -> num -> bool) (dist_aux_ftn_spec_h (int_EXCEPTIONspec_h
   $0))) 3)))) ((/\ ((! :(strdesc_h -> bool) -> bool)
   (\(x1 :strdesc_h). (((= :num -> num -> bool) (dist_aux_ftn_spec_h
   (int_STRUCTUREspec_h $0))) 4)))) ((/\
   ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :num -> num -> bool) (dist_aux_ftn_spec_h ((int_LOCALspec_h
   $1) $0))) 5)))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :num -> num -> bool)
   (dist_aux_ftn_spec_h (int_OPENspec_h $0))) 6)))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :num -> num -> bool)
   (dist_aux_ftn_spec_h (int_INCLUDEspec_h $0))) 7)))) ((/\
   (((= :num -> num -> bool) (dist_aux_ftn_spec_h int_EMPTYspec_h))
   8)) ((/\ ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :num -> num -> bool) (dist_aux_ftn_spec_h ((int_SEQspec_h $1)
   $0))) 9)))))) ((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4 :sigexp_h).
   (((= :num -> num -> bool) (dist_aux_ftn_spec_h
   ((((int_FUNCTORspec_h $3) $2) $1) $0))) 10)))))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x2 :sigexp_h).
   ((! :(strdesc_h_option_sigexp_h_spec_h_strdesc_h -> bool) -> bool)
   (\(x3 :strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :num -> num -> bool) (dist_aux_ftn_strdesc_h
   (((int_STRIDstrdesc_h $2) $1) $0))) 11)))))))) ((/\
   (((= :num -> num -> bool)
   (dist_aux_ftn_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   int_sigexp_h_spec_h_strdesc_h_NONE_strdesc_h)) 12))
   ((! :(strdesc_h -> bool) -> bool) (\(x1 :strdesc_h).
   (((= :num -> num -> bool)
   (dist_aux_ftn_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (int_sigexp_h_spec_h_strdesc_h_SOME_strdesc_h $0)))
   13))))))))))))))))`),
 ((STRIDstrdesc_h),
  [],
  `(((= :(strid -> sigexp_h -> strdesc_h option -> strdesc_h) ->
         (strid -> sigexp_h -> strdesc_h option -> strdesc_h) -> bool)
   STRIDstrdesc_h) (\(x0 :strid). (\(x1 :sigexp_h).
   (\(x2 :strdesc_h option). (((int_STRIDstrdesc_h $2) $1)
   (int_inj_strdesc_h_option_sigexp_h_spec_h_strdesc_h $0))))))`),
 ((int_inv_strdesc_h_option_sigexp_h_spec_h_strdesc_h),
  [],
  `((/\ (((= :strdesc_h option -> strdesc_h option -> bool)
   (int_inv_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   int_sigexp_h_spec_h_strdesc_h_NONE_strdesc_h))
   (NONE :strdesc_h option))) ((! :(strdesc_h -> bool) -> bool)
   (\(x1 :strdesc_h).
   (((= :strdesc_h option -> strdesc_h option -> bool)
   (int_inv_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (int_sigexp_h_spec_h_strdesc_h_SOME_strdesc_h $0)))
   ((SOME :strdesc_h -> strdesc_h option) $0)))))`),
 ((int_inj_strdesc_h_option_sigexp_h_spec_h_strdesc_h),
  [],
  `((/\
   (((= :strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         strdesc_h_option_sigexp_h_spec_h_strdesc_h -> bool)
   (int_inj_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (NONE :strdesc_h option)))
   int_sigexp_h_spec_h_strdesc_h_NONE_strdesc_h))
   ((! :(strdesc_h -> bool) -> bool) (\(x0 :strdesc_h).
   (((= :strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         strdesc_h_option_sigexp_h_spec_h_strdesc_h -> bool)
   (int_inj_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   ((SOME :strdesc_h -> strdesc_h option) $0)))
   (int_sigexp_h_spec_h_strdesc_h_SOME_strdesc_h $0)))))`),
 ((FUNCTORspec_h),
  [],
  `(((= :(funid -> strid -> sigexp_h -> sigexp_h -> spec_h) ->
         (funid -> strid -> sigexp_h -> sigexp_h -> spec_h) -> bool)
   FUNCTORspec_h) (\(x0 :funid). (\(x1 :strid). (\(x2 :sigexp_h).
   (\(x3 :sigexp_h). ((((int_FUNCTORspec_h $3) $2) $1) $0))))))`),
 ((SEQspec_h),
  [],
  `(((= :(spec_h -> spec_h -> spec_h) ->
         (spec_h -> spec_h -> spec_h) -> bool) SEQspec_h)
   (\(x0 :spec_h). (\(x1 :spec_h). ((int_SEQspec_h $1) $0))))`),
 ((EMPTYspec_h),
  [],
  `(((= :spec_h -> spec_h -> bool) EMPTYspec_h) int_EMPTYspec_h)`),
 ((INCLUDEspec_h),
  [],
  `(((= :(sigid nonemptylist -> spec_h) ->
         (sigid nonemptylist -> spec_h) -> bool) INCLUDEspec_h)
   (\(x0 :sigid nonemptylist). (int_INCLUDEspec_h $0)))`),
 ((OPENspec_h),
  [],
  `(((= :(strid long nonemptylist -> spec_h) ->
         (strid long nonemptylist -> spec_h) -> bool) OPENspec_h)
   (\(x0 :strid long nonemptylist). (int_OPENspec_h $0)))`),
 ((LOCALspec_h),
  [],
  `(((= :(spec_h -> spec_h -> spec_h) ->
         (spec_h -> spec_h -> spec_h) -> bool) LOCALspec_h)
   (\(x0 :spec_h). (\(x1 :spec_h). ((int_LOCALspec_h $1) $0))))`),
 ((STRUCTUREspec_h),
  [],
  `(((= :(strdesc_h -> spec_h) -> (strdesc_h -> spec_h) -> bool)
   STRUCTUREspec_h) (\(x0 :strdesc_h). (int_STRUCTUREspec_h $0)))`),
 ((EXCEPTIONspec_h),
  [],
  `(((= :(exdesc -> spec_h) -> (exdesc -> spec_h) -> bool)
   EXCEPTIONspec_h) (\(x0 :exdesc). (int_EXCEPTIONspec_h $0)))`),
 ((VALspec_h),
  [],
  `(((= :(valdesc -> spec_h) -> (valdesc -> spec_h) -> bool)
   VALspec_h) (\(x0 :valdesc). (int_VALspec_h $0)))`),
 ((SIGIDsigexp_h),
  [],
  `(((= :(sigid -> sigexp_h) -> (sigid -> sigexp_h) -> bool)
   SIGIDsigexp_h) (\(x0 :sigid). (int_SIGIDsigexp_h $0)))`),
 ((SIGsigexp_h),
  [],
  `(((= :(spec_h -> sigexp_h) -> (spec_h -> sigexp_h) -> bool)
   SIGsigexp_h) (\(x0 :spec_h). (int_SIGsigexp_h $0)))`),
 ((int_sigexp_h_spec_h_strdesc_h_SOME_strdesc_h_DEF),
  [],
  `((! :(strdesc_h -> bool) -> bool) (\(x1 :strdesc_h).
   (((= :strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         strdesc_h_option_sigexp_h_spec_h_strdesc_h -> bool)
   (int_sigexp_h_spec_h_strdesc_h_SOME_strdesc_h $0))
   (strdesc_h_option_sigexp_h_spec_h_strdesc_h_abs
   (JOINT_int_sigexp_h_spec_h_strdesc_h_SOME_strdesc_h (strdesc_h_rep
   $0))))))`),
 ((int_sigexp_h_spec_h_strdesc_h_NONE_strdesc_h_DEF),
  [],
  `(((= :strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         strdesc_h_option_sigexp_h_spec_h_strdesc_h -> bool)
   int_sigexp_h_spec_h_strdesc_h_NONE_strdesc_h)
   (strdesc_h_option_sigexp_h_spec_h_strdesc_h_abs
   JOINT_int_sigexp_h_spec_h_strdesc_h_NONE_strdesc_h))`),
 ((int_STRIDstrdesc_h_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x2 :sigexp_h).
   ((! :(strdesc_h_option_sigexp_h_spec_h_strdesc_h -> bool) -> bool)
   (\(x3 :strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :strdesc_h -> strdesc_h -> bool) (((int_STRIDstrdesc_h $2) $1)
   $0)) (strdesc_h_abs (((JOINT_int_STRIDstrdesc_h $2) (sigexp_h_rep
   $1)) (strdesc_h_option_sigexp_h_spec_h_strdesc_h_rep
   $0))))))))))`),
 ((int_FUNCTORspec_h_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4 :sigexp_h).
   (((= :spec_h -> spec_h -> bool) ((((int_FUNCTORspec_h $3) $2) $1)
   $0)) (spec_h_abs ((((JOINT_int_FUNCTORspec_h $3) $2) (sigexp_h_rep
   $1)) (sigexp_h_rep $0))))))))))))`),
 ((int_SEQspec_h_DEF),
  [],
  `((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :spec_h -> spec_h -> bool) ((int_SEQspec_h $1) $0))
   (spec_h_abs ((JOINT_int_SEQspec_h (spec_h_rep $1)) (spec_h_rep
   $0))))))))`),
 ((int_EMPTYspec_h_DEF),
  [],
  `(((= :spec_h -> spec_h -> bool) int_EMPTYspec_h) (spec_h_abs
   JOINT_int_EMPTYspec_h))`),
 ((int_INCLUDEspec_h_DEF),
  [],
  `((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :spec_h -> spec_h -> bool)
   (int_INCLUDEspec_h $0)) (spec_h_abs (JOINT_int_INCLUDEspec_h
   $0)))))`),
 ((int_OPENspec_h_DEF),
  [],
  `((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :spec_h -> spec_h -> bool)
   (int_OPENspec_h $0)) (spec_h_abs (JOINT_int_OPENspec_h $0)))))`),
 ((int_LOCALspec_h_DEF),
  [],
  `((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :spec_h -> spec_h -> bool) ((int_LOCALspec_h $1) $0))
   (spec_h_abs ((JOINT_int_LOCALspec_h (spec_h_rep $1)) (spec_h_rep
   $0))))))))`),
 ((int_STRUCTUREspec_h_DEF),
  [],
  `((! :(strdesc_h -> bool) -> bool) (\(x1 :strdesc_h).
   (((= :spec_h -> spec_h -> bool) (int_STRUCTUREspec_h $0))
   (spec_h_abs (JOINT_int_STRUCTUREspec_h (strdesc_h_rep $0))))))`),
 ((int_EXCEPTIONspec_h_DEF),
  [],
  `((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :spec_h -> spec_h -> bool) (int_EXCEPTIONspec_h $0))
   (spec_h_abs (JOINT_int_EXCEPTIONspec_h $0)))))`),
 ((int_VALspec_h_DEF),
  [],
  `((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :spec_h -> spec_h -> bool) (int_VALspec_h $0)) (spec_h_abs
   (JOINT_int_VALspec_h $0)))))`),
 ((int_SIGIDsigexp_h_DEF),
  [],
  `((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   (((= :sigexp_h -> sigexp_h -> bool) (int_SIGIDsigexp_h $0))
   (sigexp_h_abs (JOINT_int_SIGIDsigexp_h $0)))))`),
 ((int_SIGsigexp_h_DEF),
  [],
  `((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   (((= :sigexp_h -> sigexp_h -> bool) (int_SIGsigexp_h $0))
   (sigexp_h_abs (JOINT_int_SIGsigexp_h (spec_h_rep $0))))))`),
 ((sigexp_h_REP_ABS),
  [],
  `((/\ ((! :(sigexp_h -> bool) -> bool) (\(a :sigexp_h).
   (((= :sigexp_h -> sigexp_h -> bool) (sigexp_h_abs (sigexp_h_rep
   $0))) $0))))
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(r :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $0)) 1)) $0))
   (((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool) (sigexp_h_rep (sigexp_h_abs $0))) $0)))))`),
 ((sigexp_h_TY_DEF),
  [],
  `((? :((sigexp_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h) ->
        bool) -> bool)
   (\(rep :sigexp_h ->
           joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((TYPE_DEFINITION :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
                       bool) ->
                       (sigexp_h ->
                       joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h) ->
                       bool)
   (\(x :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $0)) 1))) $0)))`),
 ((spec_h_REP_ABS),
  [],
  `((/\ ((! :(spec_h -> bool) -> bool) (\(a :spec_h).
   (((= :spec_h -> spec_h -> bool) (spec_h_abs (spec_h_rep $0)))
   $0))))
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(r :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $0)) 2)) $0))
   (((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool) (spec_h_rep (spec_h_abs $0))) $0)))))`),
 ((spec_h_TY_DEF),
  [],
  `((? :((spec_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h) ->
        bool) -> bool)
   (\(rep :spec_h ->
           joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((TYPE_DEFINITION :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
                       bool) ->
                       (spec_h ->
                       joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h) ->
                       bool)
   (\(x :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $0)) 2))) $0)))`),
 ((strdesc_h_option_sigexp_h_spec_h_strdesc_h_REP_ABS),
  [],
  `((/\
   ((! :(strdesc_h_option_sigexp_h_spec_h_strdesc_h -> bool) -> bool)
   (\(a :strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         strdesc_h_option_sigexp_h_spec_h_strdesc_h -> bool)
   (strdesc_h_option_sigexp_h_spec_h_strdesc_h_abs
   (strdesc_h_option_sigexp_h_spec_h_strdesc_h_rep $0))) $0))))
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(r :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $0)) 4)) $0))
   (((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool) (strdesc_h_option_sigexp_h_spec_h_strdesc_h_rep
   (strdesc_h_option_sigexp_h_spec_h_strdesc_h_abs $0))) $0)))))`),
 ((strdesc_h_option_sigexp_h_spec_h_strdesc_h_TY_DEF),
  [],
  `((? :((strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h) ->
        bool) -> bool)
   (\(rep :strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
           joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((TYPE_DEFINITION :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
                       bool) ->
                       (strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
                       joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h) ->
                       bool)
   (\(x :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $0)) 4))) $0)))`),
 ((strdesc_h_REP_ABS),
  [],
  `((/\ ((! :(strdesc_h -> bool) -> bool) (\(a :strdesc_h).
   (((= :strdesc_h -> strdesc_h -> bool) (strdesc_h_abs (strdesc_h_rep
   $0))) $0))))
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(r :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $0)) 3)) $0))
   (((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool) (strdesc_h_rep (strdesc_h_abs $0))) $0)))))`),
 ((strdesc_h_TY_DEF),
  [],
  `((? :((strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h) ->
        bool) -> bool)
   (\(rep :strdesc_h ->
           joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((TYPE_DEFINITION :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
                       bool) ->
                       (strdesc_h ->
                       joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h) ->
                       bool)
   (\(x :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $0)) 3))) $0)))`),
 ((joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select_DEF),
  [],
  `((/\
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   (JOINT_int_SIGsigexp_h $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $0)) 2)) 1) 0))))) ((/\ ((! :(sigid -> bool) -> bool) (\(s :sigid).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   (JOINT_int_SIGIDsigexp_h $0))) 1)))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(v' :valdesc).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   (JOINT_int_VALspec_h $0))) 2)))) ((/\
   ((! :(exdesc -> bool) -> bool) (\(e :exdesc).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   (JOINT_int_EXCEPTIONspec_h $0))) 2)))) ((/\
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   (JOINT_int_STRUCTUREspec_h $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $0)) 3)) 2) 0))))) ((/\
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   ((JOINT_int_LOCALspec_h $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $1)) 2)) (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $0)) 2))) 2) 0))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist). (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   (JOINT_int_OPENspec_h $0))) 2)))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(n :sigid nonemptylist). (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   (JOINT_int_INCLUDEspec_h $0))) 2)))) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   JOINT_int_EMPTYspec_h)) 2)) ((/\
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   ((JOINT_int_SEQspec_h $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $1)) 2)) (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $0)) 2))) 2) 0))))))) ((/\ ((! :(funid -> bool) -> bool)
   (\(f' :funid). ((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   ((((JOINT_int_FUNCTORspec_h $3) $2) $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $1)) 1)) (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $0)) 1))) 2) 0))))))))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(s :strid).
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   (((JOINT_int_STRIDstrdesc_h $2) $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $1)) 1)) (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $0)) 4))) 3) 0))))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   JOINT_int_sigexp_h_spec_h_strdesc_h_NONE_strdesc_h)) 4))
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   (JOINT_int_sigexp_h_spec_h_strdesc_h_SOME_strdesc_h $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_select
   $0)) 3)) 4) 0)))))))))))))))))`),
 ((JOINT_int_sigexp_h_spec_h_strdesc_h_SOME_strdesc_h_DEF),
  [],
  `((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool) (JOINT_int_sigexp_h_spec_h_strdesc_h_SOME_strdesc_h
   $0))
   (ABS_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :one + one + funid # strid + strid + one + one ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + funid # strid + strid + one + one ->
          one + one + funid # strid + strid + one + one)
   ((INR :funid # strid + strid + one + one ->
          one + funid # strid + strid + one + one)
   ((INR :strid + one + one -> funid # strid + strid + one + one)
   ((INR :one + one -> strid + one + one) ((INR :one -> one + one)
   one))))))))))))))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list)
   (REP_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   $0))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree list)))))))`),
 ((JOINT_int_sigexp_h_spec_h_strdesc_h_NONE_strdesc_h_DEF),
  [],
  `(((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool) JOINT_int_sigexp_h_spec_h_strdesc_h_NONE_strdesc_h)
   (ABS_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :one + one + funid # strid + strid + one + one ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + funid # strid + strid + one + one ->
          one + one + funid # strid + strid + one + one)
   ((INR :funid # strid + strid + one + one ->
          one + funid # strid + strid + one + one)
   ((INR :strid + one + one -> funid # strid + strid + one + one)
   ((INR :one + one -> strid + one + one) ((INL :one -> one + one)
   one))))))))))))))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree list))))`),
 ((JOINT_int_STRIDstrdesc_h_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool) (((JOINT_int_STRIDstrdesc_h $2) $1) $0))
   (ABS_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :one + one + funid # strid + strid + one + one ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + funid # strid + strid + one + one ->
          one + one + funid # strid + strid + one + one)
   ((INR :funid # strid + strid + one + one ->
          one + funid # strid + strid + one + one)
   ((INR :strid + one + one -> funid # strid + strid + one + one)
   ((INL :strid -> strid + one + one) $2)))))))))))))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list)
   (REP_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   $1))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list)
   (REP_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   $0))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree list))))))))))))`),
 ((JOINT_int_FUNCTORspec_h_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(f' :funid).
   ((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool) ((((JOINT_int_FUNCTORspec_h $3) $2) $1) $0))
   (ABS_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :one + one + funid # strid + strid + one + one ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + funid # strid + strid + one + one ->
          one + one + funid # strid + strid + one + one)
   ((INR :funid # strid + strid + one + one ->
          one + funid # strid + strid + one + one)
   ((INL :funid # strid -> funid # strid + strid + one + one)
   (((, :funid -> strid -> funid # strid) $3) $2)))))))))))))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list)
   (REP_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   $1))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list)
   (REP_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   $0))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree
         list))))))))))))))`),
 ((JOINT_int_SEQspec_h_DEF),
  [],
  `((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool) ((JOINT_int_SEQspec_h $1) $0))
   (ABS_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :one + one + funid # strid + strid + one + one ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + funid # strid + strid + one + one ->
          one + one + funid # strid + strid + one + one)
   ((INL :one -> one + funid # strid + strid + one + one)
   one)))))))))))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list)
   (REP_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   $1))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list)
   (REP_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   $0))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree list))))))))))`),
 ((JOINT_int_EMPTYspec_h_DEF),
  [],
  `(((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool) JOINT_int_EMPTYspec_h)
   (ABS_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :one + one + funid # strid + strid + one + one ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INL :one -> one + one + funid # strid + strid + one + one)
   one))))))))))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree list))))`),
 ((JOINT_int_INCLUDEspec_h_DEF),
  [],
  `((! :(sigid nonemptylist -> bool) -> bool)
   (\(n :sigid nonemptylist).
   (((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool) (JOINT_int_INCLUDEspec_h $0))
   (ABS_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INL :sigid nonemptylist ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one) $0)))))))))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree list))))))`),
 ((JOINT_int_OPENspec_h_DEF),
  [],
  `((! :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist).
   (((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool) (JOINT_int_OPENspec_h $0))
   (ABS_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INL :strid long nonemptylist ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one) $0))))))))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree list))))))`),
 ((JOINT_int_LOCALspec_h_DEF),
  [],
  `((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool) ((JOINT_int_LOCALspec_h $1) $0))
   (ABS_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INL :one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one) one)))))))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list)
   (REP_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   $1))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list)
   (REP_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   $0))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree list))))))))))`),
 ((JOINT_int_STRUCTUREspec_h_DEF),
  [],
  `((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool) (JOINT_int_STRUCTUREspec_h $0))
   (ABS_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INL :one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one) one))))))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list)
   (REP_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   $0))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree list)))))))`),
 ((JOINT_int_EXCEPTIONspec_h_DEF),
  [],
  `((! :(exdesc -> bool) -> bool) (\(e :exdesc).
   (((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool) (JOINT_int_EXCEPTIONspec_h $0))
   (ABS_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INL :exdesc ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one) $0)))))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree list))))))`),
 ((JOINT_int_VALspec_h_DEF),
  [],
  `((! :(valdesc -> bool) -> bool) (\(v' :valdesc).
   (((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool) (JOINT_int_VALspec_h $0))
   (ABS_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INL :valdesc ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one) $0))))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree list))))))`),
 ((JOINT_int_SIGIDsigexp_h_DEF),
  [],
  `((! :(sigid -> bool) -> bool) (\(s :sigid).
   (((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool) (JOINT_int_SIGIDsigexp_h $0))
   (ABS_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INL :sigid ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one) $0)))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree list))))))`),
 ((JOINT_int_SIGsigexp_h_DEF),
  [],
  `((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool) (JOINT_int_SIGsigexp_h $0))
   (ABS_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree)
   ((INL :one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one) one))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one) ltree list)
   (REP_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   $0))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree list)))))))`),
 ((joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_ISO_DEF),
  [],
  `((/\
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(a :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         bool)
   (ABS_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (REP_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   $0))) $0))))
   ((! :((one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree -> bool) -> bool)
   (\(r :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            funid # strid + strid + one + one ->
           (one + sigid + valdesc + exdesc + one + one +
           strid long nonemptylist + sigid nonemptylist + one + one +
           funid # strid + strid + one + one) ltree list -> bool) ->
           (one + sigid + valdesc + exdesc + one + one +
           strid long nonemptylist + sigid nonemptylist + one + one +
           funid # strid + strid + one + one) ltree -> bool)
   (\(v :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one).
   (\(tl :(one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one) ltree list). ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $1)
   ((INL :one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one) one)))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(sigid -> bool) -> bool) (\(s :sigid).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INL :sigid ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one) $0))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\ ((? :(valdesc -> bool) -> bool)
   (\(v :valdesc).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INL :valdesc ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one) $0))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\ ((? :(exdesc -> bool) -> bool)
   (\(e :exdesc).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INL :exdesc ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one) $0)))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INL :one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one) one)))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INL :one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one) one))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   ((? :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INL :strid long nonemptylist ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one) $0)))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\
   ((? :(sigid nonemptylist -> bool) -> bool)
   (\(n :sigid nonemptylist).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INL :sigid nonemptylist ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one) $0)))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :one + one + funid # strid + strid + one + one ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INL :one -> one + one + funid # strid + strid + one + one)
   one))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :one + one + funid # strid + strid + one + one ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + funid # strid + strid + one + one ->
          one + one + funid # strid + strid + one + one)
   ((INL :one -> one + funid # strid + strid + one + one)
   one)))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   ((? :(funid -> bool) -> bool) (\(f :funid).
   ((? :(strid -> bool) -> bool) (\(s :strid).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $3)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :one + one + funid # strid + strid + one + one ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + funid # strid + strid + one + one ->
          one + one + funid # strid + strid + one + one)
   ((INR :funid # strid + strid + one + one ->
          one + funid # strid + strid + one + one)
   ((INL :funid # strid -> funid # strid + strid + one + one)
   (((, :funid -> strid -> funid # strid) $1) $0))))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   ((? :(strid -> bool) -> bool) (\(s :strid).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :one + one + funid # strid + strid + one + one ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + funid # strid + strid + one + one ->
          one + one + funid # strid + strid + one + one)
   ((INR :funid # strid + strid + one + one ->
          one + funid # strid + strid + one + one)
   ((INR :strid + one + one -> funid # strid + strid + one + one)
   ((INL :strid -> strid + one + one) $0))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :one + one + funid # strid + strid + one + one ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + funid # strid + strid + one + one ->
          one + one + funid # strid + strid + one + one)
   ((INR :funid # strid + strid + one + one ->
          one + funid # strid + strid + one + one)
   ((INR :strid + one + one -> funid # strid + strid + one + one)
   ((INR :one + one -> strid + one + one) ((INL :one -> one + one)
   one))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) 0))) ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :one + one + funid # strid + strid + one + one ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + funid # strid + strid + one + one ->
          one + one + funid # strid + strid + one + one)
   ((INR :funid # strid + strid + one + one ->
          one + funid # strid + strid + one + one)
   ((INR :strid + one + one -> funid # strid + strid + one + one)
   ((INR :one + one -> strid + one + one) ((INR :one -> one + one)
   one))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) (SUC 0))))))))))))))))))) $0))
   (((= :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree ->
         (one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree -> bool)
   (REP_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   (ABS_joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h
   $0))) $0)))))`),
 ((joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_TY_DEF),
  [],
  `((? :((joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         (one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one) ltree) -> bool) -> bool)
   (\(rep :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
           (one + sigid + valdesc + exdesc + one + one +
           strid long nonemptylist + sigid nonemptylist + one + one +
           funid # strid + strid + one + one) ltree).
   (((TYPE_DEFINITION :((one + sigid + valdesc + exdesc + one + one +
                        strid long nonemptylist + sigid nonemptylist +
                        one + one + funid # strid + strid + one + one)
                        ltree -> bool) ->
                       (joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
                       (one + sigid + valdesc + exdesc + one + one +
                       strid long nonemptylist + sigid nonemptylist +
                       one + one + funid # strid + strid + one + one)
                       ltree) -> bool)
   ((TRP :(one + sigid + valdesc + exdesc + one + one +
           strid long nonemptylist + sigid nonemptylist + one + one +
           funid # strid + strid + one + one ->
          (one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one) ltree list -> bool) ->
          (one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one) ltree -> bool)
   (\(v :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one).
   (\(tl :(one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one) ltree list). ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $1)
   ((INL :one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one) one)))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(sigid -> bool) -> bool) (\(s :sigid).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INL :sigid ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one) $0))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\ ((? :(valdesc -> bool) -> bool)
   (\(v :valdesc).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INL :valdesc ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one) $0))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\ ((? :(exdesc -> bool) -> bool)
   (\(e :exdesc).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INL :exdesc ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one) $0)))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INL :one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one) one)))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INL :one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one) one))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   ((? :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INL :strid long nonemptylist ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one) $0)))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\
   ((? :(sigid nonemptylist -> bool) -> bool)
   (\(n :sigid nonemptylist).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INL :sigid nonemptylist ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one) $0)))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :one + one + funid # strid + strid + one + one ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INL :one -> one + one + funid # strid + strid + one + one)
   one))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :one + one + funid # strid + strid + one + one ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + funid # strid + strid + one + one ->
          one + one + funid # strid + strid + one + one)
   ((INL :one -> one + funid # strid + strid + one + one)
   one)))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   ((? :(funid -> bool) -> bool) (\(f :funid).
   ((? :(strid -> bool) -> bool) (\(s :strid).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $3)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :one + one + funid # strid + strid + one + one ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + funid # strid + strid + one + one ->
          one + one + funid # strid + strid + one + one)
   ((INR :funid # strid + strid + one + one ->
          one + funid # strid + strid + one + one)
   ((INL :funid # strid -> funid # strid + strid + one + one)
   (((, :funid -> strid -> funid # strid) $1) $0))))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   ((? :(strid -> bool) -> bool) (\(s :strid).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :one + one + funid # strid + strid + one + one ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + funid # strid + strid + one + one ->
          one + one + funid # strid + strid + one + one)
   ((INR :funid # strid + strid + one + one ->
          one + funid # strid + strid + one + one)
   ((INR :strid + one + one -> funid # strid + strid + one + one)
   ((INL :strid -> strid + one + one) $0))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :one + one + funid # strid + strid + one + one ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + funid # strid + strid + one + one ->
          one + one + funid # strid + strid + one + one)
   ((INR :funid # strid + strid + one + one ->
          one + funid # strid + strid + one + one)
   ((INR :strid + one + one -> funid # strid + strid + one + one)
   ((INR :one + one -> strid + one + one) ((INL :one -> one + one)
   one))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) 0))) ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         funid # strid + strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + funid # strid + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + funid # strid + strid + one + one)
   ((INR :sigid nonemptylist + one + one + funid # strid + strid +
          one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          funid # strid + strid + one + one)
   ((INR :one + one + funid # strid + strid + one + one ->
          sigid nonemptylist + one + one + funid # strid + strid +
          one + one)
   ((INR :one + funid # strid + strid + one + one ->
          one + one + funid # strid + strid + one + one)
   ((INR :funid # strid + strid + one + one ->
          one + funid # strid + strid + one + one)
   ((INR :strid + one + one -> funid # strid + strid + one + one)
   ((INR :one + one -> strid + one + one) ((INR :one -> one + one)
   one))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + funid # strid + strid + one + one) ltree list ->
             num) $0)) (SUC 0)))))))))))))))))))) $0)))`)]
theorems =
[((eval_topdec_h_induction_thm),
  [],
  `((! :((topdec_h -> state -> basis_h -> state -> basis_pack_h ->
         bool) -> bool) -> bool)
   (\(P :topdec_h -> state -> basis_h -> state -> basis_pack_h ->
         bool). ((==> ((/\ ((! :(moddec_h -> bool) -> bool)
   (\(moddec_h :moddec_h). ((! :(state -> bool) -> bool)
   (\(s1 :state). ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(env_h -> bool) -> bool) (\(E :env_h). ((==>
   (((((eval_moddec_h $4) $3) $2) $1) (ENVep_h $0))) ((((($5 (MODDEC_H
   $4)) $3) $2) $1) (BASISbp_h (env_h_in_basis_h $0)))))))))))))))
   ((/\ ((! :(moddec_h -> bool) -> bool) (\(moddec_h :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(pack -> bool) -> bool) (\(p :pack). ((==> (((((eval_moddec_h
   $4) $3) $2) $1) (PACKep_h $0))) ((((($5 (MODDEC_H $4)) $3) $2) $1)
   (PACKbp_h $0)))))))))))))) ((! :(sigdec_h -> bool) -> bool)
   (\(sigdec_h :sigdec_h). ((! :(state -> bool) -> bool)
   (\(s1 :state). ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv_h -> bool) -> bool) (\(G :sigenv_h). ((==>
   (((((eval_sigdec_h $4) $3) (Inter_basis_h $2)) $1) $0)) ((((($5
   (SIGDEC_H $4)) $3) $2) $1) (BASISbp_h (sigenv_h_in_basis_h
   $0))))))))))))))))) ((! :(topdec_h -> bool) -> bool)
   (\(topdec_h :topdec_h). ((! :(state -> bool) -> bool)
   (\(s1 :state). ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(basis_pack_h -> bool) -> bool) (\(bp :basis_pack_h). ((==>
   (((((eval_topdec_h $4) $3) $2) $1) $0)) ((((($5 $4) $3) $2) $1)
   $0)))))))))))))))`),
 ((Rule192_h),
  [],
  `((! :(sigdec_h -> bool) -> bool) (\(sigdec_h :sigdec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv_h -> bool) -> bool) (\(G :sigenv_h). ((==>
   (((((eval_sigdec_h $4) $3) (Inter_basis_h $2)) $1) $0))
   (((((eval_topdec_h (SIGDEC_H $4)) $3) $2) $1) (BASISbp_h
   (sigenv_h_in_basis_h $0))))))))))))))`),
 ((Rule191b_h),
  [],
  `((! :(moddec_h -> bool) -> bool) (\(moddec_h :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(pack -> bool) -> bool) (\(p :pack). ((==> (((((eval_moddec_h
   $4) $3) $2) $1) (PACKep_h $0))) (((((eval_topdec_h (MODDEC_H $4))
   $3) $2) $1) (PACKbp_h $0)))))))))))))`),
 ((Rule191a_h),
  [],
  `((! :(moddec_h -> bool) -> bool) (\(moddec_h :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(env_h -> bool) -> bool) (\(E :env_h). ((==>
   (((((eval_moddec_h $4) $3) $2) $1) (ENVep_h $0)))
   (((((eval_topdec_h (MODDEC_H $4)) $3) $2) $1) (BASISbp_h
   (env_h_in_basis_h $0))))))))))))))`),
 ((HOFML_eval_structures_induction),
  [],
  `((! :((strexp_h -> state -> basis_h -> state -> env_pack_h ->
         bool) -> bool) -> bool)
   (\(P_strexp_h :strexp_h -> state -> basis_h -> state ->
                  env_pack_h -> bool).
   ((! :((moddec_h -> state -> basis_h -> state -> env_pack_h ->
         bool) -> bool) -> bool)
   (\(P_moddec_h :moddec_h -> state -> basis_h -> state ->
                  env_pack_h -> bool).
   ((! :((strbind_h -> state -> basis_h -> state -> strenv_pack_h ->
         bool) -> bool) -> bool)
   (\(P_strbind_h :strbind_h -> state -> basis_h -> state ->
                   strenv_pack_h -> bool).
   ((! :((funbind_h -> state -> basis_h -> state -> funenv_h ->
         bool) -> bool) -> bool)
   (\(P_funbind_h :funbind_h -> state -> basis_h -> state ->
                   funenv_h -> bool). ((==> ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($7 $2) $1)
   $4) $0) (ENVep_h $3))) ((((($8 (STRUCTstrexp_h $2)) $1) $4) $0)
   (ENVep_h $3)))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($7 $2) $1)
   $4) $0) (PACKep_h $3))) ((((($8 (STRUCTstrexp_h $2)) $1) $4) $0)
   (PACKep_h $3)))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(strid long -> bool) -> bool) (\(longstrid :strid long).
   ((! :(state -> bool) -> bool) (\(s :state). ((==>
   (((= :env_h lift -> env_h lift -> bool)
   ((lift :env_h -> env_h lift) $2)) ((lookup_longstrid_basis_h $3)
   $1))) ((((($7 (LONGSTRIDstrexp_h $1)) $0) $3) $0) (ENVep_h
   $2)))))))))))) ((/\ ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(basis_h -> bool) -> bool) (\(B' :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(env_h -> bool) -> bool) (\(E' :env_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(funid long -> bool) -> bool) (\(longfunid :funid long).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h' :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((= :funclos_h lift -> funclos_h lift -> bool)
   ((lift :funclos_h -> funclos_h lift) (((((FUNCLOS_H $3) $7) $4)
   (NONE :int_h option)) $10))) ((lookup_longfunid_basis_h $11) $6)))
   ((/\ ((((($15 $5) $2) $11) $1) (ENVep_h $9))) ((((($15 $4) $1)
   ((add_basis_h $10) (strenv_h_in_basis_h ((strenv_h_map $3)
   ((cut_env_h $9) $7))))) $0) (ENVep_h $8))))) ((((($15 ((APPstrexp_h
   $6) $5)) $2) $11) $0) (ENVep_h $8)))))))))))))))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(basis_h -> bool) -> bool) (\(B' :basis_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(funid long -> bool) -> bool) (\(longfunid :funid long).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h' :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((/\
   (((= :funclos_h lift -> funclos_h lift -> bool)
   ((lift :funclos_h -> funclos_h lift) (((((FUNCLOS_H $2) $7) $3)
   (NONE :int_h option)) $8))) ((lookup_longfunid_basis_h $9) $6)))
   ((((($13 $4) $1) $9) $0) (PACKep_h $5)))) ((((($13 ((APPstrexp_h
   $6) $4)) $1) $9) $0) (PACKep_h $5)))))))))))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(basis_h -> bool) -> bool) (\(B' :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(funid long -> bool) -> bool) (\(longfunid :funid long).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h' :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((= :funclos_h lift -> funclos_h lift -> bool)
   ((lift :funclos_h -> funclos_h lift) (((((FUNCLOS_H $3) $8) $4)
   (NONE :int_h option)) $10))) ((lookup_longfunid_basis_h $11) $7)))
   ((/\ ((((($15 $5) $2) $11) $1) (ENVep_h $9))) ((((($15 $4) $1)
   ((add_basis_h $10) (strenv_h_in_basis_h ((strenv_h_map $3)
   ((cut_env_h $9) $8))))) $0) (PACKep_h $6))))) ((((($15
   ((APPstrexp_h $7) $5)) $2) $11) $0) (PACKep_h
   $6)))))))))))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(basis_h -> bool) -> bool) (\(B' :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(env_h -> bool) -> bool) (\(E' :env_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(int_h -> bool) -> bool) (\(i' :int_h).
   ((! :(funid long -> bool) -> bool) (\(longfunid :funid long).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h' :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((= :funclos_h lift -> funclos_h lift -> bool)
   ((lift :funclos_h -> funclos_h lift) (((((FUNCLOS_H $3) $8) $4)
   ((SOME :int_h -> int_h option) $7)) $11)))
   ((lookup_longfunid_basis_h $12) $6))) ((/\ ((((($16 $5) $2) $12)
   $1) (ENVep_h $10))) ((((($16 $4) $1) ((add_basis_h $11)
   (strenv_h_in_basis_h ((strenv_h_map $3) ((cut_env_h $10) $8)))))
   $0) (ENVep_h $9))))) ((((($16 ((APPstrexp_h $6) $5)) $2) $12) $0)
   (ENVep_h ((cut_env_h $9) $7))))))))))))))))))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(basis_h -> bool) -> bool) (\(B' :basis_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(int_h -> bool) -> bool) (\(i' :int_h).
   ((! :(funid long -> bool) -> bool) (\(longfunid :funid long).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h' :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((/\
   (((= :funclos_h lift -> funclos_h lift -> bool)
   ((lift :funclos_h -> funclos_h lift) (((((FUNCLOS_H $2) $8) $3)
   ((SOME :int_h -> int_h option) $7)) $9)))
   ((lookup_longfunid_basis_h $10) $6))) ((((($14 $4) $1) $10) $0)
   (PACKep_h $5)))) ((((($14 ((APPstrexp_h $6) $4)) $1) $10) $0)
   (PACKep_h $5)))))))))))))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(basis_h -> bool) -> bool) (\(B' :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(int_h -> bool) -> bool) (\(i' :int_h).
   ((! :(funid long -> bool) -> bool) (\(longfunid :funid long).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h' :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((= :funclos_h lift -> funclos_h lift -> bool)
   ((lift :funclos_h -> funclos_h lift) (((((FUNCLOS_H $3) $9) $4)
   ((SOME :int_h -> int_h option) $8)) $11)))
   ((lookup_longfunid_basis_h $12) $7))) ((/\ ((((($16 $5) $2) $12)
   $1) (ENVep_h $10))) ((((($16 $4) $1) ((add_basis_h $11)
   (strenv_h_in_basis_h ((strenv_h_map $3) ((cut_env_h $10) $9)))))
   $0) (PACKep_h $6))))) ((((($16 ((APPstrexp_h $7) $5)) $2) $12) $0)
   (PACKep_h $6)))))))))))))))))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(env_h -> bool) -> bool) (\(E' :env_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($10
   $4) $2) $7) $1) (ENVep_h $6))) ((((($11 $3) $1)
   ((add_env_h_to_basis_h $7) $6)) $0) (ENVep_h $5)))) ((((($11
   ((LETstrexp_h $4) $3)) $2) $7) $0) (ENVep_h $5))))))))))))))))))))
   ((/\ ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($8 $3) $1)
   $5) $0) (PACKep_h $4))) ((((($9 ((LETstrexp_h $3) $2)) $1) $5) $0)
   (PACKep_h $4)))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($10
   $4) $2) $7) $1) (ENVep_h $6))) ((((($11 $3) $1)
   ((add_env_h_to_basis_h $7) $6)) $0) (PACKep_h $5)))) ((((($11
   ((LETstrexp_h $4) $3)) $2) $7) $0) (PACKep_h $5))))))))))))))))))))
   ((/\ ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(env -> bool) -> bool) (\(E' :env).
   ((! :(dec -> bool) -> bool) (\(dec :dec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> (((((eval_dec
   $2) $1) (cut_env_h_to_env (env_h_of_basis_h $4))) $0) (ENVep $3)))
   ((((($7 (DECmoddec_h $2)) $1) $4) $0) (ENVep_h (env_in_env_h
   $3))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(dec -> bool) -> bool) (\(dec :dec).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> (((((eval_dec
   $3) $1) (cut_env_h_to_env (env_h_of_basis_h $4))) $0) (PACKep $2)))
   ((((($7 (DECmoddec_h $3)) $1) $4) $0) (PACKep_h $2))))))))))))))
   ((/\ ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(strenv_h -> bool) -> bool) (\(SE :strenv_h).
   ((! :(strbind_h -> bool) -> bool) (\(strbind_h :strbind_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($6 $2) $1)
   $4) $0) (STRENVsp_h $3))) ((((($7 (STRUCTUREmoddec_h $2)) $1) $4)
   $0) (ENVep_h (strenv_h_in_env_h $3))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strbind_h -> bool) -> bool) (\(strbind_h :strbind_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($6 $2) $1)
   $4) $0) (PACKsp_h $3))) ((((($7 (STRUCTUREmoddec_h $2)) $1) $4) $0)
   (PACKep_h $3)))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(env_h -> bool) -> bool) (\(E1 :env_h).
   ((! :(env_h -> bool) -> bool) (\(E2 :env_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h2 :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($10
   $4) $2) $7) $1) (ENVep_h $6))) ((((($10 $3) $1)
   ((add_env_h_to_basis_h $7) $6)) $0) (ENVep_h $5)))) ((((($10
   ((LOCALmoddec_h $4) $3)) $2) $7) $0) (ENVep_h
   $5)))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h2 :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($8 $3) $1)
   $5) $0) (PACKep_h $4))) ((((($8 ((LOCALmoddec_h $3) $2)) $1) $5)
   $0) (PACKep_h $4)))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h2 :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($10
   $4) $2) $7) $1) (ENVep_h $6))) ((((($10 $3) $1)
   ((add_env_h_to_basis_h $7) $6)) $0) (PACKep_h $5)))) ((((($10
   ((LOCALmoddec_h $4) $3)) $2) $7) $0) (PACKep_h
   $5)))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(env_h nonemptylist -> bool) -> bool)
   (\(E_1_n :env_h nonemptylist).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(longstrid_1_n :strid long nonemptylist).
   ((! :(state -> bool) -> bool) (\(s :state). ((==>
   (((= :env_h lift nonemptylist -> env_h lift nonemptylist -> bool)
   (((nonempty_MAP :(strid long -> env_h lift) ->
                    strid long nonemptylist ->
                    env_h lift nonemptylist) (lookup_longstrid_basis_h
   $3)) $1))
   (((nonempty_MAP :(env_h -> env_h lift) -> env_h nonemptylist ->
                    env_h lift nonemptylist)
   (lift :env_h -> env_h lift)) $2))) ((((($6 (OPENmoddec_h $1)) $0)
   $3) $0) (ENVep_h
   (((nonempty_FOLDL_WITH_INIT :(env_h -> env_h -> env_h) ->
                                env_h nonemptylist -> env_h)
   add_env_h) $2))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(state -> bool) -> bool) (\(s :state). ((((($4
   EMPTYmoddec_h) $0) $1) $0) (ENVep_h empty_env_h))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E1 :env_h).
   ((! :(env_h -> bool) -> bool) (\(E2 :env_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h2 :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($10
   $4) $2) $7) $1) (ENVep_h $6))) ((((($10 $3) $1)
   ((add_env_h_to_basis_h $7) $6)) $0) (ENVep_h $5)))) ((((($10
   ((SEQmoddec_h $4) $3)) $2) $7) $0) (ENVep_h ((add_env_h $6)
   $5))))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h2 :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($8 $3) $1)
   $5) $0) (PACKep_h $4))) ((((($8 ((SEQmoddec_h $3) $2)) $1) $5) $0)
   (PACKep_h $4)))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(moddec_h2 :moddec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($10
   $4) $2) $7) $1) (ENVep_h $6))) ((((($10 $3) $1)
   ((add_env_h_to_basis_h $7) $6)) $0) (PACKep_h $5)))) ((((($10
   ((SEQmoddec_h $4) $3)) $2) $7) $0) (PACKep_h $5))))))))))))))))))))
   ((/\ ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(funenv_h -> bool) -> bool) (\(f :funenv_h).
   ((! :(funbind_h -> bool) -> bool) (\(funbind_h :funbind_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($5 $2) $1)
   $4) $0) $3)) ((((($7 (FUNCTORmoddec_h $2)) $1) $4) $0) (ENVep_h
   (funenv_h_in_env_h $3))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($9 $3) $1)
   $5) $0) (ENVep_h $4))) ((((($7 ((((BINDstrbind_h $2)
   (NONE :sigexp_h option)) $3) (NONE :strbind_h option))) $1) $5) $0)
   (STRENVsp_h ((strenv_h_map $2) $4))))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($9 $3) $1)
   $5) $0) (PACKep_h $4))) ((((($7 ((((BINDstrbind_h $2)
   (NONE :sigexp_h option)) $3) (NONE :strbind_h option))) $1) $5) $0)
   (PACKsp_h $4)))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($12
   $4) $2) $8) $1) (ENVep_h $7))) (((((eval_sigexp_h $5) $1)
   (Inter_basis_h $8)) $0) $6))) ((((($10 ((((BINDstrbind_h $3)
   ((SOME :sigexp_h -> sigexp_h option) $5)) $4)
   (NONE :strbind_h option))) $2) $8) $0) (STRENVsp_h ((strenv_h_map
   $3) ((cut_env_h $7) $6)))))))))))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($10 $3) $1)
   $6) $0) (PACKep_h $5))) ((((($8 ((((BINDstrbind_h $2)
   ((SOME :sigexp_h -> sigexp_h option) $4)) $3)
   (NONE :strbind_h option))) $1) $6) $0) (PACKsp_h
   $5)))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(strenv_h -> bool) -> bool) (\(SE :strenv_h).
   ((! :(strbind_h -> bool) -> bool) (\(strbind_h :strbind_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($12
   $4) $2) $8) $1) (ENVep_h $7))) ((((($10 $5) $1) $8) $0) (STRENVsp_h
   $6)))) ((((($10 ((((BINDstrbind_h $3) (NONE :sigexp_h option)) $4)
   ((SOME :strbind_h -> strbind_h option) $5))) $2) $8) $0)
   (STRENVsp_h ((add_strenv_h ((strenv_h_map $3) $7))
   $6))))))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strbind_h -> bool) -> bool) (\(strbind_h :strbind_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($10 $3) $1)
   $6) $0) (PACKep_h $5))) ((((($8 ((((BINDstrbind_h $2)
   (NONE :sigexp_h option)) $3) ((SOME :strbind_h -> strbind_h option)
   $4))) $1) $6) $0) (PACKsp_h $5)))))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strbind_h -> bool) -> bool) (\(strbind_h :strbind_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($12
   $4) $2) $8) $1) (ENVep_h $7))) ((((($10 $5) $1) $8) $0) (PACKsp_h
   $6)))) ((((($10 ((((BINDstrbind_h $3) (NONE :sigexp_h option)) $4)
   ((SOME :strbind_h -> strbind_h option) $5))) $2) $8) $0) (PACKsp_h
   $6)))))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(strenv_h -> bool) -> bool) (\(SE :strenv_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(strbind_h -> bool) -> bool) (\(strbind_h :strbind_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(state -> bool) -> bool) (\(s4 :state). ((==> ((/\ ((((($15
   $5) $3) $11) $2) (ENVep_h $10))) ((/\ (((((eval_sigexp_h $7) $2)
   (Inter_basis_h $11)) $1) $9)) ((((($13 $6) $1) $11) $0) (STRENVsp_h
   $8))))) ((((($13 ((((BINDstrbind_h $4)
   ((SOME :sigexp_h -> sigexp_h option) $7)) $5)
   ((SOME :strbind_h -> strbind_h option) $6))) $3) $11) $0)
   (STRENVsp_h ((add_strenv_h ((strenv_h_map $4) ((cut_env_h $10)
   $9))) $8))))))))))))))))))))))))))))) ((/\
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(strbind_h -> bool) -> bool) (\(strbind_h :strbind_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($11 $3) $1)
   $7) $0) (PACKep_h $6))) ((((($9 ((((BINDstrbind_h $2)
   ((SOME :sigexp_h -> sigexp_h option) $5)) $3)
   ((SOME :strbind_h -> strbind_h option) $4))) $1) $7) $0) (PACKsp_h
   $6)))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(env_h -> bool) -> bool) (\(E :env_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(strbind_h -> bool) -> bool) (\(strbind_h :strbind_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(state -> bool) -> bool) (\(s4 :state). ((==> ((/\ ((((($15
   $5) $3) $11) $2) (ENVep_h $10))) ((/\ (((((eval_sigexp_h $7) $2)
   (Inter_basis_h $11)) $1) $9)) ((((($13 $6) $1) $11) $0) (PACKsp_h
   $8))))) ((((($13 ((((BINDstrbind_h $4)
   ((SOME :sigexp_h -> sigexp_h option) $7)) $5)
   ((SOME :strbind_h -> strbind_h option) $6))) $3) $11) $0) (PACKsp_h
   $8)))))))))))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==>
   (((((eval_sigexp_h $4) $1) (Inter_basis_h $7)) $0) $5)) ((((($8
   ((((((BINDfunbind_h $6) $2) $4) (NONE :sigexp_h option)) $3)
   (NONE :funbind_h option))) $1) $7) $0) ((funenv_h_map $6)
   (((((FUNCLOS_H $2) $5) $3) (NONE :int_h option))
   $7))))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(int_h -> bool) -> bool) (\(i' :int_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h' :sigexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((((eval_sigexp_h $6) $2) (Inter_basis_h $10)) $1) $8))
   (((((eval_sigexp_h $5) $1) ((add_strintenv_h_to_intbasis_h
   (Inter_basis_h $10)) ((strintenv_h_map $3) $8))) $0) $7))) ((((($11
   ((((((BINDfunbind_h $9) $3) $6)
   ((SOME :sigexp_h -> sigexp_h option) $5)) $4)
   (NONE :funbind_h option))) $2) $10) $0) ((funenv_h_map $9)
   (((((FUNCLOS_H $3) $8) $4) ((SOME :int_h -> int_h option) $7))
   $10))))))))))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(funbind_h -> bool) -> bool)
   (\(funbind_h :funbind_h). ((! :(funid -> bool) -> bool)
   (\(funid :funid). ((! :(funenv_h -> bool) -> bool) (\(f :funenv_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((((eval_sigexp_h $5) $2) (Inter_basis_h $10)) $1) $6)) ((((($11
   $9) $1) $10) $0) $7))) ((((($11 ((((((BINDfunbind_h $8) $3) $5)
   (NONE :sigexp_h option)) $4) ((SOME :funbind_h -> funbind_h option)
   $9))) $2) $10) $0) ((add_funenv_h ((funenv_h_map $8) (((((FUNCLOS_H
   $3) $6) $4) (NONE :int_h option)) $10)))
   $7)))))))))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(funbind_h -> bool) -> bool)
   (\(funbind_h :funbind_h). ((! :(funid -> bool) -> bool)
   (\(funid :funid). ((! :(funenv_h -> bool) -> bool) (\(f :funenv_h).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(int_h -> bool) -> bool) (\(i' :int_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h' :sigexp_h).
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(state -> bool) -> bool) (\(s4 :state). ((==> ((/\
   (((((eval_sigexp_h $7) $3) (Inter_basis_h $13)) $2) $9)) ((/\
   (((((eval_sigexp_h $6) $2) ((add_strintenv_h_to_intbasis_h
   (Inter_basis_h $13)) ((strintenv_h_map $4) $9))) $1) $8)) ((((($14
   $12) $1) $13) $0) $10)))) ((((($14 ((((((BINDfunbind_h $11) $4) $7)
   ((SOME :sigexp_h -> sigexp_h option) $6)) $5)
   ((SOME :funbind_h -> funbind_h option) $12))) $3) $13) $0)
   ((add_funenv_h ((funenv_h_map $11) (((((FUNCLOS_H $4) $9) $5)
   ((SOME :int_h -> int_h option) $8)) $13)))
   $10)))))))))))))))))))))))))))))))) ((! :(basis_h -> bool) -> bool)
   (\(B :basis_h). ((! :(funclos_h -> bool) -> bool)
   (\(funclos_h :funclos_h). ((! :(funid -> bool) -> bool)
   (\(funid :funid). ((! :(funid long -> bool) -> bool)
   (\(longfunid :funid long). ((! :(state -> bool) -> bool)
   (\(s :state). ((==> (((= :funclos_h lift -> funclos_h lift -> bool)
   ((lookup_longfunid_basis_h $4) $1))
   ((lift :funclos_h -> funclos_h lift) $3))) ((((($5
   ((REBINDfunbind_h $2) $1)) $0) $4) $0) ((funenv_h_map $2)
   $3))))))))))))))))))))))))))))))))))))))))))))))))))))) ((/\
   ((! :(strexp_h -> bool) -> bool) (\(strexp_h :strexp_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(env_pack_h -> bool) -> bool) (\(ep :env_pack_h). ((==>
   (((((eval_strexp_h $4) $3) $2) $1) $0)) ((((($8 $4) $3) $2) $1)
   $0))))))))))))) ((/\ ((! :(moddec_h -> bool) -> bool)
   (\(moddec_h :moddec_h). ((! :(state -> bool) -> bool)
   (\(s1 :state). ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(env_pack_h -> bool) -> bool) (\(ep :env_pack_h). ((==>
   (((((eval_moddec_h $4) $3) $2) $1) $0)) ((((($7 $4) $3) $2) $1)
   $0))))))))))))) ((/\ ((! :(strbind_h -> bool) -> bool)
   (\(strbind_h :strbind_h). ((! :(state -> bool) -> bool)
   (\(s1 :state). ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(strenv_pack_h -> bool) -> bool) (\(sep :strenv_pack_h). ((==>
   (((((eval_strbind_h $4) $3) $2) $1) $0)) ((((($6 $4) $3) $2) $1)
   $0))))))))))))) ((! :(funbind_h -> bool) -> bool)
   (\(funbind_h :funbind_h). ((! :(state -> bool) -> bool)
   (\(s1 :state). ((! :(basis_h -> bool) -> bool) (\(B :basis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(funenv_h -> bool) -> bool) (\(fe :funenv_h). ((==>
   (((((eval_funbind_h $4) $3) $2) $1) $0)) ((((($5 $4) $3) $2) $1)
   $0))))))))))))))))))))))))`),
 ((HOFML_EVAL_STRUCT_RULES_SATISFIED),
  [],
  `((((HOFML_eval_structures_pred eval_strexp_h) eval_moddec_h)
   eval_strbind_h) eval_funbind_h)`),
 ((eval_sigdec_h_induction_thm),
  [],
  `((! :((sigdec_h -> state -> intbasis_h -> state -> sigenv_h ->
         bool) -> bool) -> bool)
   (\(P :sigdec_h -> state -> intbasis_h -> state -> sigenv_h ->
         bool). ((==> ((/\ ((! :(sigbind_h -> bool) -> bool)
   (\(sigbind_h :sigbind_h). ((! :(state -> bool) -> bool)
   (\(s1 :state). ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv_h -> bool) -> bool) (\(G :sigenv_h). ((==>
   (((((eval_sigbind_h $4) $3) $2) $1) $0)) ((((($5 (SIGNATUREsigdec_h
   $4)) $3) $2) $1) $0))))))))))))) ((/\ ((! :(state -> bool) -> bool)
   (\(s :state). ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((((($2 EMPTYsigdec_h) $1) $0) $1)
   empty_sigenv_h)))))) ((! :(sigdec_h -> bool) -> bool)
   (\(sigdec_h1 :sigdec_h). ((! :(state -> bool) -> bool)
   (\(s1 :state). ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((! :(sigenv_h -> bool) -> bool)
   (\(G1 :sigenv_h). ((! :(sigdec_h -> bool) -> bool)
   (\(sigdec_h2 :sigdec_h). ((! :(state -> bool) -> bool)
   (\(s3 :state). ((! :(sigenv_h -> bool) -> bool) (\(G2 :sigenv_h).
   ((==> ((? :(state -> bool) -> bool) (\(s2 :state). ((/\ ((((($8 $7)
   $6) $5) $0) $4)) ((((($8 $3) $0) ((add_sigenv_h_to_intbasis_h $5)
   $4)) $2) $1))))) ((((($7 ((SEQsigdec_h $6) $2)) $5) $4) $1)
   ((add_sigenv_h $3) $0))))))))))))))))))))
   ((! :(sigdec_h -> bool) -> bool) (\(sigdec_h :sigdec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv_h -> bool) -> bool) (\(G :sigenv_h). ((==>
   (((((eval_sigdec_h $4) $3) $2) $1) $0)) ((((($5 $4) $3) $2) $1)
   $0)))))))))))))))`),
 ((Rule_174_h),
  [],
  `((! :(sigdec_h -> bool) -> bool) (\(sigdec_h1 :sigdec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(sigenv_h -> bool) -> bool) (\(G1 :sigenv_h).
   ((! :(sigdec_h -> bool) -> bool) (\(sigdec_h2 :sigdec_h).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(sigenv_h -> bool) -> bool) (\(G2 :sigenv_h). ((==>
   ((? :(state -> bool) -> bool) (\(s2 :state). ((/\
   (((((eval_sigdec_h $7) $6) $5) $0) $4)) (((((eval_sigdec_h $3) $0)
   ((add_sigenv_h_to_intbasis_h $5) $4)) $2) $1)))))
   (((((eval_sigdec_h ((SEQsigdec_h $6) $2)) $5) $4) $1)
   ((add_sigenv_h $3) $0)))))))))))))))))`),
 ((Rule_173_h),
  [],
  `((! :(state -> bool) -> bool) (\(s :state).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   (((((eval_sigdec_h EMPTYsigdec_h) $1) $0) $1)
   empty_sigenv_h)))))`),
 ((Rule172_h),
  [],
  `((! :(sigbind_h -> bool) -> bool) (\(sigbind_h :sigbind_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv_h -> bool) -> bool) (\(G :sigenv_h). ((==>
   (((((eval_sigbind_h $4) $3) $2) $1) $0)) (((((eval_sigdec_h
   (SIGNATUREsigdec_h $4)) $3) $2) $1) $0))))))))))))`),
 ((eval_sigbind_h_induction_thm),
  [],
  `((! :((sigbind_h -> state -> intbasis_h -> state -> sigenv_h ->
         bool) -> bool) -> bool)
   (\(P :sigbind_h -> state -> intbasis_h -> state -> sigenv_h ->
         bool). ((==> ((/\ ((! :(sigexp_h -> bool) -> bool)
   (\(sigexp_h :sigexp_h). ((! :(state -> bool) -> bool)
   (\(s1 :state). ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(int_h -> bool) -> bool) (\(i :int_h). ((==>
   (((((eval_sigexp_h $4) $3) $2) $1) $0))
   ((! :(sigid -> bool) -> bool) (\(sigid :sigid). ((((($6
   (((BINDsigbind_h $0) $5) (NONE :sigbind_h option))) $4) $3) $2)
   ((sigenv_h_map $0) $1))))))))))))))))
   ((! :(sigbind_h -> bool) -> bool) (\(sigbind_h :sigbind_h).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(sigenv_h -> bool) -> bool) (\(G :sigenv_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(int_h -> bool) -> bool) (\(i :int_h). ((==>
   ((? :(state -> bool) -> bool) (\(s2 :state). ((/\ ((((($8 $7) $0)
   $6) $5) $4)) (((((eval_sigexp_h $3) $2) $6) $0) $1)))))
   ((! :(sigid -> bool) -> bool) (\(sigid :sigid). ((((($8
   (((BINDsigbind_h $0) $3) ((SOME :sigbind_h -> sigbind_h option)
   $7))) $2) $6) $5) ((add_sigenv_h ((sigenv_h_map $0) $1))
   $4))))))))))))))))))))) ((! :(sigbind_h -> bool) -> bool)
   (\(sigbind_h :sigbind_h). ((! :(state -> bool) -> bool)
   (\(s1 :state). ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv_h -> bool) -> bool) (\(G :sigenv_h). ((==>
   (((((eval_sigbind_h $4) $3) $2) $1) $0)) ((((($5 $4) $3) $2) $1)
   $0)))))))))))))))`),
 ((Rule175b_h),
  [],
  `((! :(sigbind_h -> bool) -> bool) (\(sigbind_h :sigbind_h).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(sigenv_h -> bool) -> bool) (\(G :sigenv_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(int_h -> bool) -> bool) (\(i :int_h). ((==>
   ((? :(state -> bool) -> bool) (\(s2 :state). ((/\
   (((((eval_sigbind_h $7) $0) $6) $5) $4)) (((((eval_sigexp_h $3) $2)
   $6) $0) $1))))) ((! :(sigid -> bool) -> bool) (\(sigid :sigid).
   (((((eval_sigbind_h (((BINDsigbind_h $0) $3)
   ((SOME :sigbind_h -> sigbind_h option) $7))) $2) $6) $5)
   ((add_sigenv_h ((sigenv_h_map $0) $1)) $4)))))))))))))))))))`),
 ((Rule175a_h),
  [],
  `((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(int_h -> bool) -> bool) (\(i :int_h). ((==>
   (((((eval_sigexp_h $4) $3) $2) $1) $0))
   ((! :(sigid -> bool) -> bool) (\(sigid :sigid). (((((eval_sigbind_h
   (((BINDsigbind_h $0) $5) (NONE :sigbind_h option))) $4) $3) $2)
   ((sigenv_h_map $0) $1)))))))))))))))`),
 ((HOFML_eval_signatures_h_induction),
  [],
  `((! :((sigexp_h -> state -> intbasis_h -> state -> int_h ->
         bool) -> bool) -> bool)
   (\(P_sigexp_h :sigexp_h -> state -> intbasis_h -> state -> int_h ->
                  bool).
   ((! :((spec_h -> state -> intbasis_h -> state -> int_h -> bool) ->
        bool) -> bool)
   (\(P_spec_h :spec_h -> state -> intbasis_h -> state -> int_h ->
                bool).
   ((! :((strdesc_h -> state -> intbasis_h -> state -> strintenv_h ->
         bool) -> bool) -> bool)
   (\(P_strdesc_h :strdesc_h -> state -> intbasis_h -> state ->
                   strintenv_h -> bool). ((==> ((/\
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(spec_h -> bool) -> bool) (\(spec :spec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($6 $2) $1)
   $3) $0) $4)) ((((($7 (SIGsigexp_h $2)) $1) $3) $0) $4)))))))))))))
   ((/\ ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(state -> bool) -> bool) (\(s :state).
   ((! :(sigid -> bool) -> bool) (\(sigid :sigid). ((==>
   (((= :int_h lift -> int_h lift -> bool) ((lookup_sigid_intbasis_h
   $2) $0)) ((lift :int_h -> int_h lift) $3))) ((((($6 (SIGIDsigexp_h
   $0)) $1) $2) $1) $3))))))))))) ((/\
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(valdesc -> bool) -> bool) (\(valdesc :valdesc).
   ((! :(var set -> bool) -> bool) (\(vars :var set).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((eval_valdesc
   $3) $1) $0) $2)) ((((($6 (VALspec_h $3)) $1) $4) $0) (vars_in_int_h
   $2)))))))))))))) ((/\ ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((! :(excon set -> bool) -> bool)
   (\(excons :excon set). ((! :(exdesc -> bool) -> bool)
   (\(exdesc :exdesc). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((eval_exdesc
   $2) $1) $0) $3)) ((((($6 (EXCEPTIONspec_h $2)) $1) $4) $0)
   (excons_in_int_h $3)))))))))))))) ((/\
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(strintenv_h -> bool) -> bool) (\(SIE :strintenv_h).
   ((! :(strdesc_h -> bool) -> bool) (\(strdesc_h :strdesc_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($5 $2) $1)
   $4) $0) $3)) ((((($6 (STRUCTUREspec_h $2)) $1) $4) $0)
   (strintenv_h_in_int_h $3)))))))))))))) ((/\
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(int_h -> bool) -> bool) (\(I1 :int_h).
   ((! :(int_h -> bool) -> bool) (\(I2 :int_h).
   ((! :(spec_h -> bool) -> bool) (\(spec_h1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(spec_h2 :spec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) $6)) ((((($9 $3) $1) ((add_strintenv_h_to_intbasis_h
   $7) (strintenv_h_of_int_h $6))) $0) $5))) ((((($9 ((LOCALspec_h $4)
   $3)) $2) $7) $0) $5))))))))))))))))))) ((/\
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(int_h nonemptylist -> bool) -> bool)
   (\(nonempty_int_h_list :int_h nonemptylist).
   ((! :(int_h lift nonemptylist -> bool) -> bool)
   (\(nonempty_lift_int_h_list :int_h lift nonemptylist).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(nonempty_longstrid_list :strid long nonemptylist).
   ((! :(state -> bool) -> bool) (\(s :state). ((==> ((/\
   (((= :int_h lift nonemptylist -> int_h lift nonemptylist -> bool)
   (((nonempty_MAP :(strid long -> int_h lift) ->
                    strid long nonemptylist ->
                    int_h lift nonemptylist)
   (lookup_longstrid_intbasis_h $4)) $1)) $2))
   (((= :int_h lift nonemptylist -> int_h lift nonemptylist -> bool)
   (((nonempty_MAP :(int_h -> int_h lift) -> int_h nonemptylist ->
                    int_h lift nonemptylist)
   (lift :int_h -> int_h lift)) $3)) $2))) ((((($6 (OPENspec_h $1))
   $0) $4) $0)
   (((nonempty_FOLDL_WITH_INIT :(int_h -> int_h -> int_h) ->
                                int_h nonemptylist -> int_h)
   add_int_h) $3)))))))))))))) ((/\ ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((! :(int_h nonemptylist -> bool) -> bool)
   (\(nonempty_int_h_list :int_h nonemptylist).
   ((! :(int_h lift nonemptylist -> bool) -> bool)
   (\(nonempty_lift_int_h_list :int_h lift nonemptylist).
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(nonempty_sigid_list :sigid nonemptylist).
   ((! :(state -> bool) -> bool) (\(s :state). ((==> ((/\
   (((= :int_h lift nonemptylist -> int_h lift nonemptylist -> bool)
   (((nonempty_MAP :(sigid -> int_h lift) -> sigid nonemptylist ->
                    int_h lift nonemptylist) (lookup_sigid_intbasis_h
   $4)) $1)) $2))
   (((= :int_h lift nonemptylist -> int_h lift nonemptylist -> bool)
   (((nonempty_MAP :(int_h -> int_h lift) -> int_h nonemptylist ->
                    int_h lift nonemptylist)
   (lift :int_h -> int_h lift)) $3)) $2))) ((((($6 (INCLUDEspec_h $1))
   $0) $4) $0)
   (((nonempty_FOLDL_WITH_INIT :(int_h -> int_h -> int_h) ->
                                int_h nonemptylist -> int_h)
   add_int_h) $3)))))))))))))) ((/\ ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((! :(state -> bool) -> bool) (\(s :state).
   ((((($3 EMPTYspec_h) $0) $1) $0) empty_int_h)))))) ((/\
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(int_h -> bool) -> bool) (\(I1 :int_h).
   ((! :(int_h -> bool) -> bool) (\(I2 :int_h).
   ((! :(spec_h -> bool) -> bool) (\(spec_h1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(spec_h2 :spec_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) $6)) ((((($9 $3) $1) ((add_strintenv_h_to_intbasis_h
   $7) (strintenv_h_of_int_h $6))) $0) $5))) ((((($9 ((SEQspec_h $4)
   $3)) $2) $7) $0) ((add_int_h $6) $5)))))))))))))))))))) ((/\
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(int_h -> bool) -> bool) (\(I1 :int_h).
   ((! :(int_h -> bool) -> bool) (\(I2 :int_h).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h' :sigexp_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($12
   $5) $2) $9) $1) $8)) ((((($12 $4) $1)
   ((add_strintenv_h_to_intbasis_h $9) ((strintenv_h_map $3) $8))) $0)
   $7))) ((((($11 ((((FUNCTORspec_h $6) $3) $5) $4)) $2) $9) $0)
   (funintenv_h_in_int_h ((funintenv_h_map $6)
   $8))))))))))))))))))))))))) ((/\ ((! :(int_h -> bool) -> bool)
   (\(i :int_h). ((! :(intbasis_h -> bool) -> bool)
   (\(IB :intbasis_h). ((! :(sigexp_h -> bool) -> bool)
   (\(sigexp_h :sigexp_h). ((! :(strid -> bool) -> bool)
   (\(strid :strid). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($8 $3) $1)
   $4) $0) $5)) ((((($6 (((STRIDstrdesc_h $2) $3)
   (NONE :strdesc_h option))) $1) $4) $0) ((strintenv_h_map $2)
   $5)))))))))))))))) ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(strintenv_h -> bool) -> bool) (\(SIE :strintenv_h).
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(strdesc_h -> bool) -> bool) (\(strdesc_h :strdesc_h).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($11
   $5) $2) $7) $1) $8)) ((((($9 $4) $1) $7) $0) $6))) ((((($9
   (((STRIDstrdesc_h $3) $5) ((SOME :strdesc_h -> strdesc_h option)
   $4))) $2) $7) $0) ((add_strintenv_h ((strintenv_h_map $3) $8))
   $6)))))))))))))))))))))))))))))))))) ((/\
   ((! :(sigexp_h -> bool) -> bool) (\(sigexp_h :sigexp_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(int_h -> bool) -> bool) (\(i :int_h). ((==>
   (((((eval_sigexp_h $4) $3) $2) $1) $0)) ((((($7 $4) $3) $2) $1)
   $0))))))))))))) ((/\ ((! :(spec_h -> bool) -> bool)
   (\(spec_h :spec_h). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(int_h -> bool) -> bool) (\(i :int_h). ((==> (((((eval_spec_h
   $4) $3) $2) $1) $0)) ((((($6 $4) $3) $2) $1) $0)))))))))))))
   ((! :(strdesc_h -> bool) -> bool) (\(strdesc_h :strdesc_h).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis_h -> bool) -> bool) (\(IB :intbasis_h).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(strintenv_h -> bool) -> bool) (\(int_h :strintenv_h). ((==>
   (((((eval_strdesc_h $4) $3) $2) $1) $0)) ((((($5 $4) $3) $2) $1)
   $0)))))))))))))))))))))`),
 ((HOFML_EVAL_SIG_RULES_SATISFIED),
  [],
  `(((HOFML_eval_signatures_pred eval_sigexp_h) eval_spec_h)
   eval_strdesc_h)`),
 ((env_pack_h_constructors_distinct),
  [],
  `((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(env_h -> bool) -> bool) (\(e :env_h). (~
   (((= :env_pack_h -> env_pack_h -> bool) (ENVep_h $0)) (PACKep_h
   $1)))))))`),
 ((env_pack_h_constructors_one_one),
  [],
  `((/\ ((! :(env_h -> bool) -> bool) (\(e :env_h).
   ((! :(env_h -> bool) -> bool) (\(e' :env_h).
   (((= :bool -> bool -> bool) (((= :env_pack_h -> env_pack_h -> bool)
   (ENVep_h $1)) (ENVep_h $0))) (((= :env_h -> env_h -> bool) $1)
   $0))))))) ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(pack -> bool) -> bool) (\(p' :pack).
   (((= :bool -> bool -> bool) (((= :env_pack_h -> env_pack_h -> bool)
   (PACKep_h $1)) (PACKep_h $0))) (((= :pack -> pack -> bool) $1)
   $0)))))))`),
 ((env_pack_h_cases_thm),
  [],
  `((! :(env_pack_h -> bool) -> bool) (\(e :env_pack_h). ((\/
   ((? :(env_h -> bool) -> bool) (\(e' :env_h).
   (((= :env_pack_h -> env_pack_h -> bool) $1) (ENVep_h $0)))))
   ((? :(pack -> bool) -> bool) (\(p :pack).
   (((= :env_pack_h -> env_pack_h -> bool) $1) (PACKep_h $0)))))))`),
 ((env_pack_h_induction_thm),
  [],
  `((! :((env_pack_h -> bool) -> bool) -> bool)
   (\(P :env_pack_h -> bool). ((==> ((/\ ((! :(env_h -> bool) -> bool)
   (\(e :env_h). ($1 (ENVep_h $0))))) ((! :(pack -> bool) -> bool)
   (\(p :pack). ($1 (PACKep_h $0))))))
   ((! :(env_pack_h -> bool) -> bool) (\(e :env_pack_h). ($1
   $0))))))`),
 ((env_pack_h_Axiom),
  [],
  `((! :((env_h -> 'a) -> bool) -> bool) (\(f0 :env_h -> 'a).
   ((! :((pack -> 'a) -> bool) -> bool) (\(f1 :pack -> 'a).
   ((?! :((env_pack_h -> 'a) -> bool) -> bool)
   (\(fn :env_pack_h -> 'a). ((/\ ((! :(env_h -> bool) -> bool)
   (\(e :env_h). (((= :'a -> 'a -> bool) ($1 (ENVep_h $0))) ($3
   $0))))) ((! :(pack -> bool) -> bool) (\(p :pack).
   (((= :'a -> 'a -> bool) ($1 (PACKep_h $0))) ($2 $0)))))))))))`),
 ((strenv_pack_h_constructors_distinct),
  [],
  `((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strenv_h -> bool) -> bool) (\(s :strenv_h). (~
   (((= :strenv_pack_h -> strenv_pack_h -> bool) (STRENVsp_h $0))
   (PACKsp_h $1)))))))`),
 ((strenv_pack_h_constructors_one_one),
  [],
  `((/\ ((! :(strenv_h -> bool) -> bool) (\(s :strenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(s' :strenv_h).
   (((= :bool -> bool -> bool)
   (((= :strenv_pack_h -> strenv_pack_h -> bool) (STRENVsp_h $1))
   (STRENVsp_h $0))) (((= :strenv_h -> strenv_h -> bool) $1) $0)))))))
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(pack -> bool) -> bool) (\(p' :pack).
   (((= :bool -> bool -> bool)
   (((= :strenv_pack_h -> strenv_pack_h -> bool) (PACKsp_h $1))
   (PACKsp_h $0))) (((= :pack -> pack -> bool) $1) $0)))))))`),
 ((strenv_pack_h_cases_thm),
  [],
  `((! :(strenv_pack_h -> bool) -> bool) (\(s :strenv_pack_h). ((\/
   ((? :(strenv_h -> bool) -> bool) (\(s' :strenv_h).
   (((= :strenv_pack_h -> strenv_pack_h -> bool) $1) (STRENVsp_h
   $0))))) ((? :(pack -> bool) -> bool) (\(p :pack).
   (((= :strenv_pack_h -> strenv_pack_h -> bool) $1) (PACKsp_h
   $0)))))))`),
 ((strenv_pack_h_induction_thm),
  [],
  `((! :((strenv_pack_h -> bool) -> bool) -> bool)
   (\(P :strenv_pack_h -> bool). ((==> ((/\
   ((! :(strenv_h -> bool) -> bool) (\(s :strenv_h). ($1 (STRENVsp_h
   $0))))) ((! :(pack -> bool) -> bool) (\(p :pack). ($1 (PACKsp_h
   $0)))))) ((! :(strenv_pack_h -> bool) -> bool)
   (\(s :strenv_pack_h). ($1 $0))))))`),
 ((strenv_pack_h_Axiom),
  [],
  `((! :((strenv_h -> 'a) -> bool) -> bool) (\(f0 :strenv_h -> 'a).
   ((! :((pack -> 'a) -> bool) -> bool) (\(f1 :pack -> 'a).
   ((?! :((strenv_pack_h -> 'a) -> bool) -> bool)
   (\(fn :strenv_pack_h -> 'a). ((/\ ((! :(strenv_h -> bool) -> bool)
   (\(s :strenv_h). (((= :'a -> 'a -> bool) ($1 (STRENVsp_h $0))) ($3
   $0))))) ((! :(pack -> bool) -> bool) (\(p :pack).
   (((= :'a -> 'a -> bool) ($1 (PACKsp_h $0))) ($2 $0)))))))))))`),
 ((basis_pack_h_constructors_distinct),
  [],
  `((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(basis_h -> bool) -> bool) (\(b :basis_h). (~
   (((= :basis_pack_h -> basis_pack_h -> bool) (BASISbp_h $0))
   (PACKbp_h $1)))))))`),
 ((basis_pack_h_constructors_one_one),
  [],
  `((/\ ((! :(basis_h -> bool) -> bool) (\(b :basis_h).
   ((! :(basis_h -> bool) -> bool) (\(b' :basis_h).
   (((= :bool -> bool -> bool)
   (((= :basis_pack_h -> basis_pack_h -> bool) (BASISbp_h $1))
   (BASISbp_h $0))) (((= :basis_h -> basis_h -> bool) $1) $0)))))))
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(pack -> bool) -> bool) (\(p' :pack).
   (((= :bool -> bool -> bool)
   (((= :basis_pack_h -> basis_pack_h -> bool) (PACKbp_h $1))
   (PACKbp_h $0))) (((= :pack -> pack -> bool) $1) $0)))))))`),
 ((basis_pack_h_cases_thm),
  [],
  `((! :(basis_pack_h -> bool) -> bool) (\(b :basis_pack_h). ((\/
   ((? :(basis_h -> bool) -> bool) (\(b' :basis_h).
   (((= :basis_pack_h -> basis_pack_h -> bool) $1) (BASISbp_h $0)))))
   ((? :(pack -> bool) -> bool) (\(p :pack).
   (((= :basis_pack_h -> basis_pack_h -> bool) $1) (PACKbp_h
   $0)))))))`),
 ((basis_pack_h_induction_thm),
  [],
  `((! :((basis_pack_h -> bool) -> bool) -> bool)
   (\(P :basis_pack_h -> bool). ((==> ((/\
   ((! :(basis_h -> bool) -> bool) (\(b :basis_h). ($1 (BASISbp_h
   $0))))) ((! :(pack -> bool) -> bool) (\(p :pack). ($1 (PACKbp_h
   $0)))))) ((! :(basis_pack_h -> bool) -> bool) (\(b :basis_pack_h).
   ($1 $0))))))`),
 ((basis_pack_h_Axiom),
  [],
  `((! :((basis_h -> 'a) -> bool) -> bool) (\(f0 :basis_h -> 'a).
   ((! :((pack -> 'a) -> bool) -> bool) (\(f1 :pack -> 'a).
   ((?! :((basis_pack_h -> 'a) -> bool) -> bool)
   (\(fn :basis_pack_h -> 'a). ((/\ ((! :(basis_h -> bool) -> bool)
   (\(b :basis_h). (((= :'a -> 'a -> bool) ($1 (BASISbp_h $0))) ($3
   $0))))) ((! :(pack -> bool) -> bool) (\(p :pack).
   (((= :'a -> 'a -> bool) ($1 (PACKbp_h $0))) ($2 $0)))))))))))`),
 ((HOFMLBases_cases_thm),
  [],
  `((/\ ((! :(basis_h -> bool) -> bool) (\(x1 :basis_h).
   ((? :(sigenv_h -> bool) -> bool) (\(y :sigenv_h).
   ((? :(env_h -> bool) -> bool) (\(y' :env_h).
   (((= :basis_h -> basis_h -> bool) $2) ((BASIS_H $1) $0)))))))))
   ((/\ ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   ((? :(funenv_h -> bool) -> bool) (\(y :funenv_h).
   ((? :(strenv_h -> bool) -> bool) (\(y''' :strenv_h).
   ((? :(varenv -> bool) -> bool) (\(y'' :varenv).
   ((? :(exconenv -> bool) -> bool) (\(y' :exconenv).
   (((= :env_h -> env_h -> bool) $4) ((((ENV_H $3) $2) $1)
   $0))))))))))))) ((/\ ((! :(funclos_h -> bool) -> bool)
   (\(x3 :funclos_h). ((? :(strid -> bool) -> bool) (\(y :strid).
   ((? :(int_h -> bool) -> bool) (\(y'''' :int_h).
   ((? :(strexp_h -> bool) -> bool) (\(y''' :strexp_h).
   ((? :(int_h option -> bool) -> bool) (\(y'' :int_h option).
   ((? :(basis_h -> bool) -> bool) (\(y' :basis_h).
   (((= :funclos_h -> funclos_h -> bool) $5) (((((FUNCLOS_H $4) $3)
   $2) $1) $0))))))))))))))) ((/\ ((! :(funenv_h -> bool) -> bool)
   (\(x4 :funenv_h).
   ((? :((funid # funclos_h) list finmap -> bool) -> bool)
   (\(y :(funid # funclos_h) list finmap).
   (((= :funenv_h -> funenv_h -> bool) $1) (FUNENV_H $0))))))) ((/\
   ((! :(funid # funclos_h -> bool) -> bool)
   (\(x5 :funid # funclos_h). ((? :(funid -> bool) -> bool)
   (\(y :funid). ((? :(funclos_h -> bool) -> bool) (\(y' :funclos_h).
   (((= :funid # funclos_h -> funid # funclos_h -> bool) $2)
   (((, :funid -> funclos_h -> funid # funclos_h) $1) $0))))))))) ((/\
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(x6 :(funid # funclos_h) list). ((\/
   (((= :(funid # funclos_h) list -> (funid # funclos_h) list -> bool)
   $0) (NIL :(funid # funclos_h) list)))
   ((? :(funid # funclos_h -> bool) -> bool) (\(y :funid # funclos_h).
   ((? :((funid # funclos_h) list -> bool) -> bool)
   (\(y' :(funid # funclos_h) list).
   (((= :(funid # funclos_h) list -> (funid # funclos_h) list -> bool)
   $2)
   (((CONS :funid # funclos_h -> (funid # funclos_h) list ->
            (funid # funclos_h) list) $1) $0)))))))))) ((/\
   ((! :((funid # funclos_h) list finmap -> bool) -> bool)
   (\(x7 :(funid # funclos_h) list finmap).
   ((? :((funid # funclos_h) list -> bool) -> bool)
   (\(y :(funid # funclos_h) list).
   (((= :(funid # funclos_h) list finmap ->
         (funid # funclos_h) list finmap -> bool) $1)
   ((FINMAP :(funid # funclos_h) list ->
             (funid # funclos_h) list finmap) $0))))))) ((/\
   ((! :(int_h option -> bool) -> bool) (\(x8 :int_h option). ((\/
   (((= :int_h option -> int_h option -> bool) $0)
   (NONE :int_h option))) ((? :(int_h -> bool) -> bool) (\(y :int_h).
   (((= :int_h option -> int_h option -> bool) $1)
   ((SOME :int_h -> int_h option) $0)))))))) ((/\
   ((! :(strenv_h -> bool) -> bool) (\(x9 :strenv_h).
   ((? :((strid # env_h) list finmap -> bool) -> bool)
   (\(y :(strid # env_h) list finmap).
   (((= :strenv_h -> strenv_h -> bool) $1) (STRENV_H $0))))))) ((/\
   ((! :(strid # env_h -> bool) -> bool) (\(x10 :strid # env_h).
   ((? :(strid -> bool) -> bool) (\(y :strid).
   ((? :(env_h -> bool) -> bool) (\(y' :env_h).
   (((= :strid # env_h -> strid # env_h -> bool) $2)
   (((, :strid -> env_h -> strid # env_h) $1) $0))))))))) ((/\
   ((! :((strid # env_h) list -> bool) -> bool)
   (\(x11 :(strid # env_h) list). ((\/
   (((= :(strid # env_h) list -> (strid # env_h) list -> bool) $0)
   (NIL :(strid # env_h) list))) ((? :(strid # env_h -> bool) -> bool)
   (\(y :strid # env_h). ((? :((strid # env_h) list -> bool) -> bool)
   (\(y' :(strid # env_h) list).
   (((= :(strid # env_h) list -> (strid # env_h) list -> bool) $2)
   (((CONS :strid # env_h -> (strid # env_h) list ->
            (strid # env_h) list) $1) $0))))))))))
   ((! :((strid # env_h) list finmap -> bool) -> bool)
   (\(x12 :(strid # env_h) list finmap).
   ((? :((strid # env_h) list -> bool) -> bool)
   (\(y :(strid # env_h) list).
   (((= :(strid # env_h) list finmap -> (strid # env_h) list finmap ->
         bool) $1)
   ((FINMAP :(strid # env_h) list -> (strid # env_h) list finmap)
   $0)))))))))))))))))`),
 ((HOFMLBases_one_one_thm),
  [],
  `((/\ ((! :(sigenv_h -> bool) -> bool) (\(x1 :sigenv_h).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   ((! :(sigenv_h -> bool) -> bool) (\(x1' :sigenv_h).
   ((! :(env_h -> bool) -> bool) (\(x2' :env_h).
   (((= :bool -> bool -> bool) (((= :basis_h -> basis_h -> bool)
   ((BASIS_H $3) $2)) ((BASIS_H $1) $0))) ((/\
   (((= :sigenv_h -> sigenv_h -> bool) $3) $1))
   (((= :env_h -> env_h -> bool) $2) $0)))))))))))) ((/\
   ((! :(funenv_h -> bool) -> bool) (\(x1 :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2 :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   ((! :(funenv_h -> bool) -> bool) (\(x1' :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(x2' :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(x3' :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4' :exconenv).
   (((= :bool -> bool -> bool) (((= :env_h -> env_h -> bool) ((((ENV_H
   $7) $6) $5) $4)) ((((ENV_H $3) $2) $1) $0))) ((/\
   (((= :funenv_h -> funenv_h -> bool) $7) $3)) ((/\
   (((= :strenv_h -> strenv_h -> bool) $6) $2)) ((/\
   (((= :varenv -> varenv -> bool) $5) $1))
   (((= :exconenv -> exconenv -> bool) $4) $0))))))))))))))))))))))
   ((/\ ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(int_h option -> bool) -> bool) (\(x4 :int_h option).
   ((! :(basis_h -> bool) -> bool) (\(x5 :basis_h).
   ((! :(strid -> bool) -> bool) (\(x1' :strid).
   ((! :(int_h -> bool) -> bool) (\(x2' :int_h).
   ((! :(strexp_h -> bool) -> bool) (\(x3' :strexp_h).
   ((! :(int_h option -> bool) -> bool) (\(x4' :int_h option).
   ((! :(basis_h -> bool) -> bool) (\(x5' :basis_h).
   (((= :bool -> bool -> bool) (((= :funclos_h -> funclos_h -> bool)
   (((((FUNCLOS_H $9) $8) $7) $6) $5)) (((((FUNCLOS_H $4) $3) $2) $1)
   $0))) ((/\ (((= :strid -> strid -> bool) $9) $4)) ((/\
   (((= :int_h -> int_h -> bool) $8) $3)) ((/\
   (((= :strexp_h -> strexp_h -> bool) $7) $2)) ((/\
   (((= :int_h option -> int_h option -> bool) $6) $1))
   (((= :basis_h -> basis_h -> bool) $5) $0)))))))))))))))))))))))))))
   ((/\ ((! :((funid # funclos_h) list finmap -> bool) -> bool)
   (\(x1 :(funid # funclos_h) list finmap).
   ((! :((funid # funclos_h) list finmap -> bool) -> bool)
   (\(x1' :(funid # funclos_h) list finmap).
   (((= :bool -> bool -> bool) (((= :funenv_h -> funenv_h -> bool)
   (FUNENV_H $1)) (FUNENV_H $0)))
   (((= :(funid # funclos_h) list finmap ->
         (funid # funclos_h) list finmap -> bool) $1) $0))))))) ((/\
   ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funclos_h -> bool) -> bool) (\(x2 :funclos_h).
   ((! :(funid -> bool) -> bool) (\(x1' :funid).
   ((! :(funclos_h -> bool) -> bool) (\(x2' :funclos_h).
   (((= :bool -> bool -> bool)
   (((= :funid # funclos_h -> funid # funclos_h -> bool)
   (((, :funid -> funclos_h -> funid # funclos_h) $3) $2))
   (((, :funid -> funclos_h -> funid # funclos_h) $1) $0))) ((/\
   (((= :funid -> funid -> bool) $3) $1))
   (((= :funclos_h -> funclos_h -> bool) $2) $0)))))))))))) ((/\
   ((! :(funid # funclos_h -> bool) -> bool)
   (\(x1 :funid # funclos_h).
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(x2 :(funid # funclos_h) list).
   ((! :(funid # funclos_h -> bool) -> bool)
   (\(x1' :funid # funclos_h).
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(x2' :(funid # funclos_h) list). (((= :bool -> bool -> bool)
   (((= :(funid # funclos_h) list -> (funid # funclos_h) list -> bool)
   (((CONS :funid # funclos_h -> (funid # funclos_h) list ->
            (funid # funclos_h) list) $3) $2))
   (((CONS :funid # funclos_h -> (funid # funclos_h) list ->
            (funid # funclos_h) list) $1) $0))) ((/\
   (((= :funid # funclos_h -> funid # funclos_h -> bool) $3) $1))
   (((= :(funid # funclos_h) list -> (funid # funclos_h) list -> bool)
   $2) $0)))))))))))) ((/\
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(x1 :(funid # funclos_h) list).
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(x1' :(funid # funclos_h) list). (((= :bool -> bool -> bool)
   (((= :(funid # funclos_h) list finmap ->
         (funid # funclos_h) list finmap -> bool)
   ((FINMAP :(funid # funclos_h) list ->
             (funid # funclos_h) list finmap) $1))
   ((FINMAP :(funid # funclos_h) list ->
             (funid # funclos_h) list finmap) $0)))
   (((= :(funid # funclos_h) list -> (funid # funclos_h) list -> bool)
   $1) $0))))))) ((/\ ((! :(int_h -> bool) -> bool) (\(x1 :int_h).
   ((! :(int_h -> bool) -> bool) (\(x1' :int_h).
   (((= :bool -> bool -> bool)
   (((= :int_h option -> int_h option -> bool)
   ((SOME :int_h -> int_h option) $1)) ((SOME :int_h -> int_h option)
   $0))) (((= :int_h -> int_h -> bool) $1) $0))))))) ((/\
   ((! :((strid # env_h) list finmap -> bool) -> bool)
   (\(x1 :(strid # env_h) list finmap).
   ((! :((strid # env_h) list finmap -> bool) -> bool)
   (\(x1' :(strid # env_h) list finmap). (((= :bool -> bool -> bool)
   (((= :strenv_h -> strenv_h -> bool) (STRENV_H $1)) (STRENV_H $0)))
   (((= :(strid # env_h) list finmap -> (strid # env_h) list finmap ->
         bool) $1) $0))))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(x1 :strid). ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   ((! :(strid -> bool) -> bool) (\(x1' :strid).
   ((! :(env_h -> bool) -> bool) (\(x2' :env_h).
   (((= :bool -> bool -> bool)
   (((= :strid # env_h -> strid # env_h -> bool)
   (((, :strid -> env_h -> strid # env_h) $3) $2))
   (((, :strid -> env_h -> strid # env_h) $1) $0))) ((/\
   (((= :strid -> strid -> bool) $3) $1))
   (((= :env_h -> env_h -> bool) $2) $0)))))))))))) ((/\
   ((! :(strid # env_h -> bool) -> bool) (\(x1 :strid # env_h).
   ((! :((strid # env_h) list -> bool) -> bool)
   (\(x2 :(strid # env_h) list). ((! :(strid # env_h -> bool) -> bool)
   (\(x1' :strid # env_h).
   ((! :((strid # env_h) list -> bool) -> bool)
   (\(x2' :(strid # env_h) list). (((= :bool -> bool -> bool)
   (((= :(strid # env_h) list -> (strid # env_h) list -> bool)
   (((CONS :strid # env_h -> (strid # env_h) list ->
            (strid # env_h) list) $3) $2))
   (((CONS :strid # env_h -> (strid # env_h) list ->
            (strid # env_h) list) $1) $0))) ((/\
   (((= :strid # env_h -> strid # env_h -> bool) $3) $1))
   (((= :(strid # env_h) list -> (strid # env_h) list -> bool) $2)
   $0)))))))))))) ((! :((strid # env_h) list -> bool) -> bool)
   (\(x1 :(strid # env_h) list).
   ((! :((strid # env_h) list -> bool) -> bool)
   (\(x1' :(strid # env_h) list). (((= :bool -> bool -> bool)
   (((= :(strid # env_h) list finmap -> (strid # env_h) list finmap ->
         bool)
   ((FINMAP :(strid # env_h) list -> (strid # env_h) list finmap) $1))
   ((FINMAP :(strid # env_h) list -> (strid # env_h) list finmap)
   $0))) (((= :(strid # env_h) list -> (strid # env_h) list -> bool)
   $1) $0)))))))))))))))))`),
 ((HOFMLBases_distinct_thm),
  [],
  `((/\ ((! :(funid # funclos_h -> bool) -> bool)
   (\(x1' :funid # funclos_h).
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(x2' :(funid # funclos_h) list). (~
   (((= :(funid # funclos_h) list -> (funid # funclos_h) list -> bool)
   (NIL :(funid # funclos_h) list))
   (((CONS :funid # funclos_h -> (funid # funclos_h) list ->
            (funid # funclos_h) list) $1) $0)))))))) ((/\
   ((! :(int_h -> bool) -> bool) (\(x1' :int_h). (~
   (((= :int_h option -> int_h option -> bool) (NONE :int_h option))
   ((SOME :int_h -> int_h option) $0))))))
   ((! :(strid # env_h -> bool) -> bool) (\(x1' :strid # env_h).
   ((! :((strid # env_h) list -> bool) -> bool)
   (\(x2' :(strid # env_h) list). (~
   (((= :(strid # env_h) list -> (strid # env_h) list -> bool)
   (NIL :(strid # env_h) list))
   (((CONS :strid # env_h -> (strid # env_h) list ->
            (strid # env_h) list) $1) $0)))))))))`),
 ((HOFMLBases_unique_thm),
  [],
  `((! :(('b -> sigenv_h -> env_h -> 'a) -> bool) -> bool)
   (\(BASIS_H_case :'b -> sigenv_h -> env_h -> 'a).
   ((! :(('d -> 'i -> varenv -> exconenv -> funenv_h -> strenv_h ->
         'b) -> bool) -> bool)
   (\(ENV_H_case :'d -> 'i -> varenv -> exconenv -> funenv_h ->
                  strenv_h -> 'b).
   ((! :(('h -> 'a -> strid -> int_h -> strexp_h -> int_h option ->
         basis_h -> 'c) -> bool) -> bool)
   (\(FUNCLOS_H_case :'h -> 'a -> strid -> int_h -> strexp_h ->
                      int_h option -> basis_h -> 'c).
   ((! :(('g -> (funid # funclos_h) list finmap -> 'd) -> bool) ->
        bool)
   (\(FUNENV_H_case :'g -> (funid # funclos_h) list finmap -> 'd).
   ((! :(('c -> funid -> funclos_h -> 'e) -> bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_funid_funclos_h_case :'c ->
                                                                           funid ->
                                                                           funclos_h ->
                                                                           'e).
   ((! :('f -> bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_case :'f).
   ((! :(('e -> 'f -> funid # funclos_h -> (funid # funclos_h) list ->
         'f) -> bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_case :'e ->
                                                                                                                          'f ->
                                                                                                                          funid #
                                                                                                                          funclos_h ->
                                                                                                                          (funid #
                                                                                                                          funclos_h)
                                                                                                                          list ->
                                                                                                                          'f).
   ((! :(('f -> (funid # funclos_h) list -> 'g) -> bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_case :'f ->
                                                                                                                                                                           (funid #
                                                                                                                                                                           funclos_h)
                                                                                                                                                                           list ->
                                                                                                                                                                           'g).
   ((! :('h -> bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_NONE_int_h_case :'h).
   ((! :((int_h -> 'h) -> bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_SOME_int_h_case :int_h ->
                                                                 'h).
   ((! :(('l -> (strid # env_h) list finmap -> 'i) -> bool) -> bool)
   (\(STRENV_H_case :'l -> (strid # env_h) list finmap -> 'i).
   ((! :(('b -> strid -> env_h -> 'j) -> bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_strid_env_h_case :'b ->
                                                                       strid ->
                                                                       env_h ->
                                                                       'j).
   ((! :('k -> bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_case :'k).
   ((! :(('j -> 'k -> strid # env_h -> (strid # env_h) list -> 'k) ->
        bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_case :'j ->
                                                                                                                      'k ->
                                                                                                                      strid #
                                                                                                                      env_h ->
                                                                                                                      (strid #
                                                                                                                      env_h)
                                                                                                                      list ->
                                                                                                                      'k).
   ((! :(('k -> (strid # env_h) list -> 'l) -> bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_case :'k ->
                                                                                                                                                                       (strid #
                                                                                                                                                                       env_h)
                                                                                                                                                                       list ->
                                                                                                                                                                       'l).
   ((! :((basis_h -> 'a) -> bool) -> bool) (\(fn1 :basis_h -> 'a).
   ((! :((env_h -> 'b) -> bool) -> bool) (\(fn2 :env_h -> 'b).
   ((! :((funclos_h -> 'c) -> bool) -> bool) (\(fn3 :funclos_h -> 'c).
   ((! :((funenv_h -> 'd) -> bool) -> bool) (\(fn4 :funenv_h -> 'd).
   ((! :((funid # funclos_h -> 'e) -> bool) -> bool)
   (\(fn5 :funid # funclos_h -> 'e).
   ((! :(((funid # funclos_h) list -> 'f) -> bool) -> bool)
   (\(fn6 :(funid # funclos_h) list -> 'f).
   ((! :(((funid # funclos_h) list finmap -> 'g) -> bool) -> bool)
   (\(fn7 :(funid # funclos_h) list finmap -> 'g).
   ((! :((int_h option -> 'h) -> bool) -> bool)
   (\(fn8 :int_h option -> 'h).
   ((! :((strenv_h -> 'i) -> bool) -> bool) (\(fn9 :strenv_h -> 'i).
   ((! :((strid # env_h -> 'j) -> bool) -> bool)
   (\(fn10 :strid # env_h -> 'j).
   ((! :(((strid # env_h) list -> 'k) -> bool) -> bool)
   (\(fn11 :(strid # env_h) list -> 'k).
   ((! :(((strid # env_h) list finmap -> 'l) -> bool) -> bool)
   (\(fn12 :(strid # env_h) list finmap -> 'l).
   ((! :((basis_h -> 'a) -> bool) -> bool) (\(fn1' :basis_h -> 'a).
   ((! :((env_h -> 'b) -> bool) -> bool) (\(fn2' :env_h -> 'b).
   ((! :((funclos_h -> 'c) -> bool) -> bool)
   (\(fn3' :funclos_h -> 'c). ((! :((funenv_h -> 'd) -> bool) -> bool)
   (\(fn4' :funenv_h -> 'd).
   ((! :((funid # funclos_h -> 'e) -> bool) -> bool)
   (\(fn5' :funid # funclos_h -> 'e).
   ((! :(((funid # funclos_h) list -> 'f) -> bool) -> bool)
   (\(fn6' :(funid # funclos_h) list -> 'f).
   ((! :(((funid # funclos_h) list finmap -> 'g) -> bool) -> bool)
   (\(fn7' :(funid # funclos_h) list finmap -> 'g).
   ((! :((int_h option -> 'h) -> bool) -> bool)
   (\(fn8' :int_h option -> 'h).
   ((! :((strenv_h -> 'i) -> bool) -> bool) (\(fn9' :strenv_h -> 'i).
   ((! :((strid # env_h -> 'j) -> bool) -> bool)
   (\(fn10' :strid # env_h -> 'j).
   ((! :(((strid # env_h) list -> 'k) -> bool) -> bool)
   (\(fn11' :(strid # env_h) list -> 'k).
   ((! :(((strid # env_h) list finmap -> 'l) -> bool) -> bool)
   (\(fn12' :(strid # env_h) list finmap -> 'l). ((==> ((/\
   ((! :(sigenv_h -> bool) -> bool) (\(y :sigenv_h).
   ((! :(env_h -> bool) -> bool) (\(y'''''''''''' :env_h).
   (((= :'a -> 'a -> bool) ($25 ((BASIS_H $1) $0))) ((($40 ($24 $0))
   $1) $0))))))) ((/\ ((! :(funenv_h -> bool) -> bool)
   (\(y :funenv_h). ((! :(strenv_h -> bool) -> bool)
   (\(y''''''''''' :strenv_h). ((! :(varenv -> bool) -> bool)
   (\(y'''''''''' :varenv). ((! :(exconenv -> bool) -> bool)
   (\(y''''''''' :exconenv). (((= :'b -> 'b -> bool) ($26 ((((ENV_H
   $3) $2) $1) $0))) (((((($41 ($24 $3)) ($19 $2)) $1) $0) $3)
   $2))))))))))) ((/\ ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(int_h -> bool) -> bool) (\(y'''''''' :int_h).
   ((! :(strexp_h -> bool) -> bool) (\(y''''''' :strexp_h).
   ((! :(int_h option -> bool) -> bool) (\(y'''''' :int_h option).
   ((! :(basis_h -> bool) -> bool) (\(y''''' :basis_h).
   (((= :'c -> 'c -> bool) ($26 (((((FUNCLOS_H $4) $3) $2) $1) $0)))
   ((((((($41 ($21 $1)) ($28 $0)) $4) $3) $2) $1) $0))))))))))))) ((/\
   ((! :((funid # funclos_h) list finmap -> bool) -> bool)
   (\(y :(funid # funclos_h) list finmap). (((= :'d -> 'd -> bool)
   ($21 (FUNENV_H $0))) (($36 ($18 $0)) $0))))) ((/\
   ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(funclos_h -> bool) -> bool) (\(y'''' :funclos_h).
   (((= :'e -> 'e -> bool) ($21
   (((, :funid -> funclos_h -> funid # funclos_h) $1) $0))) ((($36
   ($23 $0)) $1) $0))))))) ((/\ (((= :'f -> 'f -> bool) ($18
   (NIL :(funid # funclos_h) list))) $33)) ((/\
   ((! :(funid # funclos_h -> bool) -> bool) (\(y :funid # funclos_h).
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(y''' :(funid # funclos_h) list). (((= :'f -> 'f -> bool) ($20
   (((CONS :funid # funclos_h -> (funid # funclos_h) list ->
            (funid # funclos_h) list) $1) $0))) (((($34 ($21 $1)) ($20
   $0)) $1) $0))))))) ((/\
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(y :(funid # funclos_h) list). (((= :'g -> 'g -> bool) ($18
   ((FINMAP :(funid # funclos_h) list ->
             (funid # funclos_h) list finmap) $0))) (($32 ($19 $0))
   $0))))) ((/\ (((= :'h -> 'h -> bool) ($16 (NONE :int_h option)))
   $30)) ((/\ ((! :(int_h -> bool) -> bool) (\(y :int_h).
   (((= :'h -> 'h -> bool) ($17 ((SOME :int_h -> int_h option) $0)))
   ($30 $0))))) ((/\
   ((! :((strid # env_h) list finmap -> bool) -> bool)
   (\(y :(strid # env_h) list finmap). (((= :'i -> 'i -> bool) ($16
   (STRENV_H $0))) (($29 ($13 $0)) $0))))) ((/\
   ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(env_h -> bool) -> bool) (\(y'' :env_h).
   (((= :'j -> 'j -> bool) ($16 (((, :strid -> env_h -> strid # env_h)
   $1) $0))) ((($29 ($24 $0)) $1) $0))))))) ((/\
   (((= :'k -> 'k -> bool) ($13 (NIL :(strid # env_h) list))) $26))
   ((/\ ((! :(strid # env_h -> bool) -> bool) (\(y :strid # env_h).
   ((! :((strid # env_h) list -> bool) -> bool)
   (\(y' :(strid # env_h) list). (((= :'k -> 'k -> bool) ($15
   (((CONS :strid # env_h -> (strid # env_h) list ->
            (strid # env_h) list) $1) $0))) (((($27 ($16 $1)) ($15
   $0)) $1) $0))))))) ((! :((strid # env_h) list -> bool) -> bool)
   (\(y :(strid # env_h) list). (((= :'l -> 'l -> bool) ($13
   ((FINMAP :(strid # env_h) list -> (strid # env_h) list finmap)
   $0))) (($25 ($14 $0)) $0))))))))))))))))))) ((==> ((/\
   ((! :(sigenv_h -> bool) -> bool) (\(y :sigenv_h).
   ((! :(env_h -> bool) -> bool) (\(y'''''''''''' :env_h).
   (((= :'a -> 'a -> bool) ($13 ((BASIS_H $1) $0))) ((($40 ($12 $0))
   $1) $0))))))) ((/\ ((! :(funenv_h -> bool) -> bool)
   (\(y :funenv_h). ((! :(strenv_h -> bool) -> bool)
   (\(y''''''''''' :strenv_h). ((! :(varenv -> bool) -> bool)
   (\(y'''''''''' :varenv). ((! :(exconenv -> bool) -> bool)
   (\(y''''''''' :exconenv). (((= :'b -> 'b -> bool) ($14 ((((ENV_H
   $3) $2) $1) $0))) (((((($41 ($12 $3)) ($7 $2)) $1) $0) $3)
   $2))))))))))) ((/\ ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(int_h -> bool) -> bool) (\(y'''''''' :int_h).
   ((! :(strexp_h -> bool) -> bool) (\(y''''''' :strexp_h).
   ((! :(int_h option -> bool) -> bool) (\(y'''''' :int_h option).
   ((! :(basis_h -> bool) -> bool) (\(y''''' :basis_h).
   (((= :'c -> 'c -> bool) ($14 (((((FUNCLOS_H $4) $3) $2) $1) $0)))
   ((((((($41 ($9 $1)) ($16 $0)) $4) $3) $2) $1) $0))))))))))))) ((/\
   ((! :((funid # funclos_h) list finmap -> bool) -> bool)
   (\(y :(funid # funclos_h) list finmap). (((= :'d -> 'd -> bool) ($9
   (FUNENV_H $0))) (($36 ($6 $0)) $0))))) ((/\
   ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(funclos_h -> bool) -> bool) (\(y'''' :funclos_h).
   (((= :'e -> 'e -> bool) ($9
   (((, :funid -> funclos_h -> funid # funclos_h) $1) $0))) ((($36
   ($11 $0)) $1) $0))))))) ((/\ (((= :'f -> 'f -> bool) ($6
   (NIL :(funid # funclos_h) list))) $33)) ((/\
   ((! :(funid # funclos_h -> bool) -> bool) (\(y :funid # funclos_h).
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(y''' :(funid # funclos_h) list). (((= :'f -> 'f -> bool) ($8
   (((CONS :funid # funclos_h -> (funid # funclos_h) list ->
            (funid # funclos_h) list) $1) $0))) (((($34 ($9 $1)) ($8
   $0)) $1) $0))))))) ((/\
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(y :(funid # funclos_h) list). (((= :'g -> 'g -> bool) ($6
   ((FINMAP :(funid # funclos_h) list ->
             (funid # funclos_h) list finmap) $0))) (($32 ($7 $0))
   $0))))) ((/\ (((= :'h -> 'h -> bool) ($4 (NONE :int_h option)))
   $30)) ((/\ ((! :(int_h -> bool) -> bool) (\(y :int_h).
   (((= :'h -> 'h -> bool) ($5 ((SOME :int_h -> int_h option) $0)))
   ($30 $0))))) ((/\
   ((! :((strid # env_h) list finmap -> bool) -> bool)
   (\(y :(strid # env_h) list finmap). (((= :'i -> 'i -> bool) ($4
   (STRENV_H $0))) (($29 ($1 $0)) $0))))) ((/\
   ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(env_h -> bool) -> bool) (\(y'' :env_h).
   (((= :'j -> 'j -> bool) ($4 (((, :strid -> env_h -> strid # env_h)
   $1) $0))) ((($29 ($12 $0)) $1) $0))))))) ((/\
   (((= :'k -> 'k -> bool) ($1 (NIL :(strid # env_h) list))) $26))
   ((/\ ((! :(strid # env_h -> bool) -> bool) (\(y :strid # env_h).
   ((! :((strid # env_h) list -> bool) -> bool)
   (\(y' :(strid # env_h) list). (((= :'k -> 'k -> bool) ($3
   (((CONS :strid # env_h -> (strid # env_h) list ->
            (strid # env_h) list) $1) $0))) (((($27 ($4 $1)) ($3 $0))
   $1) $0))))))) ((! :((strid # env_h) list -> bool) -> bool)
   (\(y :(strid # env_h) list). (((= :'l -> 'l -> bool) ($1
   ((FINMAP :(strid # env_h) list -> (strid # env_h) list finmap)
   $0))) (($25 ($2 $0)) $0))))))))))))))))))) ((/\
   (((= :(basis_h -> 'a) -> (basis_h -> 'a) -> bool) $23) $11)) ((/\
   (((= :(env_h -> 'b) -> (env_h -> 'b) -> bool) $22) $10)) ((/\
   (((= :(funclos_h -> 'c) -> (funclos_h -> 'c) -> bool) $21) $9))
   ((/\ (((= :(funenv_h -> 'd) -> (funenv_h -> 'd) -> bool) $20) $8))
   ((/\
   (((= :(funid # funclos_h -> 'e) -> (funid # funclos_h -> 'e) ->
         bool) $19) $7)) ((/\
   (((= :((funid # funclos_h) list -> 'f) ->
         ((funid # funclos_h) list -> 'f) -> bool) $18) $6)) ((/\
   (((= :((funid # funclos_h) list finmap -> 'g) ->
         ((funid # funclos_h) list finmap -> 'g) -> bool) $17) $5))
   ((/\ (((= :(int_h option -> 'h) -> (int_h option -> 'h) -> bool)
   $16) $4)) ((/\ (((= :(strenv_h -> 'i) -> (strenv_h -> 'i) -> bool)
   $15) $3)) ((/\
   (((= :(strid # env_h -> 'j) -> (strid # env_h -> 'j) -> bool) $14)
   $2)) ((/\
   (((= :((strid # env_h) list -> 'k) ->
         ((strid # env_h) list -> 'k) -> bool) $13) $1))
   (((= :((strid # env_h) list finmap -> 'l) ->
         ((strid # env_h) list finmap -> 'l) -> bool) $12)
   $0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((HOFMLBases_induction_thm),
  [],
  `((! :((basis_h -> bool) -> bool) -> bool)
   (\(basis_h_Prop :basis_h -> bool).
   ((! :((env_h -> bool) -> bool) -> bool)
   (\(env_h_Prop :env_h -> bool).
   ((! :((funclos_h -> bool) -> bool) -> bool)
   (\(funclos_h_Prop :funclos_h -> bool).
   ((! :((funenv_h -> bool) -> bool) -> bool)
   (\(funenv_h_Prop :funenv_h -> bool).
   ((! :((funid # funclos_h -> bool) -> bool) -> bool)
   (\(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_Prop :funid #
                                                                           funclos_h ->
                                                                           bool).
   ((! :(((funid # funclos_h) list -> bool) -> bool) -> bool)
   (\(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_Prop :(funid #
                                                                                                                          funclos_h)
                                                                                                                          list ->
                                                                                                                          bool).
   ((! :(((funid # funclos_h) list finmap -> bool) -> bool) -> bool)
   (\(funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_Prop :(funid #
                                                                                                                                                                           funclos_h)
                                                                                                                                                                           list
                                                                                                                                                                           finmap ->
                                                                                                                                                                           bool).
   ((! :((int_h option -> bool) -> bool) -> bool)
   (\(h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_Prop :int_h
                                                               option ->
                                                               bool).
   ((! :((strenv_h -> bool) -> bool) -> bool)
   (\(strenv_h_Prop :strenv_h -> bool).
   ((! :((strid # env_h -> bool) -> bool) -> bool)
   (\(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_Prop :strid #
                                                                       env_h ->
                                                                       bool).
   ((! :(((strid # env_h) list -> bool) -> bool) -> bool)
   (\(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_Prop :(strid #
                                                                                                                      env_h)
                                                                                                                      list ->
                                                                                                                      bool).
   ((! :(((strid # env_h) list finmap -> bool) -> bool) -> bool)
   (\(strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_Prop :(strid #
                                                                                                                                                                       env_h)
                                                                                                                                                                       list
                                                                                                                                                                       finmap ->
                                                                                                                                                                       bool).
   ((==> ((/\ ((! :(sigenv_h -> bool) -> bool) (\(y :sigenv_h).
   ((! :(env_h -> bool) -> bool) (\(y'''''''''''' :env_h). ((==> ($12
   $0)) ($13 ((BASIS_H $1) $0)))))))) ((/\
   ((! :(funenv_h -> bool) -> bool) (\(y :funenv_h).
   ((! :(strenv_h -> bool) -> bool) (\(y''''''''''' :strenv_h).
   ((! :(varenv -> bool) -> bool) (\(y'''''''''' :varenv).
   ((! :(exconenv -> bool) -> bool) (\(y''''''''' :exconenv). ((==>
   ($12 $3)) ((==> ($7 $2)) ($14 ((((ENV_H $3) $2) $1) $0)))))))))))))
   ((/\ ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(int_h -> bool) -> bool) (\(y'''''''' :int_h).
   ((! :(strexp_h -> bool) -> bool) (\(y''''''' :strexp_h).
   ((! :(int_h option -> bool) -> bool) (\(y'''''' :int_h option).
   ((! :(basis_h -> bool) -> bool) (\(y''''' :basis_h). ((==> ($9 $1))
   ((==> ($16 $0)) ($14 (((((FUNCLOS_H $4) $3) $2) $1)
   $0))))))))))))))) ((/\
   ((! :((funid # funclos_h) list finmap -> bool) -> bool)
   (\(y :(funid # funclos_h) list finmap). ((==> ($6 $0)) ($9
   (FUNENV_H $0)))))) ((/\ ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(funclos_h -> bool) -> bool) (\(y'''' :funclos_h). ((==> ($11
   $0)) ($9 (((, :funid -> funclos_h -> funid # funclos_h) $1)
   $0)))))))) ((/\ ($6 (NIL :(funid # funclos_h) list))) ((/\
   ((! :(funid # funclos_h -> bool) -> bool) (\(y :funid # funclos_h).
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(y''' :(funid # funclos_h) list). ((==> ($9 $1)) ((==> ($8 $0))
   ($8
   (((CONS :funid # funclos_h -> (funid # funclos_h) list ->
            (funid # funclos_h) list) $1) $0))))))))) ((/\
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(y :(funid # funclos_h) list). ((==> ($7 $0)) ($6
   ((FINMAP :(funid # funclos_h) list ->
             (funid # funclos_h) list finmap) $0)))))) ((/\ ($4
   (NONE :int_h option))) ((/\ ((! :(int_h -> bool) -> bool)
   (\(y :int_h). ($5 ((SOME :int_h -> int_h option) $0))))) ((/\
   ((! :((strid # env_h) list finmap -> bool) -> bool)
   (\(y :(strid # env_h) list finmap). ((==> ($1 $0)) ($4 (STRENV_H
   $0)))))) ((/\ ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(env_h -> bool) -> bool) (\(y'' :env_h). ((==> ($12 $0)) ($4
   (((, :strid -> env_h -> strid # env_h) $1) $0)))))))) ((/\ ($1
   (NIL :(strid # env_h) list))) ((/\
   ((! :(strid # env_h -> bool) -> bool) (\(y :strid # env_h).
   ((! :((strid # env_h) list -> bool) -> bool)
   (\(y' :(strid # env_h) list). ((==> ($4 $1)) ((==> ($3 $0)) ($3
   (((CONS :strid # env_h -> (strid # env_h) list ->
            (strid # env_h) list) $1) $0)))))))))
   ((! :((strid # env_h) list -> bool) -> bool)
   (\(y :(strid # env_h) list). ((==> ($2 $0)) ($1
   ((FINMAP :(strid # env_h) list -> (strid # env_h) list finmap)
   $0)))))))))))))))))))) ((/\ ((! :(basis_h -> bool) -> bool)
   (\(x1 :basis_h). ($12 $0)))) ((/\ ((! :(env_h -> bool) -> bool)
   (\(x2 :env_h). ($11 $0)))) ((/\ ((! :(funclos_h -> bool) -> bool)
   (\(x3 :funclos_h). ($10 $0)))) ((/\
   ((! :(funenv_h -> bool) -> bool) (\(x4 :funenv_h). ($9 $0)))) ((/\
   ((! :(funid # funclos_h -> bool) -> bool)
   (\(x5 :funid # funclos_h). ($8 $0)))) ((/\
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(x6 :(funid # funclos_h) list). ($7 $0)))) ((/\
   ((! :((funid # funclos_h) list finmap -> bool) -> bool)
   (\(x7 :(funid # funclos_h) list finmap). ($6 $0)))) ((/\
   ((! :(int_h option -> bool) -> bool) (\(x8 :int_h option). ($5
   $0)))) ((/\ ((! :(strenv_h -> bool) -> bool) (\(x9 :strenv_h). ($4
   $0)))) ((/\ ((! :(strid # env_h -> bool) -> bool)
   (\(x10 :strid # env_h). ($3 $0)))) ((/\
   ((! :((strid # env_h) list -> bool) -> bool)
   (\(x11 :(strid # env_h) list). ($2 $0))))
   ((! :((strid # env_h) list finmap -> bool) -> bool)
   (\(x12 :(strid # env_h) list finmap). ($1
   $0)))))))))))))))))))))))))))))))))))))))`),
 ((HOFMLBases_rec_thm),
  [],
  `((! :(('b -> sigenv_h -> env_h -> 'a) -> bool) -> bool)
   (\(BASIS_H_case :'b -> sigenv_h -> env_h -> 'a).
   ((! :(('d -> 'i -> varenv -> exconenv -> funenv_h -> strenv_h ->
         'b) -> bool) -> bool)
   (\(ENV_H_case :'d -> 'i -> varenv -> exconenv -> funenv_h ->
                  strenv_h -> 'b).
   ((! :(('h -> 'a -> strid -> int_h -> strexp_h -> int_h option ->
         basis_h -> 'c) -> bool) -> bool)
   (\(FUNCLOS_H_case :'h -> 'a -> strid -> int_h -> strexp_h ->
                      int_h option -> basis_h -> 'c).
   ((! :(('g -> (funid # funclos_h) list finmap -> 'd) -> bool) ->
        bool)
   (\(FUNENV_H_case :'g -> (funid # funclos_h) list finmap -> 'd).
   ((! :(('c -> funid -> funclos_h -> 'e) -> bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_funid_funclos_h_case :'c ->
                                                                           funid ->
                                                                           funclos_h ->
                                                                           'e).
   ((! :('f -> bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_case :'f).
   ((! :(('e -> 'f -> funid # funclos_h -> (funid # funclos_h) list ->
         'f) -> bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_case :'e ->
                                                                                                                          'f ->
                                                                                                                          funid #
                                                                                                                          funclos_h ->
                                                                                                                          (funid #
                                                                                                                          funclos_h)
                                                                                                                          list ->
                                                                                                                          'f).
   ((! :(('f -> (funid # funclos_h) list -> 'g) -> bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_case :'f ->
                                                                                                                                                                           (funid #
                                                                                                                                                                           funclos_h)
                                                                                                                                                                           list ->
                                                                                                                                                                           'g).
   ((! :('h -> bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_NONE_int_h_case :'h).
   ((! :((int_h -> 'h) -> bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_SOME_int_h_case :int_h ->
                                                                 'h).
   ((! :(('l -> (strid # env_h) list finmap -> 'i) -> bool) -> bool)
   (\(STRENV_H_case :'l -> (strid # env_h) list finmap -> 'i).
   ((! :(('b -> strid -> env_h -> 'j) -> bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_strid_env_h_case :'b ->
                                                                       strid ->
                                                                       env_h ->
                                                                       'j).
   ((! :('k -> bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_case :'k).
   ((! :(('j -> 'k -> strid # env_h -> (strid # env_h) list -> 'k) ->
        bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_case :'j ->
                                                                                                                      'k ->
                                                                                                                      strid #
                                                                                                                      env_h ->
                                                                                                                      (strid #
                                                                                                                      env_h)
                                                                                                                      list ->
                                                                                                                      'k).
   ((! :(('k -> (strid # env_h) list -> 'l) -> bool) -> bool)
   (\(basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_case :'k ->
                                                                                                                                                                       (strid #
                                                                                                                                                                       env_h)
                                                                                                                                                                       list ->
                                                                                                                                                                       'l).
   ((? :((basis_h -> 'a) -> bool) -> bool) (\(y :basis_h -> 'a).
   ((? :((env_h -> 'b) -> bool) -> bool)
   (\(y''''''''''' :env_h -> 'b).
   ((? :((funclos_h -> 'c) -> bool) -> bool)
   (\(y'''''''''' :funclos_h -> 'c).
   ((? :((funenv_h -> 'd) -> bool) -> bool)
   (\(y''''''''' :funenv_h -> 'd).
   ((? :((funid # funclos_h -> 'e) -> bool) -> bool)
   (\(y'''''''' :funid # funclos_h -> 'e).
   ((? :(((funid # funclos_h) list -> 'f) -> bool) -> bool)
   (\(y''''''' :(funid # funclos_h) list -> 'f).
   ((? :(((funid # funclos_h) list finmap -> 'g) -> bool) -> bool)
   (\(y'''''' :(funid # funclos_h) list finmap -> 'g).
   ((? :((int_h option -> 'h) -> bool) -> bool)
   (\(y''''' :int_h option -> 'h).
   ((? :((strenv_h -> 'i) -> bool) -> bool) (\(y'''' :strenv_h -> 'i).
   ((? :((strid # env_h -> 'j) -> bool) -> bool)
   (\(y''' :strid # env_h -> 'j).
   ((? :(((strid # env_h) list -> 'k) -> bool) -> bool)
   (\(y'' :(strid # env_h) list -> 'k).
   ((? :(((strid # env_h) list finmap -> 'l) -> bool) -> bool)
   (\(y' :(strid # env_h) list finmap -> 'l). ((/\
   ((! :(sigenv_h -> bool) -> bool) (\(x1 :sigenv_h).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :'a -> 'a -> bool) ($13 ((BASIS_H $1) $0))) ((($28 ($12 $0))
   $1) $0))))))) ((/\ ((! :(funenv_h -> bool) -> bool)
   (\(x1 :funenv_h). ((! :(strenv_h -> bool) -> bool)
   (\(x2 :strenv_h). ((! :(varenv -> bool) -> bool) (\(x3 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x4 :exconenv).
   (((= :'b -> 'b -> bool) ($14 ((((ENV_H $3) $2) $1) $0))) (((((($29
   ($12 $3)) ($7 $2)) $1) $0) $3) $2))))))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(int_h option -> bool) -> bool) (\(x4 :int_h option).
   ((! :(basis_h -> bool) -> bool) (\(x5 :basis_h).
   (((= :'c -> 'c -> bool) ($14 (((((FUNCLOS_H $4) $3) $2) $1) $0)))
   ((((((($29 ($9 $1)) ($16 $0)) $4) $3) $2) $1) $0))))))))))))) ((/\
   ((! :((funid # funclos_h) list finmap -> bool) -> bool)
   (\(x1 :(funid # funclos_h) list finmap). (((= :'d -> 'd -> bool)
   ($9 (FUNENV_H $0))) (($24 ($6 $0)) $0))))) ((/\
   ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funclos_h -> bool) -> bool) (\(x2 :funclos_h).
   (((= :'e -> 'e -> bool) ($9
   (((, :funid -> funclos_h -> funid # funclos_h) $1) $0))) ((($24
   ($11 $0)) $1) $0))))))) ((/\ (((= :'f -> 'f -> bool) ($6
   (NIL :(funid # funclos_h) list))) $21)) ((/\
   ((! :(funid # funclos_h -> bool) -> bool)
   (\(x1 :funid # funclos_h).
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(x2 :(funid # funclos_h) list). (((= :'f -> 'f -> bool) ($8
   (((CONS :funid # funclos_h -> (funid # funclos_h) list ->
            (funid # funclos_h) list) $1) $0))) (((($22 ($9 $1)) ($8
   $0)) $1) $0))))))) ((/\
   ((! :((funid # funclos_h) list -> bool) -> bool)
   (\(x1 :(funid # funclos_h) list). (((= :'g -> 'g -> bool) ($6
   ((FINMAP :(funid # funclos_h) list ->
             (funid # funclos_h) list finmap) $0))) (($20 ($7 $0))
   $0))))) ((/\ (((= :'h -> 'h -> bool) ($4 (NONE :int_h option)))
   $18)) ((/\ ((! :(int_h -> bool) -> bool) (\(x1 :int_h).
   (((= :'h -> 'h -> bool) ($5 ((SOME :int_h -> int_h option) $0)))
   ($18 $0))))) ((/\
   ((! :((strid # env_h) list finmap -> bool) -> bool)
   (\(x1 :(strid # env_h) list finmap). (((= :'i -> 'i -> bool) ($4
   (STRENV_H $0))) (($17 ($1 $0)) $0))))) ((/\
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(env_h -> bool) -> bool) (\(x2 :env_h).
   (((= :'j -> 'j -> bool) ($4 (((, :strid -> env_h -> strid # env_h)
   $1) $0))) ((($17 ($12 $0)) $1) $0))))))) ((/\
   (((= :'k -> 'k -> bool) ($1 (NIL :(strid # env_h) list))) $14))
   ((/\ ((! :(strid # env_h -> bool) -> bool) (\(x1 :strid # env_h).
   ((! :((strid # env_h) list -> bool) -> bool)
   (\(x2 :(strid # env_h) list). (((= :'k -> 'k -> bool) ($3
   (((CONS :strid # env_h -> (strid # env_h) list ->
            (strid # env_h) list) $1) $0))) (((($15 ($4 $1)) ($3 $0))
   $1) $0))))))) ((! :((strid # env_h) list -> bool) -> bool)
   (\(x1 :(strid # env_h) list). (((= :'l -> 'l -> bool) ($1
   ((FINMAP :(strid # env_h) list -> (strid # env_h) list finmap)
   $0))) (($13 ($2 $0))
   $0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_Axiom),
  [],
  `((! :(('a -> sigenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         'a) -> bool) -> bool)
   (\(f0 :'a -> sigenv_h ->
          joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
          'a).
   ((! :(('a -> 'a -> varenv -> exconenv ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         'a) -> bool) -> bool)
   (\(f1 :'a -> 'a -> varenv -> exconenv ->
          joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
          joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
          'a).
   ((! :(('a -> 'a -> strid -> int_h -> strexp_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         'a) -> bool) -> bool)
   (\(f2 :'a -> 'a -> strid -> int_h -> strexp_h ->
          joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
          joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
          'a).
   ((! :(('a ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         'a) -> bool) -> bool)
   (\(f3 :'a ->
          joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
          'a).
   ((! :(('a -> funid ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         'a) -> bool) -> bool)
   (\(f4 :'a -> funid ->
          joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
          'a). ((! :('a -> bool) -> bool) (\(e0 :'a).
   ((! :(('a -> 'a ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         'a) -> bool) -> bool)
   (\(f5 :'a -> 'a ->
          joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
          joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
          'a).
   ((! :(('a ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         'a) -> bool) -> bool)
   (\(f6 :'a ->
          joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
          'a). ((! :('a -> bool) -> bool) (\(e1 :'a).
   ((! :((int_h -> 'a) -> bool) -> bool) (\(f7 :int_h -> 'a).
   ((! :(('a ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         'a) -> bool) -> bool)
   (\(f8 :'a ->
          joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
          'a).
   ((! :(('a -> strid ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         'a) -> bool) -> bool)
   (\(f9 :'a -> strid ->
          joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
          'a). ((! :('a -> bool) -> bool) (\(e2 :'a).
   ((! :(('a -> 'a ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         'a) -> bool) -> bool)
   (\(f10 :'a -> 'a ->
           joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
           joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
           'a).
   ((! :(('a ->
         joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
         'a) -> bool) -> bool)
   (\(f11 :'a ->
           joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
           'a).
   ((?! :((joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
          'a) -> bool) -> bool)
   (\(fn :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
          'a). ((/\ ((! :(sigenv_h -> bool) -> bool) (\(s :sigenv_h).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_BASIS_H $1) $0))) ((($17
   ($2 $0)) $1) $0))))))) ((/\
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(varenv -> bool) -> bool) (\(v' :varenv).
   ((! :(exconenv -> bool) -> bool) (\(e :exconenv).
   (((= :'a -> 'a -> bool) ($4 ((((JOINT_int_ENV_H $3) $2) $1) $0)))
   (((((($18 ($4 $3)) ($4 $2)) $1) $0) $3) $2))))))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(s0 :strid).
   ((! :(int_h -> bool) -> bool) (\(i :int_h).
   ((! :(strexp_h -> bool) -> bool) (\(s1 :strexp_h).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :'a -> 'a -> bool) ($5 (((((JOINT_int_FUNCLOS_H $4) $3) $2)
   $1) $0))) ((((((($18 ($5 $1)) ($5 $0)) $4) $3) $2) $1)
   $0))))))))))))) ((/\
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_FUNENV_H $0))) (($13 ($1
   $0)) $0))))) ((/\ ((! :(funid -> bool) -> bool) (\(f' :funid).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :'a -> 'a -> bool) ($2
   ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_funid_funclos_h
   $1) $0))) ((($13 ($2 $0)) $1) $0))))))) ((/\
   (((= :'a -> 'a -> bool) ($0
   JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h))
   $10)) ((/\
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :'a -> 'a -> bool) ($2
   ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1) $0))) (((($11 ($2 $1)) ($2 $0)) $1) $0))))))) ((/\
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :'a -> 'a -> bool) ($1
   (JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))) (($9 ($1 $0)) $0))))) ((/\ (((= :'a -> 'a -> bool) ($0
   JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NONE_int_h))
   $7)) ((/\ ((! :(int_h -> bool) -> bool) (\(i :int_h).
   (((= :'a -> 'a -> bool) ($1
   (JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_SOME_int_h
   $0))) ($7 $0))))) ((/\
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_STRENV_H $0))) (($6 ($1 $0))
   $0))))) ((/\ ((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :'a -> 'a -> bool) ($2
   ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_ch44_strid_env_h
   $1) $0))) ((($6 ($2 $0)) $1) $0))))))) ((/\ (((= :'a -> 'a -> bool)
   ($0
   JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_NIL_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h))
   $3)) ((/\
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :'a -> 'a -> bool) ($2
   ((JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_CONS_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $1) $0))) (((($4 ($2 $1)) ($2 $0)) $1) $0)))))))
   ((! :(joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h ->
        bool) -> bool)
   (\(j :joint_ty_basis_h_env_h_funclos_h_funenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_funid_funclos_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h_int_h_option_basis_h_env_h_funclos_h_funenv_h_strenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h_finmap_basis_h_env_h_funclos_h_funenv_h_strenv_h).
   (((= :'a -> 'a -> bool) ($1
   (JOINT_int_basis_h_env_h_funclos_h_funenv_h_strenv_h_FINMAP_strid_env_h_prod_basis_h_env_h_funclos_h_funenv_h_strenv_h_list_basis_h_env_h_funclos_h_funenv_h_strenv_h
   $0))) (($2 ($1 $0))
   $0))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((intbasis_h_constructors_one_one),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(s0 :sigenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(s1 :strintenv_h).
   ((! :(funintenv_h -> bool) -> bool) (\(f' :funintenv_h).
   ((! :(sigenv_h -> bool) -> bool) (\(s0' :sigenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(s1' :strintenv_h).
   ((! :(funintenv_h -> bool) -> bool) (\(f'' :funintenv_h).
   (((= :bool -> bool -> bool) (((= :intbasis_h -> intbasis_h -> bool)
   (((INTBASIS_H $5) $4) $3)) (((INTBASIS_H $2) $1) $0))) ((/\
   (((= :sigenv_h -> sigenv_h -> bool) $5) $2)) ((/\
   (((= :strintenv_h -> strintenv_h -> bool) $4) $1))
   (((= :funintenv_h -> funintenv_h -> bool) $3) $0))))))))))))))))`),
 ((intbasis_h_cases_thm),
  [],
  `((! :(intbasis_h -> bool) -> bool) (\(i :intbasis_h).
   ((? :(sigenv_h -> bool) -> bool) (\(s0 :sigenv_h).
   ((? :(strintenv_h -> bool) -> bool) (\(s1 :strintenv_h).
   ((? :(funintenv_h -> bool) -> bool) (\(f' :funintenv_h).
   (((= :intbasis_h -> intbasis_h -> bool) $3) (((INTBASIS_H $2) $1)
   $0))))))))))`),
 ((intbasis_h_induction_thm),
  [],
  `((! :((intbasis_h -> bool) -> bool) -> bool)
   (\(P :intbasis_h -> bool). ((==> ((! :(sigenv_h -> bool) -> bool)
   (\(s0 :sigenv_h). ((! :(strintenv_h -> bool) -> bool)
   (\(s1 :strintenv_h). ((! :(funintenv_h -> bool) -> bool)
   (\(f' :funintenv_h). ($3 (((INTBASIS_H $2) $1) $0)))))))))
   ((! :(intbasis_h -> bool) -> bool) (\(i :intbasis_h). ($1
   $0))))))`),
 ((intbasis_h),
  [],
  `((! :((sigenv_h -> strintenv_h -> funintenv_h -> 'a) -> bool) ->
        bool) (\(f :sigenv_h -> strintenv_h -> funintenv_h -> 'a).
   ((?! :((intbasis_h -> 'a) -> bool) -> bool)
   (\(fn :intbasis_h -> 'a). ((! :(sigenv_h -> bool) -> bool)
   (\(s0 :sigenv_h). ((! :(strintenv_h -> bool) -> bool)
   (\(s1 :strintenv_h). ((! :(funintenv_h -> bool) -> bool)
   (\(f' :funintenv_h). (((= :'a -> 'a -> bool) ($3 (((INTBASIS_H $2)
   $1) $0))) ((($4 $2) $1) $0))))))))))))`),
 ((sigenv_h_constructors_one_one),
  [],
  `((! :((sigid -> int_h lift) -> bool) -> bool)
   (\(f' :sigid -> int_h lift).
   ((! :((sigid -> int_h lift) -> bool) -> bool)
   (\(f'' :sigid -> int_h lift). (((= :bool -> bool -> bool)
   (((= :sigenv_h -> sigenv_h -> bool) (SIGENV_H $1)) (SIGENV_H $0)))
   (((= :(sigid -> int_h lift) -> (sigid -> int_h lift) -> bool) $1)
   $0))))))`),
 ((sigenv_h_cases_thm),
  [],
  `((! :(sigenv_h -> bool) -> bool) (\(s :sigenv_h).
   ((? :((sigid -> int_h lift) -> bool) -> bool)
   (\(f' :sigid -> int_h lift). (((= :sigenv_h -> sigenv_h -> bool)
   $1) (SIGENV_H $0))))))`),
 ((sigenv_h_induction_thm),
  [],
  `((! :((sigenv_h -> bool) -> bool) -> bool) (\(P :sigenv_h -> bool).
   ((==> ((! :((sigid -> int_h lift) -> bool) -> bool)
   (\(f' :sigid -> int_h lift). ($1 (SIGENV_H $0)))))
   ((! :(sigenv_h -> bool) -> bool) (\(s :sigenv_h). ($1 $0))))))`),
 ((sigenv_h),
  [],
  `((! :(((sigid -> int_h lift) -> 'a) -> bool) -> bool)
   (\(f :(sigid -> int_h lift) -> 'a).
   ((?! :((sigenv_h -> 'a) -> bool) -> bool) (\(fn :sigenv_h -> 'a).
   ((! :((sigid -> int_h lift) -> bool) -> bool)
   (\(f' :sigid -> int_h lift). (((= :'a -> 'a -> bool) ($1 (SIGENV_H
   $0))) ($2 $0))))))))`),
 ((HOFMLInterfaces_cases_thm),
  [],
  `((/\ ((! :(funid # int_h -> bool) -> bool) (\(x1 :funid # int_h).
   ((? :(funid -> bool) -> bool) (\(y :funid).
   ((? :(int_h -> bool) -> bool) (\(y' :int_h).
   (((= :funid # int_h -> funid # int_h -> bool) $2)
   (((, :funid -> int_h -> funid # int_h) $1) $0))))))))) ((/\
   ((! :((funid # int_h) list -> bool) -> bool)
   (\(x2 :(funid # int_h) list). ((\/
   (((= :(funid # int_h) list -> (funid # int_h) list -> bool) $0)
   (NIL :(funid # int_h) list))) ((? :(funid # int_h -> bool) -> bool)
   (\(y :funid # int_h). ((? :((funid # int_h) list -> bool) -> bool)
   (\(y' :(funid # int_h) list).
   (((= :(funid # int_h) list -> (funid # int_h) list -> bool) $2)
   (((CONS :funid # int_h -> (funid # int_h) list ->
            (funid # int_h) list) $1) $0)))))))))) ((/\
   ((! :((funid # int_h) list finmap -> bool) -> bool)
   (\(x3 :(funid # int_h) list finmap).
   ((? :((funid # int_h) list -> bool) -> bool)
   (\(y :(funid # int_h) list).
   (((= :(funid # int_h) list finmap -> (funid # int_h) list finmap ->
         bool) $1)
   ((FINMAP :(funid # int_h) list -> (funid # int_h) list finmap)
   $0))))))) ((/\ ((! :(funintenv_h -> bool) -> bool)
   (\(x4 :funintenv_h).
   ((? :((funid # int_h) list finmap -> bool) -> bool)
   (\(y :(funid # int_h) list finmap).
   (((= :funintenv_h -> funintenv_h -> bool) $1) (FUNINTENV_H
   $0))))))) ((/\ ((! :(int_h -> bool) -> bool) (\(x5 :int_h).
   ((? :(funintenv_h -> bool) -> bool) (\(y :funintenv_h).
   ((? :(strintenv_h -> bool) -> bool) (\(y''' :strintenv_h).
   ((? :(var set -> bool) -> bool) (\(y'' :var set).
   ((? :(excon set -> bool) -> bool) (\(y' :excon set).
   (((= :int_h -> int_h -> bool) $4) ((((INT_H $3) $2) $1)
   $0))))))))))))) ((/\ ((! :(strid # int_h -> bool) -> bool)
   (\(x6 :strid # int_h). ((? :(strid -> bool) -> bool) (\(y :strid).
   ((? :(int_h -> bool) -> bool) (\(y' :int_h).
   (((= :strid # int_h -> strid # int_h -> bool) $2)
   (((, :strid -> int_h -> strid # int_h) $1) $0))))))))) ((/\
   ((! :((strid # int_h) list -> bool) -> bool)
   (\(x7 :(strid # int_h) list). ((\/
   (((= :(strid # int_h) list -> (strid # int_h) list -> bool) $0)
   (NIL :(strid # int_h) list))) ((? :(strid # int_h -> bool) -> bool)
   (\(y :strid # int_h). ((? :((strid # int_h) list -> bool) -> bool)
   (\(y' :(strid # int_h) list).
   (((= :(strid # int_h) list -> (strid # int_h) list -> bool) $2)
   (((CONS :strid # int_h -> (strid # int_h) list ->
            (strid # int_h) list) $1) $0)))))))))) ((/\
   ((! :((strid # int_h) list finmap -> bool) -> bool)
   (\(x8 :(strid # int_h) list finmap).
   ((? :((strid # int_h) list -> bool) -> bool)
   (\(y :(strid # int_h) list).
   (((= :(strid # int_h) list finmap -> (strid # int_h) list finmap ->
         bool) $1)
   ((FINMAP :(strid # int_h) list -> (strid # int_h) list finmap)
   $0))))))) ((! :(strintenv_h -> bool) -> bool) (\(x9 :strintenv_h).
   ((? :((strid # int_h) list finmap -> bool) -> bool)
   (\(y :(strid # int_h) list finmap).
   (((= :strintenv_h -> strintenv_h -> bool) $1) (STRINTENV_H
   $0))))))))))))))`),
 ((HOFMLInterfaces_one_one_thm),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   ((! :(funid -> bool) -> bool) (\(x1' :funid).
   ((! :(int_h -> bool) -> bool) (\(x2' :int_h).
   (((= :bool -> bool -> bool)
   (((= :funid # int_h -> funid # int_h -> bool)
   (((, :funid -> int_h -> funid # int_h) $3) $2))
   (((, :funid -> int_h -> funid # int_h) $1) $0))) ((/\
   (((= :funid -> funid -> bool) $3) $1))
   (((= :int_h -> int_h -> bool) $2) $0)))))))))))) ((/\
   ((! :(funid # int_h -> bool) -> bool) (\(x1 :funid # int_h).
   ((! :((funid # int_h) list -> bool) -> bool)
   (\(x2 :(funid # int_h) list). ((! :(funid # int_h -> bool) -> bool)
   (\(x1' :funid # int_h).
   ((! :((funid # int_h) list -> bool) -> bool)
   (\(x2' :(funid # int_h) list). (((= :bool -> bool -> bool)
   (((= :(funid # int_h) list -> (funid # int_h) list -> bool)
   (((CONS :funid # int_h -> (funid # int_h) list ->
            (funid # int_h) list) $3) $2))
   (((CONS :funid # int_h -> (funid # int_h) list ->
            (funid # int_h) list) $1) $0))) ((/\
   (((= :funid # int_h -> funid # int_h -> bool) $3) $1))
   (((= :(funid # int_h) list -> (funid # int_h) list -> bool) $2)
   $0)))))))))))) ((/\ ((! :((funid # int_h) list -> bool) -> bool)
   (\(x1 :(funid # int_h) list).
   ((! :((funid # int_h) list -> bool) -> bool)
   (\(x1' :(funid # int_h) list). (((= :bool -> bool -> bool)
   (((= :(funid # int_h) list finmap -> (funid # int_h) list finmap ->
         bool)
   ((FINMAP :(funid # int_h) list -> (funid # int_h) list finmap) $1))
   ((FINMAP :(funid # int_h) list -> (funid # int_h) list finmap)
   $0))) (((= :(funid # int_h) list -> (funid # int_h) list -> bool)
   $1) $0))))))) ((/\
   ((! :((funid # int_h) list finmap -> bool) -> bool)
   (\(x1 :(funid # int_h) list finmap).
   ((! :((funid # int_h) list finmap -> bool) -> bool)
   (\(x1' :(funid # int_h) list finmap). (((= :bool -> bool -> bool)
   (((= :funintenv_h -> funintenv_h -> bool) (FUNINTENV_H $1))
   (FUNINTENV_H $0)))
   (((= :(funid # int_h) list finmap -> (funid # int_h) list finmap ->
         bool) $1) $0))))))) ((/\ ((! :(funintenv_h -> bool) -> bool)
   (\(x1 :funintenv_h). ((! :(strintenv_h -> bool) -> bool)
   (\(x2 :strintenv_h). ((! :(var set -> bool) -> bool)
   (\(x3 :var set). ((! :(excon set -> bool) -> bool)
   (\(x4 :excon set). ((! :(funintenv_h -> bool) -> bool)
   (\(x1' :funintenv_h). ((! :(strintenv_h -> bool) -> bool)
   (\(x2' :strintenv_h). ((! :(var set -> bool) -> bool)
   (\(x3' :var set). ((! :(excon set -> bool) -> bool)
   (\(x4' :excon set). (((= :bool -> bool -> bool)
   (((= :int_h -> int_h -> bool) ((((INT_H $7) $6) $5) $4)) ((((INT_H
   $3) $2) $1) $0))) ((/\ (((= :funintenv_h -> funintenv_h -> bool)
   $7) $3)) ((/\ (((= :strintenv_h -> strintenv_h -> bool) $6) $2))
   ((/\ (((= :var set -> var set -> bool) $5) $1))
   (((= :excon set -> excon set -> bool) $4) $0))))))))))))))))))))))
   ((/\ ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   ((! :(strid -> bool) -> bool) (\(x1' :strid).
   ((! :(int_h -> bool) -> bool) (\(x2' :int_h).
   (((= :bool -> bool -> bool)
   (((= :strid # int_h -> strid # int_h -> bool)
   (((, :strid -> int_h -> strid # int_h) $3) $2))
   (((, :strid -> int_h -> strid # int_h) $1) $0))) ((/\
   (((= :strid -> strid -> bool) $3) $1))
   (((= :int_h -> int_h -> bool) $2) $0)))))))))))) ((/\
   ((! :(strid # int_h -> bool) -> bool) (\(x1 :strid # int_h).
   ((! :((strid # int_h) list -> bool) -> bool)
   (\(x2 :(strid # int_h) list). ((! :(strid # int_h -> bool) -> bool)
   (\(x1' :strid # int_h).
   ((! :((strid # int_h) list -> bool) -> bool)
   (\(x2' :(strid # int_h) list). (((= :bool -> bool -> bool)
   (((= :(strid # int_h) list -> (strid # int_h) list -> bool)
   (((CONS :strid # int_h -> (strid # int_h) list ->
            (strid # int_h) list) $3) $2))
   (((CONS :strid # int_h -> (strid # int_h) list ->
            (strid # int_h) list) $1) $0))) ((/\
   (((= :strid # int_h -> strid # int_h -> bool) $3) $1))
   (((= :(strid # int_h) list -> (strid # int_h) list -> bool) $2)
   $0)))))))))))) ((/\ ((! :((strid # int_h) list -> bool) -> bool)
   (\(x1 :(strid # int_h) list).
   ((! :((strid # int_h) list -> bool) -> bool)
   (\(x1' :(strid # int_h) list). (((= :bool -> bool -> bool)
   (((= :(strid # int_h) list finmap -> (strid # int_h) list finmap ->
         bool)
   ((FINMAP :(strid # int_h) list -> (strid # int_h) list finmap) $1))
   ((FINMAP :(strid # int_h) list -> (strid # int_h) list finmap)
   $0))) (((= :(strid # int_h) list -> (strid # int_h) list -> bool)
   $1) $0))))))) ((! :((strid # int_h) list finmap -> bool) -> bool)
   (\(x1 :(strid # int_h) list finmap).
   ((! :((strid # int_h) list finmap -> bool) -> bool)
   (\(x1' :(strid # int_h) list finmap). (((= :bool -> bool -> bool)
   (((= :strintenv_h -> strintenv_h -> bool) (STRINTENV_H $1))
   (STRINTENV_H $0)))
   (((= :(strid # int_h) list finmap -> (strid # int_h) list finmap ->
         bool) $1) $0))))))))))))))`),
 ((HOFMLInterfaces_distinct_thm),
  [],
  `((/\ ((! :(funid # int_h -> bool) -> bool) (\(x1' :funid # int_h).
   ((! :((funid # int_h) list -> bool) -> bool)
   (\(x2' :(funid # int_h) list). (~
   (((= :(funid # int_h) list -> (funid # int_h) list -> bool)
   (NIL :(funid # int_h) list))
   (((CONS :funid # int_h -> (funid # int_h) list ->
            (funid # int_h) list) $1) $0))))))))
   ((! :(strid # int_h -> bool) -> bool) (\(x1' :strid # int_h).
   ((! :((strid # int_h) list -> bool) -> bool)
   (\(x2' :(strid # int_h) list). (~
   (((= :(strid # int_h) list -> (strid # int_h) list -> bool)
   (NIL :(strid # int_h) list))
   (((CONS :strid # int_h -> (strid # int_h) list ->
            (strid # int_h) list) $1) $0))))))))`),
 ((HOFMLInterfaces_unique_thm),
  [],
  `((! :(('e -> funid -> int_h -> 'a) -> bool) -> bool)
   (\(funintenv_h_int_h_strintenv_h_ch44_funid_int_h_case :'e ->
                                                           funid ->
                                                           int_h ->
                                                           'a).
   ((! :('b -> bool) -> bool)
   (\(funintenv_h_int_h_strintenv_h_NIL_funid_int_h_prod_funintenv_h_int_h_strintenv_h_case :'b).
   ((! :(('a -> 'b -> funid # int_h -> (funid # int_h) list -> 'b) ->
        bool) -> bool)
   (\(funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h_case :'a ->
                                                                                              'b ->
                                                                                              funid #
                                                                                              int_h ->
                                                                                              (funid #
                                                                                              int_h)
                                                                                              list ->
                                                                                              'b).
   ((! :(('b -> (funid # int_h) list -> 'c) -> bool) -> bool)
   (\(funintenv_h_int_h_strintenv_h_FINMAP_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_case :'b ->
                                                                                                                                   (funid #
                                                                                                                                   int_h)
                                                                                                                                   list ->
                                                                                                                                   'c).
   ((! :(('c -> (funid # int_h) list finmap -> 'd) -> bool) -> bool)
   (\(FUNINTENV_H_case :'c -> (funid # int_h) list finmap -> 'd).
   ((! :(('d -> 'i -> var set -> excon set -> funintenv_h ->
         strintenv_h -> 'e) -> bool) -> bool)
   (\(INT_H_case :'d -> 'i -> var set -> excon set -> funintenv_h ->
                  strintenv_h -> 'e).
   ((! :(('e -> strid -> int_h -> 'f) -> bool) -> bool)
   (\(funintenv_h_int_h_strintenv_h_ch44_strid_int_h_case :'e ->
                                                           strid ->
                                                           int_h ->
                                                           'f).
   ((! :('g -> bool) -> bool)
   (\(funintenv_h_int_h_strintenv_h_NIL_strid_int_h_prod_funintenv_h_int_h_strintenv_h_case :'g).
   ((! :(('f -> 'g -> strid # int_h -> (strid # int_h) list -> 'g) ->
        bool) -> bool)
   (\(funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h_case :'f ->
                                                                                              'g ->
                                                                                              strid #
                                                                                              int_h ->
                                                                                              (strid #
                                                                                              int_h)
                                                                                              list ->
                                                                                              'g).
   ((! :(('g -> (strid # int_h) list -> 'h) -> bool) -> bool)
   (\(funintenv_h_int_h_strintenv_h_FINMAP_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_case :'g ->
                                                                                                                                   (strid #
                                                                                                                                   int_h)
                                                                                                                                   list ->
                                                                                                                                   'h).
   ((! :(('h -> (strid # int_h) list finmap -> 'i) -> bool) -> bool)
   (\(STRINTENV_H_case :'h -> (strid # int_h) list finmap -> 'i).
   ((! :((funid # int_h -> 'a) -> bool) -> bool)
   (\(fn1 :funid # int_h -> 'a).
   ((! :(((funid # int_h) list -> 'b) -> bool) -> bool)
   (\(fn2 :(funid # int_h) list -> 'b).
   ((! :(((funid # int_h) list finmap -> 'c) -> bool) -> bool)
   (\(fn3 :(funid # int_h) list finmap -> 'c).
   ((! :((funintenv_h -> 'd) -> bool) -> bool)
   (\(fn4 :funintenv_h -> 'd). ((! :((int_h -> 'e) -> bool) -> bool)
   (\(fn5 :int_h -> 'e). ((! :((strid # int_h -> 'f) -> bool) -> bool)
   (\(fn6 :strid # int_h -> 'f).
   ((! :(((strid # int_h) list -> 'g) -> bool) -> bool)
   (\(fn7 :(strid # int_h) list -> 'g).
   ((! :(((strid # int_h) list finmap -> 'h) -> bool) -> bool)
   (\(fn8 :(strid # int_h) list finmap -> 'h).
   ((! :((strintenv_h -> 'i) -> bool) -> bool)
   (\(fn9 :strintenv_h -> 'i).
   ((! :((funid # int_h -> 'a) -> bool) -> bool)
   (\(fn1' :funid # int_h -> 'a).
   ((! :(((funid # int_h) list -> 'b) -> bool) -> bool)
   (\(fn2' :(funid # int_h) list -> 'b).
   ((! :(((funid # int_h) list finmap -> 'c) -> bool) -> bool)
   (\(fn3' :(funid # int_h) list finmap -> 'c).
   ((! :((funintenv_h -> 'd) -> bool) -> bool)
   (\(fn4' :funintenv_h -> 'd). ((! :((int_h -> 'e) -> bool) -> bool)
   (\(fn5' :int_h -> 'e).
   ((! :((strid # int_h -> 'f) -> bool) -> bool)
   (\(fn6' :strid # int_h -> 'f).
   ((! :(((strid # int_h) list -> 'g) -> bool) -> bool)
   (\(fn7' :(strid # int_h) list -> 'g).
   ((! :(((strid # int_h) list finmap -> 'h) -> bool) -> bool)
   (\(fn8' :(strid # int_h) list finmap -> 'h).
   ((! :((strintenv_h -> 'i) -> bool) -> bool)
   (\(fn9' :strintenv_h -> 'i). ((==> ((/\
   ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(int_h -> bool) -> bool) (\(y''''''' :int_h).
   (((= :'a -> 'a -> bool) ($19 (((, :funid -> int_h -> funid # int_h)
   $1) $0))) ((($30 ($15 $0)) $1) $0))))))) ((/\
   (((= :'b -> 'b -> bool) ($16 (NIL :(funid # int_h) list))) $27))
   ((/\ ((! :(funid # int_h -> bool) -> bool) (\(y :funid # int_h).
   ((! :((funid # int_h) list -> bool) -> bool)
   (\(y'''''' :(funid # int_h) list). (((= :'b -> 'b -> bool) ($18
   (((CONS :funid # int_h -> (funid # int_h) list ->
            (funid # int_h) list) $1) $0))) (((($28 ($19 $1)) ($18
   $0)) $1) $0))))))) ((/\
   ((! :((funid # int_h) list -> bool) -> bool)
   (\(y :(funid # int_h) list). (((= :'c -> 'c -> bool) ($16
   ((FINMAP :(funid # int_h) list -> (funid # int_h) list finmap)
   $0))) (($26 ($17 $0)) $0))))) ((/\
   ((! :((funid # int_h) list finmap -> bool) -> bool)
   (\(y :(funid # int_h) list finmap). (((= :'d -> 'd -> bool) ($15
   (FUNINTENV_H $0))) (($25 ($16 $0)) $0))))) ((/\
   ((! :(funintenv_h -> bool) -> bool) (\(y :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(y''''' :strintenv_h).
   ((! :(var set -> bool) -> bool) (\(y'''' :var set).
   ((! :(excon set -> bool) -> bool) (\(y''' :excon set).
   (((= :'e -> 'e -> bool) ($17 ((((INT_H $3) $2) $1) $0))) (((((($27
   ($18 $3)) ($13 $2)) $1) $0) $3) $2))))))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(int_h -> bool) -> bool) (\(y'' :int_h).
   (((= :'f -> 'f -> bool) ($14 (((, :strid -> int_h -> strid # int_h)
   $1) $0))) ((($24 ($15 $0)) $1) $0))))))) ((/\
   (((= :'g -> 'g -> bool) ($11 (NIL :(strid # int_h) list))) $21))
   ((/\ ((! :(strid # int_h -> bool) -> bool) (\(y :strid # int_h).
   ((! :((strid # int_h) list -> bool) -> bool)
   (\(y' :(strid # int_h) list). (((= :'g -> 'g -> bool) ($13
   (((CONS :strid # int_h -> (strid # int_h) list ->
            (strid # int_h) list) $1) $0))) (((($22 ($14 $1)) ($13
   $0)) $1) $0))))))) ((/\
   ((! :((strid # int_h) list -> bool) -> bool)
   (\(y :(strid # int_h) list). (((= :'h -> 'h -> bool) ($11
   ((FINMAP :(strid # int_h) list -> (strid # int_h) list finmap)
   $0))) (($20 ($12 $0)) $0)))))
   ((! :((strid # int_h) list finmap -> bool) -> bool)
   (\(y :(strid # int_h) list finmap). (((= :'i -> 'i -> bool) ($10
   (STRINTENV_H $0))) (($19 ($11 $0)) $0))))))))))))))) ((==> ((/\
   ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(int_h -> bool) -> bool) (\(y''''''' :int_h).
   (((= :'a -> 'a -> bool) ($10 (((, :funid -> int_h -> funid # int_h)
   $1) $0))) ((($30 ($6 $0)) $1) $0))))))) ((/\
   (((= :'b -> 'b -> bool) ($7 (NIL :(funid # int_h) list))) $27))
   ((/\ ((! :(funid # int_h -> bool) -> bool) (\(y :funid # int_h).
   ((! :((funid # int_h) list -> bool) -> bool)
   (\(y'''''' :(funid # int_h) list). (((= :'b -> 'b -> bool) ($9
   (((CONS :funid # int_h -> (funid # int_h) list ->
            (funid # int_h) list) $1) $0))) (((($28 ($10 $1)) ($9 $0))
   $1) $0))))))) ((/\ ((! :((funid # int_h) list -> bool) -> bool)
   (\(y :(funid # int_h) list). (((= :'c -> 'c -> bool) ($7
   ((FINMAP :(funid # int_h) list -> (funid # int_h) list finmap)
   $0))) (($26 ($8 $0)) $0))))) ((/\
   ((! :((funid # int_h) list finmap -> bool) -> bool)
   (\(y :(funid # int_h) list finmap). (((= :'d -> 'd -> bool) ($6
   (FUNINTENV_H $0))) (($25 ($7 $0)) $0))))) ((/\
   ((! :(funintenv_h -> bool) -> bool) (\(y :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(y''''' :strintenv_h).
   ((! :(var set -> bool) -> bool) (\(y'''' :var set).
   ((! :(excon set -> bool) -> bool) (\(y''' :excon set).
   (((= :'e -> 'e -> bool) ($8 ((((INT_H $3) $2) $1) $0))) (((((($27
   ($9 $3)) ($4 $2)) $1) $0) $3) $2))))))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(int_h -> bool) -> bool) (\(y'' :int_h).
   (((= :'f -> 'f -> bool) ($5 (((, :strid -> int_h -> strid # int_h)
   $1) $0))) ((($24 ($6 $0)) $1) $0))))))) ((/\
   (((= :'g -> 'g -> bool) ($2 (NIL :(strid # int_h) list))) $21))
   ((/\ ((! :(strid # int_h -> bool) -> bool) (\(y :strid # int_h).
   ((! :((strid # int_h) list -> bool) -> bool)
   (\(y' :(strid # int_h) list). (((= :'g -> 'g -> bool) ($4
   (((CONS :strid # int_h -> (strid # int_h) list ->
            (strid # int_h) list) $1) $0))) (((($22 ($5 $1)) ($4 $0))
   $1) $0))))))) ((/\ ((! :((strid # int_h) list -> bool) -> bool)
   (\(y :(strid # int_h) list). (((= :'h -> 'h -> bool) ($2
   ((FINMAP :(strid # int_h) list -> (strid # int_h) list finmap)
   $0))) (($20 ($3 $0)) $0)))))
   ((! :((strid # int_h) list finmap -> bool) -> bool)
   (\(y :(strid # int_h) list finmap). (((= :'i -> 'i -> bool) ($1
   (STRINTENV_H $0))) (($19 ($2 $0)) $0))))))))))))))) ((/\
   (((= :(funid # int_h -> 'a) -> (funid # int_h -> 'a) -> bool) $17)
   $8)) ((/\
   (((= :((funid # int_h) list -> 'b) ->
         ((funid # int_h) list -> 'b) -> bool) $16) $7)) ((/\
   (((= :((funid # int_h) list finmap -> 'c) ->
         ((funid # int_h) list finmap -> 'c) -> bool) $15) $6)) ((/\
   (((= :(funintenv_h -> 'd) -> (funintenv_h -> 'd) -> bool) $14) $5))
   ((/\ (((= :(int_h -> 'e) -> (int_h -> 'e) -> bool) $13) $4)) ((/\
   (((= :(strid # int_h -> 'f) -> (strid # int_h -> 'f) -> bool) $12)
   $3)) ((/\
   (((= :((strid # int_h) list -> 'g) ->
         ((strid # int_h) list -> 'g) -> bool) $11) $2)) ((/\
   (((= :((strid # int_h) list finmap -> 'h) ->
         ((strid # int_h) list finmap -> 'h) -> bool) $10) $1))
   (((= :(strintenv_h -> 'i) -> (strintenv_h -> 'i) -> bool) $9)
   $0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((HOFMLInterfaces_induction_thm),
  [],
  `((! :((funid # int_h -> bool) -> bool) -> bool)
   (\(funid_int_h_prod_funintenv_h_int_h_strintenv_h_Prop :funid #
                                                           int_h ->
                                                           bool).
   ((! :(((funid # int_h) list -> bool) -> bool) -> bool)
   (\(funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_Prop :(funid #
                                                                                              int_h)
                                                                                              list ->
                                                                                              bool).
   ((! :(((funid # int_h) list finmap -> bool) -> bool) -> bool)
   (\(funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_Prop :(funid #
                                                                                                                                   int_h)
                                                                                                                                   list
                                                                                                                                   finmap ->
                                                                                                                                   bool).
   ((! :((funintenv_h -> bool) -> bool) -> bool)
   (\(funintenv_h_Prop :funintenv_h -> bool).
   ((! :((int_h -> bool) -> bool) -> bool) (\(h_Prop :int_h -> bool).
   ((! :((strid # int_h -> bool) -> bool) -> bool)
   (\(strid_int_h_prod_funintenv_h_int_h_strintenv_h_Prop :strid #
                                                           int_h ->
                                                           bool).
   ((! :(((strid # int_h) list -> bool) -> bool) -> bool)
   (\(strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_Prop :(strid #
                                                                                              int_h)
                                                                                              list ->
                                                                                              bool).
   ((! :(((strid # int_h) list finmap -> bool) -> bool) -> bool)
   (\(strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_Prop :(strid #
                                                                                                                                   int_h)
                                                                                                                                   list
                                                                                                                                   finmap ->
                                                                                                                                   bool).
   ((! :((strintenv_h -> bool) -> bool) -> bool)
   (\(strintenv_h_Prop :strintenv_h -> bool). ((==> ((/\
   ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(int_h -> bool) -> bool) (\(y''''''' :int_h). ((==> ($6 $0))
   ($10 (((, :funid -> int_h -> funid # int_h) $1) $0)))))))) ((/\ ($7
   (NIL :(funid # int_h) list))) ((/\
   ((! :(funid # int_h -> bool) -> bool) (\(y :funid # int_h).
   ((! :((funid # int_h) list -> bool) -> bool)
   (\(y'''''' :(funid # int_h) list). ((==> ($10 $1)) ((==> ($9 $0))
   ($9
   (((CONS :funid # int_h -> (funid # int_h) list ->
            (funid # int_h) list) $1) $0))))))))) ((/\
   ((! :((funid # int_h) list -> bool) -> bool)
   (\(y :(funid # int_h) list). ((==> ($8 $0)) ($7
   ((FINMAP :(funid # int_h) list -> (funid # int_h) list finmap)
   $0)))))) ((/\ ((! :((funid # int_h) list finmap -> bool) -> bool)
   (\(y :(funid # int_h) list finmap). ((==> ($7 $0)) ($6 (FUNINTENV_H
   $0)))))) ((/\ ((! :(funintenv_h -> bool) -> bool)
   (\(y :funintenv_h). ((! :(strintenv_h -> bool) -> bool)
   (\(y''''' :strintenv_h). ((! :(var set -> bool) -> bool)
   (\(y'''' :var set). ((! :(excon set -> bool) -> bool)
   (\(y''' :excon set). ((==> ($9 $3)) ((==> ($4 $2)) ($8 ((((INT_H
   $3) $2) $1) $0))))))))))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(y :strid). ((! :(int_h -> bool) -> bool) (\(y'' :int_h). ((==>
   ($6 $0)) ($5 (((, :strid -> int_h -> strid # int_h) $1) $0))))))))
   ((/\ ($2 (NIL :(strid # int_h) list))) ((/\
   ((! :(strid # int_h -> bool) -> bool) (\(y :strid # int_h).
   ((! :((strid # int_h) list -> bool) -> bool)
   (\(y' :(strid # int_h) list). ((==> ($5 $1)) ((==> ($4 $0)) ($4
   (((CONS :strid # int_h -> (strid # int_h) list ->
            (strid # int_h) list) $1) $0))))))))) ((/\
   ((! :((strid # int_h) list -> bool) -> bool)
   (\(y :(strid # int_h) list). ((==> ($3 $0)) ($2
   ((FINMAP :(strid # int_h) list -> (strid # int_h) list finmap)
   $0)))))) ((! :((strid # int_h) list finmap -> bool) -> bool)
   (\(y :(strid # int_h) list finmap). ((==> ($2 $0)) ($1 (STRINTENV_H
   $0)))))))))))))))) ((/\ ((! :(funid # int_h -> bool) -> bool)
   (\(x1 :funid # int_h). ($9 $0)))) ((/\
   ((! :((funid # int_h) list -> bool) -> bool)
   (\(x2 :(funid # int_h) list). ($8 $0)))) ((/\
   ((! :((funid # int_h) list finmap -> bool) -> bool)
   (\(x3 :(funid # int_h) list finmap). ($7 $0)))) ((/\
   ((! :(funintenv_h -> bool) -> bool) (\(x4 :funintenv_h). ($6 $0))))
   ((/\ ((! :(int_h -> bool) -> bool) (\(x5 :int_h). ($5 $0)))) ((/\
   ((! :(strid # int_h -> bool) -> bool) (\(x6 :strid # int_h). ($4
   $0)))) ((/\ ((! :((strid # int_h) list -> bool) -> bool)
   (\(x7 :(strid # int_h) list). ($3 $0)))) ((/\
   ((! :((strid # int_h) list finmap -> bool) -> bool)
   (\(x8 :(strid # int_h) list finmap). ($2 $0))))
   ((! :(strintenv_h -> bool) -> bool) (\(x9 :strintenv_h). ($1
   $0))))))))))))))))))))))))))))))`),
 ((HOFMLInterfaces_rec_thm),
  [],
  `((! :(('e -> funid -> int_h -> 'a) -> bool) -> bool)
   (\(funintenv_h_int_h_strintenv_h_ch44_funid_int_h_case :'e ->
                                                           funid ->
                                                           int_h ->
                                                           'a).
   ((! :('b -> bool) -> bool)
   (\(funintenv_h_int_h_strintenv_h_NIL_funid_int_h_prod_funintenv_h_int_h_strintenv_h_case :'b).
   ((! :(('a -> 'b -> funid # int_h -> (funid # int_h) list -> 'b) ->
        bool) -> bool)
   (\(funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h_case :'a ->
                                                                                              'b ->
                                                                                              funid #
                                                                                              int_h ->
                                                                                              (funid #
                                                                                              int_h)
                                                                                              list ->
                                                                                              'b).
   ((! :(('b -> (funid # int_h) list -> 'c) -> bool) -> bool)
   (\(funintenv_h_int_h_strintenv_h_FINMAP_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_case :'b ->
                                                                                                                                   (funid #
                                                                                                                                   int_h)
                                                                                                                                   list ->
                                                                                                                                   'c).
   ((! :(('c -> (funid # int_h) list finmap -> 'd) -> bool) -> bool)
   (\(FUNINTENV_H_case :'c -> (funid # int_h) list finmap -> 'd).
   ((! :(('d -> 'i -> var set -> excon set -> funintenv_h ->
         strintenv_h -> 'e) -> bool) -> bool)
   (\(INT_H_case :'d -> 'i -> var set -> excon set -> funintenv_h ->
                  strintenv_h -> 'e).
   ((! :(('e -> strid -> int_h -> 'f) -> bool) -> bool)
   (\(funintenv_h_int_h_strintenv_h_ch44_strid_int_h_case :'e ->
                                                           strid ->
                                                           int_h ->
                                                           'f).
   ((! :('g -> bool) -> bool)
   (\(funintenv_h_int_h_strintenv_h_NIL_strid_int_h_prod_funintenv_h_int_h_strintenv_h_case :'g).
   ((! :(('f -> 'g -> strid # int_h -> (strid # int_h) list -> 'g) ->
        bool) -> bool)
   (\(funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h_case :'f ->
                                                                                              'g ->
                                                                                              strid #
                                                                                              int_h ->
                                                                                              (strid #
                                                                                              int_h)
                                                                                              list ->
                                                                                              'g).
   ((! :(('g -> (strid # int_h) list -> 'h) -> bool) -> bool)
   (\(funintenv_h_int_h_strintenv_h_FINMAP_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_case :'g ->
                                                                                                                                   (strid #
                                                                                                                                   int_h)
                                                                                                                                   list ->
                                                                                                                                   'h).
   ((! :(('h -> (strid # int_h) list finmap -> 'i) -> bool) -> bool)
   (\(STRINTENV_H_case :'h -> (strid # int_h) list finmap -> 'i).
   ((? :((funid # int_h -> 'a) -> bool) -> bool)
   (\(y :funid # int_h -> 'a).
   ((? :(((funid # int_h) list -> 'b) -> bool) -> bool)
   (\(y'''''''' :(funid # int_h) list -> 'b).
   ((? :(((funid # int_h) list finmap -> 'c) -> bool) -> bool)
   (\(y''''''' :(funid # int_h) list finmap -> 'c).
   ((? :((funintenv_h -> 'd) -> bool) -> bool)
   (\(y'''''' :funintenv_h -> 'd).
   ((? :((int_h -> 'e) -> bool) -> bool) (\(y''''' :int_h -> 'e).
   ((? :((strid # int_h -> 'f) -> bool) -> bool)
   (\(y'''' :strid # int_h -> 'f).
   ((? :(((strid # int_h) list -> 'g) -> bool) -> bool)
   (\(y''' :(strid # int_h) list -> 'g).
   ((? :(((strid # int_h) list finmap -> 'h) -> bool) -> bool)
   (\(y'' :(strid # int_h) list finmap -> 'h).
   ((? :((strintenv_h -> 'i) -> bool) -> bool)
   (\(y' :strintenv_h -> 'i). ((/\ ((! :(funid -> bool) -> bool)
   (\(x1 :funid). ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   (((= :'a -> 'a -> bool) ($10 (((, :funid -> int_h -> funid # int_h)
   $1) $0))) ((($21 ($6 $0)) $1) $0))))))) ((/\
   (((= :'b -> 'b -> bool) ($7 (NIL :(funid # int_h) list))) $18))
   ((/\ ((! :(funid # int_h -> bool) -> bool) (\(x1 :funid # int_h).
   ((! :((funid # int_h) list -> bool) -> bool)
   (\(x2 :(funid # int_h) list). (((= :'b -> 'b -> bool) ($9
   (((CONS :funid # int_h -> (funid # int_h) list ->
            (funid # int_h) list) $1) $0))) (((($19 ($10 $1)) ($9 $0))
   $1) $0))))))) ((/\ ((! :((funid # int_h) list -> bool) -> bool)
   (\(x1 :(funid # int_h) list). (((= :'c -> 'c -> bool) ($7
   ((FINMAP :(funid # int_h) list -> (funid # int_h) list finmap)
   $0))) (($17 ($8 $0)) $0))))) ((/\
   ((! :((funid # int_h) list finmap -> bool) -> bool)
   (\(x1 :(funid # int_h) list finmap). (((= :'d -> 'd -> bool) ($6
   (FUNINTENV_H $0))) (($16 ($7 $0)) $0))))) ((/\
   ((! :(funintenv_h -> bool) -> bool) (\(x1 :funintenv_h).
   ((! :(strintenv_h -> bool) -> bool) (\(x2 :strintenv_h).
   ((! :(var set -> bool) -> bool) (\(x3 :var set).
   ((! :(excon set -> bool) -> bool) (\(x4 :excon set).
   (((= :'e -> 'e -> bool) ($8 ((((INT_H $3) $2) $1) $0))) (((((($18
   ($9 $3)) ($4 $2)) $1) $0) $3) $2))))))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int_h -> bool) -> bool) (\(x2 :int_h).
   (((= :'f -> 'f -> bool) ($5 (((, :strid -> int_h -> strid # int_h)
   $1) $0))) ((($15 ($6 $0)) $1) $0))))))) ((/\
   (((= :'g -> 'g -> bool) ($2 (NIL :(strid # int_h) list))) $12))
   ((/\ ((! :(strid # int_h -> bool) -> bool) (\(x1 :strid # int_h).
   ((! :((strid # int_h) list -> bool) -> bool)
   (\(x2 :(strid # int_h) list). (((= :'g -> 'g -> bool) ($4
   (((CONS :strid # int_h -> (strid # int_h) list ->
            (strid # int_h) list) $1) $0))) (((($13 ($5 $1)) ($4 $0))
   $1) $0))))))) ((/\ ((! :((strid # int_h) list -> bool) -> bool)
   (\(x1 :(strid # int_h) list). (((= :'h -> 'h -> bool) ($2
   ((FINMAP :(strid # int_h) list -> (strid # int_h) list finmap)
   $0))) (($11 ($3 $0)) $0)))))
   ((! :((strid # int_h) list finmap -> bool) -> bool)
   (\(x1 :(strid # int_h) list finmap). (((= :'i -> 'i -> bool) ($1
   (STRINTENV_H $0))) (($10 ($2 $0))
   $0))))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h_Axiom),
  [],
  `((! :(('a -> funid ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         'a) -> bool) -> bool)
   (\(f0 :'a -> funid ->
          joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
          'a). ((! :('a -> bool) -> bool) (\(e0 :'a).
   ((! :(('a -> 'a ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         'a) -> bool) -> bool)
   (\(f1 :'a -> 'a ->
          joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
          joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
          'a).
   ((! :(('a ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         'a) -> bool) -> bool)
   (\(f2 :'a ->
          joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
          'a).
   ((! :(('a ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         'a) -> bool) -> bool)
   (\(f3 :'a ->
          joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
          'a).
   ((! :(('a -> 'a -> var set -> excon set ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         'a) -> bool) -> bool)
   (\(f4 :'a -> 'a -> var set -> excon set ->
          joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
          joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
          'a).
   ((! :(('a -> strid ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         'a) -> bool) -> bool)
   (\(f5 :'a -> strid ->
          joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
          'a). ((! :('a -> bool) -> bool) (\(e1 :'a).
   ((! :(('a -> 'a ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         'a) -> bool) -> bool)
   (\(f6 :'a -> 'a ->
          joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
          joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
          'a).
   ((! :(('a ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         'a) -> bool) -> bool)
   (\(f7 :'a ->
          joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
          'a).
   ((! :(('a ->
         joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
         'a) -> bool) -> bool)
   (\(f8 :'a ->
          joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
          'a).
   ((?! :((joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
          'a) -> bool) -> bool)
   (\(fn :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
          'a). ((/\ ((! :(funid -> bool) -> bool) (\(f' :funid).
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :'a -> 'a -> bool) ($2
   ((JOINT_int_funintenv_h_int_h_strintenv_h_ch44_funid_int_h $1)
   $0))) ((($13 ($2 $0)) $1) $0))))))) ((/\ (((= :'a -> 'a -> bool)
   ($0
   JOINT_int_funintenv_h_int_h_strintenv_h_NIL_funid_int_h_prod_funintenv_h_int_h_strintenv_h))
   $10)) ((/\
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :'a -> 'a -> bool) ($2
   ((JOINT_int_funintenv_h_int_h_strintenv_h_CONS_funid_int_h_prod_funintenv_h_int_h_strintenv_h
   $1) $0))) (((($11 ($2 $1)) ($2 $0)) $1) $0))))))) ((/\
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :'a -> 'a -> bool) ($1
   (JOINT_int_funintenv_h_int_h_strintenv_h_FINMAP_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0))) (($9 ($1 $0)) $0))))) ((/\
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_FUNINTENV_H $0))) (($8 ($1
   $0)) $0))))) ((/\
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   ((! :(var set -> bool) -> bool) (\(s0 :var set).
   ((! :(excon set -> bool) -> bool) (\(s1 :excon set).
   (((= :'a -> 'a -> bool) ($4 ((((JOINT_int_INT_H $3) $2) $1) $0)))
   (((((($10 ($4 $3)) ($4 $2)) $1) $0) $3) $2))))))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :'a -> 'a -> bool) ($2
   ((JOINT_int_funintenv_h_int_h_strintenv_h_ch44_strid_int_h $1)
   $0))) ((($7 ($2 $0)) $1) $0))))))) ((/\ (((= :'a -> 'a -> bool) ($0
   JOINT_int_funintenv_h_int_h_strintenv_h_NIL_strid_int_h_prod_funintenv_h_int_h_strintenv_h))
   $4)) ((/\
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :'a -> 'a -> bool) ($2
   ((JOINT_int_funintenv_h_int_h_strintenv_h_CONS_strid_int_h_prod_funintenv_h_int_h_strintenv_h
   $1) $0))) (((($5 ($2 $1)) ($2 $0)) $1) $0))))))) ((/\
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :'a -> 'a -> bool) ($1
   (JOINT_int_funintenv_h_int_h_strintenv_h_FINMAP_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h
   $0))) (($3 ($1 $0)) $0)))))
   ((! :(joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h ->
        bool) -> bool)
   (\(j :joint_ty_funid_int_h_prod_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_funid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_funintenv_h_int_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_strid_int_h_prod_funintenv_h_int_h_strintenv_h_list_funintenv_h_int_h_strintenv_h_finmap_funintenv_h_int_h_strintenv_h_strintenv_h).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_STRINTENV_H $0))) (($2 ($1
   $0)) $0))))))))))))))))))))))))))))))))))))))`),
 ((topdec_h_Axiom),
  [],
  `((! :((moddec_h -> 'a) -> bool) -> bool) (\(f0 :moddec_h -> 'a).
   ((! :((sigdec_h -> 'a) -> bool) -> bool) (\(f1 :sigdec_h -> 'a).
   ((?! :((topdec_h -> 'a) -> bool) -> bool) (\(fn :topdec_h -> 'a).
   ((/\ ((! :(moddec_h -> bool) -> bool) (\(m :moddec_h).
   (((= :'a -> 'a -> bool) ($1 (MODDEC_H $0))) ($3 $0)))))
   ((! :(sigdec_h -> bool) -> bool) (\(s :sigdec_h).
   (((= :'a -> 'a -> bool) ($1 (SIGDEC_H $0))) ($2 $0)))))))))))`),
 ((HOFMLStructures_cases_thm),
  [],
  `((/\ ((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h). ((\/
   ((? :(funid -> bool) -> bool) (\(y :funid).
   ((? :(strid -> bool) -> bool) (\(y''''' :strid).
   ((? :(sigexp_h -> bool) -> bool) (\(y'''' :sigexp_h).
   ((? :(sigexp_h option -> bool) -> bool) (\(y''' :sigexp_h option).
   ((? :(strexp_h -> bool) -> bool) (\(y'' :strexp_h).
   ((? :(funbind_h option -> bool) -> bool) (\(y' :funbind_h option).
   (((= :funbind_h -> funbind_h -> bool) $6) ((((((BINDfunbind_h $5)
   $4) $3) $2) $1) $0))))))))))))))) ((? :(funid -> bool) -> bool)
   (\(y :funid). ((? :(funid long -> bool) -> bool)
   (\(y' :funid long). (((= :funbind_h -> funbind_h -> bool) $2)
   ((REBINDfunbind_h $1) $0)))))))))) ((/\
   ((! :(funbind_h option -> bool) -> bool) (\(x2 :funbind_h option).
   ((\/ (((= :funbind_h option -> funbind_h option -> bool) $0)
   (NONE :funbind_h option))) ((? :(funbind_h -> bool) -> bool)
   (\(y :funbind_h).
   (((= :funbind_h option -> funbind_h option -> bool) $1)
   ((SOME :funbind_h -> funbind_h option) $0)))))))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x3 :moddec_h). ((\/
   ((? :(dec -> bool) -> bool) (\(y :dec).
   (((= :moddec_h -> moddec_h -> bool) $1) (DECmoddec_h $0))))) ((\/
   ((? :(strbind_h -> bool) -> bool) (\(y :strbind_h).
   (((= :moddec_h -> moddec_h -> bool) $1) (STRUCTUREmoddec_h $0)))))
   ((\/ ((? :(moddec_h -> bool) -> bool) (\(y :moddec_h).
   ((? :(moddec_h -> bool) -> bool) (\(y' :moddec_h).
   (((= :moddec_h -> moddec_h -> bool) $2) ((LOCALmoddec_h $1)
   $0))))))) ((\/ ((? :(strid long nonemptylist -> bool) -> bool)
   (\(y :strid long nonemptylist). (((= :moddec_h -> moddec_h -> bool)
   $1) (OPENmoddec_h $0))))) ((\/ (((= :moddec_h -> moddec_h -> bool)
   $0) EMPTYmoddec_h)) ((\/ ((? :(moddec_h -> bool) -> bool)
   (\(y :moddec_h). ((? :(moddec_h -> bool) -> bool) (\(y' :moddec_h).
   (((= :moddec_h -> moddec_h -> bool) $2) ((SEQmoddec_h $1) $0)))))))
   ((? :(funbind_h -> bool) -> bool) (\(y :funbind_h).
   (((= :moddec_h -> moddec_h -> bool) $1) (FUNCTORmoddec_h
   $0))))))))))))) ((/\ ((! :(sigexp_h option -> bool) -> bool)
   (\(x4 :sigexp_h option). ((\/
   (((= :sigexp_h option -> sigexp_h option -> bool) $0)
   (NONE :sigexp_h option))) ((? :(sigexp_h -> bool) -> bool)
   (\(y :sigexp_h). (((= :sigexp_h option -> sigexp_h option -> bool)
   $1) ((SOME :sigexp_h -> sigexp_h option) $0)))))))) ((/\
   ((! :(strbind_h -> bool) -> bool) (\(x5 :strbind_h).
   ((? :(strid -> bool) -> bool) (\(y :strid).
   ((? :(sigexp_h option -> bool) -> bool) (\(y''' :sigexp_h option).
   ((? :(strexp_h -> bool) -> bool) (\(y'' :strexp_h).
   ((? :(strbind_h option -> bool) -> bool) (\(y' :strbind_h option).
   (((= :strbind_h -> strbind_h -> bool) $4) ((((BINDstrbind_h $3) $2)
   $1) $0))))))))))))) ((/\ ((! :(strbind_h option -> bool) -> bool)
   (\(x6 :strbind_h option). ((\/
   (((= :strbind_h option -> strbind_h option -> bool) $0)
   (NONE :strbind_h option))) ((? :(strbind_h -> bool) -> bool)
   (\(y :strbind_h).
   (((= :strbind_h option -> strbind_h option -> bool) $1)
   ((SOME :strbind_h -> strbind_h option) $0))))))))
   ((! :(strexp_h -> bool) -> bool) (\(x7 :strexp_h). ((\/
   ((? :(moddec_h -> bool) -> bool) (\(y :moddec_h).
   (((= :strexp_h -> strexp_h -> bool) $1) (STRUCTstrexp_h $0)))))
   ((\/ ((? :(strid long -> bool) -> bool) (\(y :strid long).
   (((= :strexp_h -> strexp_h -> bool) $1) (LONGSTRIDstrexp_h $0)))))
   ((\/ ((? :(funid long -> bool) -> bool) (\(y :funid long).
   ((? :(strexp_h -> bool) -> bool) (\(y' :strexp_h).
   (((= :strexp_h -> strexp_h -> bool) $2) ((APPstrexp_h $1) $0)))))))
   ((? :(moddec_h -> bool) -> bool) (\(y :moddec_h).
   ((? :(strexp_h -> bool) -> bool) (\(y' :strexp_h).
   (((= :strexp_h -> strexp_h -> bool) $2) ((LETstrexp_h $1)
   $0)))))))))))))))))`),
 ((HOFMLStructures_constructors_one_one),
  [],
  `((/\ ((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h option -> bool) -> bool) (\(x4 :sigexp_h option).
   ((! :(strexp_h -> bool) -> bool) (\(x5 :strexp_h).
   ((! :(funbind_h option -> bool) -> bool) (\(x6 :funbind_h option).
   ((! :(funid -> bool) -> bool) (\(x1' :funid).
   ((! :(strid -> bool) -> bool) (\(x2' :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3' :sigexp_h).
   ((! :(sigexp_h option -> bool) -> bool) (\(x4' :sigexp_h option).
   ((! :(strexp_h -> bool) -> bool) (\(x5' :strexp_h).
   ((! :(funbind_h option -> bool) -> bool) (\(x6' :funbind_h option).
   (((= :bool -> bool -> bool) (((= :funbind_h -> funbind_h -> bool)
   ((((((BINDfunbind_h $11) $10) $9) $8) $7) $6)) ((((((BINDfunbind_h
   $5) $4) $3) $2) $1) $0))) ((/\ (((= :funid -> funid -> bool) $11)
   $5)) ((/\ (((= :strid -> strid -> bool) $10) $4)) ((/\
   (((= :sigexp_h -> sigexp_h -> bool) $9) $3)) ((/\
   (((= :sigexp_h option -> sigexp_h option -> bool) $8) $2)) ((/\
   (((= :strexp_h -> strexp_h -> bool) $7) $1))
   (((= :funbind_h option -> funbind_h option -> bool) $6)
   $0)))))))))))))))))))))))))))))))) ((! :(funid -> bool) -> bool)
   (\(x1 :funid). ((! :(funid long -> bool) -> bool)
   (\(x2 :funid long). ((! :(funid -> bool) -> bool) (\(x1' :funid).
   ((! :(funid long -> bool) -> bool) (\(x2' :funid long).
   (((= :bool -> bool -> bool) (((= :funbind_h -> funbind_h -> bool)
   ((REBINDfunbind_h $3) $2)) ((REBINDfunbind_h $1) $0))) ((/\
   (((= :funid -> funid -> bool) $3) $1))
   (((= :funid long -> funid long -> bool) $2) $0))))))))))))) ((/\
   ((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h).
   ((! :(funbind_h -> bool) -> bool) (\(x1' :funbind_h).
   (((= :bool -> bool -> bool)
   (((= :funbind_h option -> funbind_h option -> bool)
   ((SOME :funbind_h -> funbind_h option) $1))
   ((SOME :funbind_h -> funbind_h option) $0)))
   (((= :funbind_h -> funbind_h -> bool) $1) $0))))))) ((/\ ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x1' :dec).
   (((= :bool -> bool -> bool) (((= :moddec_h -> moddec_h -> bool)
   (DECmoddec_h $1)) (DECmoddec_h $0))) (((= :dec -> dec -> bool) $1)
   $0))))))) ((/\ ((! :(strbind_h -> bool) -> bool) (\(x1 :strbind_h).
   ((! :(strbind_h -> bool) -> bool) (\(x1' :strbind_h).
   (((= :bool -> bool -> bool) (((= :moddec_h -> moddec_h -> bool)
   (STRUCTUREmoddec_h $1)) (STRUCTUREmoddec_h $0)))
   (((= :strbind_h -> strbind_h -> bool) $1) $0))))))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x1' :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2' :moddec_h).
   (((= :bool -> bool -> bool) (((= :moddec_h -> moddec_h -> bool)
   ((LOCALmoddec_h $3) $2)) ((LOCALmoddec_h $1) $0))) ((/\
   (((= :moddec_h -> moddec_h -> bool) $3) $1))
   (((= :moddec_h -> moddec_h -> bool) $2) $0)))))))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1' :strid long nonemptylist). (((= :bool -> bool -> bool)
   (((= :moddec_h -> moddec_h -> bool) (OPENmoddec_h $1))
   (OPENmoddec_h $0)))
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   $1) $0))))))) ((/\ ((! :(moddec_h -> bool) -> bool)
   (\(x1 :moddec_h). ((! :(moddec_h -> bool) -> bool)
   (\(x2 :moddec_h). ((! :(moddec_h -> bool) -> bool)
   (\(x1' :moddec_h). ((! :(moddec_h -> bool) -> bool)
   (\(x2' :moddec_h). (((= :bool -> bool -> bool)
   (((= :moddec_h -> moddec_h -> bool) ((SEQmoddec_h $3) $2))
   ((SEQmoddec_h $1) $0))) ((/\ (((= :moddec_h -> moddec_h -> bool)
   $3) $1)) (((= :moddec_h -> moddec_h -> bool) $2) $0))))))))))))
   ((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h).
   ((! :(funbind_h -> bool) -> bool) (\(x1' :funbind_h).
   (((= :bool -> bool -> bool) (((= :moddec_h -> moddec_h -> bool)
   (FUNCTORmoddec_h $1)) (FUNCTORmoddec_h $0)))
   (((= :funbind_h -> funbind_h -> bool) $1) $0)))))))))))) ((/\
   ((! :(sigexp_h -> bool) -> bool) (\(x1 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x1' :sigexp_h).
   (((= :bool -> bool -> bool)
   (((= :sigexp_h option -> sigexp_h option -> bool)
   ((SOME :sigexp_h -> sigexp_h option) $1))
   ((SOME :sigexp_h -> sigexp_h option) $0)))
   (((= :sigexp_h -> sigexp_h -> bool) $1) $0))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_h option -> bool) -> bool) (\(x2 :sigexp_h option).
   ((! :(strexp_h -> bool) -> bool) (\(x3 :strexp_h).
   ((! :(strbind_h option -> bool) -> bool) (\(x4 :strbind_h option).
   ((! :(strid -> bool) -> bool) (\(x1' :strid).
   ((! :(sigexp_h option -> bool) -> bool) (\(x2' :sigexp_h option).
   ((! :(strexp_h -> bool) -> bool) (\(x3' :strexp_h).
   ((! :(strbind_h option -> bool) -> bool) (\(x4' :strbind_h option).
   (((= :bool -> bool -> bool) (((= :strbind_h -> strbind_h -> bool)
   ((((BINDstrbind_h $7) $6) $5) $4)) ((((BINDstrbind_h $3) $2) $1)
   $0))) ((/\ (((= :strid -> strid -> bool) $7) $3)) ((/\
   (((= :sigexp_h option -> sigexp_h option -> bool) $6) $2)) ((/\
   (((= :strexp_h -> strexp_h -> bool) $5) $1))
   (((= :strbind_h option -> strbind_h option -> bool) $4)
   $0)))))))))))))))))))))) ((/\ ((! :(strbind_h -> bool) -> bool)
   (\(x1 :strbind_h). ((! :(strbind_h -> bool) -> bool)
   (\(x1' :strbind_h). (((= :bool -> bool -> bool)
   (((= :strbind_h option -> strbind_h option -> bool)
   ((SOME :strbind_h -> strbind_h option) $1))
   ((SOME :strbind_h -> strbind_h option) $0)))
   (((= :strbind_h -> strbind_h -> bool) $1) $0))))))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x1' :moddec_h).
   (((= :bool -> bool -> bool) (((= :strexp_h -> strexp_h -> bool)
   (STRUCTstrexp_h $1)) (STRUCTstrexp_h $0)))
   (((= :moddec_h -> moddec_h -> bool) $1) $0))))))) ((/\
   ((! :(strid long -> bool) -> bool) (\(x1 :strid long).
   ((! :(strid long -> bool) -> bool) (\(x1' :strid long).
   (((= :bool -> bool -> bool) (((= :strexp_h -> strexp_h -> bool)
   (LONGSTRIDstrexp_h $1)) (LONGSTRIDstrexp_h $0)))
   (((= :strid long -> strid long -> bool) $1) $0))))))) ((/\
   ((! :(funid long -> bool) -> bool) (\(x1 :funid long).
   ((! :(strexp_h -> bool) -> bool) (\(x2 :strexp_h).
   ((! :(funid long -> bool) -> bool) (\(x1' :funid long).
   ((! :(strexp_h -> bool) -> bool) (\(x2' :strexp_h).
   (((= :bool -> bool -> bool) (((= :strexp_h -> strexp_h -> bool)
   ((APPstrexp_h $3) $2)) ((APPstrexp_h $1) $0))) ((/\
   (((= :funid long -> funid long -> bool) $3) $1))
   (((= :strexp_h -> strexp_h -> bool) $2) $0))))))))))))
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(x2 :strexp_h).
   ((! :(moddec_h -> bool) -> bool) (\(x1' :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(x2' :strexp_h).
   (((= :bool -> bool -> bool) (((= :strexp_h -> strexp_h -> bool)
   ((LETstrexp_h $3) $2)) ((LETstrexp_h $1) $0))) ((/\
   (((= :moddec_h -> moddec_h -> bool) $3) $1))
   (((= :strexp_h -> strexp_h -> bool) $2) $0))))))))))))))))))))`),
 ((HOFMLStructures_constructors_distinct),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h option -> bool) -> bool) (\(x4 :sigexp_h option).
   ((! :(strexp_h -> bool) -> bool) (\(x5 :strexp_h).
   ((! :(funbind_h option -> bool) -> bool) (\(x6 :funbind_h option).
   ((! :(funid -> bool) -> bool) (\(x1' :funid).
   ((! :(funid long -> bool) -> bool) (\(x2' :funid long). (~
   (((= :funbind_h -> funbind_h -> bool) ((((((BINDfunbind_h $7) $6)
   $5) $4) $3) $2)) ((REBINDfunbind_h $1) $0)))))))))))))))))))) ((/\
   ((! :(funbind_h -> bool) -> bool) (\(x1' :funbind_h). (~
   (((= :funbind_h option -> funbind_h option -> bool)
   (NONE :funbind_h option)) ((SOME :funbind_h -> funbind_h option)
   $0)))))) ((/\ ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(strbind_h -> bool) -> bool) (\(x1' :strbind_h). (~
   (((= :moddec_h -> moddec_h -> bool) (DECmoddec_h $1))
   (STRUCTUREmoddec_h $0)))))))) ((/\ ((! :(dec -> bool) -> bool)
   (\(x1 :dec). ((! :(moddec_h -> bool) -> bool) (\(x1' :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2' :moddec_h). (~
   (((= :moddec_h -> moddec_h -> bool) (DECmoddec_h $2))
   ((LOCALmoddec_h $1) $0)))))))))) ((/\ ((! :(dec -> bool) -> bool)
   (\(x1 :dec). ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1' :strid long nonemptylist). (~
   (((= :moddec_h -> moddec_h -> bool) (DECmoddec_h $1)) (OPENmoddec_h
   $0)))))))) ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec). (~
   (((= :moddec_h -> moddec_h -> bool) (DECmoddec_h $0))
   EMPTYmoddec_h))))) ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(moddec_h -> bool) -> bool) (\(x1' :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2' :moddec_h). (~
   (((= :moddec_h -> moddec_h -> bool) (DECmoddec_h $2)) ((SEQmoddec_h
   $1) $0)))))))))) ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(funbind_h -> bool) -> bool) (\(x1' :funbind_h). (~
   (((= :moddec_h -> moddec_h -> bool) (DECmoddec_h $1))
   (FUNCTORmoddec_h $0)))))))) ((/\ ((! :(strbind_h -> bool) -> bool)
   (\(x1 :strbind_h). ((! :(moddec_h -> bool) -> bool)
   (\(x1' :moddec_h). ((! :(moddec_h -> bool) -> bool)
   (\(x2' :moddec_h). (~ (((= :moddec_h -> moddec_h -> bool)
   (STRUCTUREmoddec_h $2)) ((LOCALmoddec_h $1) $0)))))))))) ((/\
   ((! :(strbind_h -> bool) -> bool) (\(x1 :strbind_h).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1' :strid long nonemptylist). (~
   (((= :moddec_h -> moddec_h -> bool) (STRUCTUREmoddec_h $1))
   (OPENmoddec_h $0)))))))) ((/\ ((! :(strbind_h -> bool) -> bool)
   (\(x1 :strbind_h). (~ (((= :moddec_h -> moddec_h -> bool)
   (STRUCTUREmoddec_h $0)) EMPTYmoddec_h))))) ((/\
   ((! :(strbind_h -> bool) -> bool) (\(x1 :strbind_h).
   ((! :(moddec_h -> bool) -> bool) (\(x1' :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2' :moddec_h). (~
   (((= :moddec_h -> moddec_h -> bool) (STRUCTUREmoddec_h $2))
   ((SEQmoddec_h $1) $0)))))))))) ((/\
   ((! :(strbind_h -> bool) -> bool) (\(x1 :strbind_h).
   ((! :(funbind_h -> bool) -> bool) (\(x1' :funbind_h). (~
   (((= :moddec_h -> moddec_h -> bool) (STRUCTUREmoddec_h $1))
   (FUNCTORmoddec_h $0)))))))) ((/\ ((! :(moddec_h -> bool) -> bool)
   (\(x1 :moddec_h). ((! :(moddec_h -> bool) -> bool)
   (\(x2 :moddec_h). ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1' :strid long nonemptylist). (~
   (((= :moddec_h -> moddec_h -> bool) ((LOCALmoddec_h $2) $1))
   (OPENmoddec_h $0)))))))))) ((/\ ((! :(moddec_h -> bool) -> bool)
   (\(x1 :moddec_h). ((! :(moddec_h -> bool) -> bool)
   (\(x2 :moddec_h). (~ (((= :moddec_h -> moddec_h -> bool)
   ((LOCALmoddec_h $1) $0)) EMPTYmoddec_h))))))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x1' :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2' :moddec_h). (~
   (((= :moddec_h -> moddec_h -> bool) ((LOCALmoddec_h $3) $2))
   ((SEQmoddec_h $1) $0)))))))))))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   ((! :(funbind_h -> bool) -> bool) (\(x1' :funbind_h). (~
   (((= :moddec_h -> moddec_h -> bool) ((LOCALmoddec_h $2) $1))
   (FUNCTORmoddec_h $0)))))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (~
   (((= :moddec_h -> moddec_h -> bool) (OPENmoddec_h $0))
   EMPTYmoddec_h))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). ((! :(moddec_h -> bool) -> bool)
   (\(x1' :moddec_h). ((! :(moddec_h -> bool) -> bool)
   (\(x2' :moddec_h). (~ (((= :moddec_h -> moddec_h -> bool)
   (OPENmoddec_h $2)) ((SEQmoddec_h $1) $0)))))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). ((! :(funbind_h -> bool) -> bool)
   (\(x1' :funbind_h). (~ (((= :moddec_h -> moddec_h -> bool)
   (OPENmoddec_h $1)) (FUNCTORmoddec_h $0)))))))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1' :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2' :moddec_h). (~
   (((= :moddec_h -> moddec_h -> bool) EMPTYmoddec_h) ((SEQmoddec_h
   $1) $0)))))))) ((/\ ((! :(funbind_h -> bool) -> bool)
   (\(x1' :funbind_h). (~ (((= :moddec_h -> moddec_h -> bool)
   EMPTYmoddec_h) (FUNCTORmoddec_h $0))))))
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   ((! :(funbind_h -> bool) -> bool) (\(x1' :funbind_h). (~
   (((= :moddec_h -> moddec_h -> bool) ((SEQmoddec_h $2) $1))
   (FUNCTORmoddec_h $0)))))))))))))))))))))))))))))) ((/\
   ((! :(sigexp_h -> bool) -> bool) (\(x1' :sigexp_h). (~
   (((= :sigexp_h option -> sigexp_h option -> bool)
   (NONE :sigexp_h option)) ((SOME :sigexp_h -> sigexp_h option)
   $0)))))) ((/\ ((! :(strbind_h -> bool) -> bool) (\(x1' :strbind_h).
   (~ (((= :strbind_h option -> strbind_h option -> bool)
   (NONE :strbind_h option)) ((SOME :strbind_h -> strbind_h option)
   $0)))))) ((/\ ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(strid long -> bool) -> bool) (\(x1' :strid long). (~
   (((= :strexp_h -> strexp_h -> bool) (STRUCTstrexp_h $1))
   (LONGSTRIDstrexp_h $0)))))))) ((/\ ((! :(moddec_h -> bool) -> bool)
   (\(x1 :moddec_h). ((! :(funid long -> bool) -> bool)
   (\(x1' :funid long). ((! :(strexp_h -> bool) -> bool)
   (\(x2' :strexp_h). (~ (((= :strexp_h -> strexp_h -> bool)
   (STRUCTstrexp_h $2)) ((APPstrexp_h $1) $0)))))))))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x1' :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(x2' :strexp_h). (~
   (((= :strexp_h -> strexp_h -> bool) (STRUCTstrexp_h $2))
   ((LETstrexp_h $1) $0)))))))))) ((/\
   ((! :(strid long -> bool) -> bool) (\(x1 :strid long).
   ((! :(funid long -> bool) -> bool) (\(x1' :funid long).
   ((! :(strexp_h -> bool) -> bool) (\(x2' :strexp_h). (~
   (((= :strexp_h -> strexp_h -> bool) (LONGSTRIDstrexp_h $2))
   ((APPstrexp_h $1) $0)))))))))) ((/\
   ((! :(strid long -> bool) -> bool) (\(x1 :strid long).
   ((! :(moddec_h -> bool) -> bool) (\(x1' :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(x2' :strexp_h). (~
   (((= :strexp_h -> strexp_h -> bool) (LONGSTRIDstrexp_h $2))
   ((LETstrexp_h $1) $0)))))))))) ((! :(funid long -> bool) -> bool)
   (\(x1 :funid long). ((! :(strexp_h -> bool) -> bool)
   (\(x2 :strexp_h). ((! :(moddec_h -> bool) -> bool)
   (\(x1' :moddec_h). ((! :(strexp_h -> bool) -> bool)
   (\(x2' :strexp_h). (~ (((= :strexp_h -> strexp_h -> bool)
   ((APPstrexp_h $3) $2)) ((LETstrexp_h $1) $0)))))))))))))))))))))`),
 ((HOFMLStructures_unique_thm),
  [],
  `((! :(('d -> 'g -> 'b -> funid -> strid -> sigexp_h ->
         sigexp_h option -> strexp_h -> funbind_h option -> 'a) ->
        bool) -> bool)
   (\(BINDfunbind_h_case :'d -> 'g -> 'b -> funid -> strid ->
                          sigexp_h -> sigexp_h option -> strexp_h ->
                          funbind_h option -> 'a).
   ((! :((funid -> funid long -> 'a) -> bool) -> bool)
   (\(REBINDfunbind_h_case :funid -> funid long -> 'a).
   ((! :('b -> bool) -> bool)
   (\(funbind_h_moddec_h_strbind_h_strexp_h_NONE_funbind_h_case :'b).
   ((! :(('a -> funbind_h -> 'b) -> bool) -> bool)
   (\(funbind_h_moddec_h_strbind_h_strexp_h_SOME_funbind_h_case :'a ->
                                                                 funbind_h ->
                                                                 'b).
   ((! :((dec -> 'c) -> bool) -> bool)
   (\(DECmoddec_h_case :dec -> 'c).
   ((! :(('e -> strbind_h -> 'c) -> bool) -> bool)
   (\(STRUCTUREmoddec_h_case :'e -> strbind_h -> 'c).
   ((! :(('c -> 'c -> moddec_h -> moddec_h -> 'c) -> bool) -> bool)
   (\(LOCALmoddec_h_case :'c -> 'c -> moddec_h -> moddec_h -> 'c).
   ((! :((strid long nonemptylist -> 'c) -> bool) -> bool)
   (\(OPENmoddec_h_case :strid long nonemptylist -> 'c).
   ((! :('c -> bool) -> bool) (\(EMPTYmoddec_h_case :'c).
   ((! :(('c -> 'c -> moddec_h -> moddec_h -> 'c) -> bool) -> bool)
   (\(SEQmoddec_h_case :'c -> 'c -> moddec_h -> moddec_h -> 'c).
   ((! :(('a -> funbind_h -> 'c) -> bool) -> bool)
   (\(FUNCTORmoddec_h_case :'a -> funbind_h -> 'c).
   ((! :('d -> bool) -> bool)
   (\(funbind_h_moddec_h_strbind_h_strexp_h_NONE_sigexp_h_case :'d).
   ((! :((sigexp_h -> 'd) -> bool) -> bool)
   (\(funbind_h_moddec_h_strbind_h_strexp_h_SOME_sigexp_h_case :sigexp_h ->
                                                                'd).
   ((! :(('d -> 'g -> 'f -> strid -> sigexp_h option -> strexp_h ->
         strbind_h option -> 'e) -> bool) -> bool)
   (\(BINDstrbind_h_case :'d -> 'g -> 'f -> strid ->
                          sigexp_h option -> strexp_h ->
                          strbind_h option -> 'e).
   ((! :('f -> bool) -> bool)
   (\(funbind_h_moddec_h_strbind_h_strexp_h_NONE_strbind_h_case :'f).
   ((! :(('e -> strbind_h -> 'f) -> bool) -> bool)
   (\(funbind_h_moddec_h_strbind_h_strexp_h_SOME_strbind_h_case :'e ->
                                                                 strbind_h ->
                                                                 'f).
   ((! :(('c -> moddec_h -> 'g) -> bool) -> bool)
   (\(STRUCTstrexp_h_case :'c -> moddec_h -> 'g).
   ((! :((strid long -> 'g) -> bool) -> bool)
   (\(LONGSTRIDstrexp_h_case :strid long -> 'g).
   ((! :(('g -> funid long -> strexp_h -> 'g) -> bool) -> bool)
   (\(APPstrexp_h_case :'g -> funid long -> strexp_h -> 'g).
   ((! :(('c -> 'g -> moddec_h -> strexp_h -> 'g) -> bool) -> bool)
   (\(LETstrexp_h_case :'c -> 'g -> moddec_h -> strexp_h -> 'g).
   ((! :((funbind_h -> 'a) -> bool) -> bool) (\(fn1 :funbind_h -> 'a).
   ((! :((funbind_h option -> 'b) -> bool) -> bool)
   (\(fn2 :funbind_h option -> 'b).
   ((! :((moddec_h -> 'c) -> bool) -> bool) (\(fn3 :moddec_h -> 'c).
   ((! :((sigexp_h option -> 'd) -> bool) -> bool)
   (\(fn4 :sigexp_h option -> 'd).
   ((! :((strbind_h -> 'e) -> bool) -> bool) (\(fn5 :strbind_h -> 'e).
   ((! :((strbind_h option -> 'f) -> bool) -> bool)
   (\(fn6 :strbind_h option -> 'f).
   ((! :((strexp_h -> 'g) -> bool) -> bool) (\(fn7 :strexp_h -> 'g).
   ((! :((funbind_h -> 'a) -> bool) -> bool)
   (\(fn1' :funbind_h -> 'a).
   ((! :((funbind_h option -> 'b) -> bool) -> bool)
   (\(fn2' :funbind_h option -> 'b).
   ((! :((moddec_h -> 'c) -> bool) -> bool) (\(fn3' :moddec_h -> 'c).
   ((! :((sigexp_h option -> 'd) -> bool) -> bool)
   (\(fn4' :sigexp_h option -> 'd).
   ((! :((strbind_h -> 'e) -> bool) -> bool)
   (\(fn5' :strbind_h -> 'e).
   ((! :((strbind_h option -> 'f) -> bool) -> bool)
   (\(fn6' :strbind_h option -> 'f).
   ((! :((strexp_h -> 'g) -> bool) -> bool) (\(fn7' :strexp_h -> 'g).
   ((==> ((/\ ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(strid -> bool) -> bool) (\(y''''''''''''' :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(y'''''''''''' :sigexp_h).
   ((! :(sigexp_h option -> bool) -> bool)
   (\(y''''''''''' :sigexp_h option). ((! :(strexp_h -> bool) -> bool)
   (\(y'''''''''' :strexp_h). ((! :(funbind_h option -> bool) -> bool)
   (\(y''''''''' :funbind_h option). (((= :'a -> 'a -> bool) ($19
   ((((((BINDfunbind_h $5) $4) $3) $2) $1) $0))) ((((((((($39 ($16
   $2)) ($13 $1)) ($18 $0)) $5) $4) $3) $2) $1) $0))))))))))))))) ((/\
   ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(funid long -> bool) -> bool) (\(y'''''''' :funid long).
   (((= :'a -> 'a -> bool) ($15 ((REBINDfunbind_h $1) $0))) (($34 $1)
   $0))))))) ((/\ (((= :'b -> 'b -> bool) ($12
   (NONE :funbind_h option))) $31)) ((/\
   ((! :(funbind_h -> bool) -> bool) (\(y :funbind_h).
   (((= :'b -> 'b -> bool) ($13 ((SOME :funbind_h -> funbind_h option)
   $0))) (($31 ($14 $0)) $0))))) ((/\ ((! :(dec -> bool) -> bool)
   (\(y :dec). (((= :'c -> 'c -> bool) ($12 (DECmoddec_h $0))) ($30
   $0))))) ((/\ ((! :(strbind_h -> bool) -> bool) (\(y :strbind_h).
   (((= :'c -> 'c -> bool) ($12 (STRUCTUREmoddec_h $0))) (($29 ($10
   $0)) $0))))) ((/\ ((! :(moddec_h -> bool) -> bool) (\(y :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(y''''''' :moddec_h).
   (((= :'c -> 'c -> bool) ($13 ((LOCALmoddec_h $1) $0))) (((($29 ($13
   $1)) ($13 $0)) $1) $0))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(y :strid long nonemptylist). (((= :'c -> 'c -> bool) ($12
   (OPENmoddec_h $0))) ($27 $0))))) ((/\ (((= :'c -> 'c -> bool) ($11
   EMPTYmoddec_h)) $25)) ((/\ ((! :(moddec_h -> bool) -> bool)
   (\(y :moddec_h). ((! :(moddec_h -> bool) -> bool)
   (\(y'''''' :moddec_h). (((= :'c -> 'c -> bool) ($13 ((SEQmoddec_h
   $1) $0))) (((($26 ($13 $1)) ($13 $0)) $1) $0))))))) ((/\
   ((! :(funbind_h -> bool) -> bool) (\(y :funbind_h).
   (((= :'c -> 'c -> bool) ($12 (FUNCTORmoddec_h $0))) (($24 ($14 $0))
   $0))))) ((/\ (((= :'d -> 'd -> bool) ($10 (NONE :sigexp_h option)))
   $22)) ((/\ ((! :(sigexp_h -> bool) -> bool) (\(y :sigexp_h).
   (((= :'d -> 'd -> bool) ($11 ((SOME :sigexp_h -> sigexp_h option)
   $0))) ($22 $0))))) ((/\ ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(sigexp_h option -> bool) -> bool)
   (\(y''''' :sigexp_h option). ((! :(strexp_h -> bool) -> bool)
   (\(y'''' :strexp_h). ((! :(strbind_h option -> bool) -> bool)
   (\(y''' :strbind_h option). (((= :'e -> 'e -> bool) ($13
   ((((BINDstrbind_h $3) $2) $1) $0))) ((((((($24 ($14 $2)) ($11 $1))
   ($12 $0)) $3) $2) $1) $0))))))))))) ((/\ (((= :'f -> 'f -> bool)
   ($8 (NONE :strbind_h option))) $19)) ((/\
   ((! :(strbind_h -> bool) -> bool) (\(y :strbind_h).
   (((= :'f -> 'f -> bool) ($9 ((SOME :strbind_h -> strbind_h option)
   $0))) (($19 ($10 $0)) $0))))) ((/\ ((! :(moddec_h -> bool) -> bool)
   (\(y :moddec_h). (((= :'g -> 'g -> bool) ($8 (STRUCTstrexp_h $0)))
   (($18 ($12 $0)) $0))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(y :strid long). (((= :'g -> 'g -> bool) ($8 (LONGSTRIDstrexp_h
   $0))) ($17 $0))))) ((/\ ((! :(funid long -> bool) -> bool)
   (\(y :funid long). ((! :(strexp_h -> bool) -> bool)
   (\(y'' :strexp_h). (((= :'g -> 'g -> bool) ($9 ((APPstrexp_h $1)
   $0))) ((($17 ($9 $0)) $1) $0)))))))
   ((! :(moddec_h -> bool) -> bool) (\(y :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(y' :strexp_h).
   (((= :'g -> 'g -> bool) ($9 ((LETstrexp_h $1) $0))) (((($16 ($13
   $1)) ($9 $0)) $1) $0)))))))))))))))))))))))))) ((==> ((/\
   ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(strid -> bool) -> bool) (\(y''''''''''''' :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(y'''''''''''' :sigexp_h).
   ((! :(sigexp_h option -> bool) -> bool)
   (\(y''''''''''' :sigexp_h option). ((! :(strexp_h -> bool) -> bool)
   (\(y'''''''''' :strexp_h). ((! :(funbind_h option -> bool) -> bool)
   (\(y''''''''' :funbind_h option). (((= :'a -> 'a -> bool) ($12
   ((((((BINDfunbind_h $5) $4) $3) $2) $1) $0))) ((((((((($39 ($9 $2))
   ($6 $1)) ($11 $0)) $5) $4) $3) $2) $1) $0))))))))))))))) ((/\
   ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(funid long -> bool) -> bool) (\(y'''''''' :funid long).
   (((= :'a -> 'a -> bool) ($8 ((REBINDfunbind_h $1) $0))) (($34 $1)
   $0))))))) ((/\ (((= :'b -> 'b -> bool) ($5
   (NONE :funbind_h option))) $31)) ((/\
   ((! :(funbind_h -> bool) -> bool) (\(y :funbind_h).
   (((= :'b -> 'b -> bool) ($6 ((SOME :funbind_h -> funbind_h option)
   $0))) (($31 ($7 $0)) $0))))) ((/\ ((! :(dec -> bool) -> bool)
   (\(y :dec). (((= :'c -> 'c -> bool) ($5 (DECmoddec_h $0))) ($30
   $0))))) ((/\ ((! :(strbind_h -> bool) -> bool) (\(y :strbind_h).
   (((= :'c -> 'c -> bool) ($5 (STRUCTUREmoddec_h $0))) (($29 ($3 $0))
   $0))))) ((/\ ((! :(moddec_h -> bool) -> bool) (\(y :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(y''''''' :moddec_h).
   (((= :'c -> 'c -> bool) ($6 ((LOCALmoddec_h $1) $0))) (((($29 ($6
   $1)) ($6 $0)) $1) $0))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(y :strid long nonemptylist). (((= :'c -> 'c -> bool) ($5
   (OPENmoddec_h $0))) ($27 $0))))) ((/\ (((= :'c -> 'c -> bool) ($4
   EMPTYmoddec_h)) $25)) ((/\ ((! :(moddec_h -> bool) -> bool)
   (\(y :moddec_h). ((! :(moddec_h -> bool) -> bool)
   (\(y'''''' :moddec_h). (((= :'c -> 'c -> bool) ($6 ((SEQmoddec_h
   $1) $0))) (((($26 ($6 $1)) ($6 $0)) $1) $0))))))) ((/\
   ((! :(funbind_h -> bool) -> bool) (\(y :funbind_h).
   (((= :'c -> 'c -> bool) ($5 (FUNCTORmoddec_h $0))) (($24 ($7 $0))
   $0))))) ((/\ (((= :'d -> 'd -> bool) ($3 (NONE :sigexp_h option)))
   $22)) ((/\ ((! :(sigexp_h -> bool) -> bool) (\(y :sigexp_h).
   (((= :'d -> 'd -> bool) ($4 ((SOME :sigexp_h -> sigexp_h option)
   $0))) ($22 $0))))) ((/\ ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(sigexp_h option -> bool) -> bool)
   (\(y''''' :sigexp_h option). ((! :(strexp_h -> bool) -> bool)
   (\(y'''' :strexp_h). ((! :(strbind_h option -> bool) -> bool)
   (\(y''' :strbind_h option). (((= :'e -> 'e -> bool) ($6
   ((((BINDstrbind_h $3) $2) $1) $0))) ((((((($24 ($7 $2)) ($4 $1))
   ($5 $0)) $3) $2) $1) $0))))))))))) ((/\ (((= :'f -> 'f -> bool) ($1
   (NONE :strbind_h option))) $19)) ((/\
   ((! :(strbind_h -> bool) -> bool) (\(y :strbind_h).
   (((= :'f -> 'f -> bool) ($2 ((SOME :strbind_h -> strbind_h option)
   $0))) (($19 ($3 $0)) $0))))) ((/\ ((! :(moddec_h -> bool) -> bool)
   (\(y :moddec_h). (((= :'g -> 'g -> bool) ($1 (STRUCTstrexp_h $0)))
   (($18 ($5 $0)) $0))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(y :strid long). (((= :'g -> 'g -> bool) ($1 (LONGSTRIDstrexp_h
   $0))) ($17 $0))))) ((/\ ((! :(funid long -> bool) -> bool)
   (\(y :funid long). ((! :(strexp_h -> bool) -> bool)
   (\(y'' :strexp_h). (((= :'g -> 'g -> bool) ($2 ((APPstrexp_h $1)
   $0))) ((($17 ($2 $0)) $1) $0)))))))
   ((! :(moddec_h -> bool) -> bool) (\(y :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(y' :strexp_h).
   (((= :'g -> 'g -> bool) ($2 ((LETstrexp_h $1) $0))) (((($16 ($6
   $1)) ($2 $0)) $1) $0)))))))))))))))))))))))))) ((/\
   (((= :(funbind_h -> 'a) -> (funbind_h -> 'a) -> bool) $13) $6))
   ((/\
   (((= :(funbind_h option -> 'b) -> (funbind_h option -> 'b) -> bool)
   $12) $5)) ((/\ (((= :(moddec_h -> 'c) -> (moddec_h -> 'c) -> bool)
   $11) $4)) ((/\
   (((= :(sigexp_h option -> 'd) -> (sigexp_h option -> 'd) -> bool)
   $10) $3)) ((/\
   (((= :(strbind_h -> 'e) -> (strbind_h -> 'e) -> bool) $9) $2)) ((/\
   (((= :(strbind_h option -> 'f) -> (strbind_h option -> 'f) -> bool)
   $8) $1)) (((= :(strexp_h -> 'g) -> (strexp_h -> 'g) -> bool) $7)
   $0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((HOFMLStructures_induction_thm),
  [],
  `((! :((funbind_h -> bool) -> bool) -> bool)
   (\(funbind_h_Prop :funbind_h -> bool).
   ((! :((funbind_h option -> bool) -> bool) -> bool)
   (\(funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_Prop :funbind_h
                                                                   option ->
                                                                   bool).
   ((! :((moddec_h -> bool) -> bool) -> bool)
   (\(moddec_h_Prop :moddec_h -> bool).
   ((! :((sigexp_h option -> bool) -> bool) -> bool)
   (\(sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_Prop :sigexp_h
                                                                  option ->
                                                                  bool).
   ((! :((strbind_h -> bool) -> bool) -> bool)
   (\(strbind_h_Prop :strbind_h -> bool).
   ((! :((strbind_h option -> bool) -> bool) -> bool)
   (\(strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_Prop :strbind_h
                                                                   option ->
                                                                   bool).
   ((! :((strexp_h -> bool) -> bool) -> bool)
   (\(strexp_h_Prop :strexp_h -> bool). ((==> ((/\
   ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(strid -> bool) -> bool) (\(y''''''''''''' :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(y'''''''''''' :sigexp_h).
   ((! :(sigexp_h option -> bool) -> bool)
   (\(y''''''''''' :sigexp_h option). ((! :(strexp_h -> bool) -> bool)
   (\(y'''''''''' :strexp_h). ((! :(funbind_h option -> bool) -> bool)
   (\(y''''''''' :funbind_h option). ((==> ($9 $2)) ((==> ($6 $1))
   ((==> ($11 $0)) ($12 ((((((BINDfunbind_h $5) $4) $3) $2) $1)
   $0)))))))))))))))))) ((/\ ((! :(funid -> bool) -> bool)
   (\(y :funid). ((! :(funid long -> bool) -> bool)
   (\(y'''''''' :funid long). ($8 ((REBINDfunbind_h $1) $0))))))) ((/\
   ($5 (NONE :funbind_h option))) ((/\
   ((! :(funbind_h -> bool) -> bool) (\(y :funbind_h). ((==> ($7 $0))
   ($6 ((SOME :funbind_h -> funbind_h option) $0)))))) ((/\
   ((! :(dec -> bool) -> bool) (\(y :dec). ($5 (DECmoddec_h $0)))))
   ((/\ ((! :(strbind_h -> bool) -> bool) (\(y :strbind_h). ((==> ($3
   $0)) ($5 (STRUCTUREmoddec_h $0)))))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(y :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(y''''''' :moddec_h). ((==> ($6
   $1)) ((==> ($6 $0)) ($6 ((LOCALmoddec_h $1) $0))))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(y :strid long nonemptylist). ($5 (OPENmoddec_h $0))))) ((/\ ($4
   EMPTYmoddec_h)) ((/\ ((! :(moddec_h -> bool) -> bool)
   (\(y :moddec_h). ((! :(moddec_h -> bool) -> bool)
   (\(y'''''' :moddec_h). ((==> ($6 $1)) ((==> ($6 $0)) ($6
   ((SEQmoddec_h $1) $0))))))))) ((/\
   ((! :(funbind_h -> bool) -> bool) (\(y :funbind_h). ((==> ($7 $0))
   ($5 (FUNCTORmoddec_h $0)))))) ((/\ ($3 (NONE :sigexp_h option)))
   ((/\ ((! :(sigexp_h -> bool) -> bool) (\(y :sigexp_h). ($4
   ((SOME :sigexp_h -> sigexp_h option) $0))))) ((/\
   ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(sigexp_h option -> bool) -> bool)
   (\(y''''' :sigexp_h option). ((! :(strexp_h -> bool) -> bool)
   (\(y'''' :strexp_h). ((! :(strbind_h option -> bool) -> bool)
   (\(y''' :strbind_h option). ((==> ($7 $2)) ((==> ($4 $1)) ((==> ($5
   $0)) ($6 ((((BINDstrbind_h $3) $2) $1) $0)))))))))))))) ((/\ ($1
   (NONE :strbind_h option))) ((/\ ((! :(strbind_h -> bool) -> bool)
   (\(y :strbind_h). ((==> ($3 $0)) ($2
   ((SOME :strbind_h -> strbind_h option) $0)))))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(y :moddec_h). ((==> ($5 $0))
   ($1 (STRUCTstrexp_h $0)))))) ((/\
   ((! :(strid long -> bool) -> bool) (\(y :strid long). ($1
   (LONGSTRIDstrexp_h $0))))) ((/\ ((! :(funid long -> bool) -> bool)
   (\(y :funid long). ((! :(strexp_h -> bool) -> bool)
   (\(y'' :strexp_h). ((==> ($2 $0)) ($2 ((APPstrexp_h $1) $0))))))))
   ((! :(moddec_h -> bool) -> bool) (\(y :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(y' :strexp_h). ((==> ((/\ ($6
   $1)) ($2 $0))) ($2 ((LETstrexp_h $1) $0)))))))))))))))))))))))))))
   ((/\ ((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h). ($7
   $0)))) ((/\ ((! :(funbind_h option -> bool) -> bool)
   (\(x2 :funbind_h option). ($6 $0)))) ((/\
   ((! :(moddec_h -> bool) -> bool) (\(x3 :moddec_h). ($5 $0)))) ((/\
   ((! :(sigexp_h option -> bool) -> bool) (\(x4 :sigexp_h option).
   ($4 $0)))) ((/\ ((! :(strbind_h -> bool) -> bool)
   (\(x5 :strbind_h). ($3 $0)))) ((/\
   ((! :(strbind_h option -> bool) -> bool) (\(x6 :strbind_h option).
   ($2 $0)))) ((! :(strexp_h -> bool) -> bool) (\(x7 :strexp_h). ($1
   $0))))))))))))))))))))))))`),
 ((HOFMLStructures_rec_thm),
  [],
  `((! :(('d -> 'g -> 'b -> funid -> strid -> sigexp_h ->
         sigexp_h option -> strexp_h -> funbind_h option -> 'a) ->
        bool) -> bool)
   (\(BINDfunbind_h_case :'d -> 'g -> 'b -> funid -> strid ->
                          sigexp_h -> sigexp_h option -> strexp_h ->
                          funbind_h option -> 'a).
   ((! :((funid -> funid long -> 'a) -> bool) -> bool)
   (\(REBINDfunbind_h_case :funid -> funid long -> 'a).
   ((! :('b -> bool) -> bool)
   (\(funbind_h_moddec_h_strbind_h_strexp_h_NONE_funbind_h_case :'b).
   ((! :(('a -> funbind_h -> 'b) -> bool) -> bool)
   (\(funbind_h_moddec_h_strbind_h_strexp_h_SOME_funbind_h_case :'a ->
                                                                 funbind_h ->
                                                                 'b).
   ((! :((dec -> 'c) -> bool) -> bool)
   (\(DECmoddec_h_case :dec -> 'c).
   ((! :(('e -> strbind_h -> 'c) -> bool) -> bool)
   (\(STRUCTUREmoddec_h_case :'e -> strbind_h -> 'c).
   ((! :(('c -> 'c -> moddec_h -> moddec_h -> 'c) -> bool) -> bool)
   (\(LOCALmoddec_h_case :'c -> 'c -> moddec_h -> moddec_h -> 'c).
   ((! :((strid long nonemptylist -> 'c) -> bool) -> bool)
   (\(OPENmoddec_h_case :strid long nonemptylist -> 'c).
   ((! :('c -> bool) -> bool) (\(EMPTYmoddec_h_case :'c).
   ((! :(('c -> 'c -> moddec_h -> moddec_h -> 'c) -> bool) -> bool)
   (\(SEQmoddec_h_case :'c -> 'c -> moddec_h -> moddec_h -> 'c).
   ((! :(('a -> funbind_h -> 'c) -> bool) -> bool)
   (\(FUNCTORmoddec_h_case :'a -> funbind_h -> 'c).
   ((! :('d -> bool) -> bool)
   (\(funbind_h_moddec_h_strbind_h_strexp_h_NONE_sigexp_h_case :'d).
   ((! :((sigexp_h -> 'd) -> bool) -> bool)
   (\(funbind_h_moddec_h_strbind_h_strexp_h_SOME_sigexp_h_case :sigexp_h ->
                                                                'd).
   ((! :(('d -> 'g -> 'f -> strid -> sigexp_h option -> strexp_h ->
         strbind_h option -> 'e) -> bool) -> bool)
   (\(BINDstrbind_h_case :'d -> 'g -> 'f -> strid ->
                          sigexp_h option -> strexp_h ->
                          strbind_h option -> 'e).
   ((! :('f -> bool) -> bool)
   (\(funbind_h_moddec_h_strbind_h_strexp_h_NONE_strbind_h_case :'f).
   ((! :(('e -> strbind_h -> 'f) -> bool) -> bool)
   (\(funbind_h_moddec_h_strbind_h_strexp_h_SOME_strbind_h_case :'e ->
                                                                 strbind_h ->
                                                                 'f).
   ((! :(('c -> moddec_h -> 'g) -> bool) -> bool)
   (\(STRUCTstrexp_h_case :'c -> moddec_h -> 'g).
   ((! :((strid long -> 'g) -> bool) -> bool)
   (\(LONGSTRIDstrexp_h_case :strid long -> 'g).
   ((! :(('g -> funid long -> strexp_h -> 'g) -> bool) -> bool)
   (\(APPstrexp_h_case :'g -> funid long -> strexp_h -> 'g).
   ((! :(('c -> 'g -> moddec_h -> strexp_h -> 'g) -> bool) -> bool)
   (\(LETstrexp_h_case :'c -> 'g -> moddec_h -> strexp_h -> 'g).
   ((? :((funbind_h -> 'a) -> bool) -> bool) (\(y :funbind_h -> 'a).
   ((? :((funbind_h option -> 'b) -> bool) -> bool)
   (\(y'''''' :funbind_h option -> 'b).
   ((? :((moddec_h -> 'c) -> bool) -> bool)
   (\(y''''' :moddec_h -> 'c).
   ((? :((sigexp_h option -> 'd) -> bool) -> bool)
   (\(y'''' :sigexp_h option -> 'd).
   ((? :((strbind_h -> 'e) -> bool) -> bool)
   (\(y''' :strbind_h -> 'e).
   ((? :((strbind_h option -> 'f) -> bool) -> bool)
   (\(y'' :strbind_h option -> 'f).
   ((? :((strexp_h -> 'g) -> bool) -> bool) (\(y' :strexp_h -> 'g).
   ((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h option -> bool) -> bool) (\(x4 :sigexp_h option).
   ((! :(strexp_h -> bool) -> bool) (\(x5 :strexp_h).
   ((! :(funbind_h option -> bool) -> bool) (\(x6 :funbind_h option).
   (((= :'a -> 'a -> bool) ($12 ((((((BINDfunbind_h $5) $4) $3) $2)
   $1) $0))) ((((((((($32 ($9 $2)) ($6 $1)) ($11 $0)) $5) $4) $3) $2)
   $1) $0))))))))))))))) ((/\ ((! :(funid -> bool) -> bool)
   (\(x1 :funid). ((! :(funid long -> bool) -> bool)
   (\(x2 :funid long). (((= :'a -> 'a -> bool) ($8 ((REBINDfunbind_h
   $1) $0))) (($27 $1) $0))))))) ((/\ (((= :'b -> 'b -> bool) ($5
   (NONE :funbind_h option))) $24)) ((/\
   ((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h).
   (((= :'b -> 'b -> bool) ($6 ((SOME :funbind_h -> funbind_h option)
   $0))) (($24 ($7 $0)) $0))))) ((/\ ((! :(dec -> bool) -> bool)
   (\(x1 :dec). (((= :'c -> 'c -> bool) ($5 (DECmoddec_h $0))) ($23
   $0))))) ((/\ ((! :(strbind_h -> bool) -> bool) (\(x1 :strbind_h).
   (((= :'c -> 'c -> bool) ($5 (STRUCTUREmoddec_h $0))) (($22 ($3 $0))
   $0))))) ((/\ ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(moddec_h -> bool) -> bool) (\(x2 :moddec_h).
   (((= :'c -> 'c -> bool) ($6 ((LOCALmoddec_h $1) $0))) (((($22 ($6
   $1)) ($6 $0)) $1) $0))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :'c -> 'c -> bool) ($5
   (OPENmoddec_h $0))) ($20 $0))))) ((/\ (((= :'c -> 'c -> bool) ($4
   EMPTYmoddec_h)) $18)) ((/\ ((! :(moddec_h -> bool) -> bool)
   (\(x1 :moddec_h). ((! :(moddec_h -> bool) -> bool)
   (\(x2 :moddec_h). (((= :'c -> 'c -> bool) ($6 ((SEQmoddec_h $1)
   $0))) (((($19 ($6 $1)) ($6 $0)) $1) $0))))))) ((/\
   ((! :(funbind_h -> bool) -> bool) (\(x1 :funbind_h).
   (((= :'c -> 'c -> bool) ($5 (FUNCTORmoddec_h $0))) (($17 ($7 $0))
   $0))))) ((/\ (((= :'d -> 'd -> bool) ($3 (NONE :sigexp_h option)))
   $15)) ((/\ ((! :(sigexp_h -> bool) -> bool) (\(x1 :sigexp_h).
   (((= :'d -> 'd -> bool) ($4 ((SOME :sigexp_h -> sigexp_h option)
   $0))) ($15 $0))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(x1 :strid). ((! :(sigexp_h option -> bool) -> bool)
   (\(x2 :sigexp_h option). ((! :(strexp_h -> bool) -> bool)
   (\(x3 :strexp_h). ((! :(strbind_h option -> bool) -> bool)
   (\(x4 :strbind_h option). (((= :'e -> 'e -> bool) ($6
   ((((BINDstrbind_h $3) $2) $1) $0))) ((((((($17 ($7 $2)) ($4 $1))
   ($5 $0)) $3) $2) $1) $0))))))))))) ((/\ (((= :'f -> 'f -> bool) ($1
   (NONE :strbind_h option))) $12)) ((/\
   ((! :(strbind_h -> bool) -> bool) (\(x1 :strbind_h).
   (((= :'f -> 'f -> bool) ($2 ((SOME :strbind_h -> strbind_h option)
   $0))) (($12 ($3 $0)) $0))))) ((/\ ((! :(moddec_h -> bool) -> bool)
   (\(x1 :moddec_h). (((= :'g -> 'g -> bool) ($1 (STRUCTstrexp_h $0)))
   (($11 ($5 $0)) $0))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(x1 :strid long). (((= :'g -> 'g -> bool) ($1 (LONGSTRIDstrexp_h
   $0))) ($10 $0))))) ((/\ ((! :(funid long -> bool) -> bool)
   (\(x1 :funid long). ((! :(strexp_h -> bool) -> bool)
   (\(x2 :strexp_h). (((= :'g -> 'g -> bool) ($2 ((APPstrexp_h $1)
   $0))) ((($10 ($2 $0)) $1) $0)))))))
   ((! :(moddec_h -> bool) -> bool) (\(x1 :moddec_h).
   ((! :(strexp_h -> bool) -> bool) (\(x2 :strexp_h).
   (((= :'g -> 'g -> bool) ($2 ((LETstrexp_h $1) $0))) (((($9 ($6 $1))
   ($2 $0)) $1)
   $0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h_Axiom),
  [],
  `((! :(('a -> 'a -> 'a -> funid -> strid -> sigexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         'a) -> bool) -> bool)
   (\(f0 :'a -> 'a -> 'a -> funid -> strid -> sigexp_h ->
          joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
          joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
          joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
          'a). ((! :((funid -> funid long -> 'a) -> bool) -> bool)
   (\(f1 :funid -> funid long -> 'a). ((! :('a -> bool) -> bool)
   (\(e0 :'a).
   ((! :(('a ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         'a) -> bool) -> bool)
   (\(f2 :'a ->
          joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
          'a). ((! :((dec -> 'a) -> bool) -> bool) (\(f3 :dec -> 'a).
   ((! :(('a ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         'a) -> bool) -> bool)
   (\(f4 :'a ->
          joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
          'a).
   ((! :(('a -> 'a ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         'a) -> bool) -> bool)
   (\(f5 :'a -> 'a ->
          joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
          joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
          'a). ((! :((strid long nonemptylist -> 'a) -> bool) -> bool)
   (\(f6 :strid long nonemptylist -> 'a). ((! :('a -> bool) -> bool)
   (\(e1 :'a).
   ((! :(('a -> 'a ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         'a) -> bool) -> bool)
   (\(f7 :'a -> 'a ->
          joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
          joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
          'a).
   ((! :(('a ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         'a) -> bool) -> bool)
   (\(f8 :'a ->
          joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
          'a). ((! :('a -> bool) -> bool) (\(e2 :'a).
   ((! :((sigexp_h -> 'a) -> bool) -> bool) (\(f9 :sigexp_h -> 'a).
   ((! :(('a -> 'a -> 'a -> strid ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         'a) -> bool) -> bool)
   (\(f10 :'a -> 'a -> 'a -> strid ->
           joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
           joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
           joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
           'a). ((! :('a -> bool) -> bool) (\(e3 :'a).
   ((! :(('a ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         'a) -> bool) -> bool)
   (\(f11 :'a ->
           joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
           'a).
   ((! :(('a ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         'a) -> bool) -> bool)
   (\(f12 :'a ->
           joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
           'a). ((! :((strid long -> 'a) -> bool) -> bool)
   (\(f13 :strid long -> 'a).
   ((! :(('a -> funid long ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         'a) -> bool) -> bool)
   (\(f14 :'a -> funid long ->
           joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
           'a).
   ((! :(('a -> 'a ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
         'a) -> bool) -> bool)
   (\(f15 :'a -> 'a ->
           joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
           joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
           'a).
   ((?! :((joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
          'a) -> bool) -> bool)
   (\(fn :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
          'a). ((/\ ((! :(funid -> bool) -> bool) (\(f' :funid).
   ((! :(strid -> bool) -> bool) (\(s0 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(s1 :sigexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j3 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :'a -> 'a -> bool) ($6 ((((((JOINT_int_BINDfunbind_h $5) $4)
   $3) $2) $1) $0))) ((((((((($26 ($6 $2)) ($6 $1)) ($6 $0)) $5) $4)
   $3) $2) $1) $0))))))))))))))) ((/\ ((! :(funid -> bool) -> bool)
   (\(f' :funid). ((! :(funid long -> bool) -> bool)
   (\(l :funid long). (((= :'a -> 'a -> bool) ($2
   ((JOINT_int_REBINDfunbind_h $1) $0))) (($21 $1) $0))))))) ((/\
   (((= :'a -> 'a -> bool) ($0
   JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_funbind_h))
   $18)) ((/\
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :'a -> 'a -> bool) ($1
   (JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_funbind_h
   $0))) (($18 ($1 $0)) $0))))) ((/\ ((! :(dec -> bool) -> bool)
   (\(d :dec). (((= :'a -> 'a -> bool) ($1 (JOINT_int_DECmoddec_h
   $0))) ($17 $0))))) ((/\
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_STRUCTUREmoddec_h $0)))
   (($16 ($1 $0)) $0))))) ((/\
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_LOCALmoddec_h $1) $0)))
   (((($16 ($2 $1)) ($2 $0)) $1) $0))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist). (((= :'a -> 'a -> bool) ($1
   (JOINT_int_OPENmoddec_h $0))) ($14 $0))))) ((/\
   (((= :'a -> 'a -> bool) ($0 JOINT_int_EMPTYmoddec_h)) $12)) ((/\
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_SEQmoddec_h $1) $0)))
   (((($13 ($2 $1)) ($2 $0)) $1) $0))))))) ((/\
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_FUNCTORmoddec_h $0))) (($11
   ($1 $0)) $0))))) ((/\ (((= :'a -> 'a -> bool) ($0
   JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_sigexp_h))
   $9)) ((/\ ((! :(sigexp_h -> bool) -> bool) (\(s :sigexp_h).
   (((= :'a -> 'a -> bool) ($1
   (JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_sigexp_h
   $0))) ($9 $0))))) ((/\ ((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j3 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :'a -> 'a -> bool) ($4 ((((JOINT_int_BINDstrbind_h $3) $2) $1)
   $0))) ((((((($11 ($4 $2)) ($4 $1)) ($4 $0)) $3) $2) $1)
   $0))))))))))) ((/\ (((= :'a -> 'a -> bool) ($0
   JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_NONE_strbind_h))
   $6)) ((/\
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :'a -> 'a -> bool) ($1
   (JOINT_int_funbind_h_moddec_h_strbind_h_strexp_h_SOME_strbind_h
   $0))) (($6 ($1 $0)) $0))))) ((/\
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_STRUCTstrexp_h $0))) (($5
   ($1 $0)) $0))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(l :strid long). (((= :'a -> 'a -> bool) ($1
   (JOINT_int_LONGSTRIDstrexp_h $0))) ($4 $0))))) ((/\
   ((! :(funid long -> bool) -> bool) (\(l' :funid long).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_APPstrexp_h $1) $0))) ((($4
   ($2 $0)) $1) $0)))))))
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j1 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   ((! :(joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h ->
        bool) -> bool)
   (\(j2 :joint_ty_funbind_h_funbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_moddec_h_sigexp_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strbind_h_strbind_h_option_funbind_h_moddec_h_strbind_h_strexp_h_strexp_h).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_LETstrexp_h $1) $0)))
   (((($3 ($2 $1)) ($2 $0)) $1)
   $0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((sigdec_h_Axiom),
  [],
  `((! :((sigbind_h -> 'a) -> bool) -> bool) (\(f0 :sigbind_h -> 'a).
   ((! :('a -> bool) -> bool) (\(e :'a).
   ((! :(('a -> 'a -> sigdec_h -> sigdec_h -> 'a) -> bool) -> bool)
   (\(f1 :'a -> 'a -> sigdec_h -> sigdec_h -> 'a).
   ((?! :((sigdec_h -> 'a) -> bool) -> bool) (\(fn :sigdec_h -> 'a).
   ((/\ ((! :(sigbind_h -> bool) -> bool) (\(s :sigbind_h).
   (((= :'a -> 'a -> bool) ($1 (SIGNATUREsigdec_h $0))) ($4 $0)))))
   ((/\ (((= :'a -> 'a -> bool) ($0 EMPTYsigdec_h)) $2))
   ((! :(sigdec_h -> bool) -> bool) (\(s1 :sigdec_h).
   ((! :(sigdec_h -> bool) -> bool) (\(s2 :sigdec_h).
   (((= :'a -> 'a -> bool) ($2 ((SEQsigdec_h $1) $0))) (((($3 ($2 $1))
   ($2 $0)) $1) $0))))))))))))))))`),
 ((HOFMLSigbindcases_thm),
  [],
  `((/\ ((! :(sigbind_h -> bool) -> bool) (\(x1 :sigbind_h).
   ((? :(sigid -> bool) -> bool) (\(y :sigid).
   ((? :(sigexp_h -> bool) -> bool) (\(y'' :sigexp_h).
   ((? :(sigbind_h option -> bool) -> bool) (\(y' :sigbind_h option).
   (((= :sigbind_h -> sigbind_h -> bool) $3) (((BINDsigbind_h $2) $1)
   $0))))))))))) ((! :(sigbind_h option -> bool) -> bool)
   (\(x2 :sigbind_h option). ((\/
   (((= :sigbind_h option -> sigbind_h option -> bool) $0)
   (NONE :sigbind_h option))) ((? :(sigbind_h -> bool) -> bool)
   (\(y :sigbind_h).
   (((= :sigbind_h option -> sigbind_h option -> bool) $1)
   ((SOME :sigbind_h -> sigbind_h option) $0))))))))`),
 ((HOFMLSigbindconstructors_one_one),
  [],
  `((/\ ((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   ((! :(sigexp_h -> bool) -> bool) (\(x2 :sigexp_h).
   ((! :(sigbind_h option -> bool) -> bool) (\(x3 :sigbind_h option).
   ((! :(sigid -> bool) -> bool) (\(x1' :sigid).
   ((! :(sigexp_h -> bool) -> bool) (\(x2' :sigexp_h).
   ((! :(sigbind_h option -> bool) -> bool) (\(x3' :sigbind_h option).
   (((= :bool -> bool -> bool) (((= :sigbind_h -> sigbind_h -> bool)
   (((BINDsigbind_h $5) $4) $3)) (((BINDsigbind_h $2) $1) $0))) ((/\
   (((= :sigid -> sigid -> bool) $5) $2)) ((/\
   (((= :sigexp_h -> sigexp_h -> bool) $4) $1))
   (((= :sigbind_h option -> sigbind_h option -> bool) $3)
   $0))))))))))))))))) ((! :(sigbind_h -> bool) -> bool)
   (\(x1 :sigbind_h). ((! :(sigbind_h -> bool) -> bool)
   (\(x1' :sigbind_h). (((= :bool -> bool -> bool)
   (((= :sigbind_h option -> sigbind_h option -> bool)
   ((SOME :sigbind_h -> sigbind_h option) $1))
   ((SOME :sigbind_h -> sigbind_h option) $0)))
   (((= :sigbind_h -> sigbind_h -> bool) $1) $0)))))))`),
 ((HOFMLSigbindconstructors_distinct),
  [],
  `((! :(sigbind_h -> bool) -> bool) (\(x1' :sigbind_h). (~
   (((= :sigbind_h option -> sigbind_h option -> bool)
   (NONE :sigbind_h option)) ((SOME :sigbind_h -> sigbind_h option)
   $0)))))`),
 ((HOFMLSigbindunique_thm),
  [],
  `((! :(('b -> sigid -> sigexp_h -> sigbind_h option -> 'a) ->
        bool) -> bool)
   (\(BINDsigbind_h_case :'b -> sigid -> sigexp_h ->
                          sigbind_h option -> 'a).
   ((! :('b -> bool) -> bool) (\(sigbind_h_NONE_sigbind_h_case :'b).
   ((! :(('a -> sigbind_h -> 'b) -> bool) -> bool)
   (\(sigbind_h_SOME_sigbind_h_case :'a -> sigbind_h -> 'b).
   ((! :((sigbind_h -> 'a) -> bool) -> bool) (\(fn1 :sigbind_h -> 'a).
   ((! :((sigbind_h option -> 'b) -> bool) -> bool)
   (\(fn2 :sigbind_h option -> 'b).
   ((! :((sigbind_h -> 'a) -> bool) -> bool)
   (\(fn1' :sigbind_h -> 'a).
   ((! :((sigbind_h option -> 'b) -> bool) -> bool)
   (\(fn2' :sigbind_h option -> 'b). ((==> ((/\
   ((! :(sigid -> bool) -> bool) (\(y :sigid).
   ((! :(sigexp_h -> bool) -> bool) (\(y'' :sigexp_h).
   ((! :(sigbind_h option -> bool) -> bool) (\(y' :sigbind_h option).
   (((= :'a -> 'a -> bool) ($6 (((BINDsigbind_h $2) $1) $0))) (((($9
   ($5 $0)) $2) $1) $0))))))))) ((/\ (((= :'b -> 'b -> bool) ($2
   (NONE :sigbind_h option))) $5)) ((! :(sigbind_h -> bool) -> bool)
   (\(y :sigbind_h). (((= :'b -> 'b -> bool) ($3
   ((SOME :sigbind_h -> sigbind_h option) $0))) (($5 ($4 $0))
   $0))))))) ((==> ((/\ ((! :(sigid -> bool) -> bool) (\(y :sigid).
   ((! :(sigexp_h -> bool) -> bool) (\(y'' :sigexp_h).
   ((! :(sigbind_h option -> bool) -> bool) (\(y' :sigbind_h option).
   (((= :'a -> 'a -> bool) ($4 (((BINDsigbind_h $2) $1) $0))) (((($9
   ($3 $0)) $2) $1) $0))))))))) ((/\ (((= :'b -> 'b -> bool) ($0
   (NONE :sigbind_h option))) $5)) ((! :(sigbind_h -> bool) -> bool)
   (\(y :sigbind_h). (((= :'b -> 'b -> bool) ($1
   ((SOME :sigbind_h -> sigbind_h option) $0))) (($5 ($2 $0))
   $0))))))) ((/\
   (((= :(sigbind_h -> 'a) -> (sigbind_h -> 'a) -> bool) $3) $1))
   (((= :(sigbind_h option -> 'b) -> (sigbind_h option -> 'b) -> bool)
   $2) $0))))))))))))))))))`),
 ((HOFMLSigbindinduction_thm),
  [],
  `((! :((sigbind_h -> bool) -> bool) -> bool)
   (\(sigbind_h_Prop :sigbind_h -> bool).
   ((! :((sigbind_h option -> bool) -> bool) -> bool)
   (\(sigbind_h_option_sigbind_h_Prop :sigbind_h option -> bool).
   ((==> ((/\ ((! :(sigid -> bool) -> bool) (\(y :sigid).
   ((! :(sigexp_h -> bool) -> bool) (\(y'' :sigexp_h).
   ((! :(sigbind_h option -> bool) -> bool) (\(y' :sigbind_h option).
   ((==> ($3 $0)) ($4 (((BINDsigbind_h $2) $1) $0)))))))))) ((/\ ($0
   (NONE :sigbind_h option))) ((! :(sigbind_h -> bool) -> bool)
   (\(y :sigbind_h). ((==> ($2 $0)) ($1
   ((SOME :sigbind_h -> sigbind_h option) $0)))))))) ((/\
   ((! :(sigbind_h -> bool) -> bool) (\(x1 :sigbind_h). ($2 $0))))
   ((! :(sigbind_h option -> bool) -> bool) (\(x2 :sigbind_h option).
   ($1 $0)))))))))`),
 ((HOFMLSigbindrec_thm),
  [],
  `((! :(('b -> sigid -> sigexp_h -> sigbind_h option -> 'a) ->
        bool) -> bool)
   (\(BINDsigbind_h_case :'b -> sigid -> sigexp_h ->
                          sigbind_h option -> 'a).
   ((! :('b -> bool) -> bool) (\(sigbind_h_NONE_sigbind_h_case :'b).
   ((! :(('a -> sigbind_h -> 'b) -> bool) -> bool)
   (\(sigbind_h_SOME_sigbind_h_case :'a -> sigbind_h -> 'b).
   ((? :((sigbind_h -> 'a) -> bool) -> bool) (\(y :sigbind_h -> 'a).
   ((? :((sigbind_h option -> 'b) -> bool) -> bool)
   (\(y' :sigbind_h option -> 'b). ((/\ ((! :(sigid -> bool) -> bool)
   (\(x1 :sigid). ((! :(sigexp_h -> bool) -> bool) (\(x2 :sigexp_h).
   ((! :(sigbind_h option -> bool) -> bool) (\(x3 :sigbind_h option).
   (((= :'a -> 'a -> bool) ($4 (((BINDsigbind_h $2) $1) $0))) (((($7
   ($3 $0)) $2) $1) $0))))))))) ((/\ (((= :'b -> 'b -> bool) ($0
   (NONE :sigbind_h option))) $3)) ((! :(sigbind_h -> bool) -> bool)
   (\(x1 :sigbind_h). (((= :'b -> 'b -> bool) ($1
   ((SOME :sigbind_h -> sigbind_h option) $0))) (($3 ($2 $0))
   $0))))))))))))))))`),
 ((joint_ty_sigbind_h_sigbind_h_option_sigbind_h_Axiom),
  [],
  `((! :(('a -> sigid -> sigexp_h ->
         joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> 'a) ->
        bool) -> bool)
   (\(f0 :'a -> sigid -> sigexp_h ->
          joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> 'a).
   ((! :('a -> bool) -> bool) (\(e :'a).
   ((! :(('a -> joint_ty_sigbind_h_sigbind_h_option_sigbind_h ->
         'a) -> bool) -> bool)
   (\(f1 :'a -> joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> 'a).
   ((?! :((joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> 'a) ->
         bool) -> bool)
   (\(fn :joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> 'a). ((/\
   ((! :(sigid -> bool) -> bool) (\(s0 :sigid).
   ((! :(sigexp_h -> bool) -> bool) (\(s1 :sigexp_h).
   ((! :(joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> bool) ->
        bool) (\(j :joint_ty_sigbind_h_sigbind_h_option_sigbind_h).
   (((= :'a -> 'a -> bool) ($3 (((JOINT_int_BINDsigbind_h $2) $1)
   $0))) (((($6 ($3 $0)) $2) $1) $0))))))))) ((/\
   (((= :'a -> 'a -> bool) ($0 JOINT_int_sigbind_h_NONE_sigbind_h))
   $2))
   ((! :(joint_ty_sigbind_h_sigbind_h_option_sigbind_h -> bool) ->
        bool) (\(j :joint_ty_sigbind_h_sigbind_h_option_sigbind_h).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_sigbind_h_SOME_sigbind_h
   $0))) (($2 ($1 $0)) $0))))))))))))))`),
 ((HOFMLSignatures_cases_thm),
  [],
  `((/\ ((! :(sigexp_h -> bool) -> bool) (\(x1 :sigexp_h). ((\/
   ((? :(spec_h -> bool) -> bool) (\(y :spec_h).
   (((= :sigexp_h -> sigexp_h -> bool) $1) (SIGsigexp_h $0)))))
   ((? :(sigid -> bool) -> bool) (\(y :sigid).
   (((= :sigexp_h -> sigexp_h -> bool) $1) (SIGIDsigexp_h $0))))))))
   ((/\ ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h). ((\/
   ((? :(valdesc -> bool) -> bool) (\(y :valdesc).
   (((= :spec_h -> spec_h -> bool) $1) (VALspec_h $0))))) ((\/
   ((? :(exdesc -> bool) -> bool) (\(y :exdesc).
   (((= :spec_h -> spec_h -> bool) $1) (EXCEPTIONspec_h $0))))) ((\/
   ((? :(strdesc_h -> bool) -> bool) (\(y :strdesc_h).
   (((= :spec_h -> spec_h -> bool) $1) (STRUCTUREspec_h $0))))) ((\/
   ((? :(spec_h -> bool) -> bool) (\(y :spec_h).
   ((? :(spec_h -> bool) -> bool) (\(y' :spec_h).
   (((= :spec_h -> spec_h -> bool) $2) ((LOCALspec_h $1) $0)))))))
   ((\/ ((? :(strid long nonemptylist -> bool) -> bool)
   (\(y :strid long nonemptylist). (((= :spec_h -> spec_h -> bool) $1)
   (OPENspec_h $0))))) ((\/ ((? :(sigid nonemptylist -> bool) -> bool)
   (\(y :sigid nonemptylist). (((= :spec_h -> spec_h -> bool) $1)
   (INCLUDEspec_h $0))))) ((\/ (((= :spec_h -> spec_h -> bool) $0)
   EMPTYspec_h)) ((\/ ((? :(spec_h -> bool) -> bool) (\(y :spec_h).
   ((? :(spec_h -> bool) -> bool) (\(y' :spec_h).
   (((= :spec_h -> spec_h -> bool) $2) ((SEQspec_h $1) $0)))))))
   ((? :(funid -> bool) -> bool) (\(y :funid).
   ((? :(strid -> bool) -> bool) (\(y''' :strid).
   ((? :(sigexp_h -> bool) -> bool) (\(y'' :sigexp_h).
   ((? :(sigexp_h -> bool) -> bool) (\(y' :sigexp_h).
   (((= :spec_h -> spec_h -> bool) $4) ((((FUNCTORspec_h $3) $2) $1)
   $0))))))))))))))))))))) ((/\ ((! :(strdesc_h -> bool) -> bool)
   (\(x3 :strdesc_h). ((? :(strid -> bool) -> bool) (\(y :strid).
   ((? :(sigexp_h -> bool) -> bool) (\(y'' :sigexp_h).
   ((? :(strdesc_h option -> bool) -> bool) (\(y' :strdesc_h option).
   (((= :strdesc_h -> strdesc_h -> bool) $3) (((STRIDstrdesc_h $2) $1)
   $0))))))))))) ((! :(strdesc_h option -> bool) -> bool)
   (\(x4 :strdesc_h option). ((\/
   (((= :strdesc_h option -> strdesc_h option -> bool) $0)
   (NONE :strdesc_h option))) ((? :(strdesc_h -> bool) -> bool)
   (\(y :strdesc_h).
   (((= :strdesc_h option -> strdesc_h option -> bool) $1)
   ((SOME :strdesc_h -> strdesc_h option) $0))))))))))`),
 ((HOFMLSignatures_constructors_one_one),
  [],
  `((/\ ((/\ ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x1' :spec_h).
   (((= :bool -> bool -> bool) (((= :sigexp_h -> sigexp_h -> bool)
   (SIGsigexp_h $1)) (SIGsigexp_h $0)))
   (((= :spec_h -> spec_h -> bool) $1) $0)))))))
   ((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   ((! :(sigid -> bool) -> bool) (\(x1' :sigid).
   (((= :bool -> bool -> bool) (((= :sigexp_h -> sigexp_h -> bool)
   (SIGIDsigexp_h $1)) (SIGIDsigexp_h $0)))
   (((= :sigid -> sigid -> bool) $1) $0)))))))) ((/\ ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   ((! :(valdesc -> bool) -> bool) (\(x1' :valdesc).
   (((= :bool -> bool -> bool) (((= :spec_h -> spec_h -> bool)
   (VALspec_h $1)) (VALspec_h $0))) (((= :valdesc -> valdesc -> bool)
   $1) $0))))))) ((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   ((! :(exdesc -> bool) -> bool) (\(x1' :exdesc).
   (((= :bool -> bool -> bool) (((= :spec_h -> spec_h -> bool)
   (EXCEPTIONspec_h $1)) (EXCEPTIONspec_h $0)))
   (((= :exdesc -> exdesc -> bool) $1) $0))))))) ((/\
   ((! :(strdesc_h -> bool) -> bool) (\(x1 :strdesc_h).
   ((! :(strdesc_h -> bool) -> bool) (\(x1' :strdesc_h).
   (((= :bool -> bool -> bool) (((= :spec_h -> spec_h -> bool)
   (STRUCTUREspec_h $1)) (STRUCTUREspec_h $0)))
   (((= :strdesc_h -> strdesc_h -> bool) $1) $0))))))) ((/\
   ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x1' :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2' :spec_h).
   (((= :bool -> bool -> bool) (((= :spec_h -> spec_h -> bool)
   ((LOCALspec_h $3) $2)) ((LOCALspec_h $1) $0))) ((/\
   (((= :spec_h -> spec_h -> bool) $3) $1))
   (((= :spec_h -> spec_h -> bool) $2) $0)))))))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1' :strid long nonemptylist). (((= :bool -> bool -> bool)
   (((= :spec_h -> spec_h -> bool) (OPENspec_h $1)) (OPENspec_h $0)))
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   $1) $0))))))) ((/\ ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist).
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1' :sigid nonemptylist). (((= :bool -> bool -> bool)
   (((= :spec_h -> spec_h -> bool) (INCLUDEspec_h $1)) (INCLUDEspec_h
   $0))) (((= :sigid nonemptylist -> sigid nonemptylist -> bool) $1)
   $0))))))) ((/\ ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x1' :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2' :spec_h).
   (((= :bool -> bool -> bool) (((= :spec_h -> spec_h -> bool)
   ((SEQspec_h $3) $2)) ((SEQspec_h $1) $0))) ((/\
   (((= :spec_h -> spec_h -> bool) $3) $1))
   (((= :spec_h -> spec_h -> bool) $2) $0))))))))))))
   ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4 :sigexp_h).
   ((! :(funid -> bool) -> bool) (\(x1' :funid).
   ((! :(strid -> bool) -> bool) (\(x2' :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3' :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4' :sigexp_h).
   (((= :bool -> bool -> bool) (((= :spec_h -> spec_h -> bool)
   ((((FUNCTORspec_h $7) $6) $5) $4)) ((((FUNCTORspec_h $3) $2) $1)
   $0))) ((/\ (((= :funid -> funid -> bool) $7) $3)) ((/\
   (((= :strid -> strid -> bool) $6) $2)) ((/\
   (((= :sigexp_h -> sigexp_h -> bool) $5) $1))
   (((= :sigexp_h -> sigexp_h -> bool) $4)
   $0))))))))))))))))))))))))))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(x1 :strid). ((! :(sigexp_h -> bool) -> bool) (\(x2 :sigexp_h).
   ((! :(strdesc_h option -> bool) -> bool) (\(x3 :strdesc_h option).
   ((! :(strid -> bool) -> bool) (\(x1' :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x2' :sigexp_h).
   ((! :(strdesc_h option -> bool) -> bool) (\(x3' :strdesc_h option).
   (((= :bool -> bool -> bool) (((= :strdesc_h -> strdesc_h -> bool)
   (((STRIDstrdesc_h $5) $4) $3)) (((STRIDstrdesc_h $2) $1) $0))) ((/\
   (((= :strid -> strid -> bool) $5) $2)) ((/\
   (((= :sigexp_h -> sigexp_h -> bool) $4) $1))
   (((= :strdesc_h option -> strdesc_h option -> bool) $3)
   $0))))))))))))))))) ((! :(strdesc_h -> bool) -> bool)
   (\(x1 :strdesc_h). ((! :(strdesc_h -> bool) -> bool)
   (\(x1' :strdesc_h). (((= :bool -> bool -> bool)
   (((= :strdesc_h option -> strdesc_h option -> bool)
   ((SOME :strdesc_h -> strdesc_h option) $1))
   ((SOME :strdesc_h -> strdesc_h option) $0)))
   (((= :strdesc_h -> strdesc_h -> bool) $1) $0)))))))))`),
 ((HOFMLSignatures_constructors_distinct),
  [],
  `((/\ ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(sigid -> bool) -> bool) (\(x1' :sigid). (~
   (((= :sigexp_h -> sigexp_h -> bool) (SIGsigexp_h $1))
   (SIGIDsigexp_h $0)))))))) ((/\ ((/\ ((! :(valdesc -> bool) -> bool)
   (\(x1 :valdesc). ((! :(exdesc -> bool) -> bool) (\(x1' :exdesc). (~
   (((= :spec_h -> spec_h -> bool) (VALspec_h $1)) (EXCEPTIONspec_h
   $0)))))))) ((/\ ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   ((! :(strdesc_h -> bool) -> bool) (\(x1' :strdesc_h). (~
   (((= :spec_h -> spec_h -> bool) (VALspec_h $1)) (STRUCTUREspec_h
   $0)))))))) ((/\ ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   ((! :(spec_h -> bool) -> bool) (\(x1' :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2' :spec_h). (~
   (((= :spec_h -> spec_h -> bool) (VALspec_h $2)) ((LOCALspec_h $1)
   $0)))))))))) ((/\ ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1' :strid long nonemptylist). (~
   (((= :spec_h -> spec_h -> bool) (VALspec_h $1)) (OPENspec_h
   $0)))))))) ((/\ ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1' :sigid nonemptylist). (~ (((= :spec_h -> spec_h -> bool)
   (VALspec_h $1)) (INCLUDEspec_h $0)))))))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc). (~
   (((= :spec_h -> spec_h -> bool) (VALspec_h $0)) EMPTYspec_h)))))
   ((/\ ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   ((! :(spec_h -> bool) -> bool) (\(x1' :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2' :spec_h). (~
   (((= :spec_h -> spec_h -> bool) (VALspec_h $2)) ((SEQspec_h $1)
   $0)))))))))) ((/\ ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   ((! :(funid -> bool) -> bool) (\(x1' :funid).
   ((! :(strid -> bool) -> bool) (\(x2' :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3' :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4' :sigexp_h). (~
   (((= :spec_h -> spec_h -> bool) (VALspec_h $4)) ((((FUNCTORspec_h
   $3) $2) $1) $0)))))))))))))) ((/\ ((! :(exdesc -> bool) -> bool)
   (\(x1 :exdesc). ((! :(strdesc_h -> bool) -> bool)
   (\(x1' :strdesc_h). (~ (((= :spec_h -> spec_h -> bool)
   (EXCEPTIONspec_h $1)) (STRUCTUREspec_h $0)))))))) ((/\
   ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   ((! :(spec_h -> bool) -> bool) (\(x1' :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2' :spec_h). (~
   (((= :spec_h -> spec_h -> bool) (EXCEPTIONspec_h $2)) ((LOCALspec_h
   $1) $0)))))))))) ((/\ ((! :(exdesc -> bool) -> bool)
   (\(x1 :exdesc). ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1' :strid long nonemptylist). (~
   (((= :spec_h -> spec_h -> bool) (EXCEPTIONspec_h $1)) (OPENspec_h
   $0)))))))) ((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1' :sigid nonemptylist). (~ (((= :spec_h -> spec_h -> bool)
   (EXCEPTIONspec_h $1)) (INCLUDEspec_h $0)))))))) ((/\
   ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc). (~
   (((= :spec_h -> spec_h -> bool) (EXCEPTIONspec_h $0))
   EMPTYspec_h))))) ((/\ ((! :(exdesc -> bool) -> bool)
   (\(x1 :exdesc). ((! :(spec_h -> bool) -> bool) (\(x1' :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2' :spec_h). (~
   (((= :spec_h -> spec_h -> bool) (EXCEPTIONspec_h $2)) ((SEQspec_h
   $1) $0)))))))))) ((/\ ((! :(exdesc -> bool) -> bool)
   (\(x1 :exdesc). ((! :(funid -> bool) -> bool) (\(x1' :funid).
   ((! :(strid -> bool) -> bool) (\(x2' :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3' :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4' :sigexp_h). (~
   (((= :spec_h -> spec_h -> bool) (EXCEPTIONspec_h $4))
   ((((FUNCTORspec_h $3) $2) $1) $0)))))))))))))) ((/\
   ((! :(strdesc_h -> bool) -> bool) (\(x1 :strdesc_h).
   ((! :(spec_h -> bool) -> bool) (\(x1' :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2' :spec_h). (~
   (((= :spec_h -> spec_h -> bool) (STRUCTUREspec_h $2)) ((LOCALspec_h
   $1) $0)))))))))) ((/\ ((! :(strdesc_h -> bool) -> bool)
   (\(x1 :strdesc_h). ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1' :strid long nonemptylist). (~
   (((= :spec_h -> spec_h -> bool) (STRUCTUREspec_h $1)) (OPENspec_h
   $0)))))))) ((/\ ((! :(strdesc_h -> bool) -> bool)
   (\(x1 :strdesc_h). ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1' :sigid nonemptylist). (~ (((= :spec_h -> spec_h -> bool)
   (STRUCTUREspec_h $1)) (INCLUDEspec_h $0)))))))) ((/\
   ((! :(strdesc_h -> bool) -> bool) (\(x1 :strdesc_h). (~
   (((= :spec_h -> spec_h -> bool) (STRUCTUREspec_h $0))
   EMPTYspec_h))))) ((/\ ((! :(strdesc_h -> bool) -> bool)
   (\(x1 :strdesc_h). ((! :(spec_h -> bool) -> bool) (\(x1' :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2' :spec_h). (~
   (((= :spec_h -> spec_h -> bool) (STRUCTUREspec_h $2)) ((SEQspec_h
   $1) $0)))))))))) ((/\ ((! :(strdesc_h -> bool) -> bool)
   (\(x1 :strdesc_h). ((! :(funid -> bool) -> bool) (\(x1' :funid).
   ((! :(strid -> bool) -> bool) (\(x2' :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3' :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4' :sigexp_h). (~
   (((= :spec_h -> spec_h -> bool) (STRUCTUREspec_h $4))
   ((((FUNCTORspec_h $3) $2) $1) $0)))))))))))))) ((/\
   ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1' :strid long nonemptylist). (~
   (((= :spec_h -> spec_h -> bool) ((LOCALspec_h $2) $1)) (OPENspec_h
   $0)))))))))) ((/\ ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1' :sigid nonemptylist). (~ (((= :spec_h -> spec_h -> bool)
   ((LOCALspec_h $2) $1)) (INCLUDEspec_h $0)))))))))) ((/\
   ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h). (~
   (((= :spec_h -> spec_h -> bool) ((LOCALspec_h $1) $0))
   EMPTYspec_h))))))) ((/\ ((! :(spec_h -> bool) -> bool)
   (\(x1 :spec_h). ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x1' :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2' :spec_h). (~
   (((= :spec_h -> spec_h -> bool) ((LOCALspec_h $3) $2)) ((SEQspec_h
   $1) $0)))))))))))) ((/\ ((! :(spec_h -> bool) -> bool)
   (\(x1 :spec_h). ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   ((! :(funid -> bool) -> bool) (\(x1' :funid).
   ((! :(strid -> bool) -> bool) (\(x2' :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3' :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4' :sigexp_h). (~
   (((= :spec_h -> spec_h -> bool) ((LOCALspec_h $5) $4))
   ((((FUNCTORspec_h $3) $2) $1) $0)))))))))))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1' :sigid nonemptylist). (~ (((= :spec_h -> spec_h -> bool)
   (OPENspec_h $1)) (INCLUDEspec_h $0)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (~ (((= :spec_h -> spec_h -> bool)
   (OPENspec_h $0)) EMPTYspec_h))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). ((! :(spec_h -> bool) -> bool)
   (\(x1' :spec_h). ((! :(spec_h -> bool) -> bool) (\(x2' :spec_h). (~
   (((= :spec_h -> spec_h -> bool) (OPENspec_h $2)) ((SEQspec_h $1)
   $0)))))))))) ((/\ ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). ((! :(funid -> bool) -> bool)
   (\(x1' :funid). ((! :(strid -> bool) -> bool) (\(x2' :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3' :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4' :sigexp_h). (~
   (((= :spec_h -> spec_h -> bool) (OPENspec_h $4)) ((((FUNCTORspec_h
   $3) $2) $1) $0)))))))))))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (~ (((= :spec_h -> spec_h -> bool)
   (INCLUDEspec_h $0)) EMPTYspec_h))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). ((! :(spec_h -> bool) -> bool)
   (\(x1' :spec_h). ((! :(spec_h -> bool) -> bool) (\(x2' :spec_h). (~
   (((= :spec_h -> spec_h -> bool) (INCLUDEspec_h $2)) ((SEQspec_h $1)
   $0)))))))))) ((/\ ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). ((! :(funid -> bool) -> bool)
   (\(x1' :funid). ((! :(strid -> bool) -> bool) (\(x2' :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3' :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4' :sigexp_h). (~
   (((= :spec_h -> spec_h -> bool) (INCLUDEspec_h $4))
   ((((FUNCTORspec_h $3) $2) $1) $0)))))))))))))) ((/\
   ((! :(spec_h -> bool) -> bool) (\(x1' :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2' :spec_h). (~
   (((= :spec_h -> spec_h -> bool) EMPTYspec_h) ((SEQspec_h $1)
   $0)))))))) ((/\ ((! :(funid -> bool) -> bool) (\(x1' :funid).
   ((! :(strid -> bool) -> bool) (\(x2' :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3' :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4' :sigexp_h). (~
   (((= :spec_h -> spec_h -> bool) EMPTYspec_h) ((((FUNCTORspec_h $3)
   $2) $1) $0)))))))))))) ((! :(spec_h -> bool) -> bool)
   (\(x1 :spec_h). ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   ((! :(funid -> bool) -> bool) (\(x1' :funid).
   ((! :(strid -> bool) -> bool) (\(x2' :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3' :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4' :sigexp_h). (~
   (((= :spec_h -> spec_h -> bool) ((SEQspec_h $5) $4))
   ((((FUNCTORspec_h $3) $2) $1)
   $0)))))))))))))))))))))))))))))))))))))))))))))))))))
   ((! :(strdesc_h -> bool) -> bool) (\(x1' :strdesc_h). (~
   (((= :strdesc_h option -> strdesc_h option -> bool)
   (NONE :strdesc_h option)) ((SOME :strdesc_h -> strdesc_h option)
   $0)))))))`),
 ((HOFMLSignatures_unique_thm),
  [],
  `((! :(('b -> spec_h -> 'a) -> bool) -> bool)
   (\(SIGsigexp_h_case :'b -> spec_h -> 'a).
   ((! :((sigid -> 'a) -> bool) -> bool)
   (\(SIGIDsigexp_h_case :sigid -> 'a).
   ((! :((valdesc -> 'b) -> bool) -> bool)
   (\(VALspec_h_case :valdesc -> 'b).
   ((! :((exdesc -> 'b) -> bool) -> bool)
   (\(EXCEPTIONspec_h_case :exdesc -> 'b).
   ((! :(('c -> strdesc_h -> 'b) -> bool) -> bool)
   (\(STRUCTUREspec_h_case :'c -> strdesc_h -> 'b).
   ((! :(('b -> 'b -> spec_h -> spec_h -> 'b) -> bool) -> bool)
   (\(LOCALspec_h_case :'b -> 'b -> spec_h -> spec_h -> 'b).
   ((! :((strid long nonemptylist -> 'b) -> bool) -> bool)
   (\(OPENspec_h_case :strid long nonemptylist -> 'b).
   ((! :((sigid nonemptylist -> 'b) -> bool) -> bool)
   (\(INCLUDEspec_h_case :sigid nonemptylist -> 'b).
   ((! :('b -> bool) -> bool) (\(EMPTYspec_h_case :'b).
   ((! :(('b -> 'b -> spec_h -> spec_h -> 'b) -> bool) -> bool)
   (\(SEQspec_h_case :'b -> 'b -> spec_h -> spec_h -> 'b).
   ((! :(('a -> 'a -> funid -> strid -> sigexp_h -> sigexp_h -> 'b) ->
        bool) -> bool)
   (\(FUNCTORspec_h_case :'a -> 'a -> funid -> strid -> sigexp_h ->
                          sigexp_h -> 'b).
   ((! :(('a -> 'd -> strid -> sigexp_h -> strdesc_h option -> 'c) ->
        bool) -> bool)
   (\(STRIDstrdesc_h_case :'a -> 'd -> strid -> sigexp_h ->
                           strdesc_h option -> 'c).
   ((! :('d -> bool) -> bool)
   (\(sigexp_h_spec_h_strdesc_h_NONE_strdesc_h_case :'d).
   ((! :(('c -> strdesc_h -> 'd) -> bool) -> bool)
   (\(sigexp_h_spec_h_strdesc_h_SOME_strdesc_h_case :'c ->
                                                     strdesc_h -> 'd).
   ((! :((sigexp_h -> 'a) -> bool) -> bool) (\(fn1 :sigexp_h -> 'a).
   ((! :((spec_h -> 'b) -> bool) -> bool) (\(fn2 :spec_h -> 'b).
   ((! :((strdesc_h -> 'c) -> bool) -> bool) (\(fn3 :strdesc_h -> 'c).
   ((! :((strdesc_h option -> 'd) -> bool) -> bool)
   (\(fn4 :strdesc_h option -> 'd).
   ((! :((sigexp_h -> 'a) -> bool) -> bool) (\(fn1' :sigexp_h -> 'a).
   ((! :((spec_h -> 'b) -> bool) -> bool) (\(fn2' :spec_h -> 'b).
   ((! :((strdesc_h -> 'c) -> bool) -> bool)
   (\(fn3' :strdesc_h -> 'c).
   ((! :((strdesc_h option -> 'd) -> bool) -> bool)
   (\(fn4' :strdesc_h option -> 'd). ((==> ((/\
   ((! :(spec_h -> bool) -> bool) (\(y :spec_h).
   (((= :'a -> 'a -> bool) ($8 (SIGsigexp_h $0))) (($22 ($7 $0))
   $0))))) ((/\ ((! :(sigid -> bool) -> bool) (\(y :sigid).
   (((= :'a -> 'a -> bool) ($8 (SIGIDsigexp_h $0))) ($21 $0))))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(y :valdesc).
   (((= :'b -> 'b -> bool) ($7 (VALspec_h $0))) ($20 $0))))) ((/\
   ((! :(exdesc -> bool) -> bool) (\(y :exdesc).
   (((= :'b -> 'b -> bool) ($7 (EXCEPTIONspec_h $0))) ($19 $0)))))
   ((/\ ((! :(strdesc_h -> bool) -> bool) (\(y :strdesc_h).
   (((= :'b -> 'b -> bool) ($7 (STRUCTUREspec_h $0))) (($18 ($6 $0))
   $0))))) ((/\ ((! :(spec_h -> bool) -> bool) (\(y :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(y''''''' :spec_h).
   (((= :'b -> 'b -> bool) ($8 ((LOCALspec_h $1) $0))) (((($18 ($8
   $1)) ($8 $0)) $1) $0))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(y :strid long nonemptylist). (((= :'b -> 'b -> bool) ($7
   (OPENspec_h $0))) ($16 $0))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(y :sigid nonemptylist). (((= :'b -> 'b -> bool) ($7
   (INCLUDEspec_h $0))) ($15 $0))))) ((/\ (((= :'b -> 'b -> bool) ($6
   EMPTYspec_h)) $13)) ((/\ ((! :(spec_h -> bool) -> bool)
   (\(y :spec_h). ((! :(spec_h -> bool) -> bool) (\(y'''''' :spec_h).
   (((= :'b -> 'b -> bool) ($8 ((SEQspec_h $1) $0))) (((($14 ($8 $1))
   ($8 $0)) $1) $0))))))) ((/\ ((! :(funid -> bool) -> bool)
   (\(y :funid). ((! :(strid -> bool) -> bool) (\(y''''' :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(y'''' :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(y''' :sigexp_h).
   (((= :'b -> 'b -> bool) ($10 ((((FUNCTORspec_h $3) $2) $1) $0)))
   (((((($15 ($11 $1)) ($11 $0)) $3) $2) $1) $0))))))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(y'' :sigexp_h).
   ((! :(strdesc_h option -> bool) -> bool) (\(y' :strdesc_h option).
   (((= :'c -> 'c -> bool) ($8 (((STRIDstrdesc_h $2) $1) $0)))
   ((((($13 ($10 $1)) ($7 $0)) $2) $1) $0))))))))) ((/\
   (((= :'d -> 'd -> bool) ($4 (NONE :strdesc_h option))) $9))
   ((! :(strdesc_h -> bool) -> bool) (\(y :strdesc_h).
   (((= :'d -> 'd -> bool) ($5 ((SOME :strdesc_h -> strdesc_h option)
   $0))) (($9 ($6 $0)) $0)))))))))))))))))) ((==> ((/\
   ((! :(spec_h -> bool) -> bool) (\(y :spec_h).
   (((= :'a -> 'a -> bool) ($4 (SIGsigexp_h $0))) (($22 ($3 $0))
   $0))))) ((/\ ((! :(sigid -> bool) -> bool) (\(y :sigid).
   (((= :'a -> 'a -> bool) ($4 (SIGIDsigexp_h $0))) ($21 $0))))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(y :valdesc).
   (((= :'b -> 'b -> bool) ($3 (VALspec_h $0))) ($20 $0))))) ((/\
   ((! :(exdesc -> bool) -> bool) (\(y :exdesc).
   (((= :'b -> 'b -> bool) ($3 (EXCEPTIONspec_h $0))) ($19 $0)))))
   ((/\ ((! :(strdesc_h -> bool) -> bool) (\(y :strdesc_h).
   (((= :'b -> 'b -> bool) ($3 (STRUCTUREspec_h $0))) (($18 ($2 $0))
   $0))))) ((/\ ((! :(spec_h -> bool) -> bool) (\(y :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(y''''''' :spec_h).
   (((= :'b -> 'b -> bool) ($4 ((LOCALspec_h $1) $0))) (((($18 ($4
   $1)) ($4 $0)) $1) $0))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(y :strid long nonemptylist). (((= :'b -> 'b -> bool) ($3
   (OPENspec_h $0))) ($16 $0))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(y :sigid nonemptylist). (((= :'b -> 'b -> bool) ($3
   (INCLUDEspec_h $0))) ($15 $0))))) ((/\ (((= :'b -> 'b -> bool) ($2
   EMPTYspec_h)) $13)) ((/\ ((! :(spec_h -> bool) -> bool)
   (\(y :spec_h). ((! :(spec_h -> bool) -> bool) (\(y'''''' :spec_h).
   (((= :'b -> 'b -> bool) ($4 ((SEQspec_h $1) $0))) (((($14 ($4 $1))
   ($4 $0)) $1) $0))))))) ((/\ ((! :(funid -> bool) -> bool)
   (\(y :funid). ((! :(strid -> bool) -> bool) (\(y''''' :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(y'''' :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(y''' :sigexp_h).
   (((= :'b -> 'b -> bool) ($6 ((((FUNCTORspec_h $3) $2) $1) $0)))
   (((((($15 ($7 $1)) ($7 $0)) $3) $2) $1) $0))))))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(y'' :sigexp_h).
   ((! :(strdesc_h option -> bool) -> bool) (\(y' :strdesc_h option).
   (((= :'c -> 'c -> bool) ($4 (((STRIDstrdesc_h $2) $1) $0)))
   ((((($13 ($6 $1)) ($3 $0)) $2) $1) $0))))))))) ((/\
   (((= :'d -> 'd -> bool) ($0 (NONE :strdesc_h option))) $9))
   ((! :(strdesc_h -> bool) -> bool) (\(y :strdesc_h).
   (((= :'d -> 'd -> bool) ($1 ((SOME :strdesc_h -> strdesc_h option)
   $0))) (($9 ($2 $0)) $0)))))))))))))))))) ((/\
   (((= :(sigexp_h -> 'a) -> (sigexp_h -> 'a) -> bool) $7) $3)) ((/\
   (((= :(spec_h -> 'b) -> (spec_h -> 'b) -> bool) $6) $2)) ((/\
   (((= :(strdesc_h -> 'c) -> (strdesc_h -> 'c) -> bool) $5) $1))
   (((= :(strdesc_h option -> 'd) -> (strdesc_h option -> 'd) -> bool)
   $4) $0))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((HOFMLSignatures_induction_thm),
  [],
  `((! :((sigexp_h -> bool) -> bool) -> bool)
   (\(sigexp_h_Prop :sigexp_h -> bool).
   ((! :((spec_h -> bool) -> bool) -> bool)
   (\(spec_h_Prop :spec_h -> bool).
   ((! :((strdesc_h -> bool) -> bool) -> bool)
   (\(strdesc_h_Prop :strdesc_h -> bool).
   ((! :((strdesc_h option -> bool) -> bool) -> bool)
   (\(strdesc_h_option_sigexp_h_spec_h_strdesc_h_Prop :strdesc_h
                                                       option ->
                                                       bool). ((==>
   ((/\ ((! :(spec_h -> bool) -> bool) (\(y :spec_h). ((==> ($3 $0))
   ($4 (SIGsigexp_h $0)))))) ((/\ ((! :(sigid -> bool) -> bool)
   (\(y :sigid). ($4 (SIGIDsigexp_h $0))))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(y :valdesc). ($3 (VALspec_h
   $0))))) ((/\ ((! :(exdesc -> bool) -> bool) (\(y :exdesc). ($3
   (EXCEPTIONspec_h $0))))) ((/\ ((! :(strdesc_h -> bool) -> bool)
   (\(y :strdesc_h). ((==> ($2 $0)) ($3 (STRUCTUREspec_h $0)))))) ((/\
   ((! :(spec_h -> bool) -> bool) (\(y :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(y''''''' :spec_h). ((==> ($4 $1))
   ((==> ($4 $0)) ($4 ((LOCALspec_h $1) $0))))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(y :strid long nonemptylist). ($3 (OPENspec_h $0))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(y :sigid nonemptylist). ($3 (INCLUDEspec_h $0))))) ((/\ ($2
   EMPTYspec_h)) ((/\ ((! :(spec_h -> bool) -> bool) (\(y :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(y'''''' :spec_h). ((==> ($4 $1))
   ((==> ($4 $0)) ($4 ((SEQspec_h $1) $0))))))))) ((/\
   ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(strid -> bool) -> bool) (\(y''''' :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(y'''' :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(y''' :sigexp_h). ((==> ($7 $1))
   ((==> ($7 $0)) ($6 ((((FUNCTORspec_h $3) $2) $1) $0)))))))))))))
   ((/\ ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(y'' :sigexp_h).
   ((! :(strdesc_h option -> bool) -> bool) (\(y' :strdesc_h option).
   ((==> ($6 $1)) ((==> ($3 $0)) ($4 (((STRIDstrdesc_h $2) $1)
   $0))))))))))) ((/\ ($0 (NONE :strdesc_h option)))
   ((! :(strdesc_h -> bool) -> bool) (\(y :strdesc_h). ((==> ($2 $0))
   ($1 ((SOME :strdesc_h -> strdesc_h option) $0)))))))))))))))))))
   ((/\ ((! :(sigexp_h -> bool) -> bool) (\(x1 :sigexp_h). ($4 $0))))
   ((/\ ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h). ($3 $0)))) ((/\
   ((! :(strdesc_h -> bool) -> bool) (\(x3 :strdesc_h). ($2 $0))))
   ((! :(strdesc_h option -> bool) -> bool) (\(x4 :strdesc_h option).
   ($1 $0)))))))))))))))`),
 ((HOFMLSignatures_rec_thm),
  [],
  `((! :(('b -> spec_h -> 'a) -> bool) -> bool)
   (\(SIGsigexp_h_case :'b -> spec_h -> 'a).
   ((! :((sigid -> 'a) -> bool) -> bool)
   (\(SIGIDsigexp_h_case :sigid -> 'a).
   ((! :((valdesc -> 'b) -> bool) -> bool)
   (\(VALspec_h_case :valdesc -> 'b).
   ((! :((exdesc -> 'b) -> bool) -> bool)
   (\(EXCEPTIONspec_h_case :exdesc -> 'b).
   ((! :(('c -> strdesc_h -> 'b) -> bool) -> bool)
   (\(STRUCTUREspec_h_case :'c -> strdesc_h -> 'b).
   ((! :(('b -> 'b -> spec_h -> spec_h -> 'b) -> bool) -> bool)
   (\(LOCALspec_h_case :'b -> 'b -> spec_h -> spec_h -> 'b).
   ((! :((strid long nonemptylist -> 'b) -> bool) -> bool)
   (\(OPENspec_h_case :strid long nonemptylist -> 'b).
   ((! :((sigid nonemptylist -> 'b) -> bool) -> bool)
   (\(INCLUDEspec_h_case :sigid nonemptylist -> 'b).
   ((! :('b -> bool) -> bool) (\(EMPTYspec_h_case :'b).
   ((! :(('b -> 'b -> spec_h -> spec_h -> 'b) -> bool) -> bool)
   (\(SEQspec_h_case :'b -> 'b -> spec_h -> spec_h -> 'b).
   ((! :(('a -> 'a -> funid -> strid -> sigexp_h -> sigexp_h -> 'b) ->
        bool) -> bool)
   (\(FUNCTORspec_h_case :'a -> 'a -> funid -> strid -> sigexp_h ->
                          sigexp_h -> 'b).
   ((! :(('a -> 'd -> strid -> sigexp_h -> strdesc_h option -> 'c) ->
        bool) -> bool)
   (\(STRIDstrdesc_h_case :'a -> 'd -> strid -> sigexp_h ->
                           strdesc_h option -> 'c).
   ((! :('d -> bool) -> bool)
   (\(sigexp_h_spec_h_strdesc_h_NONE_strdesc_h_case :'d).
   ((! :(('c -> strdesc_h -> 'd) -> bool) -> bool)
   (\(sigexp_h_spec_h_strdesc_h_SOME_strdesc_h_case :'c ->
                                                     strdesc_h -> 'd).
   ((? :((sigexp_h -> 'a) -> bool) -> bool) (\(y :sigexp_h -> 'a).
   ((? :((spec_h -> 'b) -> bool) -> bool) (\(y''' :spec_h -> 'b).
   ((? :((strdesc_h -> 'c) -> bool) -> bool) (\(y'' :strdesc_h -> 'c).
   ((? :((strdesc_h option -> 'd) -> bool) -> bool)
   (\(y' :strdesc_h option -> 'd). ((/\ ((! :(spec_h -> bool) -> bool)
   (\(x1 :spec_h). (((= :'a -> 'a -> bool) ($4 (SIGsigexp_h $0)))
   (($18 ($3 $0)) $0))))) ((/\ ((! :(sigid -> bool) -> bool)
   (\(x1 :sigid). (((= :'a -> 'a -> bool) ($4 (SIGIDsigexp_h $0)))
   ($17 $0))))) ((/\ ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :'b -> 'b -> bool) ($3 (VALspec_h $0))) ($16 $0))))) ((/\
   ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :'b -> 'b -> bool) ($3 (EXCEPTIONspec_h $0))) ($15 $0)))))
   ((/\ ((! :(strdesc_h -> bool) -> bool) (\(x1 :strdesc_h).
   (((= :'b -> 'b -> bool) ($3 (STRUCTUREspec_h $0))) (($14 ($2 $0))
   $0))))) ((/\ ((! :(spec_h -> bool) -> bool) (\(x1 :spec_h).
   ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :'b -> 'b -> bool) ($4 ((LOCALspec_h $1) $0))) (((($14 ($4
   $1)) ($4 $0)) $1) $0))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :'b -> 'b -> bool) ($3
   (OPENspec_h $0))) ($12 $0))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :'b -> 'b -> bool) ($3
   (INCLUDEspec_h $0))) ($11 $0))))) ((/\ (((= :'b -> 'b -> bool) ($2
   EMPTYspec_h)) $9)) ((/\ ((! :(spec_h -> bool) -> bool)
   (\(x1 :spec_h). ((! :(spec_h -> bool) -> bool) (\(x2 :spec_h).
   (((= :'b -> 'b -> bool) ($4 ((SEQspec_h $1) $0))) (((($10 ($4 $1))
   ($4 $0)) $1) $0))))))) ((/\ ((! :(funid -> bool) -> bool)
   (\(x1 :funid). ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x3 :sigexp_h).
   ((! :(sigexp_h -> bool) -> bool) (\(x4 :sigexp_h).
   (((= :'b -> 'b -> bool) ($6 ((((FUNCTORspec_h $3) $2) $1) $0)))
   (((((($11 ($7 $1)) ($7 $0)) $3) $2) $1) $0))))))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_h -> bool) -> bool) (\(x2 :sigexp_h).
   ((! :(strdesc_h option -> bool) -> bool) (\(x3 :strdesc_h option).
   (((= :'c -> 'c -> bool) ($4 (((STRIDstrdesc_h $2) $1) $0))) ((((($9
   ($6 $1)) ($3 $0)) $2) $1) $0))))))))) ((/\ (((= :'d -> 'd -> bool)
   ($0 (NONE :strdesc_h option))) $5))
   ((! :(strdesc_h -> bool) -> bool) (\(x1 :strdesc_h).
   (((= :'d -> 'd -> bool) ($1 ((SOME :strdesc_h -> strdesc_h option)
   $0))) (($5 ($2 $0))
   $0)))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h_Axiom),
  [],
  `((! :(('a ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         'a) -> bool) -> bool)
   (\(f0 :'a ->
          joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
          'a). ((! :((sigid -> 'a) -> bool) -> bool)
   (\(f1 :sigid -> 'a). ((! :((valdesc -> 'a) -> bool) -> bool)
   (\(f2 :valdesc -> 'a). ((! :((exdesc -> 'a) -> bool) -> bool)
   (\(f3 :exdesc -> 'a).
   ((! :(('a ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         'a) -> bool) -> bool)
   (\(f4 :'a ->
          joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
          'a).
   ((! :(('a -> 'a ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         'a) -> bool) -> bool)
   (\(f5 :'a -> 'a ->
          joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
          joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
          'a). ((! :((strid long nonemptylist -> 'a) -> bool) -> bool)
   (\(f6 :strid long nonemptylist -> 'a).
   ((! :((sigid nonemptylist -> 'a) -> bool) -> bool)
   (\(f7 :sigid nonemptylist -> 'a). ((! :('a -> bool) -> bool)
   (\(e0 :'a).
   ((! :(('a -> 'a ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         'a) -> bool) -> bool)
   (\(f8 :'a -> 'a ->
          joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
          joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
          'a).
   ((! :(('a -> 'a -> funid -> strid ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         'a) -> bool) -> bool)
   (\(f9 :'a -> 'a -> funid -> strid ->
          joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
          joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
          'a).
   ((! :(('a -> 'a -> strid ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         'a) -> bool) -> bool)
   (\(f10 :'a -> 'a -> strid ->
           joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
           joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
           'a). ((! :('a -> bool) -> bool) (\(e1 :'a).
   ((! :(('a ->
         joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
         'a) -> bool) -> bool)
   (\(f11 :'a ->
           joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
           'a).
   ((?! :((joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
          'a) -> bool) -> bool)
   (\(fn :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
          'a). ((/\
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_SIGsigexp_h $0))) (($15 ($1
   $0)) $0))))) ((/\ ((! :(sigid -> bool) -> bool) (\(s :sigid).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_SIGIDsigexp_h $0))) ($14
   $0))))) ((/\ ((! :(valdesc -> bool) -> bool) (\(v' :valdesc).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_VALspec_h $0))) ($13 $0)))))
   ((/\ ((! :(exdesc -> bool) -> bool) (\(e :exdesc).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_EXCEPTIONspec_h $0))) ($12
   $0))))) ((/\
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_STRUCTUREspec_h $0))) (($11
   ($1 $0)) $0))))) ((/\
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_LOCALspec_h $1) $0)))
   (((($11 ($2 $1)) ($2 $0)) $1) $0))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist). (((= :'a -> 'a -> bool) ($1
   (JOINT_int_OPENspec_h $0))) ($9 $0))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(n :sigid nonemptylist). (((= :'a -> 'a -> bool) ($1
   (JOINT_int_INCLUDEspec_h $0))) ($8 $0))))) ((/\
   (((= :'a -> 'a -> bool) ($0 JOINT_int_EMPTYspec_h)) $6)) ((/\
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_SEQspec_h $1) $0))) (((($7
   ($2 $1)) ($2 $0)) $1) $0))))))) ((/\ ((! :(funid -> bool) -> bool)
   (\(f' :funid). ((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :'a -> 'a -> bool) ($4 ((((JOINT_int_FUNCTORspec_h $3) $2) $1)
   $0))) (((((($8 ($4 $1)) ($4 $0)) $3) $2) $1) $0))))))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :'a -> 'a -> bool) ($3 (((JOINT_int_STRIDstrdesc_h $2) $1)
   $0))) ((((($6 ($3 $1)) ($3 $0)) $2) $1) $0))))))))) ((/\
   (((= :'a -> 'a -> bool) ($0
   JOINT_int_sigexp_h_spec_h_strdesc_h_NONE_strdesc_h)) $2))
   ((! :(joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_h_spec_h_strdesc_h_strdesc_h_option_sigexp_h_spec_h_strdesc_h).
   (((= :'a -> 'a -> bool) ($1
   (JOINT_int_sigexp_h_spec_h_strdesc_h_SOME_strdesc_h $0))) (($2 ($1
   $0)) $0)))))))))))))))))))))))))))))))))))))))))))))))`)]
