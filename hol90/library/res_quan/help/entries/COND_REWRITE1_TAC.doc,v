head	1.1;
branch	1.1.1;
access;
symbols
	HOL97:1.1.1.1.0.6
	bpHOL97:1.1.1.1
	hol90_9_alpha:1.1.1.1
	hol90_pre8_for_multiple_compilers:1.1.1.1.0.4
	hol90_pre8_after_donalds_separate_compilation_changes:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.10.16.13.33.26;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.33.26;	author rjb;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@\DOC COND_REWRITE1_TAC

\TYPE {COND_REWRITE1_TAC : thm_tactic}

\SYNOPSIS
A simple conditional rewriting tactic.

\KEYWORDS
tactic, rewriting, conditional.

\DESCRIBE
{COND_REWRITE1_TAC} is a front end of the conditional rewriting
tactic {COND_REWR_TAC}. The input theorem should be in the following form
{
   A |- !x11 ... . P1 ==> ... !xm1 ... . Pm ==> (!x ... . Q = R)
}
\noindent where each antecedent {Pi} itself may be a conjunction or disjunction.
This theorem is transformed to a standard form expected by
{COND_REWR_TAC} which carries out the actual rewriting.
The transformation is performed by {COND_REWR_CANON}. The search function
passed to {COND_REWR_TAC} is {search_top_down}. The effect of applying
this tactic is to substitute into the goal instances of the right hand
side of the conclusion of the input theorem {Ri'} for the
corresponding instances of the left hand side. The search is top-down
left-to-right. All matches found by the search function are
substituted. New subgoals corresponding to the instances of the
antecedents which do not appear in the assumption of the original goal
are created. See manual page of {COND_REWR_TAC} for details of how the
instantiation and substitution are done.

\FAILURE
{COND_REWRITE1_TAC th}  fails if {th} cannot be transformed into the
required form by the function {COND_REWR_CANON}. Otherwise, it fails if no match
is found or the theorem cannot be instantiated.

\EXAMPLE
The following example illustrates a straightforward use of {COND_REWRITE1_TAC}.
We use the built-in theorem {LESS_MOD} as the input theorem.
{
   #LESS_MOD;;
   Theorem LESS_MOD autoloading from theory `arithmetic` ...
   LESS_MOD = |- !n k. k < n ==> (k MOD n = k)

   |- !n k. k < n ==> (k MOD n = k)
}
\noindent We set up a goal
{
   #g"2 MOD 3 = 2";;
   "2 MOD 3 = 2"

   () : void
}
\noindent and then apply the tactic
{
   #e(COND_REWRITE1_TAC LESS_MOD);;
   OK..
   2 subgoals
   "2 = 2"
       [ "2 < 3" ]

   "2 < 3"

   () : void
}

\SEEALSO
COND_REWR_TAC, COND_REWRITE1_CONV, COND_REWR_CONV, 
COND_REWR_CANON, search_top_down.

\ENDDOC

@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
