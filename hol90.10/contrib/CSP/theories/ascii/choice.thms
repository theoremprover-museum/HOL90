thid = (choice, 784032825, 296676)
axioms = []
definitions =
[((choice),
  [],
  `((! :(string set -> bool) -> bool) (\(A :string set).
   ((! :((string -> process) -> bool) -> bool)
   (\(P :string -> process). ((==> ((WELL_DEF_ALPHA $1) $0)) ((/\
   (((= :string set -> string set -> bool) (ALPHA ((choice $1) $0)))
   ((@ :(string set -> bool) -> string set) (\(A' :string set). ((/\
   ((! :(string -> bool) -> bool) (\(x :string). ((==>
   (((IN :string -> string set -> bool) $0) $3))
   (((= :string set -> string set -> bool) (ALPHA ($2 $0))) $1)))))
   (((SUBSET :string set -> string set -> bool) $2) $0))))))
   (((= :string list set -> string list set -> bool) (TRACES ((choice
   $1) $0)))
   (((UNION :string list set -> string list set -> string list set)
   (((INSERT :string list -> string list set -> string list set)
   (NIL :string list)) (EMPTY :string list set)))
   ((GSPEC :(string # string list -> string list # bool) ->
            string list set)
   ((UNCURRY :(string -> string list -> string list # bool) ->
              string # string list -> string list # bool)
   (\(a :string). (\(t :string list).
   (((, :string list -> bool -> string list # bool)
   (((CONS :string -> string list -> string list) $1) $0)) ((/\
   (((IN :string -> string set -> bool) $1) $3))
   (((IN :string list -> string list set -> bool) $0) (TRACES ($2
   $1)))))))))))))))))`),
 ((WELL_DEF_ALPHA),
  [],
  `((! :(string set -> bool) -> bool) (\(A :string set).
   ((! :((string -> process) -> bool) -> bool)
   (\(P :string -> process). (((= :bool -> bool -> bool)
   ((WELL_DEF_ALPHA $1) $0)) ((? :(string set -> bool) -> bool)
   (\(A' :string set). ((/\ ((! :(string -> bool) -> bool)
   (\(x :string). ((==> (((IN :string -> string set -> bool) $0) $3))
   (((= :string set -> string set -> bool) (ALPHA ($2 $0))) $1)))))
   (((SUBSET :string set -> string set -> bool) $2) $0)))))))))`)]
theorems =
[((ALPHA_choice_SPEC),
  [],
  `((==> ((WELL_DEF_ALPHA (A :string set)) (P :string -> process)))
   ((! :(string -> bool) -> bool) (\(c :string). ((==>
   (((IN :string -> string set -> bool) $0) (A :string set)))
   (((= :string set -> string set -> bool) (ALPHA ((choice
   (A :string set)) (P :string -> process)))) (ALPHA
   ((P :string -> process) $0)))))))`),
 ((TRACES_choice),
  [],
  `((! :((string -> process) -> bool) -> bool)
   (\(P :string -> process). ((! :(string set -> bool) -> bool)
   (\(A :string set). ((==> ((WELL_DEF_ALPHA $0) $1))
   (((= :string list set -> string list set -> bool) (TRACES ((choice
   $0) $1)))
   (((UNION :string list set -> string list set -> string list set)
   (((INSERT :string list -> string list set -> string list set)
   (NIL :string list)) (EMPTY :string list set)))
   ((GSPEC :(string # string list -> string list # bool) ->
            string list set)
   ((UNCURRY :(string -> string list -> string list # bool) ->
              string # string list -> string list # bool)
   (\(a :string). (\(t :string list).
   (((, :string list -> bool -> string list # bool)
   (((CONS :string -> string list -> string list) $1) $0)) ((/\
   (((IN :string -> string set -> bool) $1) $2))
   (((IN :string list -> string list set -> bool) $0) (TRACES ($3
   $1))))))))))))))))`),
 ((ALPHA_choice),
  [],
  `((! :((string -> process) -> bool) -> bool)
   (\(P :string -> process). ((! :(string set -> bool) -> bool)
   (\(A :string set). ((==> ((WELL_DEF_ALPHA $0) $1))
   (((= :string set -> string set -> bool) (ALPHA ((choice $0) $1)))
   ((@ :(string set -> bool) -> string set) (\(A' :string set). ((/\
   ((! :(string -> bool) -> bool) (\(x :string). ((==>
   (((IN :string -> string set -> bool) $0) $2))
   (((= :string set -> string set -> bool) (ALPHA ($3 $0))) $1)))))
   (((SUBSET :string set -> string set -> bool) $1) $0))))))))))`),
 ((IS_PROCESS_choice),
  [],
  `((! :(string set -> bool) -> bool) (\(A :string set).
   ((! :((string -> process) -> bool) -> bool)
   (\(P :string -> process). ((==> ((WELL_DEF_ALPHA $1) $0))
   (IS_PROCESS
   (((, :string set -> string list set ->
         string set # string list set)
   ((@ :(string set -> bool) -> string set) (\(A' :string set). ((/\
   ((! :(string -> bool) -> bool) (\(x :string). ((==>
   (((IN :string -> string set -> bool) $0) $3))
   (((= :string set -> string set -> bool) (ALPHA ($2 $0))) $1)))))
   (((SUBSET :string set -> string set -> bool) $2) $0)))))
   (((UNION :string list set -> string list set -> string list set)
   (((INSERT :string list -> string list set -> string list set)
   (NIL :string list)) (EMPTY :string list set)))
   ((GSPEC :(string # string list -> string list # bool) ->
            string list set)
   ((UNCURRY :(string -> string list -> string list # bool) ->
              string # string list -> string list # bool)
   (\(a :string). (\(t :string list).
   (((, :string list -> bool -> string list # bool)
   (((CONS :string -> string list -> string list) $1) $0)) ((/\
   (((IN :string -> string set -> bool) $1) $3))
   (((IN :string list -> string list set -> bool) $0) (TRACES ($2
   $1)))))))))))))))))`)]
