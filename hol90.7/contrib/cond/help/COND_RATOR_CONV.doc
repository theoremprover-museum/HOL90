\DOC COND_RATOR_CONV

\TYPE {COND_RATOR_CONV: conv}

\SYNOPSIS
moves a rator outward through a conditonal.

\LIBRARY cond

\DESCRIBE 
moves a rator outward through a conditonal.

{
   |- A => f x|f y
  ================== 
   |- f (A => x|y)
}

\EXAMPLE

{
- COND_RATOR_CONV (--`A => (SUC 5) | (SUC 6)`--);
val it = |- (A => (SUC 5) | (SUC 6)) = SUC (A => 5 | 6) : thm
}

\FAILURE

if the term has not the form A => f x|f y

{
- (COND_RATOR_CONV (--`A => SUC|SUC`--);()) handle e => print_HOL_ERR e;
Exception raised at cond.FILTER_COND_RATOR_CONV:
 
A => SUC | SUC
has not the form: A => f x|f y
}
\SEEALSO

COND_RATOR_RULE COND_RATOR_TAC
FILTER_COND_RATOR_CONV FILTER_COND_RATOR_RULE FILTER_COND_RATOR_TAC
RATOR_COND_CONV RATOR_COND_RULE RATOR_COND_TAC
FILTER_RATOR_COND_CONV FILTER_RATOR_COND_RULE FILTER_RATOR_COND_TAC

\ENDDOC

