head	1.1;
access;
symbols
	HOL97:1.1.2.3.0.2
	bpHOL97:1.1.2.3
	hol90_9_alpha:1.1.2.3
	hol90_pre8_for_multiple_compilers:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	96.06.25.15.40.34;	author rjb;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.06.25.15.40.35;	author rjb;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	96.06.27.15.56.50;	author rjb;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	96.08.23.16.23.15;	author rjb;	state Exp;
branches
	1.1.2.3.2.1;
next	;

1.1.2.3.2.1
date	97.06.11.18.09.29;	author kxs;	state dead;
branches;
next	;


desc
@@


1.1
log
@file Makefile.njsml.1xx was initially added on branch hol90_pre8_for_multiple_compilers.
@
text
@@


1.1.2.1
log
@The core of hol90.9.alpha now builds successfully with SML/NJ 109,
SML/NJ 108.5 (using CM), SML/NJ 0.93, and Poly/ML 3.0.
I have not yet tried rebuilding the theory files.
@
text
@a0 84
#-------------------------------------------------------------------------
# Makefile for HOL90
#
# Standard ML Version: NJSML 1xx (currently 109)
# Compilation done using: use
#-------------------------------------------------------------------------

#-------------------------------------------------------------------------
# parameters
#-------------------------------------------------------------------------

SML_IMPL=njsml.1xx
ARCH=unknown
HOL_DIR=..
THEORY_TYPE=ascii
# File to `use' before dumping HOL executable/heap/database
USE_FILE=

#-------------------------------------------------------------------------
# computed macros
#-------------------------------------------------------------------------

MAKE_IMPL=$(MAKE) -f Makefile.$(SML_IMPL)

BIN_DIR=$(HOL_DIR)/bin/$(SML_IMPL)
HEAP_DIR=$(BIN_DIR)/.heap
THEORY_SRC=$(HOL_DIR)/theories/src
THMS_DIR=$(HOL_DIR)/theories/$(THEORY_TYPE)
HOLSIG_DIR=$(HOL_DIR)/theories/$(THEORY_TYPE)

SML=$(BIN_DIR)/sml

HOL90_HEAP=$(HEAP_DIR)/hol90.$(ARCH)

#-------------------------------------------------------------------------
# all
#-------------------------------------------------------------------------

all: check_sources $(HOL90_HEAP)

#-------------------------------------------------------------------------
# check_sources
#-------------------------------------------------------------------------

check_sources:
	@@-mkdir $(BIN_DIR) 2> /dev/null
	@@if test -f $(SML); \
	 then echo \"sml\" found; \
	 else echo \"sml\" not found in $(BIN_DIR)/; \
	      echo Put a symbolic link to the Standard ML executable there.; \
	      exit 1; \
	 fi

#-------------------------------------------------------------------------
# HOL90
#-------------------------------------------------------------------------

$(HOL90_HEAP): 0/* 0/library/* 0/theory/* 1/* 2/* 3/* sources.sml
	@@-mkdir $(BIN_DIR) 2> /dev/null
	@@-mkdir $(HEAP_DIR) 2> /dev/null
	echo 'use "0/portable.sig";'\
	     'use "0/portable.njsml.1xx.sml";'\
	     'val use = Portable.use;'\
	     'use "sources.sml";'\
	     'if not ("$(USE_FILE)" = "") andalso' \
	     '   Portable.file_exists_for_reading "$(USE_FILE)"'\
	     'then use "$(USE_FILE)"'\
	     'else ();'\
	     'Globals.use_init_file := true;'\
	     'Portable.interp := false (* off to avoid a compiler bug *);' \
	     'Save_hol.save_hol "$@@";'\
	   | $(SML) 2>&1 | tee $(BIN_DIR)/log.$(ARCH)
	chmod ugo+r $@@

#-------------------------------------------------------------------------
# cleaning
#-------------------------------------------------------------------------

clean:
	rm -f $(HOL90_HEAP)

clobber: clean
	rm -f $(HOLSIG_DIR)/*.holsig $(THMS_DIR)/*.thms

@


1.1.2.2
log
@Theory files now build with SML/NJ 109, SML/NJ 108.5 (using CM), SML/NJ 0.93,
and Poly/ML 3.0.
The quotation filter has been modified so that antiquotation works correctly
in old-style quotations.
The quotation filter is now compiled using flex and gcc (by default).
The arguments to the script for running hol90 have been changed.
@
text
@a5 6
#
# The building of HOL90 takes place in four stages with theories being
# constructed between each stage if they are not already present. Dummy
# files are left in place of the intermediate executables so that make
# does not try to rebuild unnecessarily. However, this means that the bin
# directory should be cleaned before attempting a rebuild.
d23 1
a23 6
MAKE_IMPL=$(MAKE) -f Makefile.$(SML_IMPL) \
		  HOL90_VERSION=$(HOL90_VERSION) \
		  ARCH=$(ARCH) \
		  HOL_DIR=$(HOL_DIR) \
		  THEORY_TYPE=$(THEORY_TYPE) \
		  USE_FILE=$(USE_FILE)
d33 1
a33 8
HOL0_HEAP=$(HEAP_DIR)/hol0.$(ARCH)
HOL1_HEAP=$(HEAP_DIR)/hol1.$(ARCH)
HOL2_HEAP=$(HEAP_DIR)/hol2.$(ARCH)
HOL3_HEAP=$(HEAP_DIR)/hol90.$(ARCH)

#fragments of ML code
HANDLE_HOL_ERR= \
	handle e => (print_HOL_ERR e; OS.Process.exit OS.Process.failure)
d39 1
a39 1
all: check_sources hol
d55 1
a55 1
# hol0
d58 1
a58 1
$(HOL0_HEAP): 0/* 0/library/* 0/theory/*
d64 2
a65 212
	     'use "0/sources.sml";'\
	     'use "0/hol0.sml";'\
	     'Portable.export "$@@";'\
	| $(SML) 2>&1 | tee $(BIN_DIR)/log.$(ARCH).0
	echo >$@@.blank

#-------------------------------------------------------------------------
# Theories built after hol0
#
# How we ensure theory files don't get rebuilt
# --------------------------------------------
#
# We carefully make the theories dependent only on their source,
# not on the executable which is used to process the source.
# This takes the optimistic approach that if a theory file
# is up-to-date with respect to its source then it is correct - even
# though it is possible the executable has changed the theory file format.
#
# To remake the theory files, go "make clobber" before you begin.
#
# Making the theory files not dependent on the executable 
# stops theory files getting rebuilt unnecessarily.
# However, we still need to force the make of the executable
# which processes the theory file if it doesn't exist at all!
# We do this by running a shell "if" command to do a
# make in the case where no executable is available.  
# Shell wizardry courtesy of Michael Norrish. 
#
#                                                  DRS
#-------------------------------------------------------------------------

$(HOLSIG_DIR)/min.holsig: \
		$(THEORY_SRC)/min.sig \
		$(THEORY_SRC)/mk_min.sml
	@@-mkdir $(HOLSIG_DIR) 2> /dev/null
	@@if test ! -f $(HOL0_HEAP); then $(MAKE_IMPL) $(HOL0_HEAP); fi
	echo 'use "$(THEORY_SRC)/min.sig" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/mk_min.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL0_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).0

$(HOLSIG_DIR)/bool.holsig:  \
		$(HOLSIG_DIR)/min.holsig \
		$(THEORY_SRC)/exists.sig \
		$(THEORY_SRC)/mk_exists.sml \
		$(THEORY_SRC)/bool.sig \
		$(THEORY_SRC)/mk_bool.sml
	@@-mkdir $(HOLSIG_DIR) 2> /dev/null
	@@if test ! -f $(HOL0_HEAP); then $(MAKE_IMPL) $(HOL0_HEAP); fi
	echo 'use "$(THEORY_SRC)/min.sig" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/ld_min.sml" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/exists.sig" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/mk_exists.sml" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/bool.sig" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/mk_bool.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL0_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).0

#-------------------------------------------------------------------------
# hol1
#-------------------------------------------------------------------------

$(HOL1_HEAP): $(HOL0_HEAP) 1/* $(HOLSIG_DIR)/bool.holsig
	@@-mkdir $(BIN_DIR) 2> /dev/null
	@@-mkdir $(HEAP_DIR) 2> /dev/null
	echo 'use "1/sources.sml";'\
	     'use "1/hol1.sml";'\
	     'Portable.export "$@@";'\
	| $(SML) @@SMLload=$(HOL0_HEAP) 2>&1 | tee $(BIN_DIR)/log.$(ARCH).1
	echo >$@@.blank
	rm -f $(HOL0_HEAP)
	mv $(HOL0_HEAP).blank $(HOL0_HEAP)

#-------------------------------------------------------------------------
# Theories built after hol1
#-------------------------------------------------------------------------

$(HOLSIG_DIR)/combin.holsig: \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_combin.sml
	@@if test ! -f $(HOL1_HEAP); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_combin.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).1

$(HOLSIG_DIR)/num.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_num.sml
	@@if test ! -f $(HOL1_HEAP); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_num.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).1

$(HOLSIG_DIR)/one.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_one.sml
	@@if test ! -f $(HOL1_HEAP); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_one.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).1

$(HOLSIG_DIR)/sum.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(HOLSIG_DIR)/combin.holsig \
		$(THEORY_SRC)/mk_sum.sml
	@@if test ! -f $(HOL1_HEAP); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_sum.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).1

$(HOLSIG_DIR)/restr_binder.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_restr_binder.sml
	@@if test ! -f $(HOL1_HEAP); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_restr_binder.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).1

$(HOLSIG_DIR)/pair.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_pair.sml
	@@if test ! -f $(HOL1_HEAP); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_pair.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).1

$(HOLSIG_DIR)/BASIC_HOL.holsig:  \
		$(THEORY_SRC)/mk_BASIC_HOL.sml \
		$(HOLSIG_DIR)/bool.holsig \
		$(HOLSIG_DIR)/restr_binder.holsig \
		$(HOLSIG_DIR)/pair.holsig \
		$(HOLSIG_DIR)/sum.holsig \
		$(HOLSIG_DIR)/one.holsig \
		$(HOLSIG_DIR)/num.holsig
	@@if test ! -f $(HOL1_HEAP); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_BASIC_HOL.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).1

#-------------------------------------------------------------------------
# hol2
#-------------------------------------------------------------------------

$(HOL2_HEAP): $(HOL1_HEAP) 2/* $(HOLSIG_DIR)/BASIC_HOL.holsig
	@@-mkdir $(BIN_DIR) 2> /dev/null
	@@-mkdir $(HEAP_DIR) 2> /dev/null
	echo 'use "2/sources.sml";' \
	     'use "2/hol2.sml";'\
	     'Portable.export "$@@";' \
	| $(SML) @@SMLload=$(HOL1_HEAP) 2>&1 | tee $(BIN_DIR)/log.$(ARCH).2
	echo >$@@.blank
	rm -f $(HOL1_HEAP)
	mv $(HOL1_HEAP).blank $(HOL1_HEAP)

#-------------------------------------------------------------------------
# Theories built after hol2
#-------------------------------------------------------------------------

$(HOLSIG_DIR)/prim_rec.holsig:  \
		$(THEORY_SRC)/mk_prim_rec.sml
	@@if test ! -f $(HOL2_HEAP); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_prim_rec.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).2

$(HOLSIG_DIR)/arithmetic.holsig:  \
		$(HOLSIG_DIR)/prim_rec.holsig \
		$(THEORY_SRC)/mk_arithmetic.sml
	@@if test ! -f $(HOL2_HEAP); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_arithmetic.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).2

$(HOLSIG_DIR)/list.holsig:  \
		$(HOLSIG_DIR)/arithmetic.holsig \
		$(THEORY_SRC)/mk_list.sml \
		$(THEORY_SRC)/mk_list_thms.sml
	@@if test ! -f $(HOL2_HEAP); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_list.sml" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/mk_list_thms.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).2

$(HOLSIG_DIR)/tree.holsig:  \
		$(HOLSIG_DIR)/list.holsig \
		$(THEORY_SRC)/mk_tree.sml
	@@if test ! -f $(HOL2_HEAP); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_tree.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).2

$(HOLSIG_DIR)/ltree.holsig:  \
		$(HOLSIG_DIR)/tree.holsig \
		$(THEORY_SRC)/mk_ltree.sml
	@@if test ! -f $(HOL2_HEAP); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_ltree.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).2

$(HOLSIG_DIR)/rec_type.holsig:  \
		$(HOLSIG_DIR)/ltree.holsig \
		$(THEORY_SRC)/mk_rec_type.sml
	@@if test ! -f $(HOL2_HEAP); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_rec_type.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).2

$(HOLSIG_DIR)/HOL.holsig:  \
		$(HOLSIG_DIR)/rec_type.holsig \
		$(HOLSIG_DIR)/sum.holsig \
		$(HOLSIG_DIR)/restr_binder.holsig \
		$(HOLSIG_DIR)/one.holsig \
		$(THEORY_SRC)/mk_HOL.sml
	@@if test ! -f $(HOL2_HEAP); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_HOL.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).2

#-------------------------------------------------------------------------
# hol3
#-------------------------------------------------------------------------

$(HOL3_HEAP): $(HOL2_HEAP) 3/* $(HOLSIG_DIR)/HOL.holsig
	@@-mkdir $(BIN_DIR) 2> /dev/null
	@@-mkdir $(HEAP_DIR) 2> /dev/null
	echo 'use "3/sources.sml";'\
	     'use "3/hol3.sml";'\
	     'if not ("$(USE_FILE)" = "") andalso'\
d70 1
a70 1
	     'Portable.interp := false (* off to avoid a compiler bug *);'\
d72 1
a72 1
	| $(SML) @@SMLload=$(HOL2_HEAP) 2>&1 | tee $(BIN_DIR)/log.$(ARCH).3
a73 8
	rm -f $(HOL2_HEAP)
	mv $(HOL2_HEAP).blank $(HOL2_HEAP)

#-------------------------------------------------------------------------
# HOL90
#-------------------------------------------------------------------------

hol: $(HOL3_HEAP)
d80 1
a80 1
	rm -f $(HOL0_HEAP) $(HOL1_HEAP) $(HOL2_HEAP) $(HOL3_HEAP)
@


1.1.2.3
log
@Added parameter PRE_LOAD for specifying whcih libraries to load before
dumping the core system.
@
text
@a21 2
# Libraries to load before dumping HOL executable/heap/database
PRE_LOAD=
a292 2
	     'map (load_library_in_place o find_library)'\
	     '   (Lib.words2 #" " "$(PRE_LOAD)");'\
@


1.1.2.3.2.1
log
@Many minor changes in order to get HOL to build on SML/NJ 109.26. There are
several real changes, however.

  1. The reliance on hacked ML-Yacc support files is gone.

  2. After type inference, there is now a pass where new names are guessed for
     unconstrained type variables. This is experimental.

  3. All the grammars used in the basic HOL system are put in one place
     (the "src/Grammars" directory).

  4. The implementations of the "Portable" structure have been moved to
      src/portableML.

  5. All the makefiles used to build the system are in src/Makefiles.
@
text
@@
