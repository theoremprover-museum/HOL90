thid = (bword_arith, 783977804, 538211)
axioms = []
definitions =
[((ICARRY_DEF),
  [],
  `((/\ ((! :(bool word -> bool) -> bool) (\(w1 :bool word).
   ((! :(bool word -> bool) -> bool) (\(w2 :bool word).
   ((! :(bool -> bool) -> bool) (\(cin :bool).
   (((= :bool -> bool -> bool) ((((ICARRY 0) $2) $1) $0)) $0))))))))
   ((! :(num -> bool) -> bool) (\(n :num).
   ((! :(bool word -> bool) -> bool) (\(w1 :bool word).
   ((! :(bool word -> bool) -> bool) (\(w2 :bool word).
   ((! :(bool -> bool) -> bool) (\(cin :bool).
   (((= :bool -> bool -> bool) ((((ICARRY (SUC $3)) $2) $1) $0)) ((\/
   ((/\ (((BIT :num -> bool word -> bool) $3) $2))
   (((BIT :num -> bool word -> bool) $3) $1))) ((/\ ((\/
   (((BIT :num -> bool word -> bool) $3) $2))
   (((BIT :num -> bool word -> bool) $3) $1))) ((((ICARRY $3) $2) $1)
   $0)))))))))))))`),
 ((ACARRY_DEF),
  [],
  `((/\ ((! :(bool word -> bool) -> bool) (\(w1 :bool word).
   ((! :(bool word -> bool) -> bool) (\(w2 :bool word).
   ((! :(bool -> bool) -> bool) (\(cin :bool).
   (((= :bool -> bool -> bool) ((((ACARRY 0) $2) $1) $0)) $0))))))))
   ((! :(num -> bool) -> bool) (\(n :num).
   ((! :(bool word -> bool) -> bool) (\(w1 :bool word).
   ((! :(bool word -> bool) -> bool) (\(w2 :bool word).
   ((! :(bool -> bool) -> bool) (\(cin :bool).
   (((= :bool -> bool -> bool) ((((ACARRY (SUC $3)) $2) $1) $0)) (VB
   ((DIV ((+ (BV (((BIT :num -> bool word -> bool) $3) $2))) ((+ (BV
   (((BIT :num -> bool word -> bool) $3) $1))) (BV ((((ACARRY $3) $2)
   $1) $0))))) 2))))))))))))`)]
theorems =
[((ACARRY_ACARRY_WSEG),
  [],
  `((! :(num -> bool) -> bool) (\(n :num).
   (((RES_FORALL :(bool word -> bool) -> (bool word -> bool) -> bool)
   ((PWORDLEN :num -> bool word -> bool) $0)) (\(w1 :bool word).
   (((RES_FORALL :(bool word -> bool) -> (bool word -> bool) -> bool)
   ((PWORDLEN :num -> bool word -> bool) $1)) (\(w2 :bool word).
   ((! :(bool -> bool) -> bool) (\(cin :bool).
   ((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(k1 :num). ((! :(num -> bool) -> bool) (\(k2 :num). ((==> ((/\
   ((< $1) $2)) ((/\ ((< $0) $6)) ((<= ((+ $2) $0)) $6))))
   (((= :bool -> bool -> bool) ((((ACARRY $1)
   ((((WSEG :num -> num -> bool word -> bool word) $2) $0) $5))
   ((((WSEG :num -> num -> bool word -> bool word) $2) $0) $4))
   ((((ACARRY $0) $5) $4) $3))) ((((ACARRY ((+ $1) $0)) $5) $4)
   $3)))))))))))))))))`),
 ((ICARRY_WSEG),
  [],
  `((! :(num -> bool) -> bool) (\(n :num).
   (((RES_FORALL :(bool word -> bool) -> (bool word -> bool) -> bool)
   ((PWORDLEN :num -> bool word -> bool) $0)) (\(w1 :bool word).
   (((RES_FORALL :(bool word -> bool) -> (bool word -> bool) -> bool)
   ((PWORDLEN :num -> bool word -> bool) $1)) (\(w2 :bool word).
   ((! :(bool -> bool) -> bool) (\(cin :bool).
   ((! :(num -> bool) -> bool) (\(k :num). ((! :(num -> bool) -> bool)
   (\(m :num). ((==> ((/\ ((< $1) $0)) ((<= $0) $5)))
   (((= :bool -> bool -> bool) ((((ICARRY $1)
   ((((WSEG :num -> num -> bool word -> bool word) $0) 0) $4))
   ((((WSEG :num -> num -> bool word -> bool word) $0) 0) $3)) $2))
   ((((ICARRY $1) $4) $3) $2)))))))))))))))`),
 ((ACARRY_WSEG),
  [],
  `((! :(num -> bool) -> bool) (\(n :num).
   (((RES_FORALL :(bool word -> bool) -> (bool word -> bool) -> bool)
   ((PWORDLEN :num -> bool word -> bool) $0)) (\(w1 :bool word).
   (((RES_FORALL :(bool word -> bool) -> (bool word -> bool) -> bool)
   ((PWORDLEN :num -> bool word -> bool) $1)) (\(w2 :bool word).
   ((! :(bool -> bool) -> bool) (\(cin :bool).
   ((! :(num -> bool) -> bool) (\(k :num). ((! :(num -> bool) -> bool)
   (\(m :num). ((==> ((/\ ((< $1) $0)) ((<= $0) $5)))
   (((= :bool -> bool -> bool) ((((ACARRY $1)
   ((((WSEG :num -> num -> bool word -> bool word) $0) 0) $4))
   ((((WSEG :num -> num -> bool word -> bool word) $0) 0) $3)) $2))
   ((((ACARRY $1) $4) $3) $2)))))))))))))))`),
 ((ACARRY_MSB),
  [],
  `((! :(num -> bool) -> bool) (\(n :num).
   (((RES_FORALL :(bool word -> bool) -> (bool word -> bool) -> bool)
   ((PWORDLEN :num -> bool word -> bool) $0)) (\(w1 :bool word).
   (((RES_FORALL :(bool word -> bool) -> (bool word -> bool) -> bool)
   ((PWORDLEN :num -> bool word -> bool) $1)) (\(w2 :bool word).
   ((! :(bool -> bool) -> bool) (\(cin :bool).
   (((= :bool -> bool -> bool) ((((ACARRY $3) $2) $1) $0))
   (((BIT :num -> bool word -> bool) $3) ((NBWORD (SUC $3)) ((+ (BNVAL
   $2)) ((+ (BNVAL $1)) (BV $0))))))))))))))`),
 ((ADD_NBWORD_EQ0_SPLIT),
  [],
  `((! :(num -> bool) -> bool) (\(n1 :num).
   ((! :(num -> bool) -> bool) (\(n2 :num).
   (((RES_FORALL :(bool word -> bool) -> (bool word -> bool) -> bool)
   ((PWORDLEN :num -> bool word -> bool) ((+ $1) $0)))
   (\(w1 :bool word).
   (((RES_FORALL :(bool word -> bool) -> (bool word -> bool) -> bool)
   ((PWORDLEN :num -> bool word -> bool) ((+ $2) $1)))
   (\(w2 :bool word). ((! :(bool -> bool) -> bool) (\(cin :bool).
   (((= :bool -> bool -> bool) (((= :bool word -> bool word -> bool)
   ((NBWORD ((+ $4) $3)) ((+ (BNVAL $2)) ((+ (BNVAL $1)) (BV $0)))))
   ((NBWORD ((+ $4) $3)) 0))) ((/\
   (((= :bool word -> bool word -> bool) ((NBWORD $4) ((+ (BNVAL
   ((((WSEG :num -> num -> bool word -> bool word) $4) $3) $2))) ((+
   (BNVAL ((((WSEG :num -> num -> bool word -> bool word) $4) $3)
   $1))) (BV ((((ACARRY $3) $2) $1) $0)))))) ((NBWORD $4) 0)))
   (((= :bool word -> bool word -> bool) ((NBWORD $3) ((+ (BNVAL
   ((((WSEG :num -> num -> bool word -> bool word) $3) 0) $2))) ((+
   (BNVAL ((((WSEG :num -> num -> bool word -> bool word) $3) 0) $1)))
   (BV $0))))) ((NBWORD $3) 0))))))))))))))`),
 ((WSEG_NBWORD_ADD),
  [],
  `((! :(num -> bool) -> bool) (\(n :num).
   (((RES_FORALL :(bool word -> bool) -> (bool word -> bool) -> bool)
   ((PWORDLEN :num -> bool word -> bool) $0)) (\(w1 :bool word).
   (((RES_FORALL :(bool word -> bool) -> (bool word -> bool) -> bool)
   ((PWORDLEN :num -> bool word -> bool) $1)) (\(w2 :bool word).
   ((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(k :num). ((! :(bool -> bool) -> bool) (\(cin :bool). ((==> ((<=
   ((+ $2) $1)) $5)) (((= :bool word -> bool word -> bool)
   ((((WSEG :num -> num -> bool word -> bool word) $2) $1) ((NBWORD
   $5) ((+ (BNVAL $4)) ((+ (BNVAL $3)) (BV $0)))))) ((NBWORD $2) ((+
   (BNVAL ((((WSEG :num -> num -> bool word -> bool word) $2) $1)
   $4))) ((+ (BNVAL ((((WSEG :num -> num -> bool word -> bool word)
   $2) $1) $3))) (BV ((((ACARRY $1) $4) $3) $0)))))))))))))))))))`),
 ((ADD_WORD_SPLIT),
  [],
  `((! :(num -> bool) -> bool) (\(n1 :num).
   ((! :(num -> bool) -> bool) (\(n2 :num).
   (((RES_FORALL :(bool word -> bool) -> (bool word -> bool) -> bool)
   ((PWORDLEN :num -> bool word -> bool) ((+ $1) $0)))
   (\(w1 :bool word).
   (((RES_FORALL :(bool word -> bool) -> (bool word -> bool) -> bool)
   ((PWORDLEN :num -> bool word -> bool) ((+ $2) $1)))
   (\(w2 :bool word). ((! :(bool -> bool) -> bool) (\(cin :bool).
   (((= :bool word -> bool word -> bool) ((NBWORD ((+ $4) $3)) ((+
   (BNVAL $2)) ((+ (BNVAL $1)) (BV $0)))))
   ((WCAT :bool word # bool word -> bool word)
   (((, :bool word -> bool word -> bool word # bool word) ((NBWORD $4)
   ((+ (BNVAL ((((WSEG :num -> num -> bool word -> bool word) $4) $3)
   $2))) ((+ (BNVAL ((((WSEG :num -> num -> bool word -> bool word)
   $4) $3) $1))) (BV ((((ACARRY $3) $2) $1) $0)))))) ((NBWORD $3) ((+
   (BNVAL ((((WSEG :num -> num -> bool word -> bool word) $3) 0) $2)))
   ((+ (BNVAL ((((WSEG :num -> num -> bool word -> bool word) $3) 0)
   $1))) (BV $0)))))))))))))))))`),
 ((ACARRY_EQ_ADD_DIV),
  [],
  `((! :(num -> bool) -> bool) (\(n :num).
   (((RES_FORALL :(bool word -> bool) -> (bool word -> bool) -> bool)
   ((PWORDLEN :num -> bool word -> bool) $0)) (\(w1 :bool word).
   (((RES_FORALL :(bool word -> bool) -> (bool word -> bool) -> bool)
   ((PWORDLEN :num -> bool word -> bool) $1)) (\(w2 :bool word).
   ((! :(num -> bool) -> bool) (\(k :num). ((==> ((< $0) $3))
   (((= :num -> num -> bool) (BV ((((ACARRY $0) $2) $1) (cin :bool))))
   ((DIV ((+ (BNVAL ((((WSEG :num -> num -> bool word -> bool word)
   $0) 0) $2))) ((+ (BNVAL
   ((((WSEG :num -> num -> bool word -> bool word) $0) 0) $1))) (BV
   (cin :bool))))) ((EXP 2) $0))))))))))))`),
 ((ACARRY_EQ_ICARRY),
  [],
  `((! :(num -> bool) -> bool) (\(n :num).
   (((RES_FORALL :(bool word -> bool) -> (bool word -> bool) -> bool)
   ((PWORDLEN :num -> bool word -> bool) $0)) (\(w1 :bool word).
   (((RES_FORALL :(bool word -> bool) -> (bool word -> bool) -> bool)
   ((PWORDLEN :num -> bool word -> bool) $1)) (\(w2 :bool word).
   ((! :(bool -> bool) -> bool) (\(cin :bool).
   ((! :(num -> bool) -> bool) (\(k :num). ((==> ((<= $0) $4))
   (((= :bool -> bool -> bool) ((((ACARRY $0) $3) $2) $1)) ((((ICARRY
   $0) $3) $2) $1)))))))))))))`)]
