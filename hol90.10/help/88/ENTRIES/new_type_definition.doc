\DOC new_type_definition

\TYPE {new_type_definition : ((string # term # thm) -> thm)}

\SYNOPSIS
Defines a new type constant or type operator.

\DESCRIBE
The ML function {new_type_definition} implements the primitive HOL rule of
definition for introducing new type constants or type operators into the logic.
If {"t"} is a term of type {ty->bool} containing {n} distinct type variables,
then evaluating:
{
   new_type_definition(`op`, "t", |- ?x. t x)
}
\noindent results in {op} being declared as a new {n}-ary type operator in the
current theory and returned by the call to {new_type_definition}. This new type
operator is characterized by a definitional axiom of the form:
{
   |- ?rep:(*1,...,*n)op->ty. TYPE_DEFINITION t rep
}
\noindent which is stored as a definition in the current theory segment
under the automatically-generated name {`op_TY_DEF`}. The constant
{TYPE_DEFINITION} in this axiomatic characterization of {op} is defined by:
{
   |- TYPE_DEFINITION (P:*->bool) (rep:**->*) =
         (!x' x''. (rep x' = rep x'') ==> (x' = x'')) /\
         (!x. P x = (?x'. x = rep x'))
}
\noindent Thus {|- ?rep. TYPE_DEFINITION P rep} asserts that there is a
bijection between the newly defined type {(*1,...,*n)op} and the set of values
of type {ty} that satisfy {P}.

\FAILURE
Executing {new_type_definition(`op`,"t",th)} fails if {op} is already the name
of a type or type operator in the current theory, if {"t"} does not have a type
of the form {ty->bool} or {th} is not a theorem without assumptions of the form
{|- ?x. t x}, if there already exists a constant definition, constant
specification, type definition or axiom named {op_TY_DEF} in the current theory
segment, or if HOL is not in draft mode.

\SEEALSO
define_new_type_bijections, prove_abs_fn_one_one, prove_abs_fn_onto,
prove_rep_fn_one_one, prove_rep_fn_onto.

\ENDDOC
