\DOC FILTER_COND_RATOR_CONV

\TYPE {FILTER_COND_RATOR_CONV: (term -> bool) -> conv}

\SYNOPSIS
moves a selected rator outward through a conditonal.

\LIBRARY cond

\DESCRIBE 
moves a selected rator outward through a conditonal.

{
   |- A => f x|f y
  ================== 
   |- f (A => x|y)
}

\EXAMPLE

an example which fulfills the supplied filter:

{
- FILTER_COND_RATOR_CONV 
  (fn t => #Name(dest_const t) = "SUC")
  (--`A => (SUC 5) | (SUC 6)`--);
val it = |- (A => (SUC 5) | (SUC 6)) = SUC (A => 5 | 6) : thm
}

an example which does not fulfill the supplied filter:

{
- (FILTER_COND_RATOR_CONV 
  (fn t => #Name(dest_const t) = "PRE")
  (--`A => (SUC 5) | (SUC 6)`--);()) handle e => print_HOL_ERR e;
Exception raised at cond.FILTER_COND_RATOR_CONV:
 
the supplied filter is not true for

SUC
}

\FAILURE

if the term has not the form  or A => f x|f y the supplied filter is
not true for f

\SEEALSO

COND_RATOR_CONV COND_RATOR_RULE COND_RATOR_TAC
FILTER_COND_RATOR_RULE FILTER_COND_RATOR_TAC
RATOR_COND_CONV RATOR_COND_RULE RATOR_COND_TAC
FILTER_RATOR_COND_CONV FILTER_RATOR_COND_RULE FILTER_RATOR_COND_TAC

\ENDDOC

