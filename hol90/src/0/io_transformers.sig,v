head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	96.02.08.00.31.18;	author drs1004;	state Exp;
branches;
next	1.1;

1.1
date	96.01.04.15.58.25;	author drs1004;	state Exp;
branches;
next	;


desc
@@


1.2
log
@New theory mechanism, by Donald Syme, and many other enhancements.
@
text
@(*====================================================================
 *
 *===================================================================*)


signature Io_transformers_sig =
sig


  structure Preterm : Preterm_sig
  type typ sharing type typ = Preterm.Term.Type.typ
  type term sharing type term = Preterm.Term.term
  type pretype sharing type pretype = Preterm.pretype
  type preterm sharing type preterm = Preterm.preterm

(*----------------------------------------------------------------------
 * Type String Maps (string mapping)
 *
 * USES
 * 
 * --------------------------------------------------------------------*)

  type type_map
  val mk_type_map: (string * string) list -> type_map

  val dest_type_map : type_map -> (string * string) list

  val type_map : type_map -> pretype -> pretype
  val type_string_mapper : type_map -> string -> string (* for pp *)


(*----------------------------------------------------------------------
 * Interface String Maps (string mapping)
 *
 * USES
 * 
 * --------------------------------------------------------------------*)

  
  type term_map
  val mk_term_map: (string * string) list -> term_map
  val dest_term_map : term_map -> (string * string) list;

  val term_map : term_map -> preterm -> preterm
  val term_string_mapper : term_map -> string -> string (* for pp *)


(*----------------------------------------------------------------------
 * Type macros
 *
 * USES
 *     ["x","y"], "x |-> y" |--> "PFUN_UPDATE (x,y) PFUN_NIL"
 * --------------------------------------------------------------------*)
  type type_macros

  val mk_type_macros : (string list * pretype * pretype) list -> type_macros
  val type_macros : type_macros -> pretype -> pretype
  val type_macros_pp : type_macros -> 'a -> 'b -> typ -> Portable.PrettyPrint.ppstream -> unit

(*----------------------------------------------------------------------
 * Term macros
 *
 * USES
 *     ["x","y"], "x |-> y" |--> "PFUN_UPDATE (x,y) PFUN_NIL"
 * --------------------------------------------------------------------*)
  type term_macros
  val mk_term_macros : (string list * preterm * preterm) list -> term_macros
  val term_macros : term_macros -> preterm -> preterm
  val term_macros_pp : term_macros -> 'a -> 'b -> term -> Portable.PrettyPrint.ppstream -> unit

(*----------------------------------------------------------------------
 * Type attribution and overload resolution.
 * 
 * Attribution is the process where a "simple" preterm, i.e. one
 * without type attributes (apart from user type constraints), has
 * type attributes added ready for type inference.  
 * Const nodes are introduced at this point - up until now everything
 * is a variable.  Type attributes are added by wrapping 
 * Constrained (tm,ty) nodes around Var and
 * Const nodes.  
 *
 * Two styles of attribution are available for use
 *   - "hol88" style or "simple" type attribution turns every free atom
 * which passes a given test into a given preterm.  This is usually 
 * used to turn free atoms which represent constants into constant
 * nodes.
 *   - Overloading attribution is similar but takes a function which can give
 * several possible interpretations of a constant.  It then uses type
 * inference and backtracking to work out which interpretations make sense.
 * If more than one interpretation makes sense an error message is printed
 * and an error is raised.
 * 
 * simple_attribution 
 *   When "simple_attribution f ptm" is called, "Var n" nodes 
 * in the preterm are interpreted as follows:
 *      Case 1: "n" is bound or "f n" returns NONE. 
 *          Then "Var n" becomes Constrained (Var n, ty) where "ty" is a link
 * to a type variable shared between all instances of "n" in the same
 * scope.
 *      Case 2: "f n" returns "SOME ptm'".
 *          Then "Var n" becomes a version of ptm' which has fresh 
 * type variables allocated for any type variables in ptm'.
 * This case is used when "n" is to be interpreted as a constant.
 * or an abbreviation for a larger "constant" term (e.g. when 
 * a numeral gets interpreted as a series of BIT0 BIT1 applications)
 * ptm' should *not* return a preterm containing any Var or Abs or Antiq
 * nodes (i.e. it should just contain Comb, Constrained or Const nodes).
 *
 * In the simplest case, "f" just tests whether the atom 
 * is currently defined as a constant in the logic, and returns 
 * Constrained (Const n,ty) if it is.  
 *   
 * overloading_attribution
 *   Similar, except backtracks over multiple possible interpretations
 * of constants looking for ones which are type correct.
 * --------------------------------------------------------------------*)

  val simple_attribution : (string -> preterm option) -> preterm -> preterm
  val overloading_attribution : (string -> preterm list) -> preterm -> preterm


(*----------------------------------------------------------------------
 * Type tables
 *
 * USES
 * 
 * Used to avoid endless annotations of types in terms.
 *
 * Functional use is:
 *    val tt = mk_typetable ["P" |-> (==`:bool -> bool`==)]
 *    fun -- x y = Parse.mk_term_parser [typetable tt] x;
 *    val tm = (--`P`--)
 * Semi-Imperative use is:
 *    val sticky = new_stickyset ["P" |-> (==`:bool -> bool`==)]
 *    fun -- x y = Parse.mk_term_parser [sticky_types sticky] x;
 *    val tm = (--`P`--)
 * Fully imperative use is:
 *    fun -- x y = Parse.mk_term_parser [sticky_types] x;
 *    val _ = show_types := true;
 *    val tm = (--`P:bool -> bool`--)
 *    val tm = (--`P x`--)
 *    val tm = (--`x`--)
 *
 * OLD STICKY TYPES
 *
  (* fully functional - returns a new type set where sticky types have *)
  (* been gleaned from the preterm *)
  val gen_apply_sticky_types : (preterm * typetable) -> (preterm * typetable)

  (* semi imperative - works on a reference to a typetable, updating it with *)
  (* new sticky types  *)
  val new_stickyset : unit -> typetable ref
  val apply_sticky_types : typetable ref -> preterm -> preterm

  (* fully imperative - works on a built in sticky set *)
  val sticky_types_ref : typetable ref;
  val sticky_types : preterm -> preterm
 * --------------------------------------------------------------------*)

  
  type typetable
  val mk_typetable : (string * typ) list -> typetable 
  val dest_typetable : typetable -> (string * typ) list
  val typetable : typetable -> preterm -> preterm


(*----------------------------------------------------------------------
 * maximize_types
 *
 * USES
 * 
 * Used to avoid endless annotations of free types in terms.
 *
 * Instantiates system type variables (Stv's) in the preterm to type
 * variables 'a1, 'a2 etc.  In general should
 * only be passed preterms which have
 * been had type_inference called on them, i.e. types where as many
 * system type variables as possible have already been eliminated by
 * type infeence.  After maximizing the
 * types, "typecheck" will need to be called to actually produce a term.
 * (Nb. This will check types all over again, but that's no hassle)
 *
 * NOTE: Type variables are allocated types 'a1, 'a2 etc.  These
 * should not be used elsewhere in the term as this will result in 
 * a non-maximal type.
 * 
 * --------------------------------------------------------------------*)

  val type_maximization : preterm -> preterm

end;




@


1.1
log
@io transformers moved here
@
text
@d1 5
d17 17
a33 1
 * maximize_types
d37 13
a49 1
 * Used to avoid endless annotations of free types in terms.
d51 11
a61 8
 * Instantiates system type variables (Stv's) in the preterm to type
 * variables 'a1, 'a2 etc.  In general should
 * only be passed preterms which have
 * been had type_inference called on them, i.e. types where as many
 * system type variables as possible have already been eliminated by
 * type infeence.  After maximizing the
 * types, "typecheck" will need to be called to actually produce a term.
 * (Nb. This will check types all over again, but that's no hassle)
d63 29
a91 3
 * NOTE: Type variables are allocated types 'a1, 'a2 etc.  These
 * should not be used elsewhere in the term as this will result in 
 * a non-maximal type.
d93 23
d118 3
a120 1
  val maximize_types : preterm -> preterm
d123 1
a123 1
 * Type tables and Sticky types
a128 5
 * apply_sticky_types : preterm -> stickyset -> preterm
 *
 * Apply a set of sticky-type information to help instantiate free
 * system type variables in the preterm.
 *
d143 3
a145 12
 * --------------------------------------------------------------------*)

  
  type typetable
  val mk_typetable : (string * typ) list -> typetable 
  val add_types : (string * typ) list -> typetable -> typetable
  val remove_types : string list -> typetable -> typetable
  val dest_typetable : typetable -> (string * typ) list
  
  (* fully functional - simply attaches types to unconstrained variables *)
  val typetable : typetable -> preterm -> preterm

a157 6

(*----------------------------------------------------------------------
 * Interface String Maps (string mapping)
 *
 * USES
 * 
a158 3
  type string_map
  val mk_string_map: {term_map:(string * string) list,
			 type_map:(string * string) list} -> string_map
d160 5
a164 9
  val dest_string_map : string_map -> 
      {term_map:(string * string) list, 
       type_map:(string * string) list}

  val string_map_ty : string_map -> pretype -> pretype
  val string_map : string_map -> preterm -> preterm
  val string_map_pp_tm : string_map -> 'a -> 'b -> term -> Portable.PrettyPrint.ppstream -> unit
  val string_map_pp_ty : string_map -> 'a -> 'b -> typ -> Portable.PrettyPrint.ppstream -> unit
  val install_string_map_pp : string_map -> unit
a166 1

d168 1
a168 1
 * Interface Maps (macro expansion)
d172 15
a187 3
  type imap
  val mk_imap: {term_map:(term frag list * term) list,
		type_map:(term frag list * typ) list} -> imap
d189 1
a189 2
  val dest_imap : imap -> {term_map:(preterm * term) list, 
			   type_map:(pretype * typ) list}
d191 1
a191 5
  val imap_ty : imap -> pretype -> pretype
  val imap : imap -> preterm -> preterm
  val imap_pp_tm : imap -> 'a -> 'b -> term -> Portable.PrettyPrint.ppstream -> unit
  val imap_pp_ty : imap -> 'a -> 'b -> typ -> Portable.PrettyPrint.ppstream -> unit
  val install_imap_pp : imap -> unit
a192 1
end;
@
