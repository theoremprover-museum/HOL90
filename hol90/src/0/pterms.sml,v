head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	96.02.08.00.31.53;	author drs1004;	state Exp;
branches;
next	1.2;

1.2
date	96.01.04.13.45.46;	author drs1004;	state Exp;
branches;
next	1.1;

1.1
date	95.12.18.11.35.11;	author drs1004;	state Exp;
branches;
next	;


desc
@@


1.3
log
@New theory mechanism, by Donald Syme, and many other enhancements.
@
text
@signature Pterms_sig =
  sig
    type term sharing type term = Term.term;
    type typ sharing type typ = Type.typ;

    val const_decl : string -> {const:term}
    val is_constant : string -> bool
    val is_polymorphic : string -> bool
    datatype lambda = VAR of (string * typ)
      | CONST of (string * typ)
      | COMB of (term * term)
      | LAMB of (term * term)

    val free_vars : term -> term list
    val free_in : term -> term -> bool
    val all_vars : term -> term list
    val free_varsl : term list -> term list
    val all_varsl : term list -> term list
    val term_lt : term -> term -> bool
    val term_ord : term * term -> order
    val genvar : typ -> term
    val genvars : typ -> int -> term list
    val variant : term list -> term -> term
    val type_of : term -> typ
    val type_vars_in_term : term -> typ list
    val prim_mk_const : string * typ Lib.subst -> term
    val list_mk_comb : term * term list -> term
    val is_var : term -> bool
    val is_const : term -> bool
    val is_comb : term -> bool
    val is_abs : term -> bool
    val dest_term : term -> lambda
    val rator : term -> term
    val rand : term -> term
    val bvar : term -> term
    val body : term -> term
    val aconv : term -> term -> bool
    val subst : term Lib.subst -> term -> term
    val inst : typ Lib.subst -> term -> term
    val beta_conv : term -> term
    val hash_term : term -> int
    val optimize_term : term -> term
    val ty_antiq : typ -> term
    val extract_ty_antiq : term -> typ
    val is_type : string -> bool
    val type_subst : typ Lib.subst -> typ -> typ
    val type_vars : typ -> typ list
    val type_varsl : typ list -> typ list
    val mk_vartype : string -> typ
    val dest_vartype : typ -> string
    val is_vartype : typ -> bool
    val type_ord : typ * typ -> order
    val type_lt : typ -> typ -> bool
    val type_decl : string -> {arity:int, name:string}
    val hash_type : typ -> int
    val optimize_type : typ -> typ
    val bool_ty : typ
    val alpha_ty : typ
    val beta_ty : typ
    val --> : typ * typ -> typ
    val is_fun_ty : typ -> bool
    val mk_prod_ty : typ * typ -> typ
    val dest_prod_ty : typ -> typ * typ
    val is_prod_ty : typ -> bool
    val ### : typ * typ -> typ
    val mk_unop : string -> term * term -> term
    val is_unop : string -> term -> bool
    val dest_unop : string -> term -> term
    val mk_binop : string -> term * term -> term
    val is_binop : string -> term -> bool
    val dest_binop : string -> term -> term * term
    val strip_binop : string -> term -> term list * term
    val binops : string -> term -> term list
    val is_eq : term -> bool
    val lhs : term -> term
    val rhs : term -> term
    val strip_comb : term -> term * term list
    val list_mk_abs : term list * term -> term
    val strip_abs : term -> term list * term
    val is_imp : term -> bool
    val list_mk_imp : term list * term -> term
    val strip_imp : term -> term list * term
    val truth : term
    val falsity : term
    val implies : term
    val mk_neg : term -> term
    val is_neg : term -> bool
    val dest_neg : term -> term
    val negation : term
    val conjunction : term
    val disjunction : term
    val is_conj : term -> bool
    val is_disj : term -> bool
    val list_mk_conj : term list -> term
    val list_mk_disj : term list -> term
    val strip_conj : term -> term list
    val strip_disj : term -> term list
    val is_select : term -> bool
    val is_forall : term -> bool
    val is_exists : term -> bool
    val list_mk_forall : term list * term -> term
    val gen_all : term -> term
    val list_mk_exists : term list * term -> term
    val strip_forall : term -> term list * term
    val strip_exists : term -> term list * term
    val is_cond : term -> bool
    val is_pair : term -> bool
    val is_let : term -> bool
    val list_mk_pair : term list -> term
    val strip_pair : term -> term list
    val is_pabs : term -> bool
    val is_cons : term -> bool
    val is_list : term -> bool
    val find_term : (term -> bool) -> term -> term
    val find_terms : (term -> bool) -> term -> term list
    val subst_occs : int list list -> term Lib.subst -> term -> term
    val match_type : typ -> typ -> typ Lib.subst
    val match_term : term -> term -> (term Lib.subst * typ Lib.subst
)

    val dest_abs : term -> (term * term)
    val dest_comb : term -> (term * term)
    val dest_cond : term -> (term * term * term)
    val dest_conj : term -> (term * term)
    val dest_cons : term -> (term * term)
    val dest_const : term -> (string * typ)
    val dest_disj : term -> (term * term)
    val dest_eq : term -> (term * term)
    val dest_exists : term -> (term * term)
    val dest_forall : term -> (term * term)
    val dest_fun_ty : typ -> (typ * typ)
    val dest_imp : term -> (term * term)
    val dest_let : term -> (term * term)
    val dest_list : term -> (term list * typ)
    val dest_pabs : term -> (term * term)
    val dest_pair : term -> (term * term)
    val dest_select : term -> (term * term)
    val dest_type : typ -> (string * typ list)
    val dest_var : term -> (string * typ)
   
    val mk_abs : (term * term) -> term
    val mk_comb : (term * term) -> term
    val mk_cond : (term * term * term) -> term
    val mk_conj : (term * term) -> term
    val mk_cons : (term * term) -> term
    val mk_const : (string * typ) -> term
    val mk_disj : (term * term) -> term
    val mk_eq : (term * term) -> term
    val mk_exists : (term * term) -> term
    val mk_forall : (term * term) -> term
    val mk_fun_ty : (typ * typ) -> typ
    val mk_imp : (term * term) -> term
    val mk_let : (term * term) -> term
    val mk_list : (term list * typ) -> term
    val mk_pabs : (term * term) -> term
    val mk_pair : (term * term) -> term
    val mk_primed_var : (string * typ) -> term
    val mk_select : (term * term) -> term
    val mk_type : (string * typ list) -> typ
    val mk_var : (string * typ) -> term


  end;


structure Pterms :Pterms_sig =
struct
open Exception;
infix ##;
open Type;
open Term;
open Lib;
open Dsyntax;
open Match;
    
type term = Term.term;
type typ = Type.typ;

datatype lambda = VAR of (string * typ)
  | CONST of (string * typ)
  | COMB of (term * term)
  | LAMB of (term * term)
fun dest_term tm = 
    case Term.dest_term tm of
	Term.VAR {Name,Ty} => VAR (Name,Ty)
      | Term.CONST {Name,Ty} => CONST (Name,Ty)
      | Term.COMB {Rator,Rand} => COMB (Rator,Rand)
      | Term.LAMB {Bvar,Body} => LAMB (Bvar,Body);
	    

fun mk_var(s,ty) = Term.mk_var{Name = s, Ty = ty};
fun mk_const(s,ty) = Dsyntax.mk_const{Name = s, Ty = ty};
fun mk_comb(t1,t2) = Term.mk_comb {Rator = t1, Rand = t2};
fun mk_abs(v,body) = Term.mk_abs{Bvar = v, Body = body};
fun mk_primed_var(s,ty) = Term.mk_primed_var{Name = s, Ty = ty};
fun mk_eq(t1,t2) = Dsyntax.mk_eq{lhs = t1, rhs = t2};
fun mk_imp(t1,t2) = Dsyntax.mk_imp{ant = t1, conseq = t2};
fun mk_select(v,body) = Dsyntax.mk_select{Bvar = v, Body = body};
fun mk_forall(v,body) = Dsyntax.mk_forall{Bvar = v, Body = body};
fun mk_fun_ty(t1,t2) = Dsyntax.mk_fun_ty{dom=t1,ran=t2};
fun mk_exists(v,body) = Dsyntax.mk_exists{Bvar = v, Body = body};
fun mk_conj(t1,t2) = Dsyntax.mk_conj{conj1 = t1, conj2 = t2};
fun mk_disj(t1,t2) = Dsyntax.mk_disj{disj1 = t1, disj2 = t2};
fun mk_cond(p,t1,t2) = Dsyntax.mk_cond{cond = p, larm = t1, rarm = t2};
fun mk_pair(t1,t2) = Dsyntax.mk_pair{fst = t1, snd = t2};
fun mk_let(f,a)= Dsyntax.mk_let{func = f, arg  = a};
fun mk_cons(h,t) = Dsyntax.mk_cons {hd = h, tl = t};
fun mk_list(L,ty) = Dsyntax.mk_list{els = L, ty = ty};
fun mk_pabs(t1,t2) = Dsyntax.mk_pabs{varstruct = t1, body = t2};

(* Destruction routines *)
fun pair_atom{Name,Ty} = (Name,Ty);
fun pair_comb{Rator,Rand} = (Rator,Rand);
fun pair_binder{Bvar,Body} = (Bvar,Body);

fun dest_var x = pair_atom (Term.dest_var x);
fun dest_const x = pair_atom (Term.dest_const x);
fun dest_comb x = pair_comb (Term.dest_comb x);
fun dest_abs x = pair_binder (Term.dest_abs x);
fun dest_eq tm = let val {lhs,rhs} = Dsyntax.dest_eq tm in (lhs,rhs) end;
fun dest_imp tm = let val {ant,conseq} = Dsyntax.dest_imp tm
                  in (ant,conseq) end;
fun dest_select x = pair_binder (Dsyntax.dest_select x);
fun dest_forall x = pair_binder (Dsyntax.dest_forall x);
fun dest_fun_ty x = let val {dom,ran} = Dsyntax.dest_fun_ty x
                   in (dom,ran) end;
fun dest_exists x = pair_binder (Dsyntax.dest_exists x);
fun dest_conj tm = let val {conj1,conj2} = Dsyntax.dest_conj tm
                   in (conj1,conj2) end;
fun dest_disj tm = let val {disj1,disj2} = Dsyntax.dest_disj tm
                   in (disj1,disj2) end;
fun dest_cond tm = let val {cond,larm,rarm} = Dsyntax.dest_cond tm 
                   in (cond,larm,rarm)  end;
fun dest_pair tm = let val{fst,snd} = Dsyntax.dest_pair tm in (fst,snd) end;
fun dest_let tm = let val {func, arg} = Dsyntax.dest_let tm in (func,arg) end;
fun dest_cons tm = let val {hd, tl} = Dsyntax.dest_cons tm in (hd,tl) end;
fun dest_list tm = let val {els, ty} = Dsyntax.dest_list tm in (els,ty) end;
fun dest_pabs tm = let val {varstruct, body} = Dsyntax.dest_pabs tm 
                   in (varstruct,body)
                   end;

fun mk_type(s,ty) = Type.mk_type{Tyop = s, Args = ty};
fun dest_type ty = let val {Tyop,Args} = Type.dest_type ty
                   in (Tyop,Args)
                   end;

end; (* Pterms *)
@


1.2
log
@Fixed types, pretypes, fixities, parsing.
@
text
@d6 115
d161 2
d170 1
d174 1
d179 12
@


1.1
log
@Preterm and other changes, see 7.changes
@
text
@d55 2
a56 1

@
