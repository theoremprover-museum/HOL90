thid = (safety_automata, 866813011, 320012)
axioms = []
definitions =
[((Klarlund),
  [],
  `((! :(((num -> 'a) -> bool) -> bool) -> bool)
   (\(P :(num -> 'a) -> bool).
   (((= :('a # ((num -> 'a) -> bool) # num -> bool) #
         ('a # ((num -> 'a) -> bool) # num ->
         'a # ((num -> 'a) -> bool) # num -> bool) ->
         ('a # ((num -> 'a) -> bool) # num -> bool) #
         ('a # ((num -> 'a) -> bool) # num ->
         'a # ((num -> 'a) -> bool) # num -> bool) -> bool)
   ((Klarlund :((num -> 'a) -> bool) ->
               ('a # ((num -> 'a) -> bool) # num -> bool) #
               ('a # ((num -> 'a) -> bool) # num ->
               'a # ((num -> 'a) -> bool) # num -> bool)) $0))
   (((, :('a # ((num -> 'a) -> bool) # num -> bool) ->
         ('a # ((num -> 'a) -> bool) # num ->
         'a # ((num -> 'a) -> bool) # num -> bool) ->
         ('a # ((num -> 'a) -> bool) # num -> bool) #
         ('a # ((num -> 'a) -> bool) # num ->
         'a # ((num -> 'a) -> bool) # num -> bool))
   ((UNCURRY :('a -> ((num -> 'a) -> bool) # num -> bool) ->
              'a # ((num -> 'a) -> bool) # num -> bool) (\(e :'a).
   ((UNCURRY :(((num -> 'a) -> bool) -> num -> bool) ->
              ((num -> 'a) -> bool) # num -> bool)
   (\(s :(num -> 'a) -> bool). (\(n :num). ((/\
   ((! :((num -> 'a) -> bool) -> bool) (\(w :num -> 'a). ($2 $0))))
   (((= :num -> num -> bool) $0) 0))))))))
   ((UNCURRY :('a -> ((num -> 'a) -> bool) # num ->
              'a # ((num -> 'a) -> bool) # num -> bool) ->
              'a # ((num -> 'a) -> bool) # num ->
              'a # ((num -> 'a) -> bool) # num -> bool) (\(e :'a).
   ((UNCURRY :(((num -> 'a) -> bool) -> num ->
              'a # ((num -> 'a) -> bool) # num -> bool) ->
              ((num -> 'a) -> bool) # num ->
              'a # ((num -> 'a) -> bool) # num -> bool)
   (\(s :(num -> 'a) -> bool). (\(n :num).
   ((UNCURRY :('a -> ((num -> 'a) -> bool) # num -> bool) ->
              'a # ((num -> 'a) -> bool) # num -> bool) (\(e' :'a).
   ((UNCURRY :(((num -> 'a) -> bool) -> num -> bool) ->
              ((num -> 'a) -> bool) # num -> bool)
   (\(s' :(num -> 'a) -> bool). (\(n' :num). ((/\
   (((= :num -> num -> bool) $0) (SUC $3))) ((/\
   ((! :((num -> 'a) -> bool) -> bool) (\(w :num -> 'a).
   (((= :bool -> bool -> bool) ($2 $0)) ((/\ ($5 $0))
   (((= :'a -> 'a -> bool) ($0 $4)) $6))))))
   ((? :((num -> 'a) -> bool) -> bool) (\(w :num -> 'a). ((/\ ($5 $0))
   ($7 $0))))))))))))))))))))`)]
theorems =
[((No_Dead_Safety_Powerset),
  [],
  `((! :(('a # 'b -> bool) -> bool) -> bool) (\(Q :'a # 'b -> bool).
   ((! :(('a # 'b -> 'a # 'b -> bool) -> bool) -> bool)
   (\(N :'a # 'b -> 'a # 'b -> bool). ((==>
   ((Safety :((num -> 'a) -> bool) -> bool)
   ((Trace :('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool) ->
            (num -> 'a) -> bool)
   (((, :('a # 'b -> bool) -> ('a # 'b -> 'a # 'b -> bool) ->
         ('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool)) $1) $0))))
   ((==>
   ((No_Dead :('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool) ->
              bool)
   (((, :('a # 'b -> bool) -> ('a # 'b -> 'a # 'b -> bool) ->
         ('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool)) $1) $0)))
   ((! :((num -> 'a) -> bool) -> bool) (\(e :num -> 'a). ((==>
   (((Trace :('a # ('b -> bool) -> bool) #
             ('a # ('b -> bool) -> 'a # ('b -> bool) -> bool) ->
             (num -> 'a) -> bool)
   ((Powerset :('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool) ->
               ('a # ('b -> bool) -> bool) #
               ('a # ('b -> bool) -> 'a # ('b -> bool) -> bool))
   (((, :('a # 'b -> bool) -> ('a # 'b -> 'a # 'b -> bool) ->
         ('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool)) $2) $1)))
   $0))
   (((Trace :('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool) ->
             (num -> 'a) -> bool)
   (((, :('a # 'b -> bool) -> ('a # 'b -> 'a # 'b -> bool) ->
         ('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool)) $2) $1))
   $0))))))))))`),
 ((No_Dead_Limit_Safe),
  [],
  `((! :(('a # 'b -> bool) -> bool) -> bool) (\(Q :'a # 'b -> bool).
   ((! :(('a # 'b -> 'a # 'b -> bool) -> bool) -> bool)
   (\(N :'a # 'b -> 'a # 'b -> bool). ((==>
   ((No_Dead :('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool) ->
              bool)
   (((, :('a # 'b -> bool) -> ('a # 'b -> 'a # 'b -> bool) ->
         ('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool)) $1) $0)))
   ((! :((num -> 'a) -> bool) -> bool) (\(e :num -> 'a). ((==>
   (((Limit_Trace :('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool) ->
                   (num -> 'a) -> bool)
   (((, :('a # 'b -> bool) -> ('a # 'b -> 'a # 'b -> bool) ->
         ('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool)) $2) $1))
   $0)) (((Safe :((num -> 'a) -> bool) -> (num -> 'a) -> bool)
   ((Trace :('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool) ->
            (num -> 'a) -> bool)
   (((, :('a # 'b -> bool) -> ('a # 'b -> 'a # 'b -> bool) ->
         ('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool)) $2) $1)))
   $0)))))))))`),
 ((Stutter_not_Safety),
  [],
  `((? :((bool # num -> bool) -> bool) -> bool)
   (\(Q :bool # num -> bool).
   ((? :((bool # num -> bool # num -> bool) -> bool) -> bool)
   (\(N :bool # num -> bool # num -> bool). ((/\
   ((Stuttering :(bool # num -> bool) #
                 (bool # num -> bool # num -> bool) -> bool)
   (((, :(bool # num -> bool) -> (bool # num -> bool # num -> bool) ->
         (bool # num -> bool) # (bool # num -> bool # num -> bool))
   $1) $0))) (~ ((Safety :((num -> bool) -> bool) -> bool)
   ((Trace :(bool # num -> bool) #
            (bool # num -> bool # num -> bool) -> (num -> bool) ->
            bool)
   (((, :(bool # num -> bool) -> (bool # num -> bool # num -> bool) ->
         (bool # num -> bool) # (bool # num -> bool # num -> bool))
   $1) $0)))))))))`),
 ((Safety_eq_Deterministic),
  [],
  `((! :(((num -> 'a) -> bool) -> bool) -> bool)
   (\(P :(num -> 'a) -> bool). (((= :bool -> bool -> bool)
   ((Safety :((num -> 'a) -> bool) -> bool) $0))
   ((? :(('a # ((num -> 'a) -> bool) # num -> bool) -> bool) -> bool)
   (\(Q :'a # ((num -> 'a) -> bool) # num -> bool).
   ((? :(('a # ((num -> 'a) -> bool) # num ->
         'a # ((num -> 'a) -> bool) # num -> bool) -> bool) -> bool)
   (\(N :'a # ((num -> 'a) -> bool) # num ->
         'a # ((num -> 'a) -> bool) # num -> bool). ((/\
   ((Deterministic :('a # ((num -> 'a) -> bool) # num -> bool) #
                    ('a # ((num -> 'a) -> bool) # num ->
                    'a # ((num -> 'a) -> bool) # num -> bool) -> bool)
   (((, :('a # ((num -> 'a) -> bool) # num -> bool) ->
         ('a # ((num -> 'a) -> bool) # num ->
         'a # ((num -> 'a) -> bool) # num -> bool) ->
         ('a # ((num -> 'a) -> bool) # num -> bool) #
         ('a # ((num -> 'a) -> bool) # num ->
         'a # ((num -> 'a) -> bool) # num -> bool)) $1) $0)))
   (((= :((num -> 'a) -> bool) -> ((num -> 'a) -> bool) -> bool) $2)
   ((Trace :('a # ((num -> 'a) -> bool) # num -> bool) #
            ('a # ((num -> 'a) -> bool) # num ->
            'a # ((num -> 'a) -> bool) # num -> bool) ->
            (num -> 'a) -> bool)
   (((, :('a # ((num -> 'a) -> bool) # num -> bool) ->
         ('a # ((num -> 'a) -> bool) # num ->
         'a # ((num -> 'a) -> bool) # num -> bool) ->
         ('a # ((num -> 'a) -> bool) # num -> bool) #
         ('a # ((num -> 'a) -> bool) # num ->
         'a # ((num -> 'a) -> bool) # num -> bool)) $1)
   $0)))))))))))`),
 ((Safety_Klarlund),
  [],
  `((! :(((num -> 'a) -> bool) -> bool) -> bool)
   (\(P :(num -> 'a) -> bool). ((==>
   ((Safety :((num -> 'a) -> bool) -> bool) $0))
   (((= :((num -> 'a) -> bool) -> ((num -> 'a) -> bool) -> bool)
   ((Trace :('a # ((num -> 'a) -> bool) # num -> bool) #
            ('a # ((num -> 'a) -> bool) # num ->
            'a # ((num -> 'a) -> bool) # num -> bool) ->
            (num -> 'a) -> bool)
   ((Klarlund :((num -> 'a) -> bool) ->
               ('a # ((num -> 'a) -> bool) # num -> bool) #
               ('a # ((num -> 'a) -> bool) # num ->
               'a # ((num -> 'a) -> bool) # num -> bool)) $0)))
   $0))))`),
 ((Safe_Trace_Klarlund),
  [],
  `((! :(((num -> 'a) -> bool) -> bool) -> bool)
   (\(P :(num -> 'a) -> bool).
   (((= :((num -> 'a) -> bool) -> ((num -> 'a) -> bool) -> bool)
   ((Safe :((num -> 'a) -> bool) -> (num -> 'a) -> bool) $0))
   ((Trace :('a # ((num -> 'a) -> bool) # num -> bool) #
            ('a # ((num -> 'a) -> bool) # num ->
            'a # ((num -> 'a) -> bool) # num -> bool) ->
            (num -> 'a) -> bool)
   ((Klarlund :((num -> 'a) -> bool) ->
               ('a # ((num -> 'a) -> bool) # num -> bool) #
               ('a # ((num -> 'a) -> bool) # num ->
               'a # ((num -> 'a) -> bool) # num -> bool)) $0)))))`),
 ((Deterministic_Klarlund),
  [],
  `((! :(((num -> 'a) -> bool) -> bool) -> bool)
   (\(P :(num -> 'a) -> bool).
   ((Deterministic :('a # ((num -> 'a) -> bool) # num -> bool) #
                    ('a # ((num -> 'a) -> bool) # num ->
                    'a # ((num -> 'a) -> bool) # num -> bool) -> bool)
   ((Klarlund :((num -> 'a) -> bool) ->
               ('a # ((num -> 'a) -> bool) # num -> bool) #
               ('a # ((num -> 'a) -> bool) # num ->
               'a # ((num -> 'a) -> bool) # num -> bool)) $0))))`),
 ((Safety_Deterministic),
  [],
  `((! :(('a # 'b -> bool) -> bool) -> bool) (\(Q :'a # 'b -> bool).
   ((! :(('a # 'b -> 'a # 'b -> bool) -> bool) -> bool)
   (\(N :'a # 'b -> 'a # 'b -> bool). ((==>
   ((Deterministic :('a # 'b -> bool) #
                    ('a # 'b -> 'a # 'b -> bool) -> bool)
   (((, :('a # 'b -> bool) -> ('a # 'b -> 'a # 'b -> bool) ->
         ('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool)) $1) $0)))
   ((Safety :((num -> 'a) -> bool) -> bool)
   ((Trace :('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool) ->
            (num -> 'a) -> bool)
   (((, :('a # 'b -> bool) -> ('a # 'b -> 'a # 'b -> bool) ->
         ('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool)) $1)
   $0))))))))`),
 ((Safety_Limit),
  [],
  `((! :(('a # 'b -> bool) -> bool) -> bool) (\(Q :'a # 'b -> bool).
   ((! :(('a # 'b -> 'a # 'b -> bool) -> bool) -> bool)
   (\(N :'a # 'b -> 'a # 'b -> bool).
   ((Safety :((num -> 'a) -> bool) -> bool)
   ((Limit_Trace :('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool) ->
                  (num -> 'a) -> bool)
   (((, :('a # 'b -> bool) -> ('a # 'b -> 'a # 'b -> bool) ->
         ('a # 'b -> bool) # ('a # 'b -> 'a # 'b -> bool)) $1)
   $0)))))))`)]
