head	1.5;
access;
symbols
	HOL97:1.2.0.4
	bpHOL97:1.2
	hol90_9_alpha:1.2
	hol90_pre8_for_multiple_compilers:1.2.0.2
	hol90_pre8_after_donalds_separate_compilation_changes:1.2
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.5
date	96.02.08.00.35.16;	author drs1004;	state Exp;
branches;
next	1.4;

1.4
date	96.01.04.13.48.21;	author drs1004;	state Exp;
branches;
next	1.3;

1.3
date	95.12.18.11.36.19;	author drs1004;	state Exp;
branches;
next	1.2;

1.2
date	95.10.31.15.05.02;	author drs1004;	state Exp;
branches;
next	1.1;

1.1
date	95.10.16.13.30.15;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.30.15;	author rjb;	state Exp;
branches;
next	;


desc
@@


1.5
log
@New theory mechanism, code reorganisation and other enhancements by Don Syme.
@
text
@(* ===================================================================== *)
(* FILE          : conv.sig                                              *)
(* DESCRIPTION   : Signature for various conversions. Translated from    *)
(*                 hol88.                                                *)
(* AUTHORS       : (c) Many people at Cambridge:                         *)
(*                        Larry Paulson                                  *)
(*                        Mike Gordon                                    *)
(*                        Richard Boulton and                            *)
(*                        Tom Melham, University of Cambridge plus       *)
(*                     Paul Loewenstein, for hol88                       *)
(* TRANSLATOR    : Konrad Slind, University of Calgary                   *)
(* DATE          : September 11, 1991                                    *)
(* ===================================================================== *)


signature Conv_sig =
sig
    type conv sharing type conv = conv;
    type thm sharing type thm = Thm.thm;
    type term sharing type term = Thm.Term.term;


    val SYM_CONV : conv
    val FUN_EQ_CONV : conv
    val X_FUN_EQ_CONV : term -> conv
    val CONTRAPOS_CONV : conv
    val ANTE_CONJ_CONV : conv
    val RAND_CONV : conv -> conv
    val RATOR_CONV : conv -> conv
    val ABS_CONV : conv -> conv
    val MK_ABS_CONV : term -> conv
    val MK_ABSL_CONV : term list -> conv

    val GSYM : thm -> thm
    val BETA_RULE : thm -> thm
    val BETA_TAC : Abbrev.tactic

    val NO_CONV : conv
    val ALL_CONV : conv
    val THENC : (conv * conv) -> conv
    val ORELSEC : (conv * conv) -> conv
    val FIRST_CONV : conv list -> conv
    val EVERY_CONV : conv list -> conv
    val REPEATC : conv -> conv
    val CHANGED_CONV : conv -> conv
    val TRY_CONV : conv -> conv
    val SUB_CONV : conv -> conv
    val DEPTH_CONV : conv -> conv
    val REDEPTH_CONV : conv -> conv
    val TOP_DEPTH_CONV : conv -> conv
    val ONCE_DEPTH_CONV : conv -> conv
    val CONV_RULE : conv -> thm -> thm
    val CONV_TAC : conv -> Abbrev.tactic
    val RIGHT_CONV_RULE : conv -> thm -> thm
	
    val QCONV : conv -> conv;
    val ALL_QCONV : conv
    val REPEATQC : conv -> conv
    val CHANGED_QCONV : conv -> conv
    val TRY_QCONV : conv -> conv
    val SUB_QCONV : conv -> conv
    val DEPTH_QCONV : conv -> conv
    val REDEPTH_QCONV : conv -> conv
    val TOP_DEPTH_QCONV : conv -> conv
    val ORELSEQC : conv * conv -> conv					
    val THENQC : conv * conv -> conv					
    val FIRST_QCONV : conv list -> conv

end;
@


1.4
log
@Added simplifier components, added drule files, added MK_ABS_CONV, better error messages
@
text
@d18 3
a20 75
structure Thm : Thm_sig
type conv sharing type conv = conv;
type thm sharing type thm = Thm.thm;
type term sharing type term = Thm.Term.term;
type tactic sharing type tactic = Abbrev.tactic;
type hol_type sharing type hol_type = Thm.Term.Type.hol_type;
val INST_TY_TERM :(term Lib.subst * hol_type Lib.subst) -> thm -> thm
val GSPEC : thm -> thm
val PART_MATCH : (term -> term) -> thm -> conv
val REWR_CONV : thm -> conv
val MATCH_MP : thm -> thm -> thm
val NO_CONV : conv
val ALL_CONV : conv
val THENC : (conv * conv) -> conv
val ORELSEC : (conv * conv) -> conv
val FIRST_CONV : conv list -> conv
val EVERY_CONV : conv list -> conv
val REPEATC : conv -> conv
val CHANGED_CONV : conv -> conv
val TRY_CONV : conv -> conv
val SUB_CONV : conv -> conv
val DEPTH_CONV : conv -> conv
val REDEPTH_CONV : conv -> conv
val TOP_DEPTH_CONV : conv -> conv
val ONCE_DEPTH_CONV : conv -> conv
val CONV_RULE : conv -> thm -> thm
val CONV_TAC : conv -> tactic
val BETA_RULE : thm -> thm
val BETA_TAC : tactic
val NOT_FORALL_CONV : conv
val NOT_EXISTS_CONV : conv
val EXISTS_NOT_CONV : conv
val FORALL_NOT_CONV : conv
val FORALL_AND_CONV : conv
val EXISTS_OR_CONV : conv
val AND_FORALL_CONV : conv
val LEFT_AND_FORALL_CONV : conv
val RIGHT_AND_FORALL_CONV : conv
val OR_EXISTS_CONV : conv
val LEFT_OR_EXISTS_CONV : conv
val RIGHT_OR_EXISTS_CONV : conv
val EXISTS_AND_CONV : conv
val AND_EXISTS_CONV : conv
val LEFT_AND_EXISTS_CONV : conv
val RIGHT_AND_EXISTS_CONV : conv
val FORALL_OR_CONV : conv
val OR_FORALL_CONV : conv
val LEFT_OR_FORALL_CONV : conv
val RIGHT_OR_FORALL_CONV : conv
val FORALL_IMP_CONV : conv
val LEFT_IMP_EXISTS_CONV : conv
val RIGHT_IMP_FORALL_CONV : conv
val EXISTS_IMP_CONV : conv
val LEFT_IMP_FORALL_CONV : conv
val RIGHT_IMP_EXISTS_CONV : conv
val X_SKOLEM_CONV : term -> conv
val SKOLEM_CONV : conv
val SYM_CONV : conv
val RIGHT_CONV_RULE : conv -> thm -> thm
val FUN_EQ_CONV : conv
val X_FUN_EQ_CONV : term -> conv
val SELECT_CONV : conv
val CONTRAPOS_CONV : conv
val ANTE_CONJ_CONV : conv
val SWAP_EXISTS_CONV : conv
val RAND_CONV : conv -> conv
val RATOR_CONV : conv -> conv
val ABS_CONV : conv -> conv
val bool_EQ_CONV : conv
val EXISTS_UNIQUE_CONV : conv
val COND_CONV : conv
val EXISTENCE : thm -> thm
val UNIQUENESS : thm -> thm
val AC_CONV : thm * thm -> conv
val GSYM : thm -> thm
d23 10
a32 12
val QCONV : conv -> conv;
val ALL_QCONV : conv
val REPEATQC : conv -> conv
val CHANGED_QCONV : conv -> conv
val TRY_QCONV : conv -> conv
val SUB_QCONV : conv -> conv
val DEPTH_QCONV : conv -> conv
val REDEPTH_QCONV : conv -> conv
val TOP_DEPTH_QCONV : conv -> conv
val ORELSEQC : conv * conv -> conv					
val THENQC : conv * conv -> conv					
val FIRST_QCONV : conv list -> conv
d34 35
@


1.3
log
@Preterm and other changes, see 7.changes
@
text
@d90 1
d106 1
@


1.2
log
@First phase of hol90.8 development.  hol90 now compiles using NJSML-CM
108.5, with separate compilation of libraries.  System dependencies
have been isolated in the makefiles and "portable.sml".

This involved a large number of enhancments to the source files,
most of which are documented in the 7.changes file (or will be shortly).
See also the correpsonding email corrspondence between RJB, KLS, TFM,
JRH and DRS that happened during this development.
@
text
@d19 87
a105 69
val INST_TY_TERM :(Thm.Term.term Lib.subst * Thm.Term.Type.hol_type Lib.subst) -> 
                  Thm.thm -> Thm.thm
val GSPEC : Thm.thm -> Thm.thm
val PART_MATCH : (Thm.Term.term -> Thm.Term.term) -> Thm.thm -> Abbrev.conv
val REWR_CONV : Thm.thm -> Abbrev.conv
val MATCH_MP : Thm.thm -> Thm.thm -> Thm.thm
val NO_CONV : Abbrev.conv
val ALL_CONV : Abbrev.conv
val THENC : (Abbrev.conv * Abbrev.conv) -> Abbrev.conv
val ORELSEC : (Abbrev.conv * Abbrev.conv) -> Abbrev.conv
val FIRST_CONV : Abbrev.conv list -> Abbrev.conv
val EVERY_CONV : Abbrev.conv list -> Abbrev.conv
val REPEATC : Abbrev.conv -> Abbrev.conv
val CHANGED_CONV : Abbrev.conv -> Abbrev.conv
val TRY_CONV : Abbrev.conv -> Abbrev.conv
val SUB_CONV : Abbrev.conv -> Abbrev.conv
val DEPTH_CONV : Abbrev.conv -> Abbrev.conv
val REDEPTH_CONV : Abbrev.conv -> Abbrev.conv
val TOP_DEPTH_CONV : Abbrev.conv -> Abbrev.conv
val ONCE_DEPTH_CONV : Abbrev.conv -> Abbrev.conv
val CONV_RULE : Abbrev.conv -> Thm.thm -> Thm.thm
val CONV_TAC : Abbrev.conv -> Abbrev.tactic
val BETA_RULE : Thm.thm -> Thm.thm
val BETA_TAC : Abbrev.tactic
val NOT_FORALL_CONV : Abbrev.conv
val NOT_EXISTS_CONV : Abbrev.conv
val EXISTS_NOT_CONV : Abbrev.conv
val FORALL_NOT_CONV : Abbrev.conv
val FORALL_AND_CONV : Abbrev.conv
val EXISTS_OR_CONV : Abbrev.conv
val AND_FORALL_CONV : Abbrev.conv
val LEFT_AND_FORALL_CONV : Abbrev.conv
val RIGHT_AND_FORALL_CONV : Abbrev.conv
val OR_EXISTS_CONV : Abbrev.conv
val LEFT_OR_EXISTS_CONV : Abbrev.conv
val RIGHT_OR_EXISTS_CONV : Abbrev.conv
val EXISTS_AND_CONV : Abbrev.conv
val AND_EXISTS_CONV : Abbrev.conv
val LEFT_AND_EXISTS_CONV : Abbrev.conv
val RIGHT_AND_EXISTS_CONV : Abbrev.conv
val FORALL_OR_CONV : Abbrev.conv
val OR_FORALL_CONV : Abbrev.conv
val LEFT_OR_FORALL_CONV : Abbrev.conv
val RIGHT_OR_FORALL_CONV : Abbrev.conv
val FORALL_IMP_CONV : Abbrev.conv
val LEFT_IMP_EXISTS_CONV : Abbrev.conv
val RIGHT_IMP_FORALL_CONV : Abbrev.conv
val EXISTS_IMP_CONV : Abbrev.conv
val LEFT_IMP_FORALL_CONV : Abbrev.conv
val RIGHT_IMP_EXISTS_CONV : Abbrev.conv
val X_SKOLEM_CONV : Thm.Term.term -> Abbrev.conv
val SKOLEM_CONV : Abbrev.conv
val SYM_CONV : Abbrev.conv
val RIGHT_CONV_RULE : Abbrev.conv -> Thm.thm -> Thm.thm
val FUN_EQ_CONV : Abbrev.conv
val X_FUN_EQ_CONV : Thm.Term.term -> Abbrev.conv
val SELECT_CONV : Abbrev.conv
val CONTRAPOS_CONV : Abbrev.conv
val ANTE_CONJ_CONV : Abbrev.conv
val SWAP_EXISTS_CONV : Abbrev.conv
val RAND_CONV : Abbrev.conv -> Abbrev.conv
val RATOR_CONV : Abbrev.conv -> Abbrev.conv
val ABS_CONV : Abbrev.conv -> Abbrev.conv
val bool_EQ_CONV : Abbrev.conv
val EXISTS_UNIQUE_CONV : Abbrev.conv
val COND_CONV : Abbrev.conv
val EXISTENCE : Thm.thm -> Thm.thm
val AC_CONV : Thm.thm * Thm.thm -> Abbrev.conv
val GSYM : Thm.thm -> Thm.thm
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
val INST_TY_TERM :(Thm.Term.term subst * Thm.Term.Type.hol_type subst) -> 
d22 2
a23 2
val PART_MATCH : (Thm.Term.term -> Thm.Term.term) -> Thm.thm -> conv
val REWR_CONV : Thm.thm -> conv
d25 16
a40 16
val NO_CONV : conv
val ALL_CONV : conv
val THENC : (conv * conv) -> conv
val ORELSEC : (conv * conv) -> conv
val FIRST_CONV : conv list -> conv
val EVERY_CONV : conv list -> conv
val REPEATC : conv -> conv
val CHANGED_CONV : conv -> conv
val TRY_CONV : conv -> conv
val SUB_CONV : conv -> conv
val DEPTH_CONV : conv -> conv
val REDEPTH_CONV : conv -> conv
val TOP_DEPTH_CONV : conv -> conv
val ONCE_DEPTH_CONV : conv -> conv
val CONV_RULE : conv -> Thm.thm -> Thm.thm
val CONV_TAC : conv -> tactic
d42 43
a84 43
val BETA_TAC : tactic
val NOT_FORALL_CONV : conv
val NOT_EXISTS_CONV : conv
val EXISTS_NOT_CONV : conv
val FORALL_NOT_CONV : conv
val FORALL_AND_CONV : conv
val EXISTS_OR_CONV : conv
val AND_FORALL_CONV : conv
val LEFT_AND_FORALL_CONV : conv
val RIGHT_AND_FORALL_CONV : conv
val OR_EXISTS_CONV : conv
val LEFT_OR_EXISTS_CONV : conv
val RIGHT_OR_EXISTS_CONV : conv
val EXISTS_AND_CONV : conv
val AND_EXISTS_CONV : conv
val LEFT_AND_EXISTS_CONV : conv
val RIGHT_AND_EXISTS_CONV : conv
val FORALL_OR_CONV : conv
val OR_FORALL_CONV : conv
val LEFT_OR_FORALL_CONV : conv
val RIGHT_OR_FORALL_CONV : conv
val FORALL_IMP_CONV : conv
val LEFT_IMP_EXISTS_CONV : conv
val RIGHT_IMP_FORALL_CONV : conv
val EXISTS_IMP_CONV : conv
val LEFT_IMP_FORALL_CONV : conv
val RIGHT_IMP_EXISTS_CONV : conv
val X_SKOLEM_CONV : Thm.Term.term -> conv
val SKOLEM_CONV : conv
val SYM_CONV : conv
val RIGHT_CONV_RULE : conv -> Thm.thm -> Thm.thm
val FUN_EQ_CONV : conv
val X_FUN_EQ_CONV : Thm.Term.term -> conv
val SELECT_CONV : conv
val CONTRAPOS_CONV : conv
val ANTE_CONJ_CONV : conv
val SWAP_EXISTS_CONV : conv
val RAND_CONV : conv -> conv
val RATOR_CONV : conv -> conv
val ABS_CONV : conv -> conv
val bool_EQ_CONV : conv
val EXISTS_UNIQUE_CONV : conv
val COND_CONV : conv
d86 1
a86 1
val AC_CONV : Thm.thm * Thm.thm -> conv
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
