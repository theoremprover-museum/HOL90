head	1.1;
branch	1.1.1;
access;
symbols
	HOL97:1.1.1.1.0.6
	bpHOL97:1.1.1.1
	hol90_9_alpha:1.1.1.1
	hol90_pre8_for_multiple_compilers:1.1.1.1.0.4
	hol90_pre8_after_donalds_separate_compilation_changes:1.1.1.1
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.10.16.13.35.12;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.35.12;	author rjb;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@\DOC new_prim_rec_definition

\TYPE {new_prim_rec_definition : ((string # term) -> thm)}

\SYNOPSIS
Define a primitive recursive function over the type {:num}.

\DESCRIBE
The function {new_prim_rec_definition} provides the facility for defining
primitive recursive functions on the type {num}. It takes a pair argument,
consisting of the name under which the resulting definition will be saved in
the current theory segment, and a term giving the desired definition.  The
value returned by {new_prim_rec_definition} is a theorem which states the
definition requested by the user.  This theorem is derived by formal proof from
an instance of the theorem {num_Axiom}:
{
   |- !e f. ?! fn. (fn 0 = e) /\ (!n. fn(SUC n) = f(fn n)n)
}
Evaluating
{
   new_prim_rec_definition
    (`fun_DEF`,
     "(fun x_1 ... 0 ... x_i = f_1[x_1, ..., x_i]) /\
      (fun x_1 ... (SUC n) ... x_i =
               f_2[fun t_1 ... n ... t_i, x_1, ..., n, ..., x_i])");;
}
\noindent where all the free variables in the terms {t_1}, ..., {t_i} are
contained in {{{n, x_1, ..., x_i}}}, automatically proves the theorem:
{
   |-  ?fun. !x_1 ... x_i. fun x_1 ... 0 ... x_i = f_1[x_1, ..., x_i] /\
             !x_1 ... x_i. fun (SUC n) x_1 ... x_i =
                               f_2[fun t_1 ... n ... t_i, x_1, ..., n, ...,x_i]
}
\noindent and then declares a new constant {fun} with this property as its
specification. This constant specification is returned as a theorem by
{new_prim_rec_definition} and is saved with name {fun_DEF} in the
current theory segment.

The ML function {new_prim_rec_definition} also allows the user to
partially specify the value of a function defined (possibly recursively) on the
natural numbers by giving its value for only one of {0} or {SUC n}.  See the
example below.

\FAILURE
Failure occurs if HOL cannot prove there is a function satisfying the
specification (ie. if the term supplied to {new_prim_rec_definition}
is not a well-formed primitive recursive definition), or if
any other condition for making a constant specification is violated
(see the failure conditions for {new_specification}).

\EXAMPLE
A curried addition function {plus:num->num->num} can be defined by primitive
recursion on its first argument:
{
   #let PLUS = new_prim_rec_definition
   #           (`PLUS`,
   #            "(plus 0 n = n) /\
   #             (plus (SUC m) n = SUC(plus m n))");;
   PLUS = |- (!n. plus 0 n = n) /\ (!m n. plus(SUC m)n = SUC(plus m n))
}
\noindent or by primitive recursion on its second argument:
{
   #let PLUS = new_prim_rec_definition
   #            (`PLUS`,
   #             "(plus m 0 = m) /\
   #              (plus m (SUC n) = SUC(plus m n))");;
   PLUS = |- (!m. plus m 0 = m) /\ (!m n. plus m(SUC n) = SUC(plus m n))
}
\noindent A decrement function {DEC}, whose value is specified for only
positive natural numbers, can be defined using {new_prim_rec_definition}
as follows
{
   #let DEC = new_prim_rec_definition
   #            (`DEC`, "DEC (SUC n) = n");;
   DEC = |- !n. DEC(SUC n) = n
}
\noindent This definition specifies the value of the function {DEC} only for
positive natural numbers. In particular, the value of {DEC 0} is left
unspecified, and the only non-trivial property that can be proved to hold of
the constant {DEC} is the property stated by the theorem returned by the
call to {new_prim_rec_definition} shown in the session above.

\SEEALSO
new_definition, new_infix_definition, new_infix_list_rec_definition,
new_infix_prim_rec_definition, new_list_rec_definition,
new_recursive_definition, new_type_definition, new_specification, num_Axiom.

\ENDDOC
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
