thid = (csp_syntax, 784895023, 179749)
axioms = []
definitions =
[((TS),
  [],
  `((/\ ((! :(string set -> bool) -> bool) (\(A :string set).
   ((! :((string -> string + process) -> bool) -> bool)
   (\(E :string -> string + process).
   (((= :process -> process -> bool) ((TS (stop $1)) $0)) (STOP
   $1))))))) ((/\ ((! :(string set -> bool) -> bool)
   (\(A :string set).
   ((! :((string -> string + process) -> bool) -> bool)
   (\(E :string -> string + process).
   (((= :process -> process -> bool) ((TS (run $1)) $0)) (RUN
   $1))))))) ((/\ ((! :(string -> bool) -> bool) (\(s :string).
   ((! :((string -> string + process) -> bool) -> bool)
   (\(E :string -> string + process).
   (((= :process -> process -> bool) ((TS (var $1)) $0))
   ((OUTR :string + process -> process) ($0 $1)))))))) ((/\
   ((! :(Event -> bool) -> bool) (\(a :Event).
   ((! :(CSP -> bool) -> bool) (\(P :CSP).
   ((! :((string -> string + process) -> bool) -> bool)
   (\(E :string -> string + process).
   (((= :process -> process -> bool) ((TS ((pref $2) $1)) $0)) ((-->
   ((ES $2) $0)) ((TS $1) $0)))))))))) ((/\
   ((! :(string -> bool) -> bool) (\(s :string).
   ((! :(string set -> bool) -> bool) (\(A :string set).
   ((! :(CSP -> bool) -> bool) (\(P :CSP).
   ((! :((string -> string + process) -> bool) -> bool)
   (\(E :string -> string + process).
   (((= :process -> process -> bool) ((TS (((Choice $3) $2) $1)) $0))
   ((choice $2) (\(x :string). ((TS $2) (((Bnd $4)
   ((INL :string -> string + process) $0)) $1)))))))))))))) ((/\
   ((! :(CSP -> bool) -> bool) (\(P :CSP). ((! :(CSP -> bool) -> bool)
   (\(Q :CSP). ((! :((string -> string + process) -> bool) -> bool)
   (\(E :string -> string + process).
   (((= :process -> process -> bool) ((TS ((par $2) $1)) $0)) ((PAR
   ((TS $2) $0)) ((TS $1) $0)))))))))) ((/\
   ((! :(CSP -> bool) -> bool) (\(P :CSP).
   ((! :(string list -> bool) -> bool) (\(tr :string list).
   ((! :((string -> string + process) -> bool) -> bool)
   (\(E :string -> string + process).
   (((= :process -> process -> bool) ((TS ((after $2) $1)) $0)) ((/
   ((TS $2) $0)) $1))))))))) ((/\ ((! :(string -> bool) -> bool)
   (\(s :string). ((! :(string set -> bool) -> bool)
   (\(A :string set). ((! :(CSP -> bool) -> bool) (\(P :CSP).
   ((! :((string -> string + process) -> bool) -> bool)
   (\(E :string -> string + process).
   (((= :process -> process -> bool) ((TS (((mu $3) $2) $1)) $0)) ((MU
   $2) (\(x :process). ((TS $2) (((Bnd $4)
   ((INR :process -> string + process) $0)) $1))))))))))))))
   ((! :(Event -> bool) -> bool) (\(e1 :Event).
   ((! :(Event -> bool) -> bool) (\(e2 :Event).
   ((! :(CSP -> bool) -> bool) (\(P :CSP). ((! :(CSP -> bool) -> bool)
   (\(Q :CSP). ((! :((string -> string + process) -> bool) -> bool)
   (\(E :string -> string + process).
   (((= :process -> process -> bool) ((TS ((((cond $4) $3) $2) $1))
   $0)) ((((COND :bool -> process -> process -> process)
   (((= :string -> string -> bool) ((ES $4) $0)) ((ES $3) $0))) ((TS
   $2) $0)) ((TS $1) $0)))))))))))))))))))))`),
 ((Bnd),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   ((! :(string + process -> bool) -> bool) (\(exp :string + process).
   ((! :((string -> string + process) -> bool) -> bool)
   (\(env :string -> string + process).
   (((= :(string -> string + process) ->
         (string -> string + process) -> bool) (((Bnd $2) $1) $0))
   (\(s' :string).
   ((((COND :bool -> string + process -> string + process ->
             string + process) (((= :string -> string -> bool) $0)
   $3)) $2) ($1 $3))))))))))`),
 ((cond_DEF),
  [],
  `((! :(Event -> bool) -> bool) (\(E0 :Event).
   ((! :(Event -> bool) -> bool) (\(E1 :Event).
   ((! :(CSP -> bool) -> bool) (\(C1 :CSP).
   ((! :(CSP -> bool) -> bool) (\(C2 :CSP). (((= :CSP -> CSP -> bool)
   ((((cond $3) $2) $1) $0)) (ABS_CSP
   (((Node :string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INR :Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string # string set + one + string list +
          string # string set + Event # Event ->
          Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :one + string list + string # string set + Event # Event ->
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string list + string # string set + Event # Event ->
          one + string list + string # string set + Event # Event)
   ((INR :string # string set + Event # Event ->
          string list + string # string set + Event # Event)
   ((INR :Event # Event -> string # string set + Event # Event)
   (((, :Event -> Event -> Event # Event) $3) $2))))))))))
   (((CONS :(string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list) (REP_CSP
   $1))
   (((CONS :(string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list) (REP_CSP
   $0))
   (NIL :(string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event) ltree
         list))))))))))))))`),
 ((mu_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s0 :string).
   ((! :(string set -> bool) -> bool) (\(s1 :string set).
   ((! :(CSP -> bool) -> bool) (\(C :CSP). (((= :CSP -> CSP -> bool)
   (((mu $2) $1) $0)) (ABS_CSP
   (((Node :string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INR :Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string # string set + one + string list +
          string # string set + Event # Event ->
          Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :one + string list + string # string set + Event # Event ->
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string list + string # string set + Event # Event ->
          one + string list + string # string set + Event # Event)
   ((INR :string # string set + Event # Event ->
          string list + string # string set + Event # Event)
   ((INL :string # string set -> string # string set + Event # Event)
   (((, :string -> string set -> string # string set) $2) $1))))))))))
   (((CONS :(string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list) (REP_CSP
   $0))
   (NIL :(string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event) ltree list)))))))))))`),
 ((after_DEF),
  [],
  `((! :(CSP -> bool) -> bool) (\(C :CSP).
   ((! :(string list -> bool) -> bool) (\(l' :string list).
   (((= :CSP -> CSP -> bool) ((after $1) $0)) (ABS_CSP
   (((Node :string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INR :Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string # string set + one + string list +
          string # string set + Event # Event ->
          Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :one + string list + string # string set + Event # Event ->
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string list + string # string set + Event # Event ->
          one + string list + string # string set + Event # Event)
   ((INL :string list ->
          string list + string # string set + Event # Event)
   $0))))))))
   (((CONS :(string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list) (REP_CSP
   $1))
   (NIL :(string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event) ltree list)))))))))`),
 ((par_DEF),
  [],
  `((! :(CSP -> bool) -> bool) (\(C1 :CSP).
   ((! :(CSP -> bool) -> bool) (\(C2 :CSP). (((= :CSP -> CSP -> bool)
   ((par $1) $0)) (ABS_CSP
   (((Node :string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INR :Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string # string set + one + string list +
          string # string set + Event # Event ->
          Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :one + string list + string # string set + Event # Event ->
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INL :one ->
          one + string list + string # string set + Event # Event)
   one)))))))
   (((CONS :(string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list) (REP_CSP
   $1))
   (((CONS :(string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list) (REP_CSP
   $0))
   (NIL :(string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event) ltree list))))))))))`),
 ((Choice_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s0 :string).
   ((! :(string set -> bool) -> bool) (\(s1 :string set).
   ((! :(CSP -> bool) -> bool) (\(C :CSP). (((= :CSP -> CSP -> bool)
   (((Choice $2) $1) $0)) (ABS_CSP
   (((Node :string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INR :Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string # string set + one + string list +
          string # string set + Event # Event ->
          Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INL :string # string set ->
          string # string set + one + string list +
          string # string set + Event # Event)
   (((, :string -> string set -> string # string set) $2) $1)))))))
   (((CONS :(string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list) (REP_CSP
   $0))
   (NIL :(string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event) ltree list)))))))))))`),
 ((pref_DEF),
  [],
  `((! :(Event -> bool) -> bool) (\(E :Event).
   ((! :(CSP -> bool) -> bool) (\(C :CSP). (((= :CSP -> CSP -> bool)
   ((pref $1) $0)) (ABS_CSP
   (((Node :string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INR :Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INL :Event ->
          Event + string # string set + one + string list +
          string # string set + Event # Event) $1)))))
   (((CONS :(string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list) (REP_CSP
   $0))
   (NIL :(string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event) ltree list)))))))))`),
 ((var_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :CSP -> CSP -> bool) (var $0)) (ABS_CSP
   (((Node :string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INL :string ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event) $0))))
   (NIL :(string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event) ltree list))))))`),
 ((run_DEF),
  [],
  `((! :(string set -> bool) -> bool) (\(s :string set).
   (((= :CSP -> CSP -> bool) (run $0)) (ABS_CSP
   (((Node :string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INL :string set ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event) $0)))
   (NIL :(string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event) ltree list))))))`),
 ((stop_DEF),
  [],
  `((! :(string set -> bool) -> bool) (\(s :string set).
   (((= :CSP -> CSP -> bool) (stop $0)) (ABS_CSP
   (((Node :string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree list ->
            (string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event) ltree)
   ((INL :string set ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event) $0))
   (NIL :(string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event) ltree list))))))`),
 ((CSP_ISO_DEF),
  [],
  `((/\ ((! :(CSP -> bool) -> bool) (\(a :CSP).
   (((= :CSP -> CSP -> bool) (ABS_CSP (REP_CSP $0))) $0))))
   ((! :((string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event) ltree -> bool) -> bool)
   (\(r :(string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event) ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(string set + string set + string + Event +
            string # string set + one + string list +
            string # string set + Event # Event ->
           (string set + string set + string + Event +
           string # string set + one + string list +
           string # string set + Event # Event) ltree list -> bool) ->
           (string set + string set + string + Event +
           string # string set + one + string list +
           string # string set + Event # Event) ltree -> bool)
   (\(v :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event).
   (\(tl :(string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event) ltree list). ((\/ ((/\
   ((? :(string set -> bool) -> bool) (\(s :string set).
   (((= :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event ->
         string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event -> bool) $2)
   ((INL :string set ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(string set + string set + string + Event +
             string # string set + one + string list +
             string # string set + Event # Event) ltree list -> num)
   $0)) 0))) ((\/ ((/\ ((? :(string set -> bool) -> bool)
   (\(s :string set).
   (((= :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event ->
         string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event -> bool) $2)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INL :string set ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event) $0))))))
   (((= :num -> num -> bool)
   ((LENGTH :(string set + string set + string + Event +
             string # string set + one + string list +
             string # string set + Event # Event) ltree list -> num)
   $0)) 0))) ((\/ ((/\ ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event ->
         string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event -> bool) $2)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INL :string ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event) $0)))))))
   (((= :num -> num -> bool)
   ((LENGTH :(string set + string set + string + Event +
             string # string set + one + string list +
             string # string set + Event # Event) ltree list -> num)
   $0)) 0))) ((\/ ((/\ ((? :(Event -> bool) -> bool) (\(E :Event).
   (((= :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event ->
         string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event -> bool) $2)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INR :Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INL :Event ->
          Event + string # string set + one + string list +
          string # string set + Event # Event) $0))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(string set + string set + string + Event +
             string # string set + one + string list +
             string # string set + Event # Event) ltree list -> num)
   $0)) (SUC 0)))) ((\/ ((/\ ((? :(string -> bool) -> bool)
   (\(s0 :string). ((? :(string set -> bool) -> bool)
   (\(s1 :string set).
   (((= :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event ->
         string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event -> bool) $3)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INR :Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string # string set + one + string list +
          string # string set + Event # Event ->
          Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INL :string # string set ->
          string # string set + one + string list +
          string # string set + Event # Event)
   (((, :string -> string set -> string # string set) $1)
   $0)))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(string set + string set + string + Event +
             string # string set + one + string list +
             string # string set + Event # Event) ltree list -> num)
   $0)) (SUC 0)))) ((\/ ((/\
   (((= :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event ->
         string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event -> bool) $1)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INR :Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string # string set + one + string list +
          string # string set + Event # Event ->
          Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :one + string list + string # string set + Event # Event ->
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INL :one ->
          one + string list + string # string set + Event # Event)
   one)))))))) (((= :num -> num -> bool)
   ((LENGTH :(string set + string set + string + Event +
             string # string set + one + string list +
             string # string set + Event # Event) ltree list -> num)
   $0)) (SUC (SUC 0))))) ((\/ ((/\ ((? :(string list -> bool) -> bool)
   (\(l :string list).
   (((= :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event ->
         string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event -> bool) $2)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INR :Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string # string set + one + string list +
          string # string set + Event # Event ->
          Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :one + string list + string # string set + Event # Event ->
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string list + string # string set + Event # Event ->
          one + string list + string # string set + Event # Event)
   ((INL :string list ->
          string list + string # string set + Event # Event)
   $0))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(string set + string set + string + Event +
             string # string set + one + string list +
             string # string set + Event # Event) ltree list -> num)
   $0)) (SUC 0)))) ((\/ ((/\ ((? :(string -> bool) -> bool)
   (\(s0 :string). ((? :(string set -> bool) -> bool)
   (\(s1 :string set).
   (((= :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event ->
         string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event -> bool) $3)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INR :Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string # string set + one + string list +
          string # string set + Event # Event ->
          Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :one + string list + string # string set + Event # Event ->
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string list + string # string set + Event # Event ->
          one + string list + string # string set + Event # Event)
   ((INR :string # string set + Event # Event ->
          string list + string # string set + Event # Event)
   ((INL :string # string set -> string # string set + Event # Event)
   (((, :string -> string set -> string # string set) $1)
   $0))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(string set + string set + string + Event +
             string # string set + one + string list +
             string # string set + Event # Event) ltree list -> num)
   $0)) (SUC 0)))) ((/\ ((? :(Event -> bool) -> bool) (\(E0 :Event).
   ((? :(Event -> bool) -> bool) (\(E1 :Event).
   (((= :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event ->
         string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event -> bool) $3)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INR :Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string # string set + one + string list +
          string # string set + Event # Event ->
          Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :one + string list + string # string set + Event # Event ->
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string list + string # string set + Event # Event ->
          one + string list + string # string set + Event # Event)
   ((INR :string # string set + Event # Event ->
          string list + string # string set + Event # Event)
   ((INR :Event # Event -> string # string set + Event # Event)
   (((, :Event -> Event -> Event # Event) $1) $0)))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(string set + string set + string + Event +
             string # string set + one + string list +
             string # string set + Event # Event) ltree list -> num)
   $0)) (SUC (SUC 0))))))))))))))) $0))
   (((= :(string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event) ltree ->
         (string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event) ltree -> bool) (REP_CSP
   (ABS_CSP $0))) $0)))))`),
 ((CSP_TY_DEF),
  [],
  `((? :((CSP ->
         (string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event) ltree) -> bool) -> bool)
   (\(rep :CSP ->
           (string set + string set + string + Event +
           string # string set + one + string list +
           string # string set + Event # Event) ltree).
   (((TYPE_DEFINITION :((string set + string set + string + Event +
                        string # string set + one + string list +
                        string # string set + Event # Event) ltree ->
                       bool) ->
                       (CSP ->
                       (string set + string set + string + Event +
                       string # string set + one + string list +
                       string # string set + Event # Event) ltree) ->
                       bool)
   ((TRP :(string set + string set + string + Event +
           string # string set + one + string list +
           string # string set + Event # Event ->
          (string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event) ltree list -> bool) ->
          (string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event) ltree -> bool)
   (\(v :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event).
   (\(tl :(string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event) ltree list). ((\/ ((/\
   ((? :(string set -> bool) -> bool) (\(s :string set).
   (((= :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event ->
         string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event -> bool) $2)
   ((INL :string set ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(string set + string set + string + Event +
             string # string set + one + string list +
             string # string set + Event # Event) ltree list -> num)
   $0)) 0))) ((\/ ((/\ ((? :(string set -> bool) -> bool)
   (\(s :string set).
   (((= :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event ->
         string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event -> bool) $2)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INL :string set ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event) $0))))))
   (((= :num -> num -> bool)
   ((LENGTH :(string set + string set + string + Event +
             string # string set + one + string list +
             string # string set + Event # Event) ltree list -> num)
   $0)) 0))) ((\/ ((/\ ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event ->
         string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event -> bool) $2)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INL :string ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event) $0)))))))
   (((= :num -> num -> bool)
   ((LENGTH :(string set + string set + string + Event +
             string # string set + one + string list +
             string # string set + Event # Event) ltree list -> num)
   $0)) 0))) ((\/ ((/\ ((? :(Event -> bool) -> bool) (\(E :Event).
   (((= :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event ->
         string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event -> bool) $2)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INR :Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INL :Event ->
          Event + string # string set + one + string list +
          string # string set + Event # Event) $0))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(string set + string set + string + Event +
             string # string set + one + string list +
             string # string set + Event # Event) ltree list -> num)
   $0)) (SUC 0)))) ((\/ ((/\ ((? :(string -> bool) -> bool)
   (\(s0 :string). ((? :(string set -> bool) -> bool)
   (\(s1 :string set).
   (((= :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event ->
         string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event -> bool) $3)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INR :Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string # string set + one + string list +
          string # string set + Event # Event ->
          Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INL :string # string set ->
          string # string set + one + string list +
          string # string set + Event # Event)
   (((, :string -> string set -> string # string set) $1)
   $0)))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(string set + string set + string + Event +
             string # string set + one + string list +
             string # string set + Event # Event) ltree list -> num)
   $0)) (SUC 0)))) ((\/ ((/\
   (((= :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event ->
         string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event -> bool) $1)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INR :Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string # string set + one + string list +
          string # string set + Event # Event ->
          Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :one + string list + string # string set + Event # Event ->
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INL :one ->
          one + string list + string # string set + Event # Event)
   one)))))))) (((= :num -> num -> bool)
   ((LENGTH :(string set + string set + string + Event +
             string # string set + one + string list +
             string # string set + Event # Event) ltree list -> num)
   $0)) (SUC (SUC 0))))) ((\/ ((/\ ((? :(string list -> bool) -> bool)
   (\(l :string list).
   (((= :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event ->
         string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event -> bool) $2)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INR :Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string # string set + one + string list +
          string # string set + Event # Event ->
          Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :one + string list + string # string set + Event # Event ->
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string list + string # string set + Event # Event ->
          one + string list + string # string set + Event # Event)
   ((INL :string list ->
          string list + string # string set + Event # Event)
   $0))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(string set + string set + string + Event +
             string # string set + one + string list +
             string # string set + Event # Event) ltree list -> num)
   $0)) (SUC 0)))) ((\/ ((/\ ((? :(string -> bool) -> bool)
   (\(s0 :string). ((? :(string set -> bool) -> bool)
   (\(s1 :string set).
   (((= :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event ->
         string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event -> bool) $3)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INR :Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string # string set + one + string list +
          string # string set + Event # Event ->
          Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :one + string list + string # string set + Event # Event ->
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string list + string # string set + Event # Event ->
          one + string list + string # string set + Event # Event)
   ((INR :string # string set + Event # Event ->
          string list + string # string set + Event # Event)
   ((INL :string # string set -> string # string set + Event # Event)
   (((, :string -> string set -> string # string set) $1)
   $0))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(string set + string set + string + Event +
             string # string set + one + string list +
             string # string set + Event # Event) ltree list -> num)
   $0)) (SUC 0)))) ((/\ ((? :(Event -> bool) -> bool) (\(E0 :Event).
   ((? :(Event -> bool) -> bool) (\(E1 :Event).
   (((= :string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event ->
         string set + string set + string + Event +
         string # string set + one + string list +
         string # string set + Event # Event -> bool) $3)
   ((INR :string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event ->
          string set + string set + string + Event +
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string + Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string set + string + Event + string # string set + one +
          string list + string # string set + Event # Event)
   ((INR :Event + string # string set + one + string list +
          string # string set + Event # Event ->
          string + Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string # string set + one + string list +
          string # string set + Event # Event ->
          Event + string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :one + string list + string # string set + Event # Event ->
          string # string set + one + string list +
          string # string set + Event # Event)
   ((INR :string list + string # string set + Event # Event ->
          one + string list + string # string set + Event # Event)
   ((INR :string # string set + Event # Event ->
          string list + string # string set + Event # Event)
   ((INR :Event # Event -> string # string set + Event # Event)
   (((, :Event -> Event -> Event # Event) $1) $0)))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(string set + string set + string + Event +
             string # string set + one + string list +
             string # string set + Event # Event) ltree list -> num)
   $0)) (SUC (SUC 0)))))))))))))))) $0)))`),
 ((ES),
  [],
  `((/\ ((! :(string -> bool) -> bool) (\(s :string).
   ((! :((string -> string + process) -> bool) -> bool)
   (\(E :string -> string + process). (((= :string -> string -> bool)
   ((ES (econst $1)) $0)) $1)))))) ((! :(string -> bool) -> bool)
   (\(s :string). ((! :((string -> string + process) -> bool) -> bool)
   (\(E :string -> string + process). (((= :string -> string -> bool)
   ((ES (evar $1)) $0)) ((OUTL :string + process -> string) ($0
   $1))))))))`),
 ((evar_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :Event -> Event -> bool) (evar $0)) (ABS_Event
   (((Node :string + string -> (string + string) ltree list ->
            (string + string) ltree) ((INR :string -> string + string)
   $0)) (NIL :(string + string) ltree list))))))`),
 ((econst_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :Event -> Event -> bool) (econst $0)) (ABS_Event
   (((Node :string + string -> (string + string) ltree list ->
            (string + string) ltree) ((INL :string -> string + string)
   $0)) (NIL :(string + string) ltree list))))))`),
 ((Event_ISO_DEF),
  [],
  `((/\ ((! :(Event -> bool) -> bool) (\(a :Event).
   (((= :Event -> Event -> bool) (ABS_Event (REP_Event $0))) $0))))
   ((! :((string + string) ltree -> bool) -> bool)
   (\(r :(string + string) ltree). (((= :bool -> bool -> bool)
   (((TRP :(string + string -> (string + string) ltree list ->
           bool) -> (string + string) ltree -> bool)
   (\(v :string + string). (\(tl :(string + string) ltree list). ((\/
   ((/\ ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string + string -> string + string -> bool) $2)
   ((INL :string -> string + string) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(string + string) ltree list -> num) $0)) 0))) ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string + string -> string + string -> bool) $2)
   ((INR :string -> string + string) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(string + string) ltree list -> num) $0)) 0)))))) $0))
   (((= :(string + string) ltree -> (string + string) ltree -> bool)
   (REP_Event (ABS_Event $0))) $0)))))`),
 ((Event_TY_DEF),
  [],
  `((? :((Event -> (string + string) ltree) -> bool) -> bool)
   (\(rep :Event -> (string + string) ltree).
   (((TYPE_DEFINITION :((string + string) ltree -> bool) ->
                       (Event -> (string + string) ltree) -> bool)
   ((TRP :(string + string -> (string + string) ltree list -> bool) ->
          (string + string) ltree -> bool) (\(v :string + string).
   (\(tl :(string + string) ltree list). ((\/ ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string + string -> string + string -> bool) $2)
   ((INL :string -> string + string) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(string + string) ltree list -> num) $0)) 0))) ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string + string -> string + string -> bool) $2)
   ((INR :string -> string + string) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(string + string) ltree list -> num) $0)) 0)))))))
   $0)))`)]
theorems =
[((CSP),
  [],
  `((! :((string set -> 'a) -> bool) -> bool)
   (\(f0 :string set -> 'a).
   ((! :((string set -> 'a) -> bool) -> bool)
   (\(f1 :string set -> 'a). ((! :((string -> 'a) -> bool) -> bool)
   (\(f2 :string -> 'a).
   ((! :(('a -> Event -> CSP -> 'a) -> bool) -> bool)
   (\(f3 :'a -> Event -> CSP -> 'a).
   ((! :(('a -> string -> string set -> CSP -> 'a) -> bool) -> bool)
   (\(f4 :'a -> string -> string set -> CSP -> 'a).
   ((! :(('a -> 'a -> CSP -> CSP -> 'a) -> bool) -> bool)
   (\(f5 :'a -> 'a -> CSP -> CSP -> 'a).
   ((! :(('a -> string list -> CSP -> 'a) -> bool) -> bool)
   (\(f6 :'a -> string list -> CSP -> 'a).
   ((! :(('a -> string -> string set -> CSP -> 'a) -> bool) -> bool)
   (\(f7 :'a -> string -> string set -> CSP -> 'a).
   ((! :(('a -> 'a -> Event -> Event -> CSP -> CSP -> 'a) -> bool) ->
        bool) (\(f8 :'a -> 'a -> Event -> Event -> CSP -> CSP -> 'a).
   ((?! :((CSP -> 'a) -> bool) -> bool) (\(fn :CSP -> 'a). ((/\
   ((! :(string set -> bool) -> bool) (\(s :string set).
   (((= :'a -> 'a -> bool) ($1 (stop $0))) ($10 $0))))) ((/\
   ((! :(string set -> bool) -> bool) (\(s :string set).
   (((= :'a -> 'a -> bool) ($1 (run $0))) ($9 $0))))) ((/\
   ((! :(string -> bool) -> bool) (\(s :string).
   (((= :'a -> 'a -> bool) ($1 (var $0))) ($8 $0))))) ((/\
   ((! :(Event -> bool) -> bool) (\(E :Event).
   ((! :(CSP -> bool) -> bool) (\(C :CSP). (((= :'a -> 'a -> bool) ($2
   ((pref $1) $0))) ((($8 ($2 $0)) $1) $0))))))) ((/\
   ((! :(string -> bool) -> bool) (\(s0 :string).
   ((! :(string set -> bool) -> bool) (\(s1 :string set).
   ((! :(CSP -> bool) -> bool) (\(C :CSP). (((= :'a -> 'a -> bool) ($3
   (((Choice $2) $1) $0))) (((($8 ($3 $0)) $2) $1) $0))))))))) ((/\
   ((! :(CSP -> bool) -> bool) (\(C1 :CSP).
   ((! :(CSP -> bool) -> bool) (\(C2 :CSP). (((= :'a -> 'a -> bool)
   ($2 ((par $1) $0))) (((($6 ($2 $1)) ($2 $0)) $1) $0))))))) ((/\
   ((! :(CSP -> bool) -> bool) (\(C :CSP).
   ((! :(string list -> bool) -> bool) (\(l' :string list).
   (((= :'a -> 'a -> bool) ($2 ((after $1) $0))) ((($5 ($2 $1)) $0)
   $1))))))) ((/\ ((! :(string -> bool) -> bool) (\(s0 :string).
   ((! :(string set -> bool) -> bool) (\(s1 :string set).
   ((! :(CSP -> bool) -> bool) (\(C :CSP). (((= :'a -> 'a -> bool) ($3
   (((mu $2) $1) $0))) (((($5 ($3 $0)) $2) $1) $0)))))))))
   ((! :(Event -> bool) -> bool) (\(E0 :Event).
   ((! :(Event -> bool) -> bool) (\(E1 :Event).
   ((! :(CSP -> bool) -> bool) (\(C1 :CSP).
   ((! :(CSP -> bool) -> bool) (\(C2 :CSP). (((= :'a -> 'a -> bool)
   ($4 ((((cond $3) $2) $1) $0))) (((((($5 ($4 $1)) ($4 $0)) $3) $2)
   $1) $0))))))))))))))))))))))))))))))))))))))`),
 ((Event),
  [],
  `((! :((string -> 'a) -> bool) -> bool) (\(f0 :string -> 'a).
   ((! :((string -> 'a) -> bool) -> bool) (\(f1 :string -> 'a).
   ((?! :((Event -> 'a) -> bool) -> bool) (\(fn :Event -> 'a). ((/\
   ((! :(string -> bool) -> bool) (\(s :string).
   (((= :'a -> 'a -> bool) ($1 (econst $0))) ($3 $0)))))
   ((! :(string -> bool) -> bool) (\(s :string).
   (((= :'a -> 'a -> bool) ($1 (evar $0))) ($2 $0)))))))))))`)]
