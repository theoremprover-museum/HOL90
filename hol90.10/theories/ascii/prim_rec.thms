thid = (prim_rec, 934216641, 584974)
axioms = []
definitions =
[((PRIM_REC),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :(('a -> num -> 'a) -> bool) -> bool) (\(f :'a -> num -> 'a).
   ((! :(num -> bool) -> bool) (\(m :num). (((= :'a -> 'a -> bool)
   ((((PRIM_REC :'a -> ('a -> num -> 'a) -> num -> 'a) $2) $1) $0))
   (((((PRIM_REC_FUN :'a -> ('a -> num -> 'a) -> num -> num -> 'a) $2)
   $1) $0) (PRE $0)))))))))`),
 ((PRIM_REC_FUN),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :(('a -> num -> 'a) -> bool) -> bool) (\(f :'a -> num -> 'a).
   (((= :(num -> num -> 'a) -> (num -> num -> 'a) -> bool)
   (((PRIM_REC_FUN :'a -> ('a -> num -> 'a) -> num -> num -> 'a) $1)
   $0))
   (((SIMP_REC :(num -> 'a) -> ((num -> 'a) -> num -> 'a) -> num ->
                num -> 'a) (\(n :num). $2)) (\(fun :num -> 'a).
   (\(n :num). (($2 ($1 (PRE $0))) $0)))))))))`),
 ((PRE_DEF),
  [],
  `((! :(num -> bool) -> bool) (\(m :num). (((= :num -> num -> bool)
   (PRE $0)) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool) $0) 0)) 0) ((@ :(num -> bool) -> num)
   (\(n :num). (((= :num -> num -> bool) $1) (SUC $0))))))))`),
 ((SIMP_REC),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :(('a -> 'a) -> bool) -> bool) (\(f :'a -> 'a).
   ((! :(num -> bool) -> bool) (\(n :num). (((= :'a -> 'a -> bool)
   ((((SIMP_REC :'a -> ('a -> 'a) -> num -> 'a) $2) $1) $0))
   (((((SIMP_REC_FUN :'a -> ('a -> 'a) -> num -> num -> 'a) $2) $1)
   (SUC $0)) $0))))))))`),
 ((SIMP_REC_FUN),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :(('a -> 'a) -> bool) -> bool) (\(f :'a -> 'a).
   ((! :(num -> bool) -> bool) (\(n :num).
   (((= :(num -> 'a) -> (num -> 'a) -> bool)
   ((((SIMP_REC_FUN :'a -> ('a -> 'a) -> num -> num -> 'a) $2) $1)
   $0)) ((@ :((num -> 'a) -> bool) -> num -> 'a) (\(fun :num -> 'a).
   (((((SIMP_REC_REL :(num -> 'a) -> 'a -> ('a -> 'a) -> num -> bool)
   $0) $3) $2) $1))))))))))`),
 ((SIMP_REC_REL),
  [],
  `((! :((num -> 'a) -> bool) -> bool) (\(fun :num -> 'a).
   ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :(('a -> 'a) -> bool) -> bool) (\(f :'a -> 'a).
   ((! :(num -> bool) -> bool) (\(n :num). (((= :bool -> bool -> bool)
   (((((SIMP_REC_REL :(num -> 'a) -> 'a -> ('a -> 'a) -> num -> bool)
   $3) $2) $1) $0)) ((/\ (((= :'a -> 'a -> bool) ($3 0)) $2))
   ((! :(num -> bool) -> bool) (\(m :num). ((==> ((< $0) $1))
   (((= :'a -> 'a -> bool) ($4 (SUC $0))) ($2 ($4
   $0))))))))))))))))`),
 ((LESS_DEF),
  [],
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). (((= :bool -> bool -> bool) ((< $1) $0))
   ((? :((num -> bool) -> bool) -> bool) (\(P :num -> bool). ((/\
   ((! :(num -> bool) -> bool) (\(n :num). ((==> ($1 (SUC $0))) ($1
   $0))))) ((/\ ($0 $2)) (~ ($0 $1)))))))))))`)]
theorems =
[((num_Axiom),
  [],
  `((! :('a -> bool) -> bool) (\(e :'a).
   ((! :(('a -> num -> 'a) -> bool) -> bool) (\(f :'a -> num -> 'a).
   ((?! :((num -> 'a) -> bool) -> bool) (\(fn1 :num -> 'a). ((/\
   (((= :'a -> 'a -> bool) ($0 0)) $2)) ((! :(num -> bool) -> bool)
   (\(n :num). (((= :'a -> 'a -> bool) ($1 (SUC $0))) (($2 ($1 $0))
   $0)))))))))))`),
 ((PRIM_REC_THM),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :(('a -> num -> 'a) -> bool) -> bool) (\(f :'a -> num -> 'a).
   ((/\ (((= :'a -> 'a -> bool)
   ((((PRIM_REC :'a -> ('a -> num -> 'a) -> num -> 'a) $1) $0) 0))
   $1)) ((! :(num -> bool) -> bool) (\(m :num).
   (((= :'a -> 'a -> bool)
   ((((PRIM_REC :'a -> ('a -> num -> 'a) -> num -> 'a) $2) $1) (SUC
   $0))) (($1 ((((PRIM_REC :'a -> ('a -> num -> 'a) -> num -> 'a) $2)
   $1) $0)) $0)))))))))`),
 ((PRIM_REC_EQN),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :(('a -> num -> 'a) -> bool) -> bool) (\(f :'a -> num -> 'a).
   ((/\ ((! :(num -> bool) -> bool) (\(n :num).
   (((= :'a -> 'a -> bool)
   (((((PRIM_REC_FUN :'a -> ('a -> num -> 'a) -> num -> num -> 'a) $2)
   $1) 0) $0)) $2)))) ((! :(num -> bool) -> bool) (\(m :num).
   ((! :(num -> bool) -> bool) (\(n :num). (((= :'a -> 'a -> bool)
   (((((PRIM_REC_FUN :'a -> ('a -> num -> 'a) -> num -> num -> 'a) $3)
   $2) (SUC $1)) $0)) (($2
   (((((PRIM_REC_FUN :'a -> ('a -> num -> 'a) -> num -> num -> 'a) $3)
   $2) $1) (PRE $0))) $0)))))))))))`),
 ((PRE),
  [],
  `((/\ (((= :num -> num -> bool) (PRE 0)) 0))
   ((! :(num -> bool) -> bool) (\(m :num). (((= :num -> num -> bool)
   (PRE (SUC $0))) $0))))`),
 ((SIMP_REC_THM),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :(('a -> 'a) -> bool) -> bool) (\(f :'a -> 'a). ((/\
   (((= :'a -> 'a -> bool)
   ((((SIMP_REC :'a -> ('a -> 'a) -> num -> 'a) $1) $0) 0)) $1))
   ((! :(num -> bool) -> bool) (\(m :num). (((= :'a -> 'a -> bool)
   ((((SIMP_REC :'a -> ('a -> 'a) -> num -> 'a) $2) $1) (SUC $0))) ($1
   ((((SIMP_REC :'a -> ('a -> 'a) -> num -> 'a) $2) $1)
   $0))))))))))`),
 ((LESS_SUC_SUC),
  [],
  `((! :(num -> bool) -> bool) (\(m :num). ((/\ ((< $0) (SUC $0))) ((<
   $0) (SUC (SUC $0))))))`),
 ((SIMP_REC_EXISTS),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :(('a -> 'a) -> bool) -> bool) (\(f :'a -> 'a).
   ((! :(num -> bool) -> bool) (\(n :num).
   ((? :((num -> 'a) -> bool) -> bool) (\(fun :num -> 'a).
   (((((SIMP_REC_REL :(num -> 'a) -> 'a -> ('a -> 'a) -> num -> bool)
   $0) $3) $2) $1)))))))))`),
 ((SIMP_REC_FUN_LEMMA),
  [],
  `(((= :bool -> bool -> bool) ((? :((num -> 'a) -> bool) -> bool)
   (\(fun :num -> 'a).
   (((((SIMP_REC_REL :(num -> 'a) -> 'a -> ('a -> 'a) -> num -> bool)
   $0) (x :'a)) (f :'a -> 'a)) (n :num))))) ((/\
   (((= :'a -> 'a -> bool)
   (((((SIMP_REC_FUN :'a -> ('a -> 'a) -> num -> num -> 'a) (x :'a))
   (f :'a -> 'a)) (n :num)) 0)) (x :'a))) ((! :(num -> bool) -> bool)
   (\(m :num). ((==> ((< $0) (n :num))) (((= :'a -> 'a -> bool)
   (((((SIMP_REC_FUN :'a -> ('a -> 'a) -> num -> num -> 'a) (x :'a))
   (f :'a -> 'a)) (n :num)) (SUC $0))) ((f :'a -> 'a)
   (((((SIMP_REC_FUN :'a -> ('a -> 'a) -> num -> num -> 'a) (x :'a))
   (f :'a -> 'a)) (n :num)) $0))))))))`),
 ((LESS_NOT_EQ),
  [],
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((==> ((< $1) $0)) (~ (((= :num -> num -> bool) $1)
   $0)))))))`),
 ((NOT_LESS_EQ),
  [],
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((==> (((= :num -> num -> bool) $1) $0)) (~ ((< $1)
   $0)))))))`),
 ((SUC_ID),
  [],
  `((! :(num -> bool) -> bool) (\(n :num). (~
   (((= :num -> num -> bool) (SUC $0)) $0))))`),
 ((EQ_LESS),
  [],
  `((! :(num -> bool) -> bool) (\(n :num). ((==>
   (((= :num -> num -> bool) (SUC (m :num))) $0)) ((< (m :num))
   $0))))`),
 ((LESS_0),
  [],
  `((! :(num -> bool) -> bool) (\(n :num). ((< 0) (SUC $0))))`),
 ((LESS_SUC_IMP),
  [],
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((==> ((< $1) (SUC $0))) ((==> (~
   (((= :num -> num -> bool) $1) $0))) ((< $1) $0)))))))`),
 ((LESS_THM),
  [],
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). (((= :bool -> bool -> bool) ((< $1) (SUC $0))) ((\/
   (((= :num -> num -> bool) $1) $0)) ((< $1) $0)))))))`),
 ((LESS_LEMMA2),
  [],
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((==> ((\/ (((= :num -> num -> bool) $1) $0)) ((< $1)
   $0))) ((< $1) (SUC $0)))))))`),
 ((LESS_LEMMA1),
  [],
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((==> ((< $1) (SUC $0))) ((\/ (((= :num -> num -> bool)
   $1) $0)) ((< $1) $0)))))))`),
 ((LESS_SUC),
  [],
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((==> ((< $1) $0)) ((< $1) (SUC $0)))))))`),
 ((LESS_SUC_REFL),
  [],
  `((! :(num -> bool) -> bool) (\(n :num). ((< $0) (SUC $0))))`),
 ((LESS_MONO),
  [],
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((==> ((< $1) $0)) ((< (SUC $1)) (SUC $0)))))))`),
 ((LESS_0_0), [], `((< 0) (SUC 0))`),
 ((NOT_LESS_0),
  [],
  `((! :(num -> bool) -> bool) (\(n :num). (~ ((< $0) 0))))`),
 ((SUC_LESS),
  [],
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((==> ((< (SUC $1)) $0)) ((< $1) $0))))))`),
 ((LESS_REFL),
  [],
  `((! :(num -> bool) -> bool) (\(n :num). (~ ((< $0) $0))))`),
 ((INV_SUC_EQ),
  [],
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). (((= :bool -> bool -> bool) (((= :num -> num -> bool)
   (SUC $1)) (SUC $0))) (((= :num -> num -> bool) $1) $0))))))`)]
