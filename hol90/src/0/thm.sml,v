head	1.4;
access;
symbols
	HOL97:1.3.0.4
	bpHOL97:1.3
	hol90_9_alpha:1.3
	hol90_pre8_for_multiple_compilers:1.3.0.2
	hol90_pre8_after_donalds_separate_compilation_changes:1.3
	hol90_8_after_merging_Konrad_Elsa:1.3
	hol90_7_cleaned_up_Konrad_test_patch:1.1.1.1.2.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.4
date	95.12.18.11.35.31;	author drs1004;	state Exp;
branches;
next	1.3;

1.3
date	95.10.18.16.37.19;	author drs1004;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	95.10.17.17.07.32;	author drs1004;	state Exp;
branches;
next	1.1;

1.1
date	95.10.16.13.29.58;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.29.58;	author rjb;	state Exp;
branches
	1.1.1.1.2.1;
next	;

1.1.1.1.2.1
date	95.10.17.18.11.46;	author drs1004;	state Exp;
branches;
next	1.1.1.1.2.2;

1.1.1.1.2.2
date	95.10.17.18.43.11;	author drs1004;	state Exp;
branches;
next	;

1.3.4.1
date	97.06.11.17.24.46;	author kxs;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	97.07.11.15.05.40;	author kxs;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	98.02.23.20.54.58;	author kxs;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Preterm and other changes, see 7.changes
@
text
@ (* ===================================================================== *)
(* FILE          : thm.sml                                               *)
(* DESCRIPTION   : The abstract data type of theorems. Mostly            *)
(*                 translated from the hol88 source.                     *)
(*                                                                       *)
(* AUTHORS       : (c) Mike Gordon, University of Cambridge              *)
(*                     Konrad Slind, University of Calgary               *)
(* DATE          : September 10, 1991                                    *)
(* ===================================================================== *)


functor THM (structure Dsyntax : Dsyntax_sig
             structure Hol_pp : Hol_pp_sig
             structure Globals : Globals_sig
             structure Term : Private_term_sig
             sharing
               Dsyntax.Term = Hol_pp.Term = Term) : Thm_sig =
struct
open Lib;
structure Term = Term;

val THM_ERR = Exception.ERR "Thm";

datatype thm = THM of Term.term list * Term.term


(*-------------------------------------------------------------------------
 * Theorem Counting
 *
 * This way should get us some partial evaluation, i.e., the case statement
 * above won't be evaluated at run time, but at compile time.
 *-----------------------------------------------------------------------*)

val counting = ref false;

datatype counter = Assume | Refl | Beta | Subst | Abs
                 | Disch  | Mp   | Inst
                 | Drule  | Definition | Axiom
                 | Disk   | Validity   | Other;

val count = {ASSUME     = ref 0,
             REFL       = ref 0,
             BETA_CONV  = ref 0,
             SUBST      = ref 0,
             ABS        = ref 0,
             DISCH      = ref 0,
             MP         = ref 0,
             INST_TYPE  = ref 0,
             DRULE      = ref 0,
             DEFINITION = ref 0,
             AXIOM      = ref 0,
             FROM_DISK  = ref 0,
             VALID_TAC  = ref 0,
             OTHER      = ref 0};

fun make_thm Assume x = (if !counting then inc (#ASSUME count) else (); THM x)
 | make_thm Refl x = (if !counting then inc(#REFL count) else (); THM x)
 | make_thm Beta x = (if !counting then inc(#BETA_CONV count) else(); THM x)
 | make_thm Subst x = (if !counting then inc (#SUBST count) else (); THM x)
 | make_thm Abs x = (if !counting then inc (#ABS count) else (); THM x)
 | make_thm Disch x = (if !counting then inc (#DISCH count) else (); THM x)
 | make_thm Mp x = (if !counting then inc (#MP count) else (); THM x)
 | make_thm Inst x = (if !counting then inc (#INST_TYPE count) else (); THM x)
 | make_thm Drule x = (if !counting then inc (#DRULE count) else (); THM x)
 | make_thm Definition x=(if !counting then inc(#DEFINITION count)else();THM x)
 | make_thm Axiom x = (if !counting then inc (#AXIOM count) else (); THM x)
 | make_thm Disk x = (if !counting then inc (#FROM_DISK count) else (); THM x)
 | make_thm Validity x = (if !counting then inc(#VALID_TAC count)else();THM x)
 | make_thm Other x = (if !counting then inc (#OTHER count) else (); THM x);

local
fun zero (r as ref _) = (r := 0)
in
fun reset_thm_count() = 
   (zero (#ASSUME count);
    zero (#REFL count);
    zero (#BETA_CONV count);
    zero (#SUBST count);
    zero (#ABS count);
    zero (#DISCH count);
    zero (#MP count);
    zero (#INST_TYPE count);
    zero (#DRULE count);
    zero (#DEFINITION count);
    zero (#AXIOM count);
    zero (#FROM_DISK count);
    zero (#VALID_TAC count);
    zero (#OTHER count))
end;

fun thm_count() = 
   {ASSUME = !(#ASSUME count),
    REFL = !(#REFL count),
    BETA_CONV = !(#BETA_CONV count),
    SUBST = !(#SUBST count),
    ABS = !(#ABS count),
    DISCH = !(#DISCH count),
    MP = !(#MP count),
    INST_TYPE = !(#INST_TYPE count),
    drule = !(#DRULE count),
    definition = !(#DEFINITION count),
    axiom = !(#AXIOM count),
    from_disk = !(#FROM_DISK count),
    valid_tac = !(#VALID_TAC count),
    other = !(#OTHER count)};

fun counting_thms b = (counting := b);


(*--------------------------------------------------------------------------
 * Primitive operations
 *
 * Ought to check that all terms in A and c have type :bool
 *-------------------------------------------------------------------------*)

val mk_drule_thm = make_thm Drule;
val mk_axiom_thm = make_thm Axiom;
val mk_definition_thm = make_thm Definition;
val mk_disk_thm = make_thm Disk;
val mk_tac_thm = make_thm Validity;
val mk_thm = make_thm Other;

fun hyp (THM(asl,_)) = asl
and concl(THM(_,c)) = c
and dest_thm(THM s) = s


fun thm_free_vars (THM(asl,c)) = Term.free_varsl (c::asl);
val term_union = Lib.op_union Term.aconv
val term_U = Lib.op_U Term.aconv
fun hyp_union thm_list = Lib.itlist (Lib.union o hyp) thm_list [];


fun optimize_thm (THM(asl,c)) = THM(map Term.optimize_term asl, 
                                        Term.optimize_term c);

(*--------------------------------------------------------------------------
 * THE PRIMITIVE RULES OF INFERENCE
 *
 * ASSUME
 *-------------------------------------------------------------------------*)

local
val mk_thm = make_thm Assume
in
fun ASSUME tm =
   if (Term.type_of tm = Dsyntax.bool_ty)
   then mk_thm([tm],tm) 
   else THM_ERR("ASSUME",  "not a proposition")
end;
  
(*--------------------------------------------------------------------------
 * REFL
 *-------------------------------------------------------------------------*)

local val mk_thm = make_thm Refl
in
fun REFL tm = mk_thm([], Dsyntax.mk_eq{lhs = tm, rhs = tm})
end;


(*--------------------------------------------------------------------------
 * BETA_CONV
 *-------------------------------------------------------------------------*)

local val mk_thm = make_thm Beta
in
fun BETA_CONV tm = 
   mk_thm ([],Dsyntax.mk_eq{lhs = tm, rhs = Term.beta_conv tm})
              handle _ => THM_ERR("BETA_CONV","not a beta-redex")
end;


(*--------------------------------------------------------------------------
 * SUBST
 *
 * ltheta is the substitution mapping from the template to the concl of
 * the given theorem. It checks that the template is an OK abstraction of
 * the given theorem. rtheta maps the template to another theorem, in which
 * the lhs in the first theorem have been replaced by the rhs in the second
 * theorem. The replacements provide the lhs and rhs. 
 *-------------------------------------------------------------------------*)

local val mk_thm = make_thm Subst
in
fun SUBST replacements template (th as THM(asl,c)) = 
     let val (ltheta, rtheta, hyps) =
         Lib.itlist (fn {var as Term.Fv _,thm = THM(h,c)} => 
                 fn (ltheta,rtheta,hyps) =>
                      let val {lhs,rhs} = Dsyntax.dest_eq c
                      in ({redex = var, residue = lhs}::ltheta,
                          {redex = var, residue = rhs}::rtheta,
                          Lib.union h hyps)
                      end)
                replacements ([],[],asl)
         handle Match => THM_ERR("SUBST","badly formed replacements")
     in
     if (Term.aconv (Term.subst ltheta template) c)
     then mk_thm (hyps,Term.subst rtheta template)
     else th
     end
end;

(*--------------------------------------------------------------------------
 * ABS
 *-------------------------------------------------------------------------*)
local val mk_thm = make_thm Abs
in
fun ABS (v as Term.Fv _) (THM(asl,c)) = 
     let val {lhs,rhs} = Dsyntax.dest_eq c
     in if (Lib.mem v (Term.free_varsl asl))
        then THM_ERR("ABS",
                            "variable is free in assumptions")
        else mk_thm(asl,Dsyntax.mk_eq{lhs=Term.mk_abs{Bvar=v, Body=lhs},
                                      rhs=Term.mk_abs{Bvar=v, Body=rhs}})
     end
  | ABS _ _ = THM_ERR("ABS","first argument must be a variable")
end;


(*--------------------------------------------------------------------------
 * INST_TYPE
 *-------------------------------------------------------------------------*)
local
val mk_thm = make_thm Inst
val type_vars_in_term_list = rev_itlist (union o Term.type_vars_in_term)
in
fun INST_TYPE [] th = th
  | INST_TYPE theta (THM(asl,c)) = 
       let val problem_tyvars = intersect (Term.type_vars_in_term c)
                                          (type_vars_in_term_list asl [])
       in if (null_intersection problem_tyvars (map #redex theta))
          then mk_thm(asl, Term.inst theta c)
          else THM_ERR("INST_TYPE",
           "type variable(s) in assumptions would be instantiated in concl")
       end
end;


(*--------------------------------------------------------------------------
 * DISCH
 *-------------------------------------------------------------------------*)
local val mk_thm = make_thm Disch
in
fun DISCH w (THM(asl,c)) = 
   mk_thm (gather (not o Term.aconv w) asl,
           Dsyntax.mk_imp{ant = w, conseq = c})
end;

(*--------------------------------------------------------------------------
 * MP
 *-------------------------------------------------------------------------*)
local val mk_thm = make_thm Mp
in
fun MP (THM(asl1,c1)) (THM(asl2,c2)) =
   let val {ant,conseq} = Dsyntax.dest_imp c1
   in if (Term.aconv ant c2)
      then mk_thm(union asl1 asl2, conseq)
      else THM_ERR("MP","antecedent of first thm not aconv to concl of second")
   end
end;

(*--------------------------------------------------------------------------
 * Pretty printing
 *-------------------------------------------------------------------------*)

fun pp_thm ppstrm (THM(asl,c)) =
   let val {add_string,add_break,begin_block,end_block,...} = 
              PP.with_ppstream ppstrm
       val pp_term = Hol_pp.pp_term ppstrm 
       fun commafy [] = ()
         | commafy [tm] = pp_term tm
         | commafy (t1::rst) = ( pp_term t1; 
                                 add_string ",";
                                 add_break(1,0);
                                 commafy rst)
       fun dotify alist = itlist (fn _ => fn dots => ("."^dots)) alist ""
   in
     begin_block PP.CONSISTENT 0;
     if (!Globals.max_print_depth = 0)
     then add_string " ... "
     else (case asl
             of [] => ()
              | _ => ( if (!Globals.show_assums) 
                       then ( begin_block PP.INCONSISTENT 1;
                              add_string "["; 
                              commafy asl; 
                              add_string "]";
                              end_block() )
                       else add_string (dotify asl);
                       add_break (1,0)) ;
           add_string "|- ";
           pp_term c);
     end_block()
   end;


fun thm_to_string thm = PP.pp_to_string (!Globals.linewidth) pp_thm thm
fun print_thm thm = output(std_out, thm_to_string thm);

end; (* THM *)
@


1.3
log
@Check in after merging in Konrad's changes made after
the release of hol90.7.  This involved creating a side branch
in which to check in Konrad's changes, then merging in that
side branch into the main development (which contains changes
made by Elsa Gunter).

Some other small modification have been made to the source code,
as I begun to try to make this version into a working version:
	- hol90 will now be compiled in an environment were no
structures can be considered opn.  This means many structures
now need "open Lib" and other such commands at their head.
This has not yet been completed, but has been begun.
	- "rotl" and "rotr" have been added to Lib, something
which I just did impulsively.   Documentation files
have also been added in help/90.
@
text
@d12 1
a12 2
functor THM ((* structure Lib : Lib_sig *)
	     structure Dsyntax : Dsyntax_sig
d15 1
a15 1
             structure Term : Term_sig
d22 1
a22 4
fun THM_ERR{function,message} = 
    Exception.HOL_ERR{origin_structure = "Thm",
		      origin_function = function,
		      message = message}
d27 7
a33 1
(* For telling how many theorems are proved in a session. *)
a55 27
(*
fun make_thm C seq = 
  ( if not(!counting) 
    then ()
    else (case C of
            Assume     => Lib.inc (#ASSUME count)
          | Refl       => Lib.inc (#REFL count)
          | Beta       => Lib.inc (#BETA_CONV count)
          | Subst      => Lib.inc (#SUBST count)
          | Abs        => Lib.inc (#ABS count)
          | Disch      => Lib.inc (#DISCH count)
          | Mp         => Lib.inc (#MP count)
          | Inst       => Lib.inc (#INST_TYPE count)
          | Drule      => Lib.inc (#DRULE count)
          | Definition => Lib.inc (#DEFINITION count)
          | Axiom      => Lib.inc (#AXIOM count)
          | Disk       => Lib.inc (#FROM_DISK count)
          | Validity   => Lib.inc (#VALID_TAC count)
          | Other      => Lib.inc (#OTHER count))
    ;
    THM seq);
*)

(****************************************************************************
 * This way should get us some partial evaluation, i.e., the case statement
 * above won't be evaluated at run time, but at compile time.
 ****************************************************************************)
d110 6
a115 1
(* Ought to check that all terms in A and c have type :bool *)
d134 8
a141 1
(* THE PRIMITIVE RULES OF INFERENCE *)
a143 1
val bool = Term.Type.Tyc "bool"
d147 1
a147 1
   if (Term.type_of tm = bool)
d149 1
a149 1
   else raise(THM_ERR{function = "ASSUME", message = "not a proposition"})
d152 4
d162 4
d170 1
a170 2
              handle _ => raise THM_ERR{function = "BETA_CONV",
                                        message = "not a beta-redex"}
d174 10
a183 6
(* ltheta is the substitution mapping from the template to the concl of
   the given theorem. It checks that the template is an OK abstraction of
   the given theorem. rtheta maps the template to another theorem, in which
   the lhs in the first theorem have been replaced by the rhs in the second
   theorem. The replacements provide the lhs and rhs. 
*)
d196 1
a196 2
         handle Match => raise THM_ERR{function = "SUBST",
                                       message = "badly formed replacements"}
d204 3
d212 2
a213 2
        then raise THM_ERR{function = "ABS",
                           message = "variable is free in assumptions"}
d217 1
a217 2
  | ABS _ _ = raise THM_ERR{function = "ABS",
                            message = "first argument must be a variable"}
d221 3
d234 2
a235 3
          else raise THM_ERR{function = "INST_TYPE",
                             message = "type variable(s) in assumptions would\
                                       \ be instantiated in concl"}
d240 3
d250 3
d259 1
a259 2
      else raise THM_ERR{function = "MP",
                message="antecedent of first thm not aconv to concl of second"}
d263 4
@


1.3.4.1
log
@Removed files are parse files and portability files that have
effectively been moved elsewhere.

Modified files are up to date for ML 109.26.
@
text
@d1 1
a1 1
(* ===================================================================== *)
d12 2
a13 1
functor THM (structure Dsyntax : Dsyntax_sig
d15 1
d20 1
d24 3
a26 5
  Exception.HOL_ERR{origin_structure = "Thm",
            origin_function = function,
            message = message}

val inc = Portable.Ref.inc;
d31 1
a31 3
(*---------------------------------------------------------------------------
 * Support for monitoring how many theorems are proved in a session. 
 *---------------------------------------------------------------------------*)
d54 1
d56 17
a72 17
  ( if !counting 
    then (case C of
            Assume     => inc (#ASSUME count)
          | Refl       => inc (#REFL count)
          | Beta       => inc (#BETA_CONV count)
          | Subst      => inc (#SUBST count)
          | Abs        => inc (#ABS count)
          | Disch      => inc (#DISCH count)
          | Mp         => inc (#MP count)
          | Inst       => inc (#INST_TYPE count)
          | Drule      => inc (#DRULE count)
          | Definition => inc (#DEFINITION count)
          | Axiom      => inc (#AXIOM count)
          | Disk       => inc (#FROM_DISK count)
          | Validity   => inc (#VALID_TAC count)
          | Other      => inc (#OTHER count))
    else ()
d75 1
d77 21
a97 1
local fun zero (r as ref _) = (r := 0)
d117 9
a125 9
   {ASSUME     = !(#ASSUME count),
    REFL       = !(#REFL count),
    BETA_CONV  = !(#BETA_CONV count),
    SUBST      = !(#SUBST count),
    ABS        = !(#ABS count),
    DISCH      = !(#DISCH count),
    MP         = !(#MP count),
    INST_TYPE  = !(#INST_TYPE count),
    drule      = !(#DRULE count),
d127 4
a130 4
    axiom      = !(#AXIOM count),
    from_disk  = !(#FROM_DISK count),
    valid_tac  = !(#VALID_TAC count),
    other      = !(#OTHER count)};
d136 2
a137 2
val mk_drule_thm      = make_thm Drule;
val mk_axiom_thm      = make_thm Axiom;
d139 3
a141 3
val mk_disk_thm       = make_thm Disk;
val mk_tac_thm        = make_thm Validity;
val mk_thm            = make_thm Other;
d144 2
a145 2
and concl(THM(_,c))  = c
and dest_thm(THM s)  = s
d149 3
a151 3
val term_union = op_union Term.aconv
val term_U = op_U Term.aconv
fun hyp_union thm_list = itlist (union o hyp) thm_list [];
d154 1
a154 3
(*---------------------------------------------------------------------------
 *                THE PRIMITIVE RULES OF INFERENCE
 *---------------------------------------------------------------------------*)
d156 3
a158 2
local val bool = Term.Type.Tyc "bool"
      val mk_thm = make_thm Assume
a164 1

d181 6
a186 7
(*---------------------------------------------------------------------------
 * ltheta is the substitution mapping from the template to the concl of
 * the given theorem. It checks that the template is an OK abstraction of
 * the given theorem. rtheta maps the template to another theorem, in which
 * the lhs in the first theorem have been replaced by the rhs in the second
 * theorem. The replacements provide the lhs and rhs. 
 *---------------------------------------------------------------------------*)
d191 1
a191 1
         itlist (fn {var as Term.Fv _,thm = THM(h,c)} => 
d196 1
a196 1
                          union h hyps)
a207 1

d212 1
a212 1
     in if (mem v (Term.free_varsl asl))
d219 1
a219 1
                            message  = "first argument must be a variable"}
d223 3
a225 2
local val mk_thm = make_thm Inst
      val type_vars_in_term_list = rev_itlist (union o Term.type_vars_in_term)
a246 1

a257 4

(*---------------------------------------------------------------------------
 * Prettyprinting of theorems.
 *---------------------------------------------------------------------------*)
d290 1
a290 1
fun print_thm thm = Portable.output(Portable.std_out, thm_to_string thm);
@


1.3.4.2
log
@Massive minor changes to close HOL up so as to make it CM-friendly and
some changes to accomodate SML'97.
@
text
@a18 1
open Lib;
@


1.3.4.3
log
@Addition of inference tracking for Wai Wong. Also, changed hol_pp.extensible
so that it would compile! (It had obsolete paths to pr_list.)
@
text
@a8 2
(* ADDITIONS     : Proof recording                                       *)
(*                 Wai Wong, Hong Kong Baptist University                *)
a29 32
(*---------------------------------------------------------------------------
 * Support for recording proofs.
 *---------------------------------------------------------------------------*)
datatype just_arg = JA_THM of thm
                  | JA_TERM of Term.term
                  | JA_TYPE of Term.Type.hol_type
                  | JA_STRING of string
                  | JA_INT of int
                  | JA_INTLIST of int list
		  | JA_PAIR of (just_arg * just_arg);

datatype step = STEP of { Name:string, Just: just_arg list, Thm: thm } ;

fun dummy_rec_step (STEP{Name, Just, Thm}) = Thm;

val record_step = ref dummy_rec_step;
val record_proof_flag = ref false;
val suspended = ref false;

fun record_proof b = (record_proof_flag := b; ());
fun is_recording_proof () = (!record_proof_flag);

fun suspend_recording () = 
  if !record_proof_flag then 
    (record_proof_flag := false; suspended := true; ())
  else ();
fun resume_recording () = 
  if (!suspended andalso not(!record_proof_flag)) then 
    (record_proof_flag := true; suspended := false; ())
  else ();

fun note (s,th) = if !record_proof_flag then !record_step s else th;
d115 1
a115 4
(*---------------------------------------------------------------------------
 * Making various kinds of theorems.
 *---------------------------------------------------------------------------*)

a139 1
      fun step tm th = STEP{Name="ASSUME", Just=[JA_TERM tm], Thm=th}
d143 3
a145 4
   then let val th = mk_thm([tm],tm) 
        in note (step tm th, th)  end
   else raise(THM_ERR{function="ASSUME", message="not a proposition"})
  end;
a148 1
      fun step tm th = STEP{Name="REFL", Just=[JA_TERM tm], Thm=th}
d150 1
a150 4
fun REFL tm = 
  let val th = mk_thm([], Dsyntax.mk_eq{lhs=tm, rhs=tm})
  in note (step tm th, th)
  end
a154 1
      fun step tm th = STEP{Name="BETACONV", Just=[JA_TERM tm], Thm=th}
d157 3
a159 4
  let val th = mk_thm ([],Dsyntax.mk_eq{lhs = tm, rhs = Term.beta_conv tm})
  in note (step tm th, th)
  end
  handle _ => raise THM_ERR{function="BETA_CONV", message="not a beta-redex"}
a170 4
      fun spread{thm,var} = JA_PAIR(JA_THM thm, JA_TERM var)
      fun step tmplate (th,th') repls =
         STEP{Name = "SUBST",   Thm=th',
              Just = [JA_TERM tmplate, JA_THM th] @@ map spread repls}
d186 1
a186 2
     then let val th' = mk_thm (hyps,Term.subst rtheta template)
          in note (step template (th,th') replacements, th')  end
a192 1
    fun step (v,th') th = STEP{Name="ABS",Just=[JA_TERM v, JA_THM th'], Thm=th}
d194 1
a194 1
fun ABS (v as Term.Fv _) (th as THM(asl,c)) = 
d199 2
a200 5
        else let val th' = 
               mk_thm(asl,Dsyntax.mk_eq{lhs=Term.mk_abs{Bvar=v, Body=lhs},
                                        rhs=Term.mk_abs{Bvar=v, Body=rhs}})
             in note (step (v,th) th', th')
             end
a208 3
      fun spread{redex,residue} = JA_PAIR(JA_TYPE redex,JA_TYPE residue)
      fun step th th' theta = 
            STEP{Name="INSTTYPE", Just=JA_THM th::map spread theta, Thm=th'}
d211 9
a219 10
  | INST_TYPE theta (th as THM(asl,c)) = 
     let val problem_tyvars = 
           intersect (Term.type_vars_in_term c) (type_vars_in_term_list asl [])
     in if (null_intersection problem_tyvars (map #redex theta))
        then let val th' = mk_thm(asl, Term.inst theta c)
             in note (step th th' theta,  th')        end
        else raise THM_ERR{function = "INST_TYPE",
                           message = "type variable(s) in assumptions would\
                                      \ be instantiated in concl"}
     end
a223 2
      fun step (w,th) th' = 
            STEP{Name="DISCH", Just=[JA_TERM w, JA_THM th], Thm=th'}
d225 3
a227 5
fun DISCH w (th as THM(asl,c)) = 
  let val th' = mk_thm (gather (not o Term.aconv w) asl,
                        Dsyntax.mk_imp{ant=w, conseq=c})
  in note (step (w,th) th', th')
  end
a231 2
      fun step (th1,th2) th =
            STEP{Name="MP", Just=[JA_THM th1, JA_THM th2], Thm=th}
d233 1
a233 1
fun MP (th1 as THM(asl1,c1)) (th2 as THM(asl2,c2)) =
d236 1
a236 2
      then let val th = mk_thm(union asl1 asl2, conseq)
           in note (step (th1,th2) th, th)          end
@


1.2
log
@Keeping you up to date:

I'm about to do a checkin of elsa's modifications to the hol90.7
sources to create her hol90.pre8.  To recap what I've done:
	- I checked out hol90 (in /usr/groups/hol/drs1004/hol90)
		cvs co hol90
	  (Well, to be honest, I only checked out those
	  parts of hol90 I knew I'd be changing, e.g. not the
	  Manual, and only parts of the library.  Checking out the
	  entire source takes a while, mainly due to the enormous number
	  of help files.  The limiting factor is files/second, which
         runs at around 5 when CVS is working on nfs over a network, not
         KB/second, which you might at first think it would be).

	- By doing a recursive diff between Elsa's source and the
	hol90.7 source I found all the changes Elsa had made to
	source files.  I copied relevant files from Elsa's source
	into my checked out version.  The only new files were
		- the sml_system files in src/0
		- some make scripts in src/.
	Changed files were in:
		src/{0,1,2,3}
		library/arith/src/thm_convs.sml
		library/list/src/list_conv1.sml
		library/num/src/num_lib.sml
		library/prog_logic/src/halts_logic.sml
		library/prog_logic/src/translation.sml
		library/prog_logic/theories/src/mk_halts.sml
		library/real/theories/src/Make
		library/real/theories/src/equiv.sml
		library/real/theories/src/seq.sml
		library/reduce/src/arithconv.sml
		library/string/src/string_conv.sml
		library/unity/theories/src/aux_definitions.sml
		library/word/theories/src/*

	- I will now commit these changes, with this email as the log message.
		cvs commit

	- Tomorrow I will get this version compiling
	with NJSML 108 (I will probably add
	the files to enable the NJSML compilation manager to make
	this easier), then check those changes in.  I think it's
	good to get things in a working state.
@
text
@d1 1
a1 1
(* ===================================================================== *)
d20 1
d37 1
a37 1
                 | Disk | Validity | Other;
d54 1
d75 1
d77 19
d158 1
d162 1
a162 1
   then make_thm Assume ([tm],tm) 
d166 4
a169 1
fun REFL tm = make_thm Refl ([], Dsyntax.mk_eq{lhs = tm, rhs = tm});
d172 2
d175 4
a178 4
   make_thm Beta
    ([],Dsyntax.mk_eq{lhs = tm, rhs = Term.beta_conv tm})
                handle _ => raise THM_ERR{function = "BETA_CONV",
				          message = "not a beta-redex"};
d187 2
d203 1
a203 1
     then make_thm Subst (hyps,Term.subst rtheta template)
d205 2
a206 1
     end;
d208 2
d215 2
a216 3
        else make_thm Abs
                (asl,Dsyntax.mk_eq{lhs=Term.mk_abs{Bvar=v, Body=lhs},
                                   rhs=Term.mk_abs{Bvar=v, Body=rhs}})
d218 3
a220 2
  | ABS _ _ = raise(THM_ERR{function = "ABS",
			    message = "first argument must be a variable"});
d224 2
a225 2
val type_vars_in_term_list =
    Lib.rev_itlist (Lib.union o Term.type_vars_in_term)
d229 1
a229 1
       let val problem_tyvars = Lib.intersect (Term.type_vars_in_term c)
d231 2
a232 2
       in if (Lib.null_intersection problem_tyvars (map #redex theta))
          then make_thm Inst (asl, Term.inst theta c)
d240 2
d243 3
a245 2
   make_thm Disch (Lib.gather (not o Term.aconv w) asl,
                     Dsyntax.mk_imp{ant = w, conseq = c});
d247 2
d252 1
a252 1
      then make_thm Mp (Lib.union asl1 asl2, conseq)
d255 2
a256 1
   end;
d268 1
a268 1
       fun dotify alist = Lib.itlist (fn _ => fn dots => ("."^dots)) alist ""
@


1.1
log
@Initial revision
@
text
@d12 2
a13 1
functor THM (structure Dsyntax : Dsyntax_sig
d23 3
a25 3
    HOL_ERR{origin_structure = "Thm",
            origin_function = function,
            message = message}
d57 14
a70 14
            Assume     => inc (#ASSUME count)
          | Refl       => inc (#REFL count)
          | Beta       => inc (#BETA_CONV count)
          | Subst      => inc (#SUBST count)
          | Abs        => inc (#ABS count)
          | Disch      => inc (#DISCH count)
          | Mp         => inc (#MP count)
          | Inst       => inc (#INST_TYPE count)
          | Drule      => inc (#DRULE count)
          | Definition => inc (#DEFINITION count)
          | Axiom      => inc (#AXIOM count)
          | Disk       => inc (#FROM_DISK count)
          | Validity   => inc (#VALID_TAC count)
          | Other      => inc (#OTHER count))
d127 3
a129 3
val term_union = op_union Term.aconv
val term_U = op_U Term.aconv
fun hyp_union thm_list = itlist (union o hyp) thm_list [];
d161 1
a161 1
         itlist (fn {var as Term.Fv _,thm = THM(h,c)} => 
d166 1
a166 1
                          union h hyps)
d179 1
a179 1
     in if (mem v (Term.free_varsl asl))
d191 2
a192 1
val type_vars_in_term_list = rev_itlist (union o Term.type_vars_in_term)
d196 1
a196 1
       let val problem_tyvars = intersect (Term.type_vars_in_term c)
d198 1
a198 1
       in if (null_intersection problem_tyvars (map #redex theta))
d208 1
a208 1
   make_thm Disch (gather (not o Term.aconv w) asl,
d214 1
a214 1
      then make_thm Mp (union asl1 asl2, conseq)
d229 1
a229 1
       fun dotify alist = itlist (fn _ => fn dots => ("."^dots)) alist ""
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@


1.1.1.1.2.1
log
@Checking this works.
@
text
@d1 1
a1 1
 (* ===================================================================== *)
@


1.1.1.1.2.2
log
@Konrad's bug fixes up to start of serious
hol90.8 devel;opment.  Checked into branch revision for
later merging with trunk (elsa's work).  See
doc/7.chages for a full description of what's been done.
@
text
@d1 1
a1 1
(* ===================================================================== *)
d35 1
a35 1
                 | Disk   | Validity   | Other;
a51 1
(*
a71 1
*)
a72 19
(****************************************************************************
 * This way should get us some partial evaluation, i.e., the case statement
 * above won't be evaluated at run time, but at compile time.
 ****************************************************************************)
fun make_thm Assume x = (if !counting then inc (#ASSUME count) else (); THM x)
 | make_thm Refl x = (if !counting then inc(#REFL count) else (); THM x)
 | make_thm Beta x = (if !counting then inc(#BETA_CONV count) else(); THM x)
 | make_thm Subst x = (if !counting then inc (#SUBST count) else (); THM x)
 | make_thm Abs x = (if !counting then inc (#ABS count) else (); THM x)
 | make_thm Disch x = (if !counting then inc (#DISCH count) else (); THM x)
 | make_thm Mp x = (if !counting then inc (#MP count) else (); THM x)
 | make_thm Inst x = (if !counting then inc (#INST_TYPE count) else (); THM x)
 | make_thm Drule x = (if !counting then inc (#DRULE count) else (); THM x)
 | make_thm Definition x=(if !counting then inc(#DEFINITION count)else();THM x)
 | make_thm Axiom x = (if !counting then inc (#AXIOM count) else (); THM x)
 | make_thm Disk x = (if !counting then inc (#FROM_DISK count) else (); THM x)
 | make_thm Validity x = (if !counting then inc(#VALID_TAC count)else();THM x)
 | make_thm Other x = (if !counting then inc (#OTHER count) else (); THM x);

a134 1
val mk_thm = make_thm Assume
d138 1
a138 1
   then mk_thm([tm],tm) 
d142 1
a142 4
local val mk_thm = make_thm Refl
in
fun REFL tm = mk_thm([], Dsyntax.mk_eq{lhs = tm, rhs = tm})
end;
a144 2
local val mk_thm = make_thm Beta
in
d146 4
a149 4
   mk_thm ([],Dsyntax.mk_eq{lhs = tm, rhs = Term.beta_conv tm})
              handle _ => raise THM_ERR{function = "BETA_CONV",
                                        message = "not a beta-redex"}
end;
a157 2
local val mk_thm = make_thm Subst
in
d172 1
a172 1
     then mk_thm (hyps,Term.subst rtheta template)
d174 1
a174 2
     end
end;
a175 2
local val mk_thm = make_thm Abs
in
d181 3
a183 2
        else mk_thm(asl,Dsyntax.mk_eq{lhs=Term.mk_abs{Bvar=v, Body=lhs},
                                      rhs=Term.mk_abs{Bvar=v, Body=rhs}})
d185 2
a186 3
  | ABS _ _ = raise THM_ERR{function = "ABS",
                            message = "first argument must be a variable"}
end;
a189 1
val mk_thm = make_thm Inst
d197 1
a197 1
          then mk_thm(asl, Term.inst theta c)
a204 2
local val mk_thm = make_thm Disch
in
d206 2
a207 3
   mk_thm (gather (not o Term.aconv w) asl,
           Dsyntax.mk_imp{ant = w, conseq = c})
end;
a208 2
local val mk_thm = make_thm Mp
in
d212 1
a212 1
      then mk_thm(union asl1 asl2, conseq)
d215 1
a215 2
   end
end;
@
