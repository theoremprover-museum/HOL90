thid = (div_mod, 739178126, 305253)
axioms = []
definitions = []
theorems =
[((DIV_DIV_DIV_MULT),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((==> ((/\ ((< 0) $1)) ((< 0) $0)))
   ((! :(num -> bool) -> bool) (\(x :num). (((= :num -> num -> bool)
   ((DIV ((DIV $0) $2)) $1)) ((DIV $0) ((* $2) $1))))))))))`),
 ((LESS_EQ_MONO_DIV),
  `((! :(num -> bool) -> bool) (\(n :num). ((==> ((< 0) $0))
   ((! :(num -> bool) -> bool) (\(p :num). ((! :(num -> bool) -> bool)
   (\(q :num). ((==> ((<= $1) $0)) ((<= ((DIV $1) $2)) ((DIV $0)
   $2))))))))))`),
 ((SUC_DIV_CASES),
  `((! :(num -> bool) -> bool) (\(n :num). ((==> ((< 0) $0))
   ((! :(num -> bool) -> bool) (\(x :num). ((\/
   (((= :num -> num -> bool) ((DIV (SUC $0)) $1)) ((DIV $0) $1)))
   (((= :num -> num -> bool) ((DIV (SUC $0)) $1)) (SUC ((DIV $0)
   $1)))))))))`),
 ((ADD_DIV_ADD_DIV),
  `((! :(num -> bool) -> bool) (\(n :num). ((==> ((< 0) $0))
   ((! :(num -> bool) -> bool) (\(x :num). ((! :(num -> bool) -> bool)
   (\(r :num). (((= :num -> num -> bool) ((DIV ((+ ((* $1) $2)) $0))
   $2)) ((+ $1) ((DIV $0) $2))))))))))`),
 ((ADD_DIV_SUC_DIV),
  `((! :(num -> bool) -> bool) (\(n :num). ((==> ((< 0) $0))
   ((! :(num -> bool) -> bool) (\(r :num). (((= :num -> num -> bool)
   ((DIV ((+ $1) $0)) $1)) (SUC ((DIV $0) $1))))))))`),
 ((SUC_DIV_SELF),
  `((! :(num -> bool) -> bool) (\(n :num). (((= :num -> num -> bool)
   ((DIV (SUC $0)) (SUC $0))) 1)))`),
 ((SUC_MOD_SELF),
  `((! :(num -> bool) -> bool) (\(n :num). (((= :num -> num -> bool)
   ((MOD (SUC $0)) (SUC $0))) 0)))`),
 ((LESS_DIV_EQ_ZERO),
  `((! :(num -> bool) -> bool) (\(r :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((==> ((< $1) $0)) (((= :num -> num -> bool) ((DIV $1)
   $0)) 0))))))`),
 ((DIV_ONE),
  `((! :(num -> bool) -> bool) (\(q :num). (((= :num -> num -> bool)
   ((DIV $0) (SUC 0))) $0)))`),
 ((MULT_DIV),
  `((! :(num -> bool) -> bool) (\(n :num). ((! :(num -> bool) -> bool)
   (\(q :num). ((==> ((< 0) $1)) (((= :num -> num -> bool) ((DIV ((*
   $0) $1)) $1)) $0))))))`),
 ((MOD_MULT_MOD),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((==> ((/\ ((< 0) $0)) ((< 0) $1)))
   ((! :(num -> bool) -> bool) (\(x :num). (((= :num -> num -> bool)
   ((MOD ((MOD $0) ((* $1) $2))) $1)) ((MOD $0) $1)))))))))`),
 ((SUC_MOD),
  `((! :(num -> bool) -> bool) (\(n :num). ((! :(num -> bool) -> bool)
   (\(m :num). ((==> ((< (SUC $1)) $0)) (((= :num -> num -> bool)
   ((MOD (SUC $1)) $0)) (SUC ((MOD $1) $0))))))))`)]
