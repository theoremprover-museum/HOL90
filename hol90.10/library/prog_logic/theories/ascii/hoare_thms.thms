thid = (hoare_thms, 942752058, 905645)
axioms = []
definitions = []
theorems =
[((WHILE_THM),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool). ((==> (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ((/\ ($3
   $0)) ($1 $0))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $2)))) (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_WHILE
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $0) $1)))
   (\(s :string -> num). ((/\ ($3 $0)) (~ ($1 $0))))))))))))))`),
 ((POST_WEAK_THM),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q' :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool). ((==> ((/\
   (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $3)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $0) $2))))
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num). ((==>
   ($3 $0)) ($2 $0)))))) (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $3)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $0) $1))))))))))))`),
 ((PRE_STRENGTH_THM),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p' :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool). ((==> ((/\
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num). ((==>
   ($3 $0)) ($4 $0))))) (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $3)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $0) $1))))) (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $0) $1))))))))))))`),
 ((IF2_THM),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c' :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool). ((==> ((/\ (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ((/\ ($5
   $0)) ($1 $0))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) $3)))) (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ((/\ ($5
   $0)) (~ ($1 $0)))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $3))))) (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $4)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_IF2
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $0)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $2) $1))))
   $3))))))))))))))`),
 ((IF1_THM),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool). ((==> ((/\ (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ((/\ ($4
   $0)) ($1 $0))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $2))))
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num). ((==>
   ((/\ ($4 $0)) (~ ($1 $0)))) ($3 $0)))))) (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $3)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_IF1
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $0) $1)))
   $2))))))))))))`),
 ((SEQ_THM),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(r :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c' :(string -> num) # (string -> num) -> bool). ((==> ((/\
   (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $4)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $3)))) (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $3)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $0) $2))))) (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $4)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_SEQ
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $1) $0)))
   $2))))))))))))))`),
 ((ASSIGN_THM),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool). ((! :(string -> bool) -> bool)
   (\(x :string). ((! :(((string -> num) -> num) -> bool) -> bool)
   (\(e :(string -> num) -> num). (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ($3 (((BND
   $2) ($1 $0)) $0))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_ASSIGN
   (((, :string -> ((string -> num) -> num) ->
         string # ((string -> num) -> num)) $1) $0))) $2)))))))))`),
 ((SKIP_THM),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool). (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $0)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) MK_SKIP) $0)))))`)]
