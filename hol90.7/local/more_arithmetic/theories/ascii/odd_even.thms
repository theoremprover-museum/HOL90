thid = (odd_even, 739178113, 143757)
axioms = []
definitions = []
theorems =
[((MULT_EVEN),
  `((! :(num -> bool) -> bool) (\(n :num). ((! :(num -> bool) -> bool)
   (\(m :num). ((==> (EVEN ((* $1) $0))) ((\/ (EVEN $1)) (EVEN
   $0)))))))`),
 ((MULT_ODD),
  `((! :(num -> bool) -> bool) (\(n :num). ((! :(num -> bool) -> bool)
   (\(m :num). ((==> (ODD ((* $1) $0))) ((/\ (ODD $1)) (ODD
   $0)))))))`),
 ((ODD_IMPL_MULT),
  `((! :(num -> bool) -> bool) (\(n :num). ((! :(num -> bool) -> bool)
   (\(m :num). ((==> ((/\ (ODD $1)) (ODD $0))) (ODD ((* $1)
   $0)))))))`),
 ((EVEN_IMPL_MULT),
  `((! :(num -> bool) -> bool) (\(n :num). ((! :(num -> bool) -> bool)
   (\(m :num). ((==> ((\/ (EVEN $1)) (EVEN $0))) (EVEN ((* $1)
   $0)))))))`),
 ((EVEN_ODD_PLUS_CASES),
  `((! :(num -> bool) -> bool) (\(n :num). ((! :(num -> bool) -> bool)
   (\(m :num). ((/\ ((==> ((/\ (ODD $1)) (ODD $0))) (EVEN ((+ $1)
   $0)))) ((/\ ((==> ((/\ (ODD $1)) (EVEN $0))) (ODD ((+ $1) $0))))
   ((==> ((/\ (EVEN $1)) (EVEN $0))) (EVEN ((+ $1) $0)))))))))`),
 ((EVEN_ODD_SUC),
  `((! :(num -> bool) -> bool) (\(n :num). ((/\
   (((= :bool -> bool -> bool) (EVEN (SUC $0))) (ODD $0)))
   (((= :bool -> bool -> bool) (ODD (SUC $0))) (EVEN $0)))))`),
 ((NOT_EVEN_ODD_SUC_EVEN_ODD),
  `((! :(num -> bool) -> bool) (\(n :num). ((/\
   (((= :bool -> bool -> bool) (~ (EVEN (SUC $0)))) (EVEN $0)))
   (((= :bool -> bool -> bool) (~ (ODD (SUC $0)))) (ODD $0)))))`),
 ((EVEN_ODD_0), `((/\ (EVEN 0)) (~ (ODD 0)))`)]
