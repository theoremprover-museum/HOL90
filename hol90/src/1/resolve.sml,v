head	1.4;
access;
symbols
	HOL97:1.2.2.1.0.2
	bpHOL97:1.2.2.1
	hol90_9_alpha:1.2.2.1
	hol90_pre8_for_multiple_compilers:1.2.0.2
	hol90_pre8_after_donalds_separate_compilation_changes:1.2
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.4
date	96.02.08.00.36.06;	author drs1004;	state Exp;
branches;
next	1.3;

1.3
date	96.01.04.13.48.52;	author drs1004;	state Exp;
branches;
next	1.2;

1.2
date	95.10.31.15.05.19;	author drs1004;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	95.10.16.13.30.17;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.30.17;	author rjb;	state Exp;
branches;
next	;

1.2.2.1
date	96.06.25.15.47.15;	author rjb;	state Exp;
branches
	1.2.2.1.2.1;
next	;

1.2.2.1.2.1
date	97.06.11.17.50.26;	author kxs;	state Exp;
branches;
next	1.2.2.1.2.2;

1.2.2.1.2.2
date	97.07.11.15.16.07;	author kxs;	state Exp;
branches;
next	;


desc
@@


1.4
log
@New theory mechanism, code reorganisation and other enhancements by Don Syme.
@
text
@(* ===================================================================== *)
(* FILE          : resolve.sml                                           *)
(* DESCRIPTION   : HOL-style resolution (MP + pattern matching).         *)
(*                 Translated from hol88 version 1.12.                   *)
(*                                                                       *)
(* AUTHOR        : (c) Tom Melham, University of Cambridge               *)
(* TRANSLATOR    : Konrad Slind, University of Calgary                   *)
(* DATE          : September 11, 1991                                    *)
(* UPDATED       : (to 2.01); change to RES_CANON                        *)
(* ===================================================================== *)


structure Resolve : Resolve_sig =
struct
open Lib Parse Rterms;
open Thm Drule Conv;
open Thm_cont Tactic Tactical;
  infix THEN;
  infix THENL;
  infix ORELSE;
    

structure Thm = Thm

val ERR = Exception.ERR "Resolve";
val WRAP_ERR = Exception.WRAP_ERR "Resolve";


(* ---------------------------------------------------------------------*)
(* Resolve implicative assumptions with an antecedent			*)
(* ---------------------------------------------------------------------*)
fun ANTE_RES_THEN ttac ante =
   ASSUM_LIST (EVERY o (mapfilter (fn imp => ttac (MATCH_MP imp ante))));

(* =====================================================================*)
(* Resolution tactics for HOL - uses RES_CANON and SPEC_ALL 		*)
(* =====================================================================*)

(* ---------------------------------------------------------------------*)
(* Put a theorem 							*)
(*									*)
(*	 |- !x. t1 ==> !y. t2 ==> ... ==> tm ==>  t 			*)
(*									*)
(* into canonical form for resolution by splitting conjunctions apart   *)
(* (like IMP_CANON but without the stripping out of quantifiers and only*)
(* outermost negations being converted to implications).		*)
(*									*)
(*   ~t            --->          t ==> F        (at outermost level)	*)
(*   t1 /\ t2	  --->		t1,   t2				*)
(*   (t1/\t2)==>t  --->		t1==> (t2==>t)				*)
(*   (t1\/t2)==>t  --->		t1==>t, t2==>t				*)
(*									*)
(*									*)
(* Modification provided by David Shepherd of Inmos to make resolution   *)
(* work with equalities as well as implications. HOL88.1.08,23 jun 1989. *)
(*									*)
(*   t1 = t2      --->          t1=t2, t1==>t2, t2==>t1			*)
(*									*)
(* Modification provided by T Melham to deal with the scope of 		*)
(* universal quantifiers. [TFM 90.04.24]				*)
(*									*)
(*   !x. t1 ==> t2  --->  t1 ==> !x.t2   (x not free in t1)		*)
(*									*)
(* The old code is given below:						*)
(* 									*)
(*    letrec RES_CANON_FUN th =						*)
(*     let w = concl th in						*)
(*     if is_conj w 							*)
(*     then RES_CANON_FUN(CONJUNCT1 th)@@RES_CANON_FUN(CONJUNCT2 th)	*)
(*     else if is_imp w & not(is_neg w) then				*)
(* 	let ante,conc = dest_imp w in					*)
(* 	if is_conj ante then						*)
(* 	    let a,b = dest_conj ante in					*)
(* 	    RES_CANON_FUN 						*)
(* 	    (DISCH a (DISCH b (MP th (CONJ (ASSUME a) (ASSUME b)))))	*)
(* 	else if is_disj ante then					*)
(* 	    let a,b = dest_disj ante in					*)
(* 	    RES_CANON_FUN (DISCH a (MP th (DISJ1 (ASSUME a) b))) @@	*)
(* 	    RES_CANON_FUN (DISCH b (MP th (DISJ2 a (ASSUME b))))	*)
(* 	else								*)
(* 	map (DISCH ante) (RES_CANON_FUN (UNDISCH th))			*)
(*     else [th];							*)
(* 									*)
(* This version deleted for HOL 1.12 (see below)	[TFM 91.01.17]  *)
(*									*)
(* let RES_CANON = 							*)
(*     letrec FN th = 							*)
(*       let w = concl th in						*)
(*       if (is_conj w) then FN(CONJUNCT1 th) @@ FN(CONJUNCT2 th) else	*)
(*       if ((is_imp w) & not(is_neg w)) then				*)
(*       let ante,conc = dest_imp w in					*)
(*       if (is_conj ante) then						*)
(*          let a,b = dest_conj ante in					*)
(* 	   let ath = ASSUME a and bth = ASSUME b in			*)
(*                   FN (DISCH a (DISCH b (MP th (CONJ ath bth)))) else *)
(*          if is_disj ante then					*)
(*         let a,b = dest_disj ante in					*)
(*        let ath = ASSUME a and bth = ASSUME b in			*)
(* 	          FN (DISCH a (MP th (DISJ1 ath b))) @@			*)
(*                 FN (DISCH b (MP th (DISJ2 a bth))) else		*)
(*            map (GEN_ALL o (DISCH ante)) (FN (UNDISCH th)) else	*)
(*        if is_eq w then						*)
(*        let l,r = dest_eq w in					*)
(*            if (type_of l = ":bool") then				*)
(*            let (th1,th2) = EQ_IMP_RULE th in				*)
(*                (GEN_ALL th) . ((FN  th1) @@ (FN  th2)) 		*)
(*                else [GEN_ALL th]					*)
(*            else [GEN_ALL th] in					*)
(*     \th. (let vars,w = strip_forall(concl th) in			*)
(*           let th1 = if (is_neg w)	 				*)
(* 	  		then NOT_ELIM(SPEC_ALL th) 			*)
(* 			else (SPEC_ALL th) in				*)
(*               map GEN_ALL (FN th1) ? failwith `RES_CANON`);		*)
(* ---------------------------------------------------------------------*)

(* ---------------------------------------------------------------------*)
(* New RES_CANON for version 1.12.			 [TFM 90.12.07] *)
(* 									*)
(* The complete list of transformations is now:				*)
(*									*)
(*   ~t              --->        t ==> F        (at outermost level)	*)
(*   t1 /\ t2	    --->	t1, t2	       (at outermost level)	*)
(*   (t1/\t2)==>t    --->	t1==>(t2==>t), t2==>(t1==>t)		*)
(*   (t1\/t2)==>t    --->	t1==>t, t2==>t				*)
(*   t1 = t2         --->        t1==>t2, t2==>t1			*)
(*   !x. t1 ==> t2   --->        t1 ==> !x.t2   (x not free in t1)	*)
(*   (?x.t1) ==> t2  --->	!x'. t1[x'/x] ==> t2			*)
(*									*)
(* The function now fails if no implications can be derived from the 	*)
(* input theorem.							*)
(* ---------------------------------------------------------------------*)

local
fun not_elim th = 
   if (is_neg (concl th))
   then (true, NOT_ELIM th)
   else (false,th)
fun canon (fl,th) = 
   let val w = concl th 
   in
   if (is_conj w) 
   then let val (th1,th2) = CONJ_PAIR th 
        in 
        (canon(fl,th1) @@ canon(fl,th2)) 
        end
   else if ((is_imp w) andalso not(is_neg w)) 
        then let val {ant,...} = dest_imp w 
             in
             if (is_conj ant) 
             then let val {conj1,conj2} = dest_conj ant 
	              val cth = MP th (CONJ (ASSUME conj1)
                                                      (ASSUME conj2)) 
	              val th1 = DISCH conj2 cth 
                      and th2 = DISCH conj1 cth 
                  in
                  (canon(true,DISCH conj1 th1)
                   @@
                   canon(true,DISCH conj2 th2))
                  end
             else if (is_disj ant) 
                  then let val {disj1,disj2} = dest_disj ant 
	                   val ath = DISJ1 (ASSUME disj1) disj2 
                           and bth = DISJ2 disj1 (ASSUME disj2) 
                           val th1 = DISCH disj1 (MP th ath)
                           and th2 = DISCH disj2 (MP th bth) 
                       in
                       (canon(true,th1)@@canon(true,th2)) 
                       end
                  else if (is_exists ant) 
                       then let val {Bvar,Body} = dest_exists ant 
	                        val newv = Term.variant(thm_free_vars th) 
                                           Bvar 
	                        val newa=Term.subst[{redex=Bvar,residue=newv}]
                                                   Body 
	                        val th1 = MP th (EXISTS (ant,newv)
                                                             (ASSUME newa))
                            in
	                    canon(true,DISCH newa th1)
                            end
                       else map (GEN_ALL o (DISCH ant))
                                (canon(true,UNDISCH th)) 
             end
        else if (is_eq w 
                 andalso 
                 (Term.type_of (Term.rand w) = bool_ty))
             then let val (th1,th2) = EQ_IMP_RULE th 
                  in
                  (if fl then [GEN_ALL th] else []) @@ canon(true,th1) @@ 
                  canon(true,th2)
                 end
             else if (is_forall w) 
                  then let val (vs,_) = strip_forall w 
                       in 
                       canon(fl,SPECL vs th) 
                       end
                  else if fl 
                       then [GEN_ALL th] 
                       else [] 
   end
in
fun RES_CANON th =
   let val imps = 
          rev_itlist(fn th => fn accum =>
                       accum @@ (map GEN_ALL
                                    (canon(not_elim(SPEC_ALL th)))))
                    (CONJUNCTS (SPEC_ALL th)) []
   in
   assert ((op not) o null) imps
   end
   handle _ => ERR("RES_CANON","No implication is derivable from input thm")
end;


(* --------------------------------------------------------------------- *)
(* Definitions of the primitive:					*)
(*									*)
(* IMP_RES_THEN: Resolve all assumptions against an implication.	*)
(*									*)
(* The definition uses two auxiliary (local)  functions:		*)
(*									*)
(*     MATCH_MP     : like the built-in version, but doesn't use GSPEC.	*)
(*     RESOLVE_THEN : repeatedly resolve an implication			*)
(* 									*)
(* This version deleted for HOL version 1.12   		 [TFM 91.01.17]	*)
(*									*)
(* begin_section IMP_RES_THEN;						*)
(*									*)
(* let MATCH_MP impth =							*)
(*     let sth = SPEC_ALL impth in					*)
(*     let pat = fst(dest_imp(concl sth)) in				*)
(*     let matchfn = match pat in					*)
(*        (\th. MP (INST_TY_TERM (matchfn (concl th)) sth) th);		*)
(* 									*)
(* letrec RESOLVE_THEN antel ttac impth =			*)
(*        let answers = mapfilter (MATCH_MP impth) antel in		*)
(*            EVERY (mapfilter ttac answers) THEN			*)
(*           (EVERY (mapfilter (RESOLVE_THEN antel ttac) answers));	*)
(* 									*)
(* let IMP_RES_THEN ttac impth =					*)
(*     ASSUM_LIST (\asl. 						*)
(*      EVERY (mapfilter (RESOLVE_THEN asl ttac) (RES_CANON impth))) ? 	*)
(*     failwith `IMP_RES_THEN`;						*)
(*									*)
(* IMP_RES_THEN;							*)
(* 									*)
(* end_section IMP_RES_THEN;						*)
(* 									*)
(* let IMP_RES_THEN = it;						*)
(* ---------------------------------------------------------------------*)

(* ---------------------------------------------------------------------*)
(* Definition of the primitive:						*)
(*									*)
(* IMP_RES_THEN: Resolve all assumptions against an implication.	*)
(*									*)
(* The definition uses an auxiliary (local) function, MATCH_MP, which is*)
(* just like the built-in version, but doesn't use GSPEC.		*)
(* 									*)
(* New implementation for version 1.12: fails if no MP-consequences can *)
(* be drawn, and does only one-step resolution.		[TFM 90.12.07]  *)
(* ---------------------------------------------------------------------*)

fun MATCH_MP impth =
   let val sth = SPEC_ALL impth 
       val matchfn = Match.match_term (#ant(dest_imp(concl sth))) 
   in
   fn th => MP (INST_TY_TERM (matchfn (concl th)) sth) th
   end;

(* ---------------------------------------------------------------------*)
(* check ex l : Fail with ex if l is empty, otherwise return l.		*)
(* ---------------------------------------------------------------------*)

fun check ex [] = ex ()
  | check ex l = l;

(* ---------------------------------------------------------------------*)
(* IMP_RES_THEN  : Resolve an implication against the assumptions.	*)
(* ---------------------------------------------------------------------*)

fun IMP_RES_THEN ttac impth =
   let val ths = RES_CANON impth 
                 handle _ => ERR("IMP_RES_THEN","No implication")
   in
   ASSUM_LIST 
     (fn asl => let val l = itlist(fn th => append(mapfilter(MATCH_MP th) asl))
                                  ths [] 
                    val res = check (fn () => ERR("IMP_RES_THEN",
                                                 "No resolvents")) l 
                    val tacs = check (fn () => ERR("IMP_RES_THEN",
						  "No tactics"))
                                     (mapfilter ttac res) 
                in
                Tactical.EVERY tacs
                end)
   end;

(* ---------------------------------------------------------------------*)
(* RES_THEN    : Resolve all implicative assumptions against the rest.	*)
(* ---------------------------------------------------------------------*)
fun RES_THEN ttac (asl,g) =
    let val aas = map ASSUME asl 
        val ths = itlist append (mapfilter RES_CANON aas) [] 
        val imps = check (fn () => ERR("RES_THEN", "No implication")) ths 
        val l = itlist (fn th => append (mapfilter (MATCH_MP th) aas))
                       imps [] 
        val res = check (fn () => ERR("RES_THEN","No resolvents")) l 
        val tacs = check (fn () => ERR("RES_THEN","No tactics"))
                         (mapfilter ttac res) 
    in
    Tactical.EVERY tacs (asl,g)
    end;

(* ---------------------------------------------------------------------*)
(* Definition of the standard resolution tactics IMP_RES_TAC and RES_TAC*)
(*									*)
(* The function SA is like STRIP_ASSUME_TAC, except that it does not    *)
(* strip off existential quantifiers. And ST is like STRIP_THM_THEN, 	*)
(* except that it also does not strip existential quantifiers.		*)
(*									*)
(* Old version: deleted for HOL version 1.12 		 [TFM 91.01.17]	*)
(*									*)
(* let (IMP_RES_TAC,RES_TAC) = 						*)
(*    let ST = FIRST_TCL [CONJUNCTS_THEN; DISJ_CASES_THEN] in		*)
(*    let SA = (REPEAT_TCL ST) CHECK_ASSUME_TAC in			*)
(*        (IMP_RES_THEN SA, RES_THEN SA);				*)
(* ---------------------------------------------------------------------*)

(* ---------------------------------------------------------------------*)
(* New versions of IMP_RES_TAC and RES_TAC: repeatedly resolve, and then*)
(* add FULLY stripped, final, result(s) to the assumption list.		*)
(* ---------------------------------------------------------------------*)

fun IMP_RES_TAC th g =
   IMP_RES_THEN (REPEAT_GTCL IMP_RES_THEN STRIP_ASSUME_TAC) 
                th g 
   handle _ => ALL_TAC g;

fun RES_TAC g =
    RES_THEN (REPEAT_GTCL IMP_RES_THEN STRIP_ASSUME_TAC) g 
    handle _ => ALL_TAC g;


end; (* Resolve *)
@


1.3
log
@Added simplifier components, added drule files, added MK_ABS_CONV, better error messages
@
text
@d15 3
a17 1
open Tactical;
a20 2
open Parse;
open Dsyntax Term;
a21 8
open Rterms;
open Conv;
open Lib;
open Thm;
open Drule;
open Thm_cont;
open Tactic;
    
a27 10
(* ---------------------------------------------------------------------*)
(* Accept a theorem that, properly instantiated, satisfies the goal     *)
(* ---------------------------------------------------------------------*)
fun MATCH_ACCEPT_TAC thm =
    let val fmatch = PART_MATCH I thm 
        fun atac (asl,w) = ([], K (fmatch w))
    in
    REPEAT GEN_TAC THEN atac
    end
    handle _ => ERR("MATCH_ACCEPT_TAC","");
a342 54
(* ---------------------------------------------------------------------*)
(* MATCH_MP_TAC: Takes a theorem of the form 				*)
(*									*)
(*       |- !x1..xn. A ==> !y1 ... ym. B 				*)
(* 									*)
(* and matches B to the goal, reducing it to the subgoal consisting of 	*)
(* some existentially-quantified instance of A:				*)
(*									*)
(*      !v1...vi. B							*)
(* ======================= MATCH_MP_TAC |- !x1...1n. A ==> !y1...ym. B  *)
(*      ?z1...zp. A							*)
(* 									*)
(* where {z1,...,zn} is the subset of {x1,...,xn} whose elements do not *)
(* appear free in B.							*)
(*									*)
(* Added: TFM 88.03.31							*)
(* Revised: TFM 91.04.20						*)
(*									*)
(* Old version:								*)
(*									*)
(* let MATCH_MP_TAC thm:tactic (gl,g) =					*)
(*     let imp = ((PART_MATCH (snd o dest_imp) thm) g) ? 		*)
(* 	       failwith `MATCH_MP_TAC` in				*)
(*     ([gl,(fst(dest_imp(concl imp)))], \thl. MP imp (hd thl));	*)
(* ---------------------------------------------------------------------*)
local
fun efn v (tm,th) =
   let val ntm = mk_exists{Bvar = v,Body = tm} 
   in 
   (ntm,CHOOSE (v, ASSUME ntm) th)
   end
in
fun MATCH_MP_TAC thm  =
   let val (gvs,imp) = strip_forall (concl thm) 
       val {ant,conseq} = dest_imp imp 
	   handle _ => ERR("MATCH_MP_TAC", "Not an implication")
       val (cvs,con) = strip_forall conseq
       val th1 = SPECL cvs (UNDISCH (SPECL gvs thm))
       val (vs,evs) = partition (C Term.free_in con) gvs 
       val th2 = uncurry DISCH (itlist efn evs (ant,th1))
   in
   fn (A,g) => let val (vs,gl) = strip_forall g
                   val ins = Match.match_term con gl 
		       handle _ => ERR("MATCH_MP_TAC","No match")
                   val ith = INST_TY_TERM ins th2 
                   val ant = #ant(dest_imp(concl ith)) 
                   val gth = GENL vs (UNDISCH ith) 
		       handle _ => ERR("MATCH_MP_TAC","Generalized var(s).")
               in
               ([(A,ant)], fn thl => MP (DISCH ant gth) (hd thl))
               end
   end
end;

@


1.2
log
@First phase of hol90.8 development.  hol90 now compiles using NJSML-CM
108.5, with separate compilation of libraries.  System dependencies
have been isolated in the makefiles and "portable.sml".

This involved a large number of enhancments to the source files,
most of which are documented in the 7.changes file (or will be shortly).
See also the correpsonding email corrspondence between RJB, KLS, TFM,
JRH and DRS that happened during this development.
@
text
@a14 1
(* open Base_logic; *)
d19 11
a29 1
open Term_io.Parse;
a30 2
type tactic = Abbrev.tactic;

d33 2
a34 17
fun RESOLVE_ERR{function,message} =
    Exception.HOL_ERR{origin_structure = "Resolve",
		      origin_function = function,
		      message = message}

(* ---------------------------------------------------------------------*)
(* Search among a list of implications to perform Modus Ponens		*)
(* Used nowhere --- deleted until found useful [TFM 90.04.24]		*)
(* let MULTI_MP impl ante =						*)
(*     tryfind (\imp. MATCH_MP imp ante) impl  ?  failwith `MULTI_MP`;  *)
(* ---------------------------------------------------------------------*)

(* ---------------------------------------------------------------------*)
(* Forwards chaining by Modus Ponens					*)
(* Used nowhere --- deleted until found useful [TFM 90.04.24]		*)
(* let MP_CHAIN = REDEPTH_CHAIN o MULTI_MP;				*)
(* ---------------------------------------------------------------------*)
d39 3
a41 3
fun MATCH_ACCEPT_TAC thm : tactic =
    let val fmatch = Conv.PART_MATCH Lib.I thm 
        fun atac (asl,w) = ([], Lib.K (fmatch w))
d43 1
a43 1
    REPEAT Tactic.GEN_TAC THEN atac
d45 1
a45 8
    handle _ => raise RESOLVE_ERR{function = "MATCH_ACCEPT_TAC",message = ""};

(* ---------------------------------------------------------------------*)
(* Basic unit for resolution tactics					*)
(* DELETED: TFM 88.03.31 (not used anywhere)				*)
(*									*)
(* let MATCH_MP_TAC impth = STRIP_ASSUME_TAC o (MATCH_MP impth);	*)
(* ---------------------------------------------------------------------*)
d50 2
a51 38
fun ANTE_RES_THEN ttac ante : tactic =
   ASSUM_LIST (EVERY o (Lib.mapfilter (fn imp => ttac (Conv.MATCH_MP imp ante))));

(* ---------------------------------------------------------------------*)
(* Old versions of RESOLVE_THEN etc.			[TFM 90.04.24]  *)
(* 									*)
(* letrec RESOLVE_THEN antel ttac impth : tactic =			*)
(*     let answers = mapfilter (MATCH_MP impth) antel in		*)
(*     EVERY (mapfilter ttac answers)					*)
(*     THEN								*)
(*     (EVERY (mapfilter (RESOLVE_THEN antel ttac) answers));		*)
(* 									*)
(* let OLD_IMP_RES_THEN ttac impth =					*)
(*  ASSUM_LIST								*)
(*     (\asl. EVERY (mapfilter (RESOLVE_THEN asl ttac) 			*)
(*		  	      (IMP_CANON impth)));			*)
(* 									*)
(* let OLD_RES_THEN ttac = 						*)
(*     ASSUM_LIST (EVERY o (mapfilter (OLD_IMP_RES_THEN ttac)));	*)
(* ---------------------------------------------------------------------*)

(* ---------------------------------------------------------------------*)
(* A trick tactic for solving existential/disjunctive goals		*)
(* Too tricky, and depends on obsolete version of IMP_RES_THEN		*)
(* Deleted: TFM 90.04.24						*)
(* let SELF_RES_TAC (asl,w) = 						*)
(*    OLD_IMP_RES_THEN ACCEPT_TAC					*)
(*       (DISCH w (itlist ADD_ASSUM asl (ASSUME w))) (asl,w);		*)
(* ---------------------------------------------------------------------*)

(* ---------------------------------------------------------------------*)
(* Resolution tactics from LCF - uses IMP_CANON and GSPEC 		*)
(* 									*)
(* Deleted: TFM 90.04.24						*)
(*									*)
(* let OLD_IMP_RES_TAC = OLD_IMP_RES_THEN STRIP_ASSUME_TAC;		*)
(* let OLD_RES_TAC = OLD_RES_THEN STRIP_ASSUME_TAC;			*)
(* ---------------------------------------------------------------------*)
a151 1
val bool_ty = ==`:bool`==
d153 2
a154 2
   if (Dsyntax.is_neg (Thm.concl th))
   then (true, Drule.NOT_ELIM th)
d157 1
a157 1
   let val w = Thm.concl th 
d159 2
a160 2
   if (Dsyntax.is_conj w) 
   then let val (th1,th2) = Drule.CONJ_PAIR th 
d164 2
a165 2
   else if ((Dsyntax.is_imp w) andalso not(Dsyntax.is_neg w)) 
        then let val {ant,...} = Dsyntax.dest_imp w 
d167 6
a172 6
             if (Dsyntax.is_conj ant) 
             then let val {conj1,conj2} = Dsyntax.dest_conj ant 
	              val cth = Thm.MP th (Drule.CONJ (Thm.ASSUME conj1)
                                                      (Thm.ASSUME conj2)) 
	              val th1 = Thm.DISCH conj2 cth 
                      and th2 = Thm.DISCH conj1 cth 
d174 1
a174 1
                  (canon(true,Thm.DISCH conj1 th1)
d176 1
a176 1
                   canon(true,Thm.DISCH conj2 th2))
d178 6
a183 6
             else if (Dsyntax.is_disj ant) 
                  then let val {disj1,disj2} = Dsyntax.dest_disj ant 
	                   val ath = Drule.DISJ1 (Thm.ASSUME disj1) disj2 
                           and bth = Drule.DISJ2 disj1 (Thm.ASSUME disj2) 
                           val th1 = Thm.DISCH disj1 (Thm.MP th ath)
                           and th2 = Thm.DISCH disj2 (Thm.MP th bth) 
d187 3
a189 3
                  else if (Dsyntax.is_exists ant) 
                       then let val {Bvar,Body} = Dsyntax.dest_exists ant 
	                        val newv = Term.variant(Thm.thm_free_vars th) 
d193 2
a194 2
	                        val th1 = Thm.MP th (Drule.EXISTS (ant,newv)
                                                             (Thm.ASSUME newa))
d196 1
a196 1
	                    canon(true,Thm.DISCH newa th1)
d198 2
a199 2
                       else map (Drule.GEN_ALL o (Thm.DISCH ant))
                                (canon(true,Drule.UNDISCH th)) 
d201 1
a201 1
        else if (Dsyntax.is_eq w 
d204 1
a204 1
             then let val (th1,th2) = Drule.EQ_IMP_RULE th 
d206 1
a206 1
                  (if fl then [Drule.GEN_ALL th] else []) @@ canon(true,th1) @@ 
d209 2
a210 2
             else if (Dsyntax.is_forall w) 
                  then let val (vs,_) = Dsyntax.strip_forall w 
d212 1
a212 1
                       canon(fl,Drule.SPECL vs th) 
d215 1
a215 1
                       then [Drule.GEN_ALL th] 
d221 4
a224 4
          Lib.rev_itlist(fn th => fn accum =>
                       accum @@ (map Drule.GEN_ALL
                                    (canon(not_elim(Drule.SPEC_ALL th)))))
                    (Drule.CONJUNCTS (Drule.SPEC_ALL th)) []
d226 1
a226 1
   Lib.assert ((op not) o null) imps
d228 1
a228 2
   handle _ => raise RESOLVE_ERR{function = "RES_CANON",
                        message = "No implication is derivable from input thm"}
d252 1
a252 1
(* letrec RESOLVE_THEN antel ttac impth : tactic =			*)
d282 2
a283 2
   let val sth = Drule.SPEC_ALL impth 
       val matchfn = Match.match_term (#ant(Dsyntax.dest_imp(Thm.concl sth))) 
d285 1
a285 1
   fn th => Thm.MP (Conv.INST_TY_TERM (matchfn (Thm.concl th)) sth) th
d292 1
a292 1
fun check ex [] = raise ex
d301 1
a301 2
                 handle _ => raise RESOLVE_ERR{function = "IMP_RES_THEN",
                                               message = "No implication"}
d304 1
a304 1
     (fn asl => let val l = Lib.itlist(fn th => Lib.append(Lib.mapfilter(MATCH_MP th) asl))
d306 5
a310 5
                    val res = check (RESOLVE_ERR{function = "IMP_RES_THEN",
                                                 message = "No resolvents"}) l 
                    val tacs = check (RESOLVE_ERR{function = "IMP_RES_THEN",
						  message = "No tactics"})
                                     (Lib.mapfilter ttac res) 
d320 4
a323 5
    let val aas = map Thm.ASSUME asl 
        val ths = Lib.itlist Lib.append (Lib.mapfilter RES_CANON aas) [] 
        val imps = check (RESOLVE_ERR{function = "RES_THEN",
				      message = "No implication"}) ths 
        val l = Lib.itlist (fn th => Lib.append (Lib.mapfilter (Conv.MATCH_MP th) aas))
d325 3
a327 5
        val res = check (RESOLVE_ERR{function = "RES_THEN",
				     message = "No resolvents"}) l 
        val tacs = check (RESOLVE_ERR{function = "RES_THEN",
				      message = "No tactics"})
                         (Lib.mapfilter ttac res) 
d353 1
a353 1
   IMP_RES_THEN (Thm_cont.REPEAT_GTCL IMP_RES_THEN Tactic.STRIP_ASSUME_TAC) 
d358 1
a358 1
    RES_THEN (Thm_cont.REPEAT_GTCL IMP_RES_THEN Tactic.STRIP_ASSUME_TAC) g 
a361 8
(* Used to be for compatibility with the old system. 			*)
(* Deleted: TFM 90.04.24						*)
(* let HOL_IMP_RES_THEN = IMP_RES_THEN					*)
(* and HOL_RES_THEN     = RES_THEN;					*)
(* ---------------------------------------------------------------------*)


(* ---------------------------------------------------------------------*)
d388 1
a388 1
   let val ntm = Dsyntax.mk_exists{Bvar = v,Body = tm} 
d390 1
a390 1
   (ntm,Drule.CHOOSE (v, Thm.ASSUME ntm) th)
d393 8
a400 9
fun MATCH_MP_TAC thm :tactic =
   let val (gvs,imp) = Dsyntax.strip_forall (Thm.concl thm) 
       val {ant,conseq} = Dsyntax.dest_imp imp 
                       handle _ => raise RESOLVE_ERR{function = "MATCH_MP_TAC",
                                                message = "Not an implication"}
       val (cvs,con) = Dsyntax.strip_forall conseq
       val th1 = Drule.SPECL cvs (Drule.UNDISCH (Drule.SPECL gvs thm))
       val (vs,evs) = Lib.partition (Lib.C Term.free_in con) gvs 
       val th2 = Lib.uncurry Thm.DISCH (Lib.itlist efn evs (ant,th1))
d402 1
a402 1
   fn (A,g) => let val (vs,gl) = Dsyntax.strip_forall g
d404 5
a408 7
                     handle _ => raise RESOLVE_ERR{function = "MATCH_MP_TAC",
                                                   message = "No match"}
                   val ith = Conv.INST_TY_TERM ins th2 
                   val ant = #ant(Dsyntax.dest_imp(Thm.concl ith)) 
                   val gth = Drule.GENL vs (Drule.UNDISCH ith) 
                      handle _ => raise RESOLVE_ERR{function = "MATCH_MP_TAC",
                                               message = "Generalized var(s)."}
d410 1
a410 1
               ([(A,ant)], fn thl => Thm.MP (Thm.DISCH ant gth) (hd thl))
@


1.2.2.1
log
@The core of hol90.9.alpha now builds successfully with SML/NJ 109,
SML/NJ 108.5 (using CM), SML/NJ 0.93, and Poly/ML 3.0.
I have not yet tried rebuilding the theory files.
@
text
@a15 1
open Lib;
@


1.2.2.1.2.1
log
@Various updates have been made in order to build on top of SML/NJ 109.26.
@
text
@d21 1
a21 1
open Parse;
@


1.2.2.1.2.2
log
@Minor changes to make HOL CM-friendly.
@
text
@d15 1
a15 1
open CoreHol;
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
open Base_logic;
d22 1
a22 1
structure Thm = Base_logic.Thm
d24 1
a24 3
fun RESOLVE_ERR{function,message} = HOL_ERR{origin_structure = "Resolve",
					    origin_function = function,
					    message = message}
d26 5
d48 2
a49 2
    let val fmatch = Conv.PART_MATCH I thm 
        fun atac (asl,w) = ([], K (fmatch w))
d66 1
a66 1
   ASSUM_LIST (EVERY o (mapfilter (fn imp => ttac (Conv.MATCH_MP imp ante))));
d273 1
a273 1
          rev_itlist(fn th => fn accum =>
d278 1
a278 1
   assert ((op not) o null) imps
d358 1
a358 1
     (fn asl => let val l = itlist(fn th => append(mapfilter(MATCH_MP th) asl))
d364 1
a364 1
                                     (mapfilter ttac res) 
d375 1
a375 1
        val ths = itlist append (mapfilter RES_CANON aas) [] 
d378 1
a378 1
        val l = itlist (fn th => append (mapfilter (Conv.MATCH_MP th) aas))
d384 1
a384 1
                         (mapfilter ttac res) 
d465 2
a466 2
       val (vs,evs) = partition (C Term.free_in con) gvs 
       val th2 = uncurry Thm.DISCH (itlist efn evs (ant,th1))
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
