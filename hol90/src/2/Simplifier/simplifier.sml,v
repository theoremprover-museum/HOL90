head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	96.02.08.00.45.29;	author drs1004;	state Exp;
branches;
next	1.1;

1.1
date	96.01.04.14.06.33;	author drs1004;	state Exp;
branches;
next	;


desc
@@


1.2
log
@New theory mechanism, code reorganisation and other enhancements by Don Syme.
@
text
@(* ===================================================================== 
 * FILE          : simplifer.sml 
 * DESCRIPTION   : A programmable, contextual, conditional simplifier for hol90
 *                                                                       
 * AUTHOR        : Donald Syme
 *                 Based loosely on original HOL rewriting by 
 *                 Larry Paulson et al,
 *                 and not-so-loosely on the Isabelle simplifier.
 * ===================================================================== *)




structure Simplifier : Simplifier_sig =
struct

   structure Ho_net = Ho_net;

   open Lib Pterms Trace Parse Hol_pp;
   infix |>;
	  
   open Drule Tactic Tactical Thm_cont Conv Cond_rewr;
   infix THEN
   open Travrules;
   open Traverse;
   open Congprocs;

   val ERR = Exception.ERR "Simplifier";
   val WRAP_ERR = Exception.WRAP_ERR "Simplifier";
       

   (* ---------------------------------------------------------------------
    * simpsets and basic operations on them
    *
    * Simpsets contain enough information to spark off term traversal
    * quickly and efficiently.  In theory the net need not be stored
    * (and the code would look neater if it wasn't), but in practice
    * it has to be.
    * ---------------------------------------------------------------------*)


   type convdata = {name: string,
                    key: (term list * term) option,
                    trace: int,
                    conv: (term -> thm) -> conv};
   val mk_convdata = I:convdata -> convdata;
   val dest_convdata = I;

   type net = ((term -> thm) -> conv) Ho_net.net;
   datatype simpset = SS of {
            rewrs: thm list,
            convdata: convdata list,
            mkrewrs: thm -> thm list,
            initial_net : net,
            dprocs: reducer list,
            travrules: travrules
     };
   
   (* ---------------------------------------------------------------------
    * dest_ss
    * ---------------------------------------------------------------------*)

   fun dest_ss(SS {rewrs,convdata,mkrewrs,travrules,...}) = 
        {rewrs=rewrs,convdata=convdata,mkrewrs=mkrewrs,travrules=travrules};

   (* ---------------------------------------------------------------------
    * empty_ss
    * ---------------------------------------------------------------------*)

   val equality = #const (const_decl "=");
   
   val empty_ss = SS{
        rewrs= [],
        mkrewrs=(fn thm => [thm]),
        convdata= [],
        initial_net=Ho_net.empty_net,
        dprocs= [],
        travrules=equality_travrules
     };

   (* ---------------------------------------------------------------------
    * setmkrewr
    *
    * Does not remake the rewrite set, so it only effects rewrites
    * added after this point.
    * ---------------------------------------------------------------------*)

   fun setmkrewr mkrewrs (SS ssdata) = SS {
        mkrewrs=mkrewrs,
        rewrs = #rewrs ssdata,
        initial_net = #initial_net ssdata,
        convdata = #convdata ssdata,
         dprocs= #dprocs ssdata,
        travrules = #travrules ssdata
       };

   
   (* ---------------------------------------------------------------------
    * gen_addqconvs
    *
    * Add conversions to the initial context net.
    *
    * USER_CONV wraps a bit of tracing around a user conversion.
    * ---------------------------------------------------------------------*)

   fun USER_CONV {name,key,trace=trace_level,conv} =
   let val trace_string1 = "trying "^name^" on"
       val trace_string2 = name^" ineffectual"
       val trace_string3 = name^" failed"
       val trace_level_plus = trace_level+1
   in fn solver => fn tm =>
          (trace_tm(trace_level_plus,trace_string1,tm);
           trace_production(trace_level,tm,name,conv solver tm)
           handle UNCHANGED => (trace (trace_level_plus,trace_string2); 
                                raise UNCHANGED)
                | e => (trace (trace_level_plus,trace_string3); raise e))
   end;

   val any = (--`x:'a`--);
   fun option_cases f e (SOME x) = f x | option_cases f e NONE = e;
   fun net_add_conv (data as {name,key,trace,conv}:convdata) =
         Ho_net.enter (option_cases #1 [] key,
                        option_cases #2 any key,
                        USER_CONV data);

   fun net_add_convs net convs =
       itlist net_add_conv convs net;


   fun gen_addconvs newconvs (SS ssdata) = SS { 
         mkrewrs = #mkrewrs ssdata,
         rewrs = #rewrs ssdata,
         initial_net=net_add_convs (#initial_net ssdata) newconvs,
         convdata = #convdata ssdata,
         dprocs= #dprocs ssdata,
         travrules = #travrules ssdata
     }

    
   (* ---------------------------------------------------------------------
    * addconvs
    *
    * - Merge convs by name field.
    * - Add new conversions to the initial context net using gen_addqconvs.
    * ---------------------------------------------------------------------*)

   fun subtract_conv_lists (l1:convdata list) (l2:convdata list) = 
       filter (fn cd1 => all (fn cd2 => #name cd1 <> #name cd2) l2) l1;

   fun addconvs newconvdata (SS ssdata) = 
     let val newconvdata' = subtract_conv_lists newconvdata (#convdata ssdata)
         val new_initial_net = net_add_convs (#initial_net ssdata) newconvdata'
         val new_convdata = (#convdata ssdata)@@newconvdata'
     in
      SS{mkrewrs = #mkrewrs ssdata,
         rewrs = #rewrs ssdata,
         initial_net=new_initial_net,
         convdata = new_convdata,
         dprocs= #dprocs ssdata,
         travrules = #travrules ssdata
      }
     end;

   (* ---------------------------------------------------------------------
    * addrewrs
    *
    * ---------------------------------------------------------------------*)

   fun mk_rewr_convdata th = 
        {name="<rewrite>",
         key=SOME (free_varsl (hyp th), lhs(#2 (Imp.strip_imp(concl th)))),
         trace=2,
         conv=COND_REWR_CONV th};

   (* ---------------------------------------------------------------------
    * anything added with addrewrs or ++ is assumed to be permanent,
    * hence we call optimize_thm.  This greatly reduces space used
    * by simpsets.
    * ---------------------------------------------------------------------*)

   fun addrewrs rews (SS ssdata) = 
     let val rews' = map optimize_thm (subtract (flatten 
						 (map (#mkrewrs ssdata) 
					rews)) (#rewrs ssdata))
         val newconvdata = map mk_rewr_convdata rews'
         val new_initial_net = net_add_convs (#initial_net ssdata) newconvdata
     in
      SS{mkrewrs = #mkrewrs ssdata,
         rewrs=rews'@@(#rewrs ssdata),
         initial_net=new_initial_net,
         convdata = #convdata ssdata,
         dprocs= #dprocs ssdata,
         travrules = #travrules ssdata}
     end;

     infix ++;
     
     fun ss ++ rw = 
	 ss |> addrewrs rw
	 handle e => WRAP_ERR("++",e);

   (* ---------------------------------------------------------------------
    * addcongs
    *
    * ---------------------------------------------------------------------*)

   fun set_travrules travrules (SS ssdata) = SS {
         mkrewrs = #mkrewrs ssdata,
         rewrs = #rewrs ssdata,
         initial_net = #initial_net ssdata,
         convdata = #convdata ssdata,
         dprocs= #dprocs ssdata,
         travrules= travrules
      };

   fun addcongs l (ss as (SS ssdata)) = 
       set_travrules (trav_addcongs l (#travrules ssdata)) ss;

   (* ---------------------------------------------------------------------
    * adddproc
    * 
    * ---------------------------------------------------------------------*)

   fun reducer_eq red1 red2 = (#name (dest_reducer red1) = #name (dest_reducer red2));

   fun adddprocs dprocs (SS ssdata) = SS {
         mkrewrs = #mkrewrs ssdata,
         rewrs = #rewrs ssdata,
         initial_net = #initial_net ssdata,
         convdata = #convdata ssdata,
         dprocs= op_union reducer_eq dprocs (#dprocs ssdata),
         travrules= #travrules ssdata
      };
   (* ---------------------------------------------------------------------
    * merge_ss
    * 
    * ---------------------------------------------------------------------*)

   fun merge_one (ss1 as (SS ssdata1),SS ssdata2) =
     ss1 
     |> addconvs (#convdata ssdata2)
     |> addrewrs (#rewrs ssdata2)
     |> adddprocs (#dprocs ssdata2)
     |> set_travrules (merge_travrules [#travrules ssdata1,#travrules ssdata2]);
   val merge_ss = foldr merge_one empty_ss;
       
   (* ---------------------------------------------------------------------
    * SIMP_QCONV : simpset -> thm list -> conv
    *
    * SIMP_QCONV is based on TRAVERSE
    * ---------------------------------------------------------------------*)

   fun rewriter_for_ss (ss as SS{mkrewrs,travrules,initial_net,...}) =
      let fun addcontext (CONVNET net,thms) = 
                 CONVNET (net_add_convs net (map mk_rewr_convdata 
                                 (flatten (map mkrewrs thms))));
          fun apply {solver,context as CONVNET net} tm =
                 FIRST_QCONV (map (fn conv => conv solver)
                                  (Ho_net.lookup tm net)) tm
      in mk_reducer {addcontext=addcontext,
		     relation=equality,
		     name="rewrites",
		     initial=CONVNET initial_net,
		     apply=apply}
      end;
 
   fun SIMP_QCONV (ss as (SS ssdata)) =
      TRAVERSE {rewriters= [rewriter_for_ss ss],
		dprocs= #dprocs ssdata,
		relation= equality,
		travrules= #travrules ssdata};

   fun SIMP_CONV ss l = QCONV (SIMP_QCONV ss l);
   fun SIMP_PROVE ss l = EQT_ELIM o SIMP_QCONV ss l;


   (* ---------------------------------------------------------------------
    * simp_tac_thm is a theorem which justifies the use of equality 
    * traversal/reduction as the basis for a tactic.  Nb. It's logical
    * content is the same as CONV_TAC.
    *
    * simp_rule_thm is a theorem which justifies the use of equality 
    * traversal/reduction as the basis for a rule.  Nb. It's logical
    * content is the same as CONV_RULE.
    * ---------------------------------------------------------------------*)

   val simp_tac_thm = prove(--`(A = A') ==> (A' ==> A)`--, 
                        DISCH_THEN SUBST1_TAC THEN DISCH_THEN ACCEPT_TAC);

   val simp_rule_thm = prove(--`(A = A') ==> (A ==> A')`--, 
                        DISCH_THEN SUBST1_TAC THEN DISCH_THEN ACCEPT_TAC);

   (* ---------------------------------------------------------------------
    * SIMP_TAC : simpset -> tactic
    * ASM_SIMP_TAC : simpset -> tactic
    * FULL_SIMP_TAC : simpset -> tactic
    * 
    * FAILURE CONDITIONS
    *
    * These tactics never fail, though they may diverge.
    * ---------------------------------------------------------------------*)
   
   fun SIMP_TAC (ss as (SS ssdata)) l =
     TRAVERSE_TAC {rule=simp_tac_thm,
		   finder=I,
		   rewriters= [rewriter_for_ss (ss ++ l)],
		   dprocs= #dprocs ssdata,
		   relation= equality,
		   travrules= #travrules ssdata
     } THEN TRY (ACCEPT_TAC TRUTH);

   fun ASM_SIMP_TAC (ss as (SS ssdata)) l =
     ASM_TRAVERSE_TAC {rule=simp_tac_thm,
		       finder=I,
		       rewriters= [rewriter_for_ss (ss ++ l)],
		       dprocs= #dprocs ssdata,
		       relation= equality,
		       travrules= #travrules ssdata
     } THEN TRY (ACCEPT_TAC TRUTH);

   fun FULL_SIMP_TAC (ss as (SS ssdata)) l =
       FULL_TRAVERSE_TAC {rule=simp_tac_thm,
			  finder=I,
			  rewriters= [rewriter_for_ss (ss ++ l)],
			  dprocs= #dprocs ssdata,
			  relation= equality,
			  travrules= #travrules ssdata
     } THEN TRY (ACCEPT_TAC TRUTH);

   fun SIMP_RULE (ss as (SS ssdata)) l =
     TRAVERSE_RULE {rule=simp_rule_thm,
		    finder=I,
		    rewriters= [rewriter_for_ss (ss ++ l)],
		    dprocs= #dprocs ssdata,
		    relation= equality,
		    travrules= #travrules ssdata
     };

   fun ASM_SIMP_RULE (ss as (SS ssdata)) l =
       ASM_TRAVERSE_RULE {rule=simp_rule_thm,
			  finder=I,
			  rewriters= [rewriter_for_ss (ss ++ l)],
			  dprocs= #dprocs ssdata,
			  relation= equality,
			  travrules= #travrules ssdata
      };

   (* ---------------------------------------------------------------------
    * addac
    * ---------------------------------------------------------------------*)

fun PROVE_LCOMM (assoc,sym) =
     let val assocl = lhs (snd (Imp.strip_imp (snd (strip_forall (concl assoc)))))
         val ty = type_of (rand assocl);
	 val thm1 = SPEC_ALL sym;
	 val oper = rator(rator(lhs(concl thm1)));
	     
	 val thm2 = AP_TERM oper thm1
	 val thm3 = AP_THM thm2 (variant (free_vars (concl thm1)) (mk_var("x",ty)))
     in thm3
     end;


fun addac (assoc,sym) ss =
    ss ++ [GSYM assoc,sym,PROVE_LCOMM (assoc,sym)];
    

   (* ---------------------------------------------------------------------
    * Pretty printer for Simpsets
    * ---------------------------------------------------------------------*)

 open PP

 fun pp_simpset ppstrm (SS ssdata) =
    let val {add_string,add_break,begin_block,end_block,add_newline,...} = 
               with_ppstream ppstrm
        val pp_thm = pp_thm ppstrm
        val pp_term = pp_term ppstrm
        val how_many_rewrs = length (#rewrs ssdata)
        val how_many_convs = length (#convdata ssdata)
        val how_many_dprocs = length (#dprocs ssdata)
    in begin_block PP.CONSISTENT 0;
       add_string("Number of rewrite rules = "^Lib.int_to_string how_many_rewrs^" (use dest_ss to see them)");
       add_newline();
       add_string("Conversions:");
       add_newline();
       if (how_many_convs = 0)
       then (add_string "<no conversions>")
       else ( begin_block PP.INCONSISTENT 0;
              pr_list (fn x => add_string (#name x)) 
                      (fn () => add_string",")
                      (fn () => add_break(1,0))
                      (#convdata ssdata);
              end_block());
       add_newline();
       add_string("Number of conversions = "^Lib.int_to_string how_many_convs);
       add_newline();
       pp_travrules ppstrm (#travrules ssdata);
       
       add_string("Decision Procedures: ");
       if (how_many_dprocs = 0)
       then (add_string "<none>")
       else ( begin_block PP.INCONSISTENT 0;
              pr_list (fn dproc => add_string (quote (#name (dest_reducer dproc))))
                      (fn () => add_string",")
                      (fn () => add_break(1,0)) (#dprocs ssdata);
              end_block());
       add_newline();
	   
       end_block()
     end;
end;



@


1.1
log
@Added simplifier components, added drule files, added MK_ABS_CONV, better error messages
@
text
@d17 1
a17 1
   structure BvarNet = BvarNet;
d19 2
a20 3
   open Core;
      infix |>;
   open Pterms;
d22 2
a23 3
   open Imp;
   open Trace;
   open Cond_rewr;
d29 1
d49 1
a49 1
   type net = ((term -> thm) -> conv) BvarNet.net;
d76 1
a76 1
        initial_net=BvarNet.empty_net,
d122 1
a122 1
         BvarNet.enter (option_cases #1 [] key,
d171 1
a171 1
         key=SOME (free_varsl (hyp th), lhs(#2 (strip_imp(concl th)))),
d175 6
d182 3
a184 1
     let val rews' = subtract (flatten (map (#mkrewrs ssdata) rews)) (#rewrs ssdata)
d198 3
a200 1
     fun ss ++ rw = ss |> addrewrs rw;
d248 1
a248 1
    * SIMP_QCONV : simpset -> conv
d259 1
a259 1
                                  (BvarNet.lookup tm net)) tm
d271 1
a271 1
		travrules= #travrules ssdata} [];
d273 2
a274 2
   val SIMP_CONV = QCONV o SIMP_QCONV
   fun SIMP_PROVE ss tm = EQT_ELIM (SIMP_QCONV ss tm);
d303 1
a303 1
   fun SIMP_TAC (ss as (SS ssdata)) =
d306 1
a306 1
		   rewriters= [rewriter_for_ss ss],
d312 1
a312 1
   fun ASM_SIMP_TAC (ss as (SS ssdata)) =
d315 1
a315 1
		       rewriters= [rewriter_for_ss ss],
d321 1
a321 1
   fun FULL_SIMP_TAC (ss as (SS ssdata)) =
d324 1
a324 1
			  rewriters= [rewriter_for_ss ss],
d330 1
a330 1
   fun SIMP_RULE (ss as (SS ssdata)) =
d333 1
a333 1
		    rewriters= [rewriter_for_ss ss],
d339 1
a339 1
   fun ASM_SIMP_RULE (ss as (SS ssdata)) =
d342 1
a342 1
			  rewriters= [rewriter_for_ss ss],
d353 1
a353 1
     let val assocl = lhs (snd (strip_imp (snd (strip_forall (concl assoc)))))
a398 1
       end_block();
d408 3
a410 1
       add_newline()
@
