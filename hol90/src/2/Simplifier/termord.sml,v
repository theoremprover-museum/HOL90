head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	96.02.08.00.45.31;	author drs1004;	state Exp;
branches;
next	1.1;

1.1
date	96.01.04.14.06.38;	author drs1004;	state Exp;
branches;
next	;


desc
@@


1.2
log
@New theory mechanism, code reorganisation and other enhancements by Don Syme.
@
text
@(* =====================================================================
 * Total ordering on terms.  The behaviour of the simplifier depends
 * on this, so don't change it without thinking.
 *
 * Taken from Isabelle.
 *
 * a strict (not reflexive) linear well-founded AC-compatible ordering
 * for terms.
 *
 * Modified by DRS to have certain AC properties.  Vars are always
 * bigger than constants (hence move to the right).  They are
 * also bigger than unary comb functions.  They can't be bigger then
 * 2 or more argument functions as AC rewriting then loops (you
 * need var < f(var2,var3))
 *
 * Also includes a hash function on terms.
 * =====================================================================*)

signature Termord_sig = sig
   val size_of_term : Term.term -> int;
   datatype ord = LT | EQ | GT;
   val intord : (int*int) -> ord;
   val stringord : (string*string) -> ord
   val listord : (('a * 'a) -> ord) -> ('a list * 'a list) -> ord
   val string_of_con : Term.term -> string
(*   val typeord : (hol_type * hol_type) -> ord *)
   val termord : (Term.term * Term.term) -> ord
   val termlt : (Term.term * Term.term) -> bool
   val termgt : (Term.term * Term.term) -> bool

   val hash_string : (string * int) -> int
   val hash_term : (Term.term * int) -> int
end;

structure Termord : Termord_sig = 
struct
   open Rterms Lib;
   val ERR = Exception.ERR "Termord";

   fun size_of_term tm = 
(*      case tm of 
         (Abs{Bvar,Body}) => 1 + size_of_term Body
       | (Comb{Rator,Rand}) => size_of_term Rator + size_of_term Rand
       | Fv _ => 1
       | Bv _ => 1
       | Const _ => 1 *)

       case (dest_term tm) of 
          (LAMB{Bvar,Body}) => 1 + size_of_term Body
        | (COMB{Rator,Rand}) => size_of_term Rator + size_of_term Rand
        | VAR {Name,...} => 1
        | CONST {Name,...} => 1 

   (* lexical ordering on lists *)
   datatype ord = LT | EQ | GT;

   fun intord (i:int,j) = if (i < j) then LT else if (i = j) then EQ else GT;
   fun stringord (i:string,j) = if Portable.String.<(i,j) then LT else if (i = j) then EQ else GT;

   fun listord oper (h1::t1,h2::t2) = 
      (case (oper(h1,h2)) of
          EQ => listord oper (t1,t2)
        | ord => ord)
     | listord oper (x::_,_) = GT
     | listord oper (_,x::_) = LT
     | listord oper (_,_) = EQ
      
   fun string_of_con tm =
(*      case tm of 
         Abs _ => "*** ABSTRACTION ***"
       | Comb _ => ERR("string_of_con","Why COMB??")
       | Fv{Name,...} => Name
       | Bv n  => makestring n
       | Const{Name,...} => Name *)

       case (dest_term tm) of 
          (LAMB _) => "*** ABSTRACTION ***"
        | (COMB _) => ERR("string_of_con","Why COMB??")
        | (VAR{Name,...}) => Name
       | (CONST{Name,...}) => Name 

   fun termord(tm1,tm2) =
(*   (case (tm1, tm2) of 
      (Fv _,Const _) => GT
    | (Fv _, Comb {Rator,Rand}) => if is_comb Rator then LT else GT
    | (Const _, Fv _) => LT
    | (Comb {Rator,Rand}, Fv _) => if is_comb Rator then GT else LT
    | (Fv {Name,...}, Fv {Name=Name2,...}) => stringord(Name,Name2)
    | (Const {Name,...}, Const {Name=Name2,...}) => stringord(Name,Name2)
    | (dt1,dt2) =>
      (case intord (size_of_term tm1,size_of_term tm2) of
       EQ => 
         (case (dt1,dt2) of 
            (Abs{Bvar,Body},Abs{Bvar=Bvar2,Body=Body2}) => termord(Body,Body2)
          | _ => let val (con,args) = strip_comb tm1
                     val (con2,args2) = strip_comb tm2
                     val scon = string_of_con con
                     val scon2 = string_of_con con2
                 in case stringord(scon,scon2) of
                    EQ => listord termord (args,args2)
                  | ord => ord
                 end)
       | ord => ord)) *)

   (case (dest_term tm1, dest_term tm2) of 
      (VAR _,CONST _) => GT
    | (VAR _, COMB {Rator,Rand}) => if is_comb Rator then LT else GT
    | (CONST _, VAR _) => LT
    | (COMB {Rator,Rand}, VAR _) => if is_comb Rator then GT else LT
    | (VAR {Name,...}, VAR {Name=Name2,...}) => stringord(Name,Name2)
    | (CONST {Name,...}, CONST {Name=Name2,...}) => stringord(Name,Name2)
    | (dt1,dt2) =>
      (case intord (size_of_term tm1,size_of_term tm2) of
       EQ => 
         (case (dt1,dt2) of 
            (LAMB{Bvar,Body},LAMB{Bvar=Bvar2,Body=Body2}) => termord(Body,Body2)
          | _ => let val (con,args) = strip_comb tm1
                     val (con2,args2) = strip_comb tm2
                     val scon = string_of_con con
                     val scon2 = string_of_con con2
                 in case stringord(scon,scon2) of
                    EQ => listord termord (args,args2)
                  | ord => ord
                 end)
       | ord => ord))



   fun termlt (tm1,tm2) = (termord (tm1,tm2) = LT)
   fun termgt (tm1,tm2) = (termord (tm1,tm2) = GT)

val res = ref 0 
val index = ref 0
fun hash_string (string,size) =
   let val _ = index := 0
       val _ = res := 0
       val len = String.size string
       val _ = while (!index < len) do (
           res := (!res*61 + Portable.String.ordof(string,!index)) mod size;
           index := (!index + 1)
       )
   in !res
   end;

   fun hash_term (tm,size) =
(*   let fun hash tm =
      case tm of 
         Abs{Bvar,Body} => 61 + hash Body
       | Comb{Rator,Rand} => (53 * (hash Rator) + hash Rand) mod size
       | Fv {Name,...} => hash_string(Name,size)
       | Bv n => n
       | Const {Name,...} => hash_string (Name,size)
   in
      (hash tm) mod size
   end
*)

   let fun hash tm =
      case (dest_term tm) of 
         (LAMB{Bvar,Body}) => 61 + hash Body
       | (COMB{Rator,Rand}) => (53 * (hash Rator) + hash Rand) mod size
       | VAR {Name,...} => hash_string(Name,size)
       | CONST {Name,...} => hash_string (Name,size)
   in
      (hash tm) mod size
   end


end;

@


1.1
log
@Added simplifier components, added drule files, added MK_ABS_CONV, better error messages
@
text
@d37 1
a37 3
   open Core;

   open Dsyntax;
d57 2
a58 2
   fun intord (i:int,j) = if Integer.<(i,j) then LT else if (i = j) then EQ else GT;
   fun stringord (i:string,j) = if String.<(i,j) then LT else if (i = j) then EQ else GT;
@
