head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	96.02.08.00.35.13;	author drs1004;	state Exp;
branches;
next	;


desc
@@


1.1
log
@New theory mechanism, code reorganisation and other enhancements by Don Syme.
@
text
@(*=======================================================================
 * Support for AC reasoning.
 *=====================================================================*)

signature AC_sig =
sig
    val AC_CONV : (Thm.thm * Thm.thm) -> Abbrev.conv

end;

structure AC : AC_sig = 
struct

    open Lib Rterms;
    open Drule Conv;
	
    val ERR = Exception.ERR "AC";
    val WRAP_ERR = Exception.WRAP_ERR "AC";
	
(*-----------------------------------------------------------------------*)
(* AC_CONV - Prove equality using associative + commutative laws         *)
(*                                                                       *)
(* The conversion is given an associative and commutative law (it deduces*)
(* the relevant operator and type from these) in the form of the inbuilt *)
(* ones, and an equation to prove. It will try to prove this. Example:   *)
(*                                                                       *)
(*  AC_CONV(ADD_ASSOC,ADD_SYM) "(1 + 3) + (2 + 4) = 4 + (3 + (2 + 1))"   *)
(* [JRH 91.07.17]                                                        *)
(*-----------------------------------------------------------------------*)

fun AC_CONV(associative,commutative) tm =
   let val opr = (rator o rator o lhs o snd o strip_forall o concl) commutative
       val ty = (hd o #Args o Type.dest_type o type_of) opr
       val x = mk_var{Name="x",Ty=ty}
       and y = mk_var{Name="y",Ty=ty}
       and z = mk_var{Name="z",Ty=ty}
       val xy = mk_comb{Rator=mk_comb{Rator=opr,Rand=x},Rand=y} 
       and yz = mk_comb{Rator=mk_comb{Rator=opr,Rand=y},Rand=z}
       and yx = mk_comb{Rator=mk_comb{Rator=opr,Rand=y},Rand=x}
       val comm = PART_MATCH I commutative (mk_eq{lhs=xy,rhs=yx})
       and ass = PART_MATCH I (SYM (SPEC_ALL associative))
              (mk_eq{lhs=mk_comb{Rator=mk_comb{Rator=opr,Rand=xy},Rand=z},
                     rhs=mk_comb{Rator=mk_comb{Rator=opr,Rand=x},Rand=yz}})
       val asc = TRANS (SUBS [comm] (SYM ass)) (INST[{redex=y,residue=x},
                                                     {redex=x,residue=y}] ass)
       val init = TOP_DEPTH_CONV (REWR_CONV ass) tm
       val gl = rhs (concl init)

       fun bubble head expr =
          let val {Rator,Rand=r} = dest_comb expr
              val {Rator=xopr, Rand = l} = dest_comb Rator
          in
          if (xopr = opr)
          then if (l = head) 
               then REFL expr 
               else if (r = head)
                    then INST [x |-> l, y |-> r] comm
                    else let val subb = bubble head r
                             val eqv = AP_TERM (mk_comb{Rator=xopr,Rand=l})subb
                             val {Rator,Rand=r'} = 
                                        dest_comb(#rhs(dest_eq(concl subb)))
                             val {Rator=yopr,Rand=l'} = dest_comb Rator
                         in
                         TRANS eqv (INST[x |-> l, y |-> l', z |-> r'] asc)
                         end
          else ERR("bubble","")
          end

       fun asce {lhs,rhs} =
          if (lhs = rhs)
          then REFL lhs
          else let val {Rator,Rand=r'} = dest_comb lhs
                   val {Rator=zopr,Rand=l'} = dest_comb Rator
               in
               if (zopr = opr) 
               then let val beq = bubble l' rhs
                        val rt = Dsyntax.rhs (concl beq)
                    in TRANS (AP_TERM (mk_comb{Rator=opr,Rand=l'})
                                      (asce{lhs=rand lhs, rhs=rand rt}))
                             (SYM beq)
                    end
               else ERR("AC_CONV.asce","")
               end
   in
   EQT_INTRO (EQ_MP (SYM init) (asce (dest_eq gl)))
   end
   handle e => WRAP_ERR("AC_CONV",e);

end;

@
