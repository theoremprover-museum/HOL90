thid = (add, 739177996, 257296)
axioms = []
definitions = []
theorems =
[((LESS_ADD1),
  `((! :(num -> bool) -> bool) (\(a :num). ((< $0) ((+ $0) 1))))`),
 ((SUC_LESS_N_LESS),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((==> ((< ((+ $1) 1)) $0)) ((< $1) $0))))))`),
 ((ADD_EQ_LESS_EQ),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num). ((==>
   (((= :num -> num -> bool) ((+ $2) $1)) $0)) ((<= $2) $0))))))))`),
 ((NOT_ADD_LESS),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). (~ ((< ((+ $1) $0)) $0))))))`),
 ((NOT_LESS_IMP_LESS_EQ_ADD1),
  `((! :(num -> bool) -> bool) (\(a :num). ((! :(num -> bool) -> bool)
   (\(b :num). ((==> (~ ((< $1) $0))) ((<= $0) ((+ $1) 1)))))))`),
 ((SUM_LESS),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num). ((==> ((< ((+
   $2) $1)) $0)) ((/\ ((< $2) $0)) ((< $1) $0)))))))))`),
 ((NOT_1_TWICE),
  `((! :(num -> bool) -> bool) (\(n :num). (~
   (((= :num -> num -> bool) 1) ((+ $0) $0)))))`),
 ((ADD_MONO_LESS),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num).
   (((= :bool -> bool -> bool) ((< ((+ $2) $0)) ((+ $2) $1))) ((< $0)
   $1))))))))`),
 ((ADD_GREATER_EQ),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((>= ((+ $1) $0)) $1)))))`),
 ((LESS_TRANS_ADD),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num).
   ((! :(num -> bool) -> bool) (\(q :num). ((==> ((/\ ((< $3) ((+ $2)
   $1))) ((< $1) $0))) ((< $3) ((+ $2) $0)))))))))))`),
 ((GREATER_EQ_SPLIT),
  `((! :(num -> bool) -> bool) (\(p :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(m :num). ((==> ((>= $2)
   ((+ $0) $1))) ((/\ ((>= $2) $1)) ((>= $2) $0)))))))))`),
 ((LESS_ADD_ASSOC),
  `((! :(num -> bool) -> bool) (\(d :num). ((! :(num -> bool) -> bool)
   (\(c :num). ((! :(num -> bool) -> bool) (\(b :num).
   ((! :(num -> bool) -> bool) (\(a :num). ((==> ((< $0) ((+ $1) $2)))
   ((< $0) ((+ $1) ((+ $2) $3))))))))))))`),
 ((ADD_EQ_LESS_IMP_LESS),
  `((! :(num -> bool) -> bool) (\(n :num). ((! :(num -> bool) -> bool)
   (\(m :num). ((! :(num -> bool) -> bool) (\(k :num).
   ((! :(num -> bool) -> bool) (\(l :num). ((==> ((/\
   (((= :num -> num -> bool) ((+ $1) $2)) ((+ $0) $3))) ((< $1) $0)))
   ((< $3) $2))))))))))`),
 ((LESS_LESS_EQ_MONO),
  `((/\ ((! :(num -> bool) -> bool) (\(m :num).
   ((! :(num -> bool) -> bool) (\(n :num). ((! :(num -> bool) -> bool)
   (\(p :num). ((! :(num -> bool) -> bool) (\(q :num). ((==> ((/\ ((<
   $3) $1)) ((<= $2) $0))) ((< ((+ $3) $2)) ((+ $1) $0))))))))))))
   ((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num).
   ((! :(num -> bool) -> bool) (\(q :num). ((==> ((/\ ((<= $3) $1))
   ((< $2) $0))) ((< ((+ $3) $2)) ((+ $1) $0))))))))))))`),
 ((LESS_LESS_MONO),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num).
   ((! :(num -> bool) -> bool) (\(q :num). ((==> ((/\ ((< $3) $1)) ((<
   $2) $0))) ((< ((+ $3) $2)) ((+ $1) $0)))))))))))`),
 ((ADDR_GREATER_EQ),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num). ((==> ((<= $2)
   $1)) ((<= $2) ((+ $1) $0)))))))))`),
 ((ADDR_GREATER),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num). ((==> ((< $2)
   $1)) ((< $2) ((+ $1) $0)))))))))`),
 ((ADDL_GREATER_EQ),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num). ((==> ((<= $2)
   $1)) ((<= $2) ((+ $0) $1)))))))))`),
 ((ADDL_GREATER),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num). ((==> ((< $2)
   $1)) ((< $2) ((+ $0) $1)))))))))`),
 ((LESS_EQ_SPLIT),
  `((! :(num -> bool) -> bool) (\(p :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(m :num). ((==> ((<= ((+
   $0) $1)) $2)) ((/\ ((<= $1) $2)) ((<= $0) $2)))))))))`),
 ((ADD_SYM_ASSOC),
  `((! :(num -> bool) -> bool) (\(a :num). ((! :(num -> bool) -> bool)
   (\(b :num). ((! :(num -> bool) -> bool) (\(c :num).
   (((= :num -> num -> bool) ((+ $2) ((+ $1) $0))) ((+ $1) ((+ $2)
   $0)))))))))`),
 ((LESS_EQ_ADD1),
  `((! :(num -> bool) -> bool) (\(n :num). ((! :(num -> bool) -> bool)
   (\(p :num). ((<= $0) ((+ $1) $0))))))`),
 ((LESS_EQ_MONO_ADD_EQ1),
  `((! :(num -> bool) -> bool) (\(p :num). ((! :(num -> bool) -> bool)
   (\(m :num). (((= :bool -> bool -> bool) ((<= ((+ $0) $1)) $1)) ((<=
   $0) 0))))))`),
 ((LESS_EQ_MONO_ADD_EQ0),
  `((! :(num -> bool) -> bool) (\(p :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(m :num).
   (((= :bool -> bool -> bool) ((<= $0) $1)) ((<= ((+ $2) $0)) ((+ $2)
   $1)))))))))`),
 ((ADD_SUC_0),
  `((! :(num -> bool) -> bool) (\(m :num). (((= :num -> num -> bool)
   (SUC $0)) ((+ (SUC 0)) $0))))`),
 ((LESS_LESS_EQ),
  `((! :(num -> bool) -> bool) (\(a :num). ((! :(num -> bool) -> bool)
   (\(b :num). (((= :bool -> bool -> bool) ((< $1) $0)) ((<= ((+ $1)
   1)) $0))))))`)]
