head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	96.02.08.00.36.28;	author drs1004;	state Exp;
branches;
next	;


desc
@@


1.1
log
@New theory mechanism, code reorganisation and other enhancements by Don Syme.
@
text
@(* ===================================================================== 
 * FILE          : taut_thms.sig                                         
 * DESCRIPTION   : Signature for a collection of tautologies. These are  
 *                 collected in one place and proved uniformly for the   
 *                 first time in hol90. Some are proved much more        
 *                 elegantly in the comments (hol88 code).               
 *                                                                       
 * AUTHORS       : (c) Tom Melham, University of Cambridge, for hol88    
 *                     Konrad Slind, University of Calgary               
 * DATE          : September 11, 1991                                    
 * ADDITIONS     : by RJB, Dec 21, 1992, proved by a uniform tactic now  
 *                 (Konrad Slind)                                        
 * ===================================================================== *)


signature Theorems_sig =
sig
    structure Thm : Thm_sig	
    val OR_IMP_THM : Thm.thm	
    val NOT_IMP : Thm.thm
    val DISJ_ASSOC  : Thm.thm
    val DISJ_SYM : Thm.thm
    val DE_MORGAN_THM : Thm.thm
    val LEFT_AND_OVER_OR : Thm.thm
    val RIGHT_AND_OVER_OR : Thm.thm
    val LEFT_OR_OVER_AND : Thm.thm
    val RIGHT_OR_OVER_AND : Thm.thm
    val IMP_DISJ_THM : Thm.thm
    val IMP_F_EQ_F :Thm.thm
    val AND_IMP_INTRO :Thm.thm
    val EQ_IMP_THM :Thm.thm
    val EQ_EXPAND :Thm.thm
    val COND_RATOR :Thm.thm
    val COND_RAND :Thm.thm
    val COND_ABS :Thm.thm
    val COND_EXPAND :Thm.thm

    val BETA_THM :  Thm.thm


    val RIGHT_OR_EXISTS_THM: Thm.thm
    val SKOLEM_THM: Thm.thm         
    val SELECT_THM: Thm.thm         
    val EXISTS_UNIQUE_THM: Thm.thm
    val TRIV_FORALL_IMP_THM: Thm.thm
    val EXISTS_OR_THM: Thm.thm      
    val TRIV_EXISTS_AND_THM: Thm.thm
    val LEFT_AND_FORALL_THM: Thm.thm
    val RIGHT_EXISTS_AND_THM: Thm.thm
    val RIGHT_IMP_FORALL_THM: Thm.thm
    val LEFT_IMP_EXISTS_THM: Thm.thm
    val NOT_EXISTS_THM: Thm.thm     
    val LEFT_FORALL_IMP_THM: Thm.thm
    val OR_EXISTS_THM: Thm.thm      
    val RIGHT_FORALL_IMP_THM: Thm.thm
    val TRIV_FORALL_OR_THM: Thm.thm 
    val TRIV_AND_EXISTS_THM: Thm.thm
    val COND_ELIM_THM: Thm.thm      
    val TRIV_OR_FORALL_THM: Thm.thm 
    val FORALL_NOT_THM: Thm.thm     
    val RIGHT_OR_FORALL_THM: Thm.thm
    val LEFT_IMP_FORALL_THM: Thm.thm
    val RIGHT_IMP_EXISTS_THM: Thm.thm
    val RIGHT_AND_FORALL_THM: Thm.thm
    val LEFT_OR_EXISTS_THM: Thm.thm 
    val TRIV_EXISTS_IMP_THM: Thm.thm
    val RIGHT_FORALL_OR_THM: Thm.thm
    val RIGHT_AND_EXISTS_THM: Thm.thm
    val LEFT_FORALL_OR_THM: Thm.thm 
    val LEFT_EXISTS_AND_THM: Thm.thm
    val LEFT_OR_FORALL_THM: Thm.thm 
    val FORALL_AND_THM: Thm.thm     
    val AND_FORALL_THM: Thm.thm     
    val RIGHT_EXISTS_IMP_THM: Thm.thm
    val LEFT_EXISTS_IMP_THM: Thm.thm
    val NOT_FORALL_THM: Thm.thm     
    val LEFT_AND_EXISTS_THM: Thm.thm
    val EXISTS_NOT_THM: Thm.thm     

    val taut_thms : (string * Thm.thm) list
    val quant_thms : (string * Thm.thm) list
end;
@
