thid = (groups, 865549391, 474580)
axioms = []
definitions =
[((group_sq),
  [],
  `((! :('a group -> bool) -> bool) (\(g :'a group).
   ((! :('a -> bool) -> bool) (\(a :'a). (((= :'a -> 'a -> bool)
   (((group_sq :'a group -> 'a -> 'a) $1) $0))
   (((monoid_sq :'a monoid -> 'a -> 'a)
   (((monoid :'a -> ('a -> 'a -> 'a) -> 'a monoid)
   ((id :'a group -> 'a) $1)) ((fn :'a group -> 'a -> 'a -> 'a) $1)))
   $0))))))`),
 ((group_oblig),
  [],
  `((! :('a group -> bool) -> bool) (\(g :'a group).
   (((= :bool -> bool -> bool) ((group_oblig :'a group -> bool) $0))
   ((/\ ((! :('a -> bool) -> bool) (\(x :'a). (((= :'a -> 'a -> bool)
   ((((fn :'a group -> 'a -> 'a -> 'a) $1) $0) ((id :'a group -> 'a)
   $1))) $0)))) ((/\ ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a -> 'a -> bool) ((((fn :'a group -> 'a -> 'a -> 'a) $1)
   ((id :'a group -> 'a) $1)) $0)) $0)))) ((/\
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :'a -> 'a -> bool)
   ((((fn :'a group -> 'a -> 'a -> 'a) $1) $0)
   (((inv :'a group -> 'a -> 'a) $1) $0))) ((id :'a group -> 'a)
   $1))))) ((/\ ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a -> 'a -> bool) ((((fn :'a group -> 'a -> 'a -> 'a) $1)
   (((inv :'a group -> 'a -> 'a) $1) $0)) $0)) ((id :'a group -> 'a)
   $1))))) ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a -> bool) -> bool) (\(y :'a). ((! :('a -> bool) -> bool)
   (\(z :'a). (((= :'a -> 'a -> bool)
   ((((fn :'a group -> 'a -> 'a -> 'a) $3) $2)
   ((((fn :'a group -> 'a -> 'a -> 'a) $3) $1) $0)))
   ((((fn :'a group -> 'a -> 'a -> 'a) $3)
   ((((fn :'a group -> 'a -> 'a -> 'a) $3) $2) $1))
   $0)))))))))))))))`),
 ((fn_abs_rep),
  [],
  `((! :(('a -> 'a -> 'a) -> bool) -> bool) (\(fn :'a -> 'a -> 'a).
   ((! :('a -> bool) -> bool) (\(id :'a).
   ((! :(('a -> 'a) -> bool) -> bool) (\(inv :'a -> 'a).
   (((= :('a -> 'a -> 'a) -> ('a -> 'a -> 'a) -> bool)
   ((fn :'a group -> 'a -> 'a -> 'a)
   ((((group :('a -> 'a) -> 'a -> ('a -> 'a -> 'a) -> 'a group) $0)
   $1) $2))) $2)))))))`),
 ((id_abs_rep),
  [],
  `((! :(('a -> 'a -> 'a) -> bool) -> bool) (\(fn :'a -> 'a -> 'a).
   ((! :('a -> bool) -> bool) (\(id :'a).
   ((! :(('a -> 'a) -> bool) -> bool) (\(inv :'a -> 'a).
   (((= :'a -> 'a -> bool) ((id :'a group -> 'a)
   ((((group :('a -> 'a) -> 'a -> ('a -> 'a -> 'a) -> 'a group) $0)
   $1) $2))) $1)))))))`),
 ((inv_abs_rep),
  [],
  `((! :(('a -> 'a -> 'a) -> bool) -> bool) (\(fn :'a -> 'a -> 'a).
   ((! :('a -> bool) -> bool) (\(id :'a).
   ((! :(('a -> 'a) -> bool) -> bool) (\(inv :'a -> 'a).
   (((= :('a -> 'a) -> ('a -> 'a) -> bool)
   ((inv :'a group -> 'a -> 'a)
   ((((group :('a -> 'a) -> 'a -> ('a -> 'a -> 'a) -> 'a group) $0)
   $1) $2))) $0)))))))`),
 ((group_DEF),
  [],
  `((! :(('a -> 'a) -> bool) -> bool) (\(f0 :'a -> 'a).
   ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :(('a -> 'a -> 'a) -> bool) -> bool) (\(f1 :'a -> 'a -> 'a).
   (((= :'a group -> 'a group -> bool)
   ((((group :('a -> 'a) -> 'a -> ('a -> 'a -> 'a) -> 'a group) $2)
   $1) $0))
   ((ABS_group :(('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree ->
                'a group)
   (((Node :('a -> 'a) # 'a # ('a -> 'a -> 'a) ->
            (('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree list ->
            (('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree)
   (((, :('a -> 'a) -> 'a # ('a -> 'a -> 'a) ->
         ('a -> 'a) # 'a # ('a -> 'a -> 'a)) $2)
   (((, :'a -> ('a -> 'a -> 'a) -> 'a # ('a -> 'a -> 'a)) $1) $0)))
   (NIL :(('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree list))))))))))`),
 ((group_ISO_DEF),
  [],
  `((/\ ((! :('a group -> bool) -> bool) (\(a :'a group).
   (((= :'a group -> 'a group -> bool)
   ((ABS_group :(('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree ->
                'a group)
   ((REP_group :'a group ->
                (('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree) $0)))
   $0))))
   ((! :((('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree -> bool) -> bool)
   (\(r :(('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(('a -> 'a) # 'a # ('a -> 'a -> 'a) ->
           (('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree list -> bool) ->
           (('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree -> bool)
   (\(v :('a -> 'a) # 'a # ('a -> 'a -> 'a)).
   (\(tl :(('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree list). ((/\
   ((? :(('a -> 'a) -> bool) -> bool) (\(f0 :'a -> 'a).
   ((? :('a -> bool) -> bool) (\(x :'a).
   ((? :(('a -> 'a -> 'a) -> bool) -> bool) (\(f1 :'a -> 'a -> 'a).
   (((= :('a -> 'a) # 'a # ('a -> 'a -> 'a) ->
         ('a -> 'a) # 'a # ('a -> 'a -> 'a) -> bool) $4)
   (((, :('a -> 'a) -> 'a # ('a -> 'a -> 'a) ->
         ('a -> 'a) # 'a # ('a -> 'a -> 'a)) $2)
   (((, :'a -> ('a -> 'a -> 'a) -> 'a # ('a -> 'a -> 'a)) $1)
   $0)))))))))) (((= :num -> num -> bool)
   ((LENGTH :(('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree list -> num)
   $0)) 0))))) $0))
   (((= :(('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree ->
         (('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree -> bool)
   ((REP_group :'a group ->
                (('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree)
   ((ABS_group :(('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree ->
                'a group) $0))) $0)))))`),
 ((group_TY_DEF),
  [],
  `((? :(('a group -> (('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree) ->
        bool) -> bool)
   (\(rep :'a group -> (('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree).
   (((TYPE_DEFINITION :((('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree ->
                       bool) ->
                       ('a group ->
                       (('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree) ->
                       bool)
   ((TRP :(('a -> 'a) # 'a # ('a -> 'a -> 'a) ->
          (('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree list -> bool) ->
          (('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree -> bool)
   (\(v :('a -> 'a) # 'a # ('a -> 'a -> 'a)).
   (\(tl :(('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree list). ((/\
   ((? :(('a -> 'a) -> bool) -> bool) (\(f0 :'a -> 'a).
   ((? :('a -> bool) -> bool) (\(x :'a).
   ((? :(('a -> 'a -> 'a) -> bool) -> bool) (\(f1 :'a -> 'a -> 'a).
   (((= :('a -> 'a) # 'a # ('a -> 'a -> 'a) ->
         ('a -> 'a) # 'a # ('a -> 'a -> 'a) -> bool) $4)
   (((, :('a -> 'a) -> 'a # ('a -> 'a -> 'a) ->
         ('a -> 'a) # 'a # ('a -> 'a -> 'a)) $2)
   (((, :'a -> ('a -> 'a -> 'a) -> 'a # ('a -> 'a -> 'a)) $1)
   $0)))))))))) (((= :num -> num -> bool)
   ((LENGTH :(('a -> 'a) # 'a # ('a -> 'a -> 'a)) ltree list -> num)
   $0)) 0)))))) $0)))`)]
theorems =
[((INVERSE_INVERSE_LEMMA),
  [],
  `((! :('a group -> bool) -> bool) (\(g :'a group). ((==>
   ((group_oblig :'a group -> bool) $0)) ((! :('a -> bool) -> bool)
   (\(a :'a). (((= :'a -> 'a -> bool) (((inv :'a group -> 'a -> 'a)
   $1) (((inv :'a group -> 'a -> 'a) $1) $0))) $0))))))`),
 ((LEFT_CANCELLATION),
  [],
  `((! :('a group -> bool) -> bool) (\(g :'a group). ((==>
   ((group_oblig :'a group -> bool) $0)) ((! :('a -> bool) -> bool)
   (\(x :'a). ((! :('a -> bool) -> bool) (\(y :'a).
   ((! :('a -> bool) -> bool) (\(a :'a). ((==> (((= :'a -> 'a -> bool)
   ((((fn :'a group -> 'a -> 'a -> 'a) $3) $0) $2))
   ((((fn :'a group -> 'a -> 'a -> 'a) $3) $0) $1)))
   (((= :'a -> 'a -> bool) $2) $1)))))))))))`),
 ((OP_DETERMINES_IDENTITY),
  [],
  `((! :('a group -> bool) -> bool) (\(g2 :'a group).
   ((! :('a group -> bool) -> bool) (\(g1 :'a group). ((==> ((/\
   ((group_oblig :'a group -> bool) $0))
   ((group_oblig :'a group -> bool) $1))) ((==>
   (((= :('a -> 'a -> 'a) -> ('a -> 'a -> 'a) -> bool)
   ((fn :'a group -> 'a -> 'a -> 'a) $0))
   ((fn :'a group -> 'a -> 'a -> 'a) $1))) (((= :'a -> 'a -> bool)
   ((id :'a group -> 'a) $0)) ((id :'a group -> 'a) $1))))))))`),
 ((IDENTITY_UNIQUE),
  [],
  `((! :('a group -> bool) -> bool) (\(g :'a group). ((==>
   ((group_oblig :'a group -> bool) $0)) ((! :('a -> bool) -> bool)
   (\(f :'a). ((==> ((! :('a -> bool) -> bool) (\(a :'a). ((/\
   (((= :'a -> 'a -> bool) ((((fn :'a group -> 'a -> 'a -> 'a) $2) $0)
   $1)) $0)) (((= :'a -> 'a -> bool)
   ((((fn :'a group -> 'a -> 'a -> 'a) $2) $1) $0)) $0)))))
   (((= :'a -> 'a -> bool) $0) ((id :'a group -> 'a) $1))))))))`),
 ((group),
  [],
  `((! :((('a -> 'a) -> 'a -> ('a -> 'a -> 'a) -> 'a1) -> bool) ->
        bool) (\(f :('a -> 'a) -> 'a -> ('a -> 'a -> 'a) -> 'a1).
   ((?! :(('a group -> 'a1) -> bool) -> bool) (\(fn :'a group -> 'a1).
   ((! :(('a -> 'a) -> bool) -> bool) (\(f0 :'a -> 'a).
   ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :(('a -> 'a -> 'a) -> bool) -> bool) (\(f1 :'a -> 'a -> 'a).
   (((= :'a1 -> 'a1 -> bool) ($3
   ((((group :('a -> 'a) -> 'a -> ('a -> 'a -> 'a) -> 'a group) $2)
   $1) $0))) ((($4 $2) $1) $0))))))))))))`)]
