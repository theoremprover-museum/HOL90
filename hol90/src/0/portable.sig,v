head	1.7;
access;
symbols
	HOL97:1.2.2.2.0.2
	bpHOL97:1.2.2.2
	hol90_9_alpha:1.2.2.2
	hol90_pre8_for_multiple_compilers:1.2.0.2
	hol90_pre8_after_donalds_separate_compilation_changes:1.1;
locks; strict;
comment	@# @;


1.7
date	96.04.03.14.33.59;	author drs1004;	state Exp;
branches;
next	1.6;

1.6
date	96.01.04.21.49.44;	author drs1004;	state Exp;
branches;
next	1.5;

1.5
date	96.01.04.15.58.32;	author drs1004;	state Exp;
branches;
next	1.4;

1.4
date	96.01.04.13.45.41;	author drs1004;	state Exp;
branches;
next	1.3;

1.3
date	95.12.18.11.35.04;	author drs1004;	state Exp;
branches;
next	1.2;

1.2
date	95.11.15.13.24.38;	author rjb;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	95.10.31.13.56.27;	author drs1004;	state Exp;
branches;
next	;

1.2.2.1
date	96.06.25.15.41.55;	author rjb;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	96.08.23.14.53.45;	author rjb;	state Exp;
branches
	1.2.2.2.2.1;
next	;

1.2.2.2.2.1
date	97.06.11.17.24.29;	author kxs;	state dead;
branches;
next	;


desc
@@


1.7
log
@check in before mods for mosml.
@
text
@(* ===================================================================== 
 * $Id$
 *
 * Portability structures, where they differ from the SML standard
 * library.
 * ===================================================================== *)


(*
structure General :
  sig
    exception Bind
    exception Match
    exception Subscript
    exception Size
    exception Overflow
    exception Div
(*    exception Ln
    exception Sqrt *)
    exception Fail of string

    datatype 'a option = NONE | SOME of 'a

    datatype order = LESS | EQUAL | GREATER

    val <> : ''a * ''a -> bool

    val !  : 'a ref -> 'a
    val := : ('a ref * 'a) -> unit

    val o      : ('b -> 'c) * ('a -> 'b) -> ('a -> 'c)
    val before : ('a * 'b) -> 'a
    val ignore : 'a -> unit

  end
*)
(*
structure List :
  sig
    type 'a list
    sharing type list = List.list
    exception Empty
    val null : 'a list -> bool
    val hd : 'a list -> 'a
    val tl : 'a list -> 'a list
    val last : 'a list -> 'a
    val nth : 'a list * int -> 'a
    val take : 'a list * int -> 'a list
    val drop : 'a list * int -> 'a list
    val length : 'a list -> int
    val rev : 'a list -> 'a list
    val @@ : 'a list * 'a list -> 'a list
    val concat : 'a list list -> 'a list
    val revAppend : 'a list * 'a list -> 'a list
    val app : ('a -> unit) -> 'a list -> unit
    val map : ('a -> 'b) -> 'a list -> 'b list
    val mapPartial : ('a -> 'b General.option) -> 'a list -> 'b list
    val find : ('a -> bool) -> 'a list -> 'a General.option
    val filter : ('a -> bool) -> 'a list -> 'a list
    val partition : ('a -> bool) -> 'a list -> 'a list * 'a list
    val foldr : ('a * 'b -> 'b) -> 'b -> 'a list -> 'b
    val foldl : ('a * 'b -> 'b) -> 'b -> 'a list -> 'b
    val exists : ('a -> bool) -> 'a list -> bool
    val all : ('a -> bool) -> 'a list -> bool
    val tabulate : int * (int -> 'a) -> 'a list
  end
*)

(*
structure Vector :
  sig
    type 'a vector
    sharing type vector = Vector.vector
    val maxLen : int
(*    val vector : 'a list -> 'a vector *)
    val fromList : 'a list -> 'a vector
    val tabulate : int * (int -> 'a) -> 'a vector
    val length : 'a vector -> int
    val sub : 'a vector * int -> 'a
    val extract : 'a vector * int * int option -> 'a vector
    val concat : 'a vector list -> 'a vector
  end
*)
(*
structure Array :
  sig
    type 'a array
    sharing type array = Array.array
    val maxLen : int
    val array : int * '1a -> '1a array
    val tabulate : int * (int -> '1a) -> '1a array
(*    val arrayoflist : '1a list -> '1a array *)
    val fromList : '1a list -> '1a array
    val length : 'a array -> int
    val sub : 'a array * int -> 'a
    val update : 'a array * int * 'a -> unit
    val extract : 'a array * int * int option -> 'a Vector.vector
  end
*)
(*
structure ByteArray :
  sig
    eqtype bytearray
    exception Range
    val array : int * int -> bytearray
    val length : bytearray -> int
    val sub : bytearray * int -> int
    val update : bytearray * int * int -> unit
(*     val extract : bytearray * int * int option -> string *)
  end
*)


(*
structure Char :
  sig
    eqtype char
    exception Chr
    val chr : int -> char
    val ord : char -> int
    val maxOrd : int
    val < : char * char -> bool
    val <= : char * char -> bool
    val > : char * char -> bool
    val >= : char * char -> bool
  end
*)

(*
structure String :
  sig
    exception Ord
    eqtype string
    sharing type string = String.string
    val maxLen : int 
    val size : string -> int
    val sub : string * int -> Char.char
    val substring : string * int * int -> string
    val concat : string list -> string
    val ^ : string * string -> string
    val str : Char.char -> string
    val ordof : string * int -> int
    val implode : Char.char list -> string
    val explode : string -> Char.char list
    val <= : string * string -> bool
    val < : string * string -> bool
    val >= : string * string -> bool
    val > : string * string -> bool
  end
*)



structure PP :
  sig
    type ppstream
    datatype break_style = CONSISTENT | INCONSISTENT
    val mk_ppstream : {consumer : string -> unit,
		       flush : unit -> unit,
		       linewidth : int} -> ppstream
    val dest_ppstream : ppstream -> {consumer : string -> unit,
				     flush : unit -> unit,
				     linewidth : int}
    val add_break : ppstream -> int * int -> unit
    val add_newline : ppstream -> unit
    val add_string : ppstream -> string -> unit
    val begin_block : ppstream -> break_style -> int -> unit
    val end_block : ppstream -> unit
    val clear_ppstream : ppstream -> unit
    val flush_ppstream : ppstream -> unit
    val with_pp : {consumer : string -> unit,
		   flush : unit -> unit,
		   linewidth : int} -> (ppstream -> unit) -> unit
    val install_pp : string list -> (ppstream -> 'a -> unit) -> unit
    val pp_to_string : int -> (ppstream -> 'a -> unit) -> 'a -> string
    val with_ppstream : ppstream
                        -> {add_break:int * int -> unit, 
			    add_string:string -> unit,
			    begin_block:break_style -> int -> unit,
			    end_block:unit -> unit, 
			    add_newline:unit -> unit, 
			    clear_ppstream:unit -> unit,
			    flush_ppstream:unit -> unit}
    val defaultConsumer : unit -> {consumer : string -> unit,
				   linewidth : int, 
				   flush : unit -> unit}
    val pr_list :('a -> unit) -> (unit -> 'b) -> (unit -> 'c) -> 'a list -> unit

  end


(*
structure Time :
  sig
    eqtype time (* = TIME of {sec:int, usec:int} *)
    val dest_time : time -> {sec:int, usec:int}
    val mk_time : {sec:int, usec:int} -> time
    val timestamp : unit -> time
    val time_eq : time -> time -> bool
    val time_lt : time -> time -> bool
    val time_to_string : time -> String.string
  end
*)

(*
structure Timer :
  sig

    type cpu_timer
    type real_timer

    val totalCPUTimer : unit -> cpu_timer
    val startCPUTimer : unit -> cpu_timer
    val checkCPUTimer : cpu_timer -> {
	    usr : Time.time, sys : Time.time, gc : Time.time
	  }

    val totalRealTimer : unit -> real_timer
    val startRealTimer : unit -> real_timer
    val checkRealTimer : real_timer -> Time.time

  end (* TIMER *)
*)


(*-------------------------------------------------------------------
 * Misc: Things which manipulate the ML environment
 *
 * interpret - interpret a file directly from source
 * compile - compile and execute a file directly from source
 * use - compile/interpret a file directly from source
 * use_stream - compile/interpret a file from input stream
 * load - load a compiled version of the files if they exist, 
 *        otherwise compile them and "use" them.
 *------------------------------------------------------------------*)

(* exception SysError  of (int * string)*)
signature Interactive_sig = 
sig
val use : string -> unit
val use_stream : instream -> unit
val use_string : string -> unit
val compile : string -> unit
val interpret : string -> unit
val load : string list -> unit
val interp : bool ref;
end;

(*-------------------------------------------------------------------
 * Misc. I/O and OS interaction
 *
 * WARNING: This will be reorganised before the release of hol90.8 to
 * be a portable part of the "OS" structure of the new SML basis. DRS.
 *------------------------------------------------------------------*)

val execute : string * string list -> instream * outstream 
val modTime : string -> Time.time
val say : string -> unit
val linewidth : int ref
val getEnv : string -> string General.option
val cd : string -> unit
val pwd : unit -> string
val listDir : string -> string list
val ls : unit -> int
val system : string -> int
(* val argv : unit -> string list *)
val getArgs : unit -> string list
val exit : unit -> unit
val mkdir : string -> unit
val clean_directory : string -> unit

val export : string -> unit

(*--------------------------------------------------------------------
 * Some parameters.
 *
 * version should be a list of strings identifying the SML version
 * being used in a standard fashion.  Som examples:
 *    ["njsml","108","5"]
 *    ["polyml"]
 *    ["mosml"]
 * Although not the only possible use, these are used to 
 * look for .hol-init files.
 *-------------------------------------------------------------------*)

val arch : string
val sml_version : string list
val sml_banner : string

(*---------------------------------------------------------------------
 * Misc. conversions.
 *--------------------------------------------------------------------*)

val int_to_string : int -> String.string
val real_to_string : real -> String.string

(*---------------------------------------------------------------------
 * Misc file I/O
 *--------------------------------------------------------------------*)

val file_exists_for_reading : string -> bool
val flush_out : outstream -> unit
val input_line : instream -> string
val open_string : string -> instream

(*---------------------------------------------------------------------
 * Pointer/Lisp-EQ Equality (god forbid).
 *--------------------------------------------------------------------*)

val pointer_eq : ''a * ''a -> bool


end


@


1.6
log
@*** empty log message ***
@
text
@d1 6
a6 11
(* ===================================================================== *)
(* FILE          : sml_system.sig                                        *)
(* DESCRIPTION   : Signature for SML System dependent functions.         *)
(*                                                                       *)
(* AUTHOR        : Elsa L. Gunter, AT&T Bell Laboratories                *)
(* DATE          : 7 October, 1993                                       *)
(* ===================================================================== *)

(* Copyright 1993 by AT&T Bell Laboratories *)

(* Share and Enjoy *)
a7 2
signature Portable_sig =
sig
d9 1
d36 2
a37 1

d67 1
d69 1
d83 2
a84 1

d99 2
a100 1

d111 1
a111 7


structure Ref :
    sig
	val inc : int ref -> unit
	val dec : int ref -> unit
    end
d114 1
d127 1
d129 1
d150 1
d154 1
a154 1
structure PrettyPrint :
d191 2
d203 1
d205 1
d223 1
d238 2
d247 1
d256 2
a257 1
(* val execute : string * string list -> instream * outstream *)
@


1.5
log
@io transformers moved here
@
text
@d24 2
a25 2
    exception Ln
    exception Sqrt
d30 1
a30 1
    datatype ordering = LESS | EQUAL | GREATER
d83 1
a83 1
    val extract : 'a vector * int * int -> 'a vector
d99 1
a99 1
    val extract : 'a array * int * int -> 'a Vector.vector
d110 1
a110 1
    val extract : bytearray * int * int -> string
d113 1
d251 1
a251 1
val execute : string * string list -> instream * outstream
@


1.4
log
@Fixed types, pretypes, fixities, parsing.
@
text
@a266 3
val set_print_depth : int -> unit
val print_depth : unit -> int

@


1.3
log
@Preterm and other changes, see 7.changes
@
text
@d190 1
d267 3
@


1.2
log
@The HOL90 sources have been changed to allow for the use of different
Standard ML compilers (possibly simultaneously).

 * Many files in "src/0" changed to make them more portable across different
   ML compilers. Various additions have been made to the Portable structure
   and files changed to access identifiers in the Portable structure rather
   than from the global environment. Worthy of special note are:

   - The pointer equality used in "src/0/term.sml" has been made into a
     function in the Portable structure.

   - The ML-Lex and ML-Yacc files for the various parsers have been changed
     to access the Portable structure. Both the source files and the SML
     produced from them have been changed but I have not verified that the
     source files would reproduce the new SML versions if ML-Lex and ML-Yacc
     were to be rerun on them. The changes involve some hacks that exploit the
     way ML-Lex and ML-Yacc work. See the sources for details.

R.J.Boulton, 15th November 1995.
@
text
@d189 1
d225 2
d236 3
a238 2
val interp : bool ref

d240 1
d244 3
a251 1
(* val environ : unit -> string list *)
d260 5
d266 12
d279 1
a279 1
val version : {system:string, date:string, version_id:int list}
a280 2
val file_exists_for_reading : string -> bool
val exit : unit -> unit
d290 1
a290 1
 * Exporting the executable. 
d293 1
a293 2
val export : string -> unit 

d298 4
d307 1
@


1.2.2.1
log
@The core of hol90.9.alpha now builds successfully with SML/NJ 109,
SML/NJ 108.5 (using CM), SML/NJ 0.93, and Poly/ML 3.0.
I have not yet tried rebuilding the theory files.
@
text
@d2 1
a2 1
(* FILE          : portable.sig                                          *)
d24 2
d30 1
a30 1
    datatype order = LESS | EQUAL | GREATER
d83 1
a83 1
    val extract : 'a vector * int * int General.option -> 'a vector
d99 1
a99 1
    val extract : 'a array * int * int General.option -> 'a Vector.vector
d110 1
a110 1
    val extract : bytearray * int * int General.option -> string
d119 1
d154 2
d176 1
a176 1
    val install_pp : string list -> string -> (ppstream -> 'a -> unit) -> unit
@


1.2.2.2
log
@Added a structure Int.
Defined and exported HOL_base_directory.
Added an unfiltered version of use_stream.
Added a function for batch processing (exits after using a file).
@
text
@a40 20
structure Int :
  sig
    eqtype int
    exception Div
    exception Mod
    val * : int * int -> int
    val + : int * int -> int
    val - : int * int -> int
    val < : int * int -> bool
    val <= : int * int -> bool
    val > : int * int -> bool
    val >= : int * int -> bool
    val abs : int -> int
    val div : int * int -> int
    val mod : int * int -> int
    val max : int * int -> int
    val min : int * int -> int
    val ~ : int -> int
  end

a227 1
val unfiltered_use_stream : instream -> unit
a253 3
val use_and_exit : (exn -> 'a) -> string -> unit

val HOL_base_directory : string
@


1.2.2.2.2.1
log
@Removed files are parse files and portability files that have
effectively been moved elsewhere.

Modified files are up to date for ML 109.26.
@
text
@@


1.1
log
@First phase of hol90.8 development.  hol90 now compiles using NJSML-CM
108.5, with separate compilation of libraries.  System dependencies
have been isolated in the makefiles and "portable.sml".

This involved a large number of enhancments to the source files,
most of which are documented in the 7.changes file (or will be shortly).
See also the correpsonding email corrspondence between RJB, KLS, TFM,
JRH and DRS that happened during this development.
@
text
@d102 11
d245 1
a245 1
val getEnv : string -> string option
d258 1
a258 1
val exit : unit -> 'a
d273 6
@
