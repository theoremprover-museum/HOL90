thid = (apply_f_until_finished, 784032908, 512574)
axioms = []
definitions =
[((apply_f_until_finished),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(finished :'a -> bool).
   ((! :(('a -> 'a) -> bool) -> bool) (\(f :'a -> 'a).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :'a -> 'a -> bool)
   ((((apply_f_until_finished :('a -> bool) -> ('a -> 'a) -> 'a -> 'a)
   $2) $1) $0)) ((@ :('a -> bool) -> 'a) (\(y :'a). ((/\ ($3 $0))
   ((? :(num -> bool) -> bool) (\(n :num). (((= :'a -> 'a -> bool)
   (((((apply_f_cond_n_times :('a -> bool) -> ('a -> 'a) -> 'a ->
                              num -> 'a) $4) $3) $2) $0))
   $1)))))))))))))`),
 ((apply_f_cond_n_times),
  [],
  `((/\ ((! :(('a -> bool) -> bool) -> bool) (\(finished :'a -> bool).
   ((! :(('a -> 'a) -> bool) -> bool) (\(f :'a -> 'a).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :'a -> 'a -> bool)
   (((((apply_f_cond_n_times :('a -> bool) -> ('a -> 'a) -> 'a ->
                              num -> 'a) $2) $1) $0) 0)) $0))))))))
   ((! :(('a -> bool) -> bool) -> bool) (\(finished :'a -> bool).
   ((! :(('a -> 'a) -> bool) -> bool) (\(f :'a -> 'a).
   ((! :('a -> bool) -> bool) (\(x :'a). ((! :(num -> bool) -> bool)
   (\(n :num). (((= :'a -> 'a -> bool)
   (((((apply_f_cond_n_times :('a -> bool) -> ('a -> 'a) -> 'a ->
                              num -> 'a) $3) $2) $1) (SUC $0)))
   ((((COND :bool -> 'a -> 'a -> 'a) ($3
   (((((apply_f_cond_n_times :('a -> bool) -> ('a -> 'a) -> 'a ->
                              num -> 'a) $3) $2) $1) $0)))
   (((((apply_f_cond_n_times :('a -> bool) -> ('a -> 'a) -> 'a ->
                              num -> 'a) $3) $2) $1) $0)) ($2
   (((((apply_f_cond_n_times :('a -> bool) -> ('a -> 'a) -> 'a ->
                              num -> 'a) $3) $2) $1)
   $0)))))))))))))`)]
theorems =
[((apply_f_until_finished_TERMINATE_CASE),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(finished :'a -> bool).
   ((! :(('a -> 'a) -> bool) -> bool) (\(f :'a -> 'a).
   ((! :('a -> bool) -> bool) (\(y :'a). ((! :('a -> bool) -> bool)
   (\(x :'a). ((==> ((/\ ($3 $1)) ((? :(num -> bool) -> bool)
   (\(n :num). (((= :'a -> 'a -> bool)
   (((((apply_f_cond_n_times :('a -> bool) -> ('a -> 'a) -> 'a ->
                              num -> 'a) $4) $3) $1) $0)) $2)))))
   (((= :'a -> 'a -> bool)
   ((((apply_f_until_finished :('a -> bool) -> ('a -> 'a) -> 'a -> 'a)
   $3) $2) $0)) $1))))))))))`),
 ((FINISHED_UNIQUE),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(finished :'a -> bool).
   ((! :(('a -> 'a) -> bool) -> bool) (\(f :'a -> 'a).
   ((! :('a -> bool) -> bool) (\(x :'a). ((! :('a -> bool) -> bool)
   (\(y :'a). ((! :('a -> bool) -> bool) (\(z :'a). ((==> ((/\ ((/\
   ($4 $0)) ((? :(num -> bool) -> bool) (\(n :num).
   (((= :'a -> 'a -> bool)
   (((((apply_f_cond_n_times :('a -> bool) -> ('a -> 'a) -> 'a ->
                              num -> 'a) $5) $4) $3) $0)) $1))))) ((/\
   ($4 $1)) ((? :(num -> bool) -> bool) (\(n :num).
   (((= :'a -> 'a -> bool)
   (((((apply_f_cond_n_times :('a -> bool) -> ('a -> 'a) -> 'a ->
                              num -> 'a) $5) $4) $3) $0)) $2))))))
   (((= :'a -> 'a -> bool) $0) $1))))))))))))`),
 ((FINISHED_IMPLIES_LOWEST),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(finished :'a -> bool).
   ((! :(('a -> 'a) -> bool) -> bool) (\(f :'a -> 'a).
   ((! :('a -> bool) -> bool) (\(x :'a). ((? :(num -> bool) -> bool)
   (\(n :num). ((==> ($3
   (((((apply_f_cond_n_times :('a -> bool) -> ('a -> 'a) -> 'a ->
                              num -> 'a) $3) $2) $1) $0)))
   ((?! :(num -> bool) -> bool) (\(n0 :num). ($4
   (((((apply_f_cond_n_times :('a -> bool) -> ('a -> 'a) -> 'a ->
                              num -> 'a) $4) $3) $2)
   $0)))))))))))))`),
 ((FINISHED_IMPLIES_NO_CHANGE),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(finished :'a -> bool).
   ((! :(('a -> 'a) -> bool) -> bool) (\(f :'a -> 'a).
   ((! :('a -> bool) -> bool) (\(x :'a). ((? :(num -> bool) -> bool)
   (\(n0 :num). ((==> ($3
   (((((apply_f_cond_n_times :('a -> bool) -> ('a -> 'a) -> 'a ->
                              num -> 'a) $3) $2) $1) $0)))
   ((! :(num -> bool) -> bool) (\(n :num). ((==> ((<= $1) $0))
   (((= :'a -> 'a -> bool)
   (((((apply_f_cond_n_times :('a -> bool) -> ('a -> 'a) -> 'a ->
                              num -> 'a) $4) $3) $2) $0))
   (((((apply_f_cond_n_times :('a -> bool) -> ('a -> 'a) -> 'a ->
                              num -> 'a) $4) $3) $2)
   $1))))))))))))))`)]
