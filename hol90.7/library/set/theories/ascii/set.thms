thid = (set, 783974961, 854915)
axioms = []
definitions =
[((INFINITE_DEF),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool) ((INFINITE :'a set -> bool) $0)) (~
   ((FINITE :'a set -> bool) $0)))))`),
 ((CARD_DEF),
  [],
  `((/\ (((= :num -> num -> bool) ((CARD :'a set -> num)
   (EMPTY :'a set))) 0)) ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((==> ((FINITE :'a set -> bool) $0)) ((! :('a -> bool) -> bool)
   (\(x :'a). (((= :num -> num -> bool) ((CARD :'a set -> num)
   (((INSERT :'a -> 'a set -> 'a set) $0) $1)))
   ((((COND :bool -> num -> num -> num) (((IN :'a -> 'a set -> bool)
   $0) $1)) ((CARD :'a set -> num) $1)) (SUC ((CARD :'a set -> num)
   $1))))))))))`),
 ((FINITE_DEF),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool) ((FINITE :'a set -> bool) $0))
   ((! :(('a set -> bool) -> bool) -> bool) (\(P :'a set -> bool).
   ((==> ((/\ ($0 (EMPTY :'a set))) ((! :('a set -> bool) -> bool)
   (\(s :'a set). ((==> ($1 $0)) ((! :('a -> bool) -> bool) (\(e :'a).
   ($2 (((INSERT :'a -> 'a set -> 'a set) $0) $1))))))))) ($0
   $1)))))))`),
 ((RINV_DEF),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('b set -> bool) -> bool) (\(t :'b set). ((==>
   ((((SURJ :('a -> 'b) -> 'a set -> 'b set -> bool) $2) $1) $0))
   ((! :('b -> bool) -> bool) (\(x :'b). ((==>
   (((IN :'b -> 'b set -> bool) $0) $1)) (((= :'b -> 'b -> bool) ($3
   ((((RINV :('a -> 'b) -> 'a set -> 'b -> 'a) $3) $2) $0)))
   $0)))))))))))`),
 ((LINV_DEF),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('b set -> bool) -> bool) (\(t :'b set). ((==>
   ((((INJ :('a -> 'b) -> 'a set -> 'b set -> bool) $2) $1) $0))
   ((! :('a -> bool) -> bool) (\(x :'a). ((==>
   (((IN :'a -> 'a set -> bool) $0) $2)) (((= :'a -> 'a -> bool)
   ((((LINV :('a -> 'b) -> 'a set -> 'b -> 'a) $3) $2) ($3 $0)))
   $0)))))))))))`),
 ((BIJ_DEF),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('b set -> bool) -> bool) (\(t :'b set).
   (((= :bool -> bool -> bool)
   ((((BIJ :('a -> 'b) -> 'a set -> 'b set -> bool) $2) $1) $0)) ((/\
   ((((INJ :('a -> 'b) -> 'a set -> 'b set -> bool) $2) $1) $0))
   ((((SURJ :('a -> 'b) -> 'a set -> 'b set -> bool) $2) $1)
   $0)))))))))`),
 ((SURJ_DEF),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('b set -> bool) -> bool) (\(t :'b set).
   (((= :bool -> bool -> bool)
   ((((SURJ :('a -> 'b) -> 'a set -> 'b set -> bool) $2) $1) $0)) ((/\
   ((! :('a -> bool) -> bool) (\(x :'a). ((==>
   (((IN :'a -> 'a set -> bool) $0) $2)) (((IN :'b -> 'b set -> bool)
   ($3 $0)) $1))))) ((! :('b -> bool) -> bool) (\(x :'b). ((==>
   (((IN :'b -> 'b set -> bool) $0) $1)) ((? :('a -> bool) -> bool)
   (\(y :'a). ((/\ (((IN :'a -> 'a set -> bool) $0) $3))
   (((= :'b -> 'b -> bool) ($4 $0)) $1)))))))))))))))`),
 ((INJ_DEF),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('b set -> bool) -> bool) (\(t :'b set).
   (((= :bool -> bool -> bool)
   ((((INJ :('a -> 'b) -> 'a set -> 'b set -> bool) $2) $1) $0)) ((/\
   ((! :('a -> bool) -> bool) (\(x :'a). ((==>
   (((IN :'a -> 'a set -> bool) $0) $2)) (((IN :'b -> 'b set -> bool)
   ($3 $0)) $1))))) ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a -> bool) -> bool) (\(y :'a). ((==> ((/\
   (((IN :'a -> 'a set -> bool) $1) $3)) (((IN :'a -> 'a set -> bool)
   $0) $3))) ((==> (((= :'b -> 'b -> bool) ($4 $1)) ($4 $0)))
   (((= :'a -> 'a -> bool) $1) $0)))))))))))))))`),
 ((IMAGE_DEF),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'b set -> 'b set -> bool)
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $1) $0))
   ((GSPEC :('a -> 'b # bool) -> 'b set) (\(x :'a).
   (((, :'b -> bool -> 'b # bool) ($2 $0))
   (((IN :'a -> 'a set -> bool) $0) $1)))))))))`),
 ((SING_DEF),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool) ((SING :'a set -> bool) $0))
   ((? :('a -> bool) -> bool) (\(x :'a).
   (((= :'a set -> 'a set -> bool) $1)
   (((INSERT :'a -> 'a set -> 'a set) $0) (EMPTY :'a set))))))))`),
 ((REST_DEF),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool) ((REST :'a set -> 'a set) $0))
   (((DELETE :'a set -> 'a -> 'a set) $0) ((CHOICE :'a set -> 'a)
   $0)))))`),
 ((CHOICE_DEF),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((==> (~
   (((= :'a set -> 'a set -> bool) $0) (EMPTY :'a set))))
   (((IN :'a -> 'a set -> bool) ((CHOICE :'a set -> 'a) $0)) $0))))`),
 ((DELETE_DEF),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a set -> 'a set -> bool) (((DELETE :'a set -> 'a -> 'a set)
   $1) $0)) (((DIFF :'a set -> 'a set -> 'a set) $1)
   (((INSERT :'a -> 'a set -> 'a set) $0) (EMPTY :'a set))))))))`),
 ((INSERT_DEF),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool) (((INSERT :'a -> 'a set -> 'a set)
   $1) $0)) ((GSPEC :('a -> 'a # bool) -> 'a set) (\(y :'a).
   (((, :'a -> bool -> 'a # bool) $0) ((\/ (((= :'a -> 'a -> bool) $0)
   $2)) (((IN :'a -> 'a set -> bool) $0) $1))))))))))`),
 ((DIFF_DEF),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :'a set -> 'a set -> bool)
   (((DIFF :'a set -> 'a set -> 'a set) $1) $0))
   ((GSPEC :('a -> 'a # bool) -> 'a set) (\(x :'a).
   (((, :'a -> bool -> 'a # bool) $0) ((/\
   (((IN :'a -> 'a set -> bool) $0) $2)) (~
   (((IN :'a -> 'a set -> bool) $0) $1)))))))))))`),
 ((DISJOINT_DEF),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :bool -> bool -> bool) (((DISJOINT :'a set -> 'a set -> bool)
   $1) $0)) (((= :'a set -> 'a set -> bool)
   (((INTER :'a set -> 'a set -> 'a set) $1) $0))
   (EMPTY :'a set)))))))`),
 ((INTER_DEF),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :'a set -> 'a set -> bool)
   (((INTER :'a set -> 'a set -> 'a set) $1) $0))
   ((GSPEC :('a -> 'a # bool) -> 'a set) (\(x :'a).
   (((, :'a -> bool -> 'a # bool) $0) ((/\
   (((IN :'a -> 'a set -> bool) $0) $2)) (((IN :'a -> 'a set -> bool)
   $0) $1))))))))))`),
 ((UNION_DEF),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :'a set -> 'a set -> bool)
   (((UNION :'a set -> 'a set -> 'a set) $1) $0))
   ((GSPEC :('a -> 'a # bool) -> 'a set) (\(x :'a).
   (((, :'a -> bool -> 'a # bool) $0) ((\/
   (((IN :'a -> 'a set -> bool) $0) $2)) (((IN :'a -> 'a set -> bool)
   $0) $1))))))))))`),
 ((PSUBSET_DEF),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :bool -> bool -> bool) (((PSUBSET :'a set -> 'a set -> bool)
   $1) $0)) ((/\ (((SUBSET :'a set -> 'a set -> bool) $1) $0)) (~
   (((= :'a set -> 'a set -> bool) $1) $0))))))))`),
 ((SUBSET_DEF),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :bool -> bool -> bool) (((SUBSET :'a set -> 'a set -> bool)
   $1) $0)) ((! :('a -> bool) -> bool) (\(x :'a). ((==>
   (((IN :'a -> 'a set -> bool) $0) $2)) (((IN :'a -> 'a set -> bool)
   $0) $1)))))))))`),
 ((UNIV_DEF),
  [],
  `(((= :'a set -> 'a set -> bool) (UNIV :'a set))
   ((SPEC :('a -> bool) -> 'a set) (\(x :'a). T)))`),
 ((EMPTY_DEF),
  [],
  `(((= :'a set -> 'a set -> bool) (EMPTY :'a set))
   ((SPEC :('a -> bool) -> 'a set) (\(x :'a). F)))`),
 ((GSPEC_DEF),
  [],
  `((! :(('b -> 'a # bool) -> bool) -> bool) (\(f :'b -> 'a # bool).
   (((= :'a set -> 'a set -> bool)
   ((GSPEC :('b -> 'a # bool) -> 'a set) $0))
   ((SPEC :('a -> bool) -> 'a set) (\(x :'a).
   ((? :('b -> bool) -> bool) (\(y :'b).
   (((= :'a # bool -> 'a # bool -> bool)
   (((, :'a -> bool -> 'a # bool) $1) T)) ($2 $0)))))))))`),
 ((IN_DEF),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool) (((IN :'a -> 'a set -> bool) $1) $0))
   (((CHF :'a set -> 'a -> bool) $0) $1))))))`),
 ((set_ISO_DEF),
  [],
  `((/\ ((! :('a set -> bool) -> bool) (\(a :'a set).
   (((= :'a set -> 'a set -> bool) ((SPEC :('a -> bool) -> 'a set)
   ((CHF :'a set -> 'a -> bool) $0))) $0))))
   ((! :(('a -> bool) -> bool) -> bool) (\(r :'a -> bool).
   (((= :bool -> bool -> bool) ((\(p :'a -> bool). T) $0))
   (((= :('a -> bool) -> ('a -> bool) -> bool)
   ((CHF :'a set -> 'a -> bool) ((SPEC :('a -> bool) -> 'a set) $0)))
   $0)))))`),
 ((set_TY_DEF),
  [],
  `((? :(('a set -> 'a -> bool) -> bool) -> bool)
   (\(rep :'a set -> 'a -> bool).
   (((TYPE_DEFINITION :(('a -> bool) -> bool) ->
                       ('a set -> 'a -> bool) -> bool)
   (\(p :'a -> bool). T)) $0)))`)]
theorems =
[((FINITE_ISO_NUM),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   ((FINITE :'a set -> bool) $0)) ((? :((num -> 'a) -> bool) -> bool)
   (\(f :num -> 'a). ((/\ ((! :(num -> bool) -> bool) (\(n :num).
   ((! :(num -> bool) -> bool) (\(m :num). ((==> ((/\ ((< $1)
   ((CARD :'a set -> num) $3))) ((< $0) ((CARD :'a set -> num) $3))))
   ((==> (((= :'a -> 'a -> bool) ($2 $1)) ($2 $0)))
   (((= :num -> num -> bool) $1) $0))))))))
   (((= :'a set -> 'a set -> bool) $1)
   ((GSPEC :(num -> 'a # bool) -> 'a set) (\(n :num).
   (((, :'a -> bool -> 'a # bool) ($1 $0)) ((< $0)
   ((CARD :'a set -> num) $2))))))))))))`),
 ((INFINITE_DIFF_FINITE),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set). ((==> ((/\
   ((INFINITE :'a set -> bool) $1)) ((FINITE :'a set -> bool) $0))) (~
   (((= :'a set -> 'a set -> bool)
   (((DIFF :'a set -> 'a set -> 'a set) $1) $0))
   (EMPTY :'a set))))))))`),
 ((FINITE_PSUBSET_UNIV),
  [],
  `(((= :bool -> bool -> bool) ((INFINITE :'a set -> bool)
   (UNIV :'a set))) ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((==> ((FINITE :'a set -> bool) $0))
   (((PSUBSET :'a set -> 'a set -> bool) $0) (UNIV :'a set))))))`),
 ((FINITE_PSUBSET_INFINITE),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool) ((INFINITE :'a set -> bool) $0))
   ((! :('a set -> bool) -> bool) (\(t :'a set). ((==>
   ((FINITE :'a set -> bool) $0)) ((==>
   (((SUBSET :'a set -> 'a set -> bool) $0) $1))
   (((PSUBSET :'a set -> 'a set -> bool) $0) $1))))))))`),
 ((INFINITE_UNIV),
  [],
  `(((= :bool -> bool -> bool) ((INFINITE :'a set -> bool)
   (UNIV :'a set))) ((? :(('a -> 'a) -> bool) -> bool)
   (\(f :'a -> 'a). ((/\ ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a -> bool) -> bool) (\(y :'a). ((==> (((= :'a -> 'a -> bool)
   ($2 $1)) ($2 $0))) (((= :'a -> 'a -> bool) $1) $0)))))))
   ((? :('a -> bool) -> bool) (\(y :'a). ((! :('a -> bool) -> bool)
   (\(x :'a). (~ (((= :'a -> 'a -> bool) ($2 $0)) $1))))))))))`),
 ((IN_INFINITE_NOT_FINITE),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set). ((==> ((/\
   ((INFINITE :'a set -> bool) $1)) ((FINITE :'a set -> bool) $0)))
   ((? :('a -> bool) -> bool) (\(x :'a). ((/\
   (((IN :'a -> 'a set -> bool) $0) $2)) (~
   (((IN :'a -> 'a set -> bool) $0) $1))))))))))`),
 ((INFINITE_SUBSET),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   ((INFINITE :'a set -> bool) $0)) ((! :('a set -> bool) -> bool)
   (\(t :'a set). ((==> (((SUBSET :'a set -> 'a set -> bool) $1) $0))
   ((INFINITE :'a set -> bool) $0)))))))`),
 ((IMAGE_11_INFINITE),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b). ((==>
   ((! :('a -> bool) -> bool) (\(x :'a). ((! :('a -> bool) -> bool)
   (\(y :'a). ((==> (((= :'b -> 'b -> bool) ($2 $1)) ($2 $0)))
   (((= :'a -> 'a -> bool) $1) $0)))))))
   ((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   ((INFINITE :'a set -> bool) $0)) ((INFINITE :'b set -> bool)
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $1) $0))))))))`),
 ((NOT_IN_FINITE),
  [],
  `(((= :bool -> bool -> bool) ((INFINITE :'a set -> bool)
   (UNIV :'a set))) ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((==> ((FINITE :'a set -> bool) $0)) ((? :('a -> bool) -> bool)
   (\(x :'a). (~ (((IN :'a -> 'a set -> bool) $0) $1))))))))`),
 ((LESS_CARD_DIFF),
  [],
  `((! :('a set -> bool) -> bool) (\(t :'a set). ((==>
   ((FINITE :'a set -> bool) $0)) ((! :('a set -> bool) -> bool)
   (\(s :'a set). ((==> ((FINITE :'a set -> bool) $0)) ((==> ((<
   ((CARD :'a set -> num) $1)) ((CARD :'a set -> num) $0))) ((< 0)
   ((CARD :'a set -> num) (((DIFF :'a set -> 'a set -> 'a set) $0)
   $1))))))))))`),
 ((CARD_DIFF),
  [],
  `((! :('a set -> bool) -> bool) (\(t :'a set). ((==>
   ((FINITE :'a set -> bool) $0)) ((! :('a set -> bool) -> bool)
   (\(s :'a set). ((==> ((FINITE :'a set -> bool) $0))
   (((= :num -> num -> bool) ((CARD :'a set -> num)
   (((DIFF :'a set -> 'a set -> 'a set) $0) $1))) ((-
   ((CARD :'a set -> num) $0)) ((CARD :'a set -> num)
   (((INTER :'a set -> 'a set -> 'a set) $0) $1))))))))))`),
 ((SING_IFF_CARD1),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool) ((SING :'a set -> bool) $0)) ((/\
   (((= :num -> num -> bool) ((CARD :'a set -> num) $0)) 1))
   ((FINITE :'a set -> bool) $0)))))`),
 ((CARD_SING),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). (((= :num -> num -> bool)
   ((CARD :'a set -> num) (((INSERT :'a -> 'a set -> 'a set) $0)
   (EMPTY :'a set)))) 1)))`),
 ((CARD_PSUBSET),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   ((FINITE :'a set -> bool) $0)) ((! :('a set -> bool) -> bool)
   (\(t :'a set). ((==> (((PSUBSET :'a set -> 'a set -> bool) $0) $1))
   ((< ((CARD :'a set -> num) $0)) ((CARD :'a set -> num)
   $1))))))))`),
 ((CARD_SUBSET),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   ((FINITE :'a set -> bool) $0)) ((! :('a set -> bool) -> bool)
   (\(t :'a set). ((==> (((SUBSET :'a set -> 'a set -> bool) $0) $1))
   ((<= ((CARD :'a set -> num) $0)) ((CARD :'a set -> num)
   $1))))))))`),
 ((CARD_UNION),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   ((FINITE :'a set -> bool) $0)) ((! :('a set -> bool) -> bool)
   (\(t :'a set). ((==> ((FINITE :'a set -> bool) $0))
   (((= :num -> num -> bool) ((+ ((CARD :'a set -> num)
   (((UNION :'a set -> 'a set -> 'a set) $1) $0)))
   ((CARD :'a set -> num) (((INTER :'a set -> 'a set -> 'a set) $1)
   $0)))) ((+ ((CARD :'a set -> num) $1)) ((CARD :'a set -> num)
   $0)))))))))`),
 ((CARD_INTER_LESS_EQ),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   ((FINITE :'a set -> bool) $0)) ((! :('a set -> bool) -> bool)
   (\(t :'a set). ((<= ((CARD :'a set -> num)
   (((INTER :'a set -> 'a set -> 'a set) $1) $0)))
   ((CARD :'a set -> num) $1)))))))`),
 ((CARD_DELETE),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   ((FINITE :'a set -> bool) $0)) ((! :('a -> bool) -> bool)
   (\(x :'a). (((= :num -> num -> bool) ((CARD :'a set -> num)
   (((DELETE :'a set -> 'a -> 'a set) $1) $0)))
   ((((COND :bool -> num -> num -> num) (((IN :'a -> 'a set -> bool)
   $0) $1)) ((- ((CARD :'a set -> num) $1)) 1)) ((CARD :'a set -> num)
   $1))))))))`),
 ((CARD_EQ_0),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   ((FINITE :'a set -> bool) $0)) (((= :bool -> bool -> bool)
   (((= :num -> num -> bool) ((CARD :'a set -> num) $0)) 0))
   (((= :'a set -> 'a set -> bool) $0) (EMPTY :'a set))))))`),
 ((CARD_INSERT),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   ((FINITE :'a set -> bool) $0)) ((! :('a -> bool) -> bool)
   (\(x :'a). (((= :num -> num -> bool) ((CARD :'a set -> num)
   (((INSERT :'a -> 'a set -> 'a set) $0) $1)))
   ((((COND :bool -> num -> num -> num) (((IN :'a -> 'a set -> bool)
   $0) $1)) ((CARD :'a set -> num) $1)) (SUC ((CARD :'a set -> num)
   $1)))))))))`),
 ((CARD_EMPTY),
  [],
  `(((= :num -> num -> bool) ((CARD :'a set -> num) (EMPTY :'a set)))
   0)`),
 ((IMAGE_FINITE),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   ((FINITE :'a set -> bool) $0)) ((! :(('a -> 'b) -> bool) -> bool)
   (\(f :'a -> 'b). ((FINITE :'b set -> bool)
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $0) $1)))))))`),
 ((SING_FINITE),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   ((SING :'a set -> bool) $0)) ((FINITE :'a set -> bool) $0))))`),
 ((FINITE_SING),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). ((FINITE :'a set -> bool)
   (((INSERT :'a -> 'a set -> 'a set) $0) (EMPTY :'a set)))))`),
 ((FINITE_DIFF),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   ((FINITE :'a set -> bool) $0)) ((! :('a set -> bool) -> bool)
   (\(t :'a set). ((FINITE :'a set -> bool)
   (((DIFF :'a set -> 'a set -> 'a set) $1) $0)))))))`),
 ((PSUBSET_FINITE),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   ((FINITE :'a set -> bool) $0)) ((! :('a set -> bool) -> bool)
   (\(t :'a set). ((==> (((PSUBSET :'a set -> 'a set -> bool) $0) $1))
   ((FINITE :'a set -> bool) $0)))))))`),
 ((SUBSET_FINITE),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   ((FINITE :'a set -> bool) $0)) ((! :('a set -> bool) -> bool)
   (\(t :'a set). ((==> (((SUBSET :'a set -> 'a set -> bool) $0) $1))
   ((FINITE :'a set -> bool) $0)))))))`),
 ((INTER_FINITE),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   ((FINITE :'a set -> bool) $0)) ((! :('a set -> bool) -> bool)
   (\(t :'a set). ((FINITE :'a set -> bool)
   (((INTER :'a set -> 'a set -> 'a set) $1) $0)))))))`),
 ((FINITE_UNION),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :bool -> bool -> bool) ((FINITE :'a set -> bool)
   (((UNION :'a set -> 'a set -> 'a set) $1) $0))) ((/\
   ((FINITE :'a set -> bool) $1)) ((FINITE :'a set -> bool)
   $0)))))))`),
 ((FINITE_DELETE),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool) ((FINITE :'a set -> bool)
   (((DELETE :'a set -> 'a -> 'a set) $0) $1)))
   ((FINITE :'a set -> bool) $0))))))`),
 ((FINITE_INSERT),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool) ((FINITE :'a set -> bool)
   (((INSERT :'a -> 'a set -> 'a set) $1) $0)))
   ((FINITE :'a set -> bool) $0))))))`),
 ((FINITE_INDUCT),
  [],
  `((! :(('a set -> bool) -> bool) -> bool) (\(P :'a set -> bool).
   ((==> ((/\ ($0 (EMPTY :'a set))) ((! :('a set -> bool) -> bool)
   (\(s :'a set). ((==> ((/\ ((FINITE :'a set -> bool) $0)) ($1 $0)))
   ((! :('a -> bool) -> bool) (\(e :'a). ((==> (~
   (((IN :'a -> 'a set -> bool) $0) $1))) ($2
   (((INSERT :'a -> 'a set -> 'a set) $0) $1))))))))))
   ((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   ((FINITE :'a set -> bool) $0)) ($1 $0)))))))`),
 ((FINITE_EMPTY), [], `((FINITE :'a set -> bool) (EMPTY :'a set))`),
 ((BIJ_COMPOSE),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :(('b -> 'c) -> bool) -> bool) (\(g :'b -> 'c).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('b set -> bool) -> bool) (\(t :'b set).
   ((! :('c set -> bool) -> bool) (\(u :'c set). ((==> ((/\
   ((((BIJ :('a -> 'b) -> 'a set -> 'b set -> bool) $4) $2) $1))
   ((((BIJ :('b -> 'c) -> 'b set -> 'c set -> bool) $3) $1) $0)))
   ((((BIJ :('a -> 'c) -> 'a set -> 'c set -> bool)
   (((o :('b -> 'c) -> ('a -> 'b) -> 'a -> 'c) $3) $4)) $2)
   $0))))))))))))`),
 ((BIJ_EMPTY),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b). ((/\
   ((! :('b set -> bool) -> bool) (\(s :'b set).
   (((= :bool -> bool -> bool)
   ((((BIJ :('a -> 'b) -> 'a set -> 'b set -> bool) $1)
   (EMPTY :'a set)) $0)) (((= :'b set -> 'b set -> bool) $0)
   (EMPTY :'b set)))))) ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool)
   ((((BIJ :('a -> 'b) -> 'a set -> 'b set -> bool) $1) $0)
   (EMPTY :'b set))) (((= :'a set -> 'a set -> bool) $0)
   (EMPTY :'a set))))))))`),
 ((BIJ_ID),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((((BIJ :('a -> 'a) -> 'a set -> 'a set -> bool) (\(x :'a). $0))
   $0) $0)))`),
 ((IMAGE_SURJ),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('b set -> bool) -> bool) (\(t :'b set).
   (((= :bool -> bool -> bool)
   ((((SURJ :('a -> 'b) -> 'a set -> 'b set -> bool) $2) $1) $0))
   (((= :'b set -> 'b set -> bool)
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $2) $1)) $0))))))))`),
 ((SURJ_EMPTY),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b). ((/\
   ((! :('b set -> bool) -> bool) (\(s :'b set).
   (((= :bool -> bool -> bool)
   ((((SURJ :('a -> 'b) -> 'a set -> 'b set -> bool) $1)
   (EMPTY :'a set)) $0)) (((= :'b set -> 'b set -> bool) $0)
   (EMPTY :'b set)))))) ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool)
   ((((SURJ :('a -> 'b) -> 'a set -> 'b set -> bool) $1) $0)
   (EMPTY :'b set))) (((= :'a set -> 'a set -> bool) $0)
   (EMPTY :'a set))))))))`),
 ((SURJ_COMPOSE),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :(('b -> 'c) -> bool) -> bool) (\(g :'b -> 'c).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('b set -> bool) -> bool) (\(t :'b set).
   ((! :('c set -> bool) -> bool) (\(u :'c set). ((==> ((/\
   ((((SURJ :('a -> 'b) -> 'a set -> 'b set -> bool) $4) $2) $1))
   ((((SURJ :('b -> 'c) -> 'b set -> 'c set -> bool) $3) $1) $0)))
   ((((SURJ :('a -> 'c) -> 'a set -> 'c set -> bool)
   (((o :('b -> 'c) -> ('a -> 'b) -> 'a -> 'c) $3) $4)) $2)
   $0))))))))))))`),
 ((SURJ_ID),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((((SURJ :('a -> 'a) -> 'a set -> 'a set -> bool) (\(x :'a). $0))
   $0) $0)))`),
 ((INJ_EMPTY),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b). ((/\
   ((! :('b set -> bool) -> bool) (\(s :'b set).
   ((((INJ :('a -> 'b) -> 'a set -> 'b set -> bool) $1)
   (EMPTY :'a set)) $0)))) ((! :('a set -> bool) -> bool)
   (\(s :'a set). (((= :bool -> bool -> bool)
   ((((INJ :('a -> 'b) -> 'a set -> 'b set -> bool) $1) $0)
   (EMPTY :'b set))) (((= :'a set -> 'a set -> bool) $0)
   (EMPTY :'a set))))))))`),
 ((INJ_COMPOSE),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :(('b -> 'c) -> bool) -> bool) (\(g :'b -> 'c).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('b set -> bool) -> bool) (\(t :'b set).
   ((! :('c set -> bool) -> bool) (\(u :'c set). ((==> ((/\
   ((((INJ :('a -> 'b) -> 'a set -> 'b set -> bool) $4) $2) $1))
   ((((INJ :('b -> 'c) -> 'b set -> 'c set -> bool) $3) $1) $0)))
   ((((INJ :('a -> 'c) -> 'a set -> 'c set -> bool)
   (((o :('b -> 'c) -> ('a -> 'b) -> 'a -> 'c) $3) $4)) $2)
   $0))))))))))))`),
 ((INJ_ID),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((((INJ :('a -> 'a) -> 'a set -> 'a set -> bool) (\(x :'a). $0))
   $0) $0)))`),
 ((IMAGE_INTER),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((SUBSET :'b set -> 'b set -> bool)
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $2)
   (((INTER :'a set -> 'a set -> 'a set) $1) $0)))
   (((INTER :'b set -> 'b set -> 'b set)
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $2) $1))
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $2) $0)))))))))`),
 ((IMAGE_SUBSET),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set). ((==>
   (((SUBSET :'a set -> 'a set -> bool) $1) $0))
   ((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   (((SUBSET :'b set -> 'b set -> bool)
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $0) $2))
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $0) $1)))))))))`),
 ((IMAGE_UNION),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :'b set -> 'b set -> bool)
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $2)
   (((UNION :'a set -> 'a set -> 'a set) $1) $0)))
   (((UNION :'b set -> 'b set -> 'b set)
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $2) $1))
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $2) $0)))))))))`),
 ((IMAGE_DELETE),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set). ((==> (~
   (((IN :'a -> 'a set -> bool) $1) $0)))
   (((= :'b set -> 'b set -> bool)
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $2)
   (((DELETE :'a set -> 'a -> 'a set) $0) $1)))
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $2) $0)))))))))`),
 ((IMAGE_INSERT),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'b set -> 'b set -> bool)
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $2)
   (((INSERT :'a -> 'a set -> 'a set) $1) $0)))
   (((INSERT :'b -> 'b set -> 'b set) ($2 $1))
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $2) $0)))))))))`),
 ((IMAGE_COMPOSE),
  [],
  `((! :(('b -> 'c) -> bool) -> bool) (\(f :'b -> 'c).
   ((! :(('a -> 'b) -> bool) -> bool) (\(g :'a -> 'b).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'c set -> 'c set -> bool)
   (((IMAGE :('a -> 'c) -> 'a set -> 'c set)
   (((o :('b -> 'c) -> ('a -> 'b) -> 'a -> 'c) $2) $1)) $0))
   (((IMAGE :('b -> 'c) -> 'b set -> 'c set) $2)
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $1) $0)))))))))`),
 ((IMAGE_ID),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool)
   (((IMAGE :('a -> 'a) -> 'a set -> 'a set) (\(x :'a). $0)) $0))
   $0)))`),
 ((IMAGE_EMPTY),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   (((= :'b set -> 'b set -> bool)
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $0) (EMPTY :'a set)))
   (EMPTY :'b set))))`),
 ((IMAGE_IN),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   (((IN :'a -> 'a set -> bool) $1) $0))
   ((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   (((IN :'b -> 'b set -> bool) ($0 $2))
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $0) $1)))))))))`),
 ((IN_IMAGE),
  [],
  `((! :('b -> bool) -> bool) (\(y :'b).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   (((= :bool -> bool -> bool) (((IN :'b -> 'b set -> bool) $2)
   (((IMAGE :('a -> 'b) -> 'a set -> 'b set) $0) $1)))
   ((? :('a -> bool) -> bool) (\(x :'a). ((/\ (((= :'b -> 'b -> bool)
   $3) ($1 $0))) (((IN :'a -> 'a set -> bool) $0) $2)))))))))))`),
 ((SING_IFF_EMPTY_REST),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool) ((SING :'a set -> bool) $0)) ((/\ (~
   (((= :'a set -> 'a set -> bool) $0) (EMPTY :'a set))))
   (((= :'a set -> 'a set -> bool) ((REST :'a set -> 'a set) $0))
   (EMPTY :'a set))))))`),
 ((REST_SING),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a set -> 'a set -> bool) ((REST :'a set -> 'a set)
   (((INSERT :'a -> 'a set -> 'a set) $0) (EMPTY :'a set))))
   (EMPTY :'a set))))`),
 ((CHOICE_SING),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). (((= :'a -> 'a -> bool)
   ((CHOICE :'a set -> 'a) (((INSERT :'a -> 'a set -> 'a set) $0)
   (EMPTY :'a set)))) $0)))`),
 ((DELETE_EQ_SING),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a -> bool) -> bool) (\(x :'a). ((==>
   (((IN :'a -> 'a set -> bool) $0) $1)) (((= :bool -> bool -> bool)
   (((= :'a set -> 'a set -> bool) (((DELETE :'a set -> 'a -> 'a set)
   $1) $0)) (EMPTY :'a set))) (((= :'a set -> 'a set -> bool) $1)
   (((INSERT :'a -> 'a set -> 'a set) $0) (EMPTY :'a set)))))))))`),
 ((SING_DELETE),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a set -> 'a set -> bool) (((DELETE :'a set -> 'a -> 'a set)
   (((INSERT :'a -> 'a set -> 'a set) $0) (EMPTY :'a set))) $0))
   (EMPTY :'a set))))`),
 ((INSERT_SING_UNION),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a set -> 'a set -> bool) (((INSERT :'a -> 'a set -> 'a set)
   $0) $1)) (((UNION :'a set -> 'a set -> 'a set)
   (((INSERT :'a -> 'a set -> 'a set) $0) (EMPTY :'a set)))
   $1))))))`),
 ((DISJOINT_SING_EMPTY),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   (((DISJOINT :'a set -> 'a set -> bool)
   (((INSERT :'a -> 'a set -> 'a set) $0) (EMPTY :'a set)))
   (EMPTY :'a set))))`),
 ((EQUAL_SING),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). ((! :('a -> bool) -> bool)
   (\(y :'a). (((= :bool -> bool -> bool)
   (((= :'a set -> 'a set -> bool) (((INSERT :'a -> 'a set -> 'a set)
   $1) (EMPTY :'a set))) (((INSERT :'a -> 'a set -> 'a set) $0)
   (EMPTY :'a set)))) (((= :'a -> 'a -> bool) $1) $0))))))`),
 ((NOT_EMPTY_SING),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). (~
   (((= :'a set -> 'a set -> bool) (EMPTY :'a set))
   (((INSERT :'a -> 'a set -> 'a set) $0) (EMPTY :'a set))))))`),
 ((NOT_SING_EMPTY),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). (~
   (((= :'a set -> 'a set -> bool) (((INSERT :'a -> 'a set -> 'a set)
   $0) (EMPTY :'a set))) (EMPTY :'a set)))))`),
 ((IN_SING),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). ((! :('a -> bool) -> bool)
   (\(y :'a). (((= :bool -> bool -> bool) (((IN :'a -> 'a set -> bool)
   $1) (((INSERT :'a -> 'a set -> 'a set) $0) (EMPTY :'a set))))
   (((= :'a -> 'a -> bool) $1) $0))))))`),
 ((SING),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). ((SING :'a set -> bool)
   (((INSERT :'a -> 'a set -> 'a set) $0) (EMPTY :'a set)))))`),
 ((REST_PSUBSET),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((==> (~
   (((= :'a set -> 'a set -> bool) $0) (EMPTY :'a set))))
   (((PSUBSET :'a set -> 'a set -> bool) ((REST :'a set -> 'a set)
   $0)) $0))))`),
 ((REST_SUBSET),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((SUBSET :'a set -> 'a set -> bool) ((REST :'a set -> 'a set) $0))
   $0)))`),
 ((CHOICE_INSERT_REST),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((==> (~
   (((= :'a set -> 'a set -> bool) $0) (EMPTY :'a set))))
   (((= :'a set -> 'a set -> bool) (((INSERT :'a -> 'a set -> 'a set)
   ((CHOICE :'a set -> 'a) $0)) ((REST :'a set -> 'a set) $0)))
   $0))))`),
 ((CHOICE_NOT_IN_REST),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). (~
   (((IN :'a -> 'a set -> bool) ((CHOICE :'a set -> 'a) $0))
   ((REST :'a set -> 'a set) $0)))))`),
 ((DISJOINT_DELETE_SYM),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :bool -> bool -> bool)
   (((DISJOINT :'a set -> 'a set -> bool)
   (((DELETE :'a set -> 'a -> 'a set) $2) $0)) $1))
   (((DISJOINT :'a set -> 'a set -> bool)
   (((DELETE :'a set -> 'a -> 'a set) $1) $0)) $2))))))))`),
 ((DELETE_INTER),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a set -> 'a set -> bool)
   (((INTER :'a set -> 'a set -> 'a set)
   (((DELETE :'a set -> 'a -> 'a set) $2) $0)) $1))
   (((DELETE :'a set -> 'a -> 'a set)
   (((INTER :'a set -> 'a set -> 'a set) $2) $1)) $0))))))))`),
 ((INSERT_DELETE),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set). ((==>
   (((IN :'a -> 'a set -> bool) $1) $0))
   (((= :'a set -> 'a set -> bool) (((INSERT :'a -> 'a set -> 'a set)
   $1) (((DELETE :'a set -> 'a -> 'a set) $0) $1))) $0))))))`),
 ((DELETE_INSERT),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). ((! :('a -> bool) -> bool)
   (\(y :'a). ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool) (((DELETE :'a set -> 'a -> 'a set)
   (((INSERT :'a -> 'a set -> 'a set) $2) $0)) $1))
   ((((COND :bool -> 'a set -> 'a set -> 'a set)
   (((= :'a -> 'a -> bool) $2) $1)) (((DELETE :'a set -> 'a -> 'a set)
   $0) $1)) (((INSERT :'a -> 'a set -> 'a set) $2)
   (((DELETE :'a set -> 'a -> 'a set) $0) $1))))))))))`),
 ((PSUBSET_MEMBER),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :bool -> bool -> bool) (((PSUBSET :'a set -> 'a set -> bool)
   $1) $0)) ((/\ (((SUBSET :'a set -> 'a set -> bool) $1) $0))
   ((? :('a -> bool) -> bool) (\(y :'a). ((/\
   (((IN :'a -> 'a set -> bool) $0) $1)) (~
   (((IN :'a -> 'a set -> bool) $0) $2)))))))))))`),
 ((PSUBSET_INSERT_SUBSET),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :bool -> bool -> bool) (((PSUBSET :'a set -> 'a set -> bool)
   $1) $0)) ((? :('a -> bool) -> bool) (\(x :'a). ((/\ (~
   (((IN :'a -> 'a set -> bool) $0) $2)))
   (((SUBSET :'a set -> 'a set -> bool)
   (((INSERT :'a -> 'a set -> 'a set) $0) $2)) $1)))))))))`),
 ((DIFF_INSERT),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a set -> 'a set -> bool)
   (((DIFF :'a set -> 'a set -> 'a set) $2)
   (((INSERT :'a -> 'a set -> 'a set) $0) $1)))
   (((DIFF :'a set -> 'a set -> 'a set)
   (((DELETE :'a set -> 'a -> 'a set) $2) $0)) $1))))))))`),
 ((SUBSET_INSERT_DELETE),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :bool -> bool -> bool) (((SUBSET :'a set -> 'a set -> bool)
   $1) (((INSERT :'a -> 'a set -> 'a set) $2) $0)))
   (((SUBSET :'a set -> 'a set -> bool)
   (((DELETE :'a set -> 'a -> 'a set) $1) $2)) $0))))))))`),
 ((SUBSET_DELETE),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :bool -> bool -> bool) (((SUBSET :'a set -> 'a set -> bool)
   $1) (((DELETE :'a set -> 'a -> 'a set) $0) $2))) ((/\ (~
   (((IN :'a -> 'a set -> bool) $2) $1)))
   (((SUBSET :'a set -> 'a set -> bool) $1) $0)))))))))`),
 ((DELETE_SUBSET),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((SUBSET :'a set -> 'a set -> bool)
   (((DELETE :'a set -> 'a -> 'a set) $0) $1)) $0)))))`),
 ((DELETE_COMM),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). ((! :('a -> bool) -> bool)
   (\(y :'a). ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool) (((DELETE :'a set -> 'a -> 'a set)
   (((DELETE :'a set -> 'a -> 'a set) $0) $2)) $1))
   (((DELETE :'a set -> 'a -> 'a set)
   (((DELETE :'a set -> 'a -> 'a set) $0) $1)) $2))))))))`),
 ((DELETE_DELETE),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool) (((DELETE :'a set -> 'a -> 'a set)
   (((DELETE :'a set -> 'a -> 'a set) $0) $1)) $1))
   (((DELETE :'a set -> 'a -> 'a set) $0) $1))))))`),
 ((EMPTY_DELETE),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a set -> 'a set -> bool) (((DELETE :'a set -> 'a -> 'a set)
   (EMPTY :'a set)) $0)) (EMPTY :'a set))))`),
 ((IN_DELETE_EQ),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a -> bool) -> bool) (\(x :'a). ((! :('a -> bool) -> bool)
   (\(x' :'a). (((= :bool -> bool -> bool) (((= :bool -> bool -> bool)
   (((IN :'a -> 'a set -> bool) $1) $2)) (((IN :'a -> 'a set -> bool)
   $0) $2))) (((= :bool -> bool -> bool) (((IN :'a -> 'a set -> bool)
   $1) (((DELETE :'a set -> 'a -> 'a set) $2) $0)))
   (((IN :'a -> 'a set -> bool) $0) (((DELETE :'a set -> 'a -> 'a set)
   $2) $1))))))))))`),
 ((DELETE_NON_ELEMENT),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool) (~ (((IN :'a -> 'a set -> bool) $1)
   $0))) (((= :'a set -> 'a set -> bool)
   (((DELETE :'a set -> 'a -> 'a set) $0) $1)) $0))))))`),
 ((IN_DELETE),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a -> bool) -> bool) (\(x :'a). ((! :('a -> bool) -> bool)
   (\(y :'a). (((= :bool -> bool -> bool) (((IN :'a -> 'a set -> bool)
   $1) (((DELETE :'a set -> 'a -> 'a set) $2) $0))) ((/\
   (((IN :'a -> 'a set -> bool) $1) $2)) (~ (((= :'a -> 'a -> bool)
   $1) $0))))))))))`),
 ((INSERT_DIFF),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a set -> 'a set -> bool)
   (((DIFF :'a set -> 'a set -> 'a set)
   (((INSERT :'a -> 'a set -> 'a set) $0) $2)) $1))
   ((((COND :bool -> 'a set -> 'a set -> 'a set)
   (((IN :'a -> 'a set -> bool) $0) $1))
   (((DIFF :'a set -> 'a set -> 'a set) $2) $1))
   (((INSERT :'a -> 'a set -> 'a set) $0)
   (((DIFF :'a set -> 'a set -> 'a set) $2) $1))))))))))`),
 ((SUBSET_INSERT),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set). ((==> (~
   (((IN :'a -> 'a set -> bool) $1) $0)))
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :bool -> bool -> bool) (((SUBSET :'a set -> 'a set -> bool)
   $1) (((INSERT :'a -> 'a set -> 'a set) $2) $0)))
   (((SUBSET :'a set -> 'a set -> bool) $1) $0)))))))))`),
 ((INSERT_SUBSET),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :bool -> bool -> bool) (((SUBSET :'a set -> 'a set -> bool)
   (((INSERT :'a -> 'a set -> 'a set) $2) $1)) $0)) ((/\
   (((IN :'a -> 'a set -> bool) $2) $0))
   (((SUBSET :'a set -> 'a set -> bool) $1) $0)))))))))`),
 ((DISJOINT_INSERT),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :bool -> bool -> bool) (((DISJOINT :'a set -> 'a set -> bool)
   (((INSERT :'a -> 'a set -> 'a set) $2) $1)) $0)) ((/\
   (((DISJOINT :'a set -> 'a set -> bool) $1) $0)) (~
   (((IN :'a -> 'a set -> bool) $2) $0))))))))))`),
 ((INSERT_INTER),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :'a set -> 'a set -> bool)
   (((INTER :'a set -> 'a set -> 'a set)
   (((INSERT :'a -> 'a set -> 'a set) $2) $1)) $0))
   ((((COND :bool -> 'a set -> 'a set -> 'a set)
   (((IN :'a -> 'a set -> bool) $2) $0))
   (((INSERT :'a -> 'a set -> 'a set) $2)
   (((INTER :'a set -> 'a set -> 'a set) $1) $0)))
   (((INTER :'a set -> 'a set -> 'a set) $1) $0)))))))))`),
 ((INSERT_UNION_EQ),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :'a set -> 'a set -> bool)
   (((UNION :'a set -> 'a set -> 'a set)
   (((INSERT :'a -> 'a set -> 'a set) $2) $1)) $0))
   (((INSERT :'a -> 'a set -> 'a set) $2)
   (((UNION :'a set -> 'a set -> 'a set) $1) $0)))))))))`),
 ((INSERT_UNION),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :'a set -> 'a set -> bool)
   (((UNION :'a set -> 'a set -> 'a set)
   (((INSERT :'a -> 'a set -> 'a set) $2) $1)) $0))
   ((((COND :bool -> 'a set -> 'a set -> 'a set)
   (((IN :'a -> 'a set -> bool) $2) $0))
   (((UNION :'a set -> 'a set -> 'a set) $1) $0))
   (((INSERT :'a -> 'a set -> 'a set) $2)
   (((UNION :'a set -> 'a set -> 'a set) $1) $0))))))))))`),
 ((NOT_EMPTY_INSERT),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set). (~
   (((= :'a set -> 'a set -> bool) (EMPTY :'a set))
   (((INSERT :'a -> 'a set -> 'a set) $1) $0)))))))`),
 ((NOT_INSERT_EMPTY),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set). (~
   (((= :'a set -> 'a set -> bool) (((INSERT :'a -> 'a set -> 'a set)
   $1) $0)) (EMPTY :'a set)))))))`),
 ((INSERT_UNIV),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a set -> 'a set -> bool) (((INSERT :'a -> 'a set -> 'a set)
   $0) (UNIV :'a set))) (UNIV :'a set))))`),
 ((INSERT_COMM),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). ((! :('a -> bool) -> bool)
   (\(y :'a). ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool) (((INSERT :'a -> 'a set -> 'a set)
   $2) (((INSERT :'a -> 'a set -> 'a set) $1) $0)))
   (((INSERT :'a -> 'a set -> 'a set) $1)
   (((INSERT :'a -> 'a set -> 'a set) $2) $0)))))))))`),
 ((INSERT_INSERT),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool) (((INSERT :'a -> 'a set -> 'a set)
   $1) (((INSERT :'a -> 'a set -> 'a set) $1) $0)))
   (((INSERT :'a -> 'a set -> 'a set) $1) $0))))))`),
 ((ABSORPTION),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool) (((IN :'a -> 'a set -> bool) $1) $0))
   (((= :'a set -> 'a set -> bool) (((INSERT :'a -> 'a set -> 'a set)
   $1) $0)) $0))))))`),
 ((DECOMPOSITION),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :bool -> bool -> bool)
   (((IN :'a -> 'a set -> bool) $0) $1))
   ((? :('a set -> bool) -> bool) (\(t :'a set). ((/\
   (((= :'a set -> 'a set -> bool) $2)
   (((INSERT :'a -> 'a set -> 'a set) $1) $0))) (~
   (((IN :'a -> 'a set -> bool) $1) $0))))))))))`),
 ((SET_CASES),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((\/
   (((= :'a set -> 'a set -> bool) $0) (EMPTY :'a set)))
   ((? :('a -> bool) -> bool) (\(x :'a).
   ((? :('a set -> bool) -> bool) (\(t :'a set). ((/\
   (((= :'a set -> 'a set -> bool) $2)
   (((INSERT :'a -> 'a set -> 'a set) $1) $0))) (~
   (((IN :'a -> 'a set -> bool) $1) $0))))))))))`),
 ((COMPONENT),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). (((IN :'a -> 'a set -> bool)
   $0) (((INSERT :'a -> 'a set -> 'a set) $0) (s :'a set)))))`),
 ((IN_INSERT),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). ((! :('a -> bool) -> bool)
   (\(y :'a). ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool) (((IN :'a -> 'a set -> bool) $2)
   (((INSERT :'a -> 'a set -> 'a set) $1) $0))) ((\/
   (((= :'a -> 'a -> bool) $2) $1)) (((IN :'a -> 'a set -> bool) $2)
   $0)))))))))`),
 ((DIFF_EQ_EMPTY),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool)
   (((DIFF :'a set -> 'a set -> 'a set) $0) $0)) (EMPTY :'a set))))`),
 ((DIFF_DIFF),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :'a set -> 'a set -> bool)
   (((DIFF :'a set -> 'a set -> 'a set)
   (((DIFF :'a set -> 'a set -> 'a set) $1) $0)) $0))
   (((DIFF :'a set -> 'a set -> 'a set) $1) $0))))))`),
 ((DIFF_UNIV),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool)
   (((DIFF :'a set -> 'a set -> 'a set) $0) (UNIV :'a set)))
   (EMPTY :'a set))))`),
 ((EMPTY_DIFF),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool)
   (((DIFF :'a set -> 'a set -> 'a set) (EMPTY :'a set)) $0))
   (EMPTY :'a set))))`),
 ((DIFF_EMPTY),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool)
   (((DIFF :'a set -> 'a set -> 'a set) $0) (EMPTY :'a set))) $0)))`),
 ((IN_DIFF),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :bool -> bool -> bool)
   (((IN :'a -> 'a set -> bool) $0)
   (((DIFF :'a set -> 'a set -> 'a set) $2) $1))) ((/\
   (((IN :'a -> 'a set -> bool) $0) $2)) (~
   (((IN :'a -> 'a set -> bool) $0) $1))))))))))`),
 ((DISJOINT_UNION),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   ((! :('a set -> bool) -> bool) (\(u :'a set).
   (((= :bool -> bool -> bool) (((DISJOINT :'a set -> 'a set -> bool)
   (((UNION :'a set -> 'a set -> 'a set) $2) $1)) $0)) ((/\
   (((DISJOINT :'a set -> 'a set -> bool) $2) $0))
   (((DISJOINT :'a set -> 'a set -> bool) $1) $0)))))))))`),
 ((DISJOINT_EMPTY_REFL),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool) (((= :'a set -> 'a set -> bool) $0)
   (EMPTY :'a set))) (((DISJOINT :'a set -> 'a set -> bool) $0)
   $0))))`),
 ((DISJOINT_EMPTY),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). ((/\
   (((DISJOINT :'a set -> 'a set -> bool) (EMPTY :'a set)) $0))
   (((DISJOINT :'a set -> 'a set -> bool) $0) (EMPTY :'a set)))))`),
 ((DISJOINT_SYM),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :bool -> bool -> bool) (((DISJOINT :'a set -> 'a set -> bool)
   $1) $0)) (((DISJOINT :'a set -> 'a set -> bool) $0) $1))))))`),
 ((IN_DISJOINT),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :bool -> bool -> bool) (((DISJOINT :'a set -> 'a set -> bool)
   $1) $0)) (~ ((? :('a -> bool) -> bool) (\(x :'a). ((/\
   (((IN :'a -> 'a set -> bool) $0) $2)) (((IN :'a -> 'a set -> bool)
   $0) $1))))))))))`),
 ((INTER_OVER_UNION),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   ((! :('a set -> bool) -> bool) (\(u :'a set).
   (((= :'a set -> 'a set -> bool)
   (((UNION :'a set -> 'a set -> 'a set) $2)
   (((INTER :'a set -> 'a set -> 'a set) $1) $0)))
   (((INTER :'a set -> 'a set -> 'a set)
   (((UNION :'a set -> 'a set -> 'a set) $2) $1))
   (((UNION :'a set -> 'a set -> 'a set) $2) $0)))))))))`),
 ((UNION_OVER_INTER),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   ((! :('a set -> bool) -> bool) (\(u :'a set).
   (((= :'a set -> 'a set -> bool)
   (((INTER :'a set -> 'a set -> 'a set) $2)
   (((UNION :'a set -> 'a set -> 'a set) $1) $0)))
   (((UNION :'a set -> 'a set -> 'a set)
   (((INTER :'a set -> 'a set -> 'a set) $2) $1))
   (((INTER :'a set -> 'a set -> 'a set) $2) $0)))))))))`),
 ((INTER_UNIV),
  [],
  `((/\ ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool)
   (((INTER :'a set -> 'a set -> 'a set) (UNIV :'a set)) $0)) $0))))
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool)
   (((INTER :'a set -> 'a set -> 'a set) $0) (UNIV :'a set)))
   $0))))`),
 ((INTER_EMPTY),
  [],
  `((/\ ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool)
   (((INTER :'a set -> 'a set -> 'a set) (EMPTY :'a set)) $0))
   (EMPTY :'a set))))) ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool)
   (((INTER :'a set -> 'a set -> 'a set) $0) (EMPTY :'a set)))
   (EMPTY :'a set)))))`),
 ((SUBSET_INTER_ABSORPTION),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :bool -> bool -> bool) (((SUBSET :'a set -> 'a set -> bool)
   $1) $0)) (((= :'a set -> 'a set -> bool)
   (((INTER :'a set -> 'a set -> 'a set) $1) $0)) $1))))))`),
 ((INTER_SUBSET),
  [],
  `((/\ ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((SUBSET :'a set -> 'a set -> bool)
   (((INTER :'a set -> 'a set -> 'a set) $1) $0)) $1))))))
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((SUBSET :'a set -> 'a set -> bool)
   (((INTER :'a set -> 'a set -> 'a set) $0) $1)) $1))))))`),
 ((INTER_COMM),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :'a set -> 'a set -> bool)
   (((INTER :'a set -> 'a set -> 'a set) $1) $0))
   (((INTER :'a set -> 'a set -> 'a set) $0) $1))))))`),
 ((INTER_IDEMPOT),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool)
   (((INTER :'a set -> 'a set -> 'a set) $0) $0)) $0)))`),
 ((INTER_ASSOC),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   ((! :('a set -> bool) -> bool) (\(u :'a set).
   (((= :'a set -> 'a set -> bool)
   (((INTER :'a set -> 'a set -> 'a set)
   (((INTER :'a set -> 'a set -> 'a set) $2) $1)) $0))
   (((INTER :'a set -> 'a set -> 'a set) $2)
   (((INTER :'a set -> 'a set -> 'a set) $1) $0)))))))))`),
 ((IN_INTER),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :bool -> bool -> bool)
   (((IN :'a -> 'a set -> bool) $0)
   (((INTER :'a set -> 'a set -> 'a set) $2) $1))) ((/\
   (((IN :'a -> 'a set -> bool) $0) $2)) (((IN :'a -> 'a set -> bool)
   $0) $1)))))))))`),
 ((EMPTY_UNION),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :bool -> bool -> bool) (((= :'a set -> 'a set -> bool)
   (((UNION :'a set -> 'a set -> 'a set) $1) $0)) (EMPTY :'a set)))
   ((/\ (((= :'a set -> 'a set -> bool) $1) (EMPTY :'a set)))
   (((= :'a set -> 'a set -> bool) $0) (EMPTY :'a set))))))))`),
 ((UNION_UNIV),
  [],
  `((/\ ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool)
   (((UNION :'a set -> 'a set -> 'a set) (UNIV :'a set)) $0))
   (UNIV :'a set))))) ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool)
   (((UNION :'a set -> 'a set -> 'a set) $0) (UNIV :'a set)))
   (UNIV :'a set)))))`),
 ((UNION_EMPTY),
  [],
  `((/\ ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool)
   (((UNION :'a set -> 'a set -> 'a set) (EMPTY :'a set)) $0)) $0))))
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool)
   (((UNION :'a set -> 'a set -> 'a set) $0) (EMPTY :'a set)))
   $0))))`),
 ((SUBSET_UNION_ABSORPTION),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :bool -> bool -> bool) (((SUBSET :'a set -> 'a set -> bool)
   $1) $0)) (((= :'a set -> 'a set -> bool)
   (((UNION :'a set -> 'a set -> 'a set) $1) $0)) $0))))))`),
 ((SUBSET_UNION),
  [],
  `((/\ ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((SUBSET :'a set -> 'a set -> bool) $1)
   (((UNION :'a set -> 'a set -> 'a set) $1) $0)))))))
   ((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((SUBSET :'a set -> 'a set -> bool) $1)
   (((UNION :'a set -> 'a set -> 'a set) $0) $1)))))))`),
 ((UNION_COMM),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :'a set -> 'a set -> bool)
   (((UNION :'a set -> 'a set -> 'a set) $1) $0))
   (((UNION :'a set -> 'a set -> 'a set) $0) $1))))))`),
 ((UNION_IDEMPOT),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :'a set -> 'a set -> bool)
   (((UNION :'a set -> 'a set -> 'a set) $0) $0)) $0)))`),
 ((UNION_ASSOC),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   ((! :('a set -> bool) -> bool) (\(u :'a set).
   (((= :'a set -> 'a set -> bool)
   (((UNION :'a set -> 'a set -> 'a set)
   (((UNION :'a set -> 'a set -> 'a set) $2) $1)) $0))
   (((UNION :'a set -> 'a set -> 'a set) $2)
   (((UNION :'a set -> 'a set -> 'a set) $1) $0)))))))))`),
 ((IN_UNION),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :bool -> bool -> bool)
   (((IN :'a -> 'a set -> bool) $0)
   (((UNION :'a set -> 'a set -> 'a set) $2) $1))) ((\/
   (((IN :'a -> 'a set -> bool) $0) $2)) (((IN :'a -> 'a set -> bool)
   $0) $1)))))))))`),
 ((PSUBSET_UNIV),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool) (((PSUBSET :'a set -> 'a set -> bool)
   $0) (UNIV :'a set))) ((? :('a -> bool) -> bool) (\(x :'a). (~
   (((IN :'a -> 'a set -> bool) $0) $1)))))))`),
 ((NOT_UNIV_PSUBSET),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). (~
   (((PSUBSET :'a set -> 'a set -> bool) (UNIV :'a set)) $0))))`),
 ((NOT_PSUBSET_EMPTY),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). (~
   (((PSUBSET :'a set -> 'a set -> bool) $0) (EMPTY :'a set)))))`),
 ((PSUBSET_IRREFL),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set). (~
   (((PSUBSET :'a set -> 'a set -> bool) $0) $0))))`),
 ((PSUBSET_TRANS),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   ((! :('a set -> bool) -> bool) (\(u :'a set). ((==> ((/\
   (((PSUBSET :'a set -> 'a set -> bool) $2) $1))
   (((PSUBSET :'a set -> 'a set -> bool) $1) $0)))
   (((PSUBSET :'a set -> 'a set -> bool) $2) $0))))))))`),
 ((UNIV_SUBSET),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool) (((SUBSET :'a set -> 'a set -> bool)
   (UNIV :'a set)) $0)) (((= :'a set -> 'a set -> bool) $0)
   (UNIV :'a set)))))`),
 ((SUBSET_UNIV),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((SUBSET :'a set -> 'a set -> bool) $0) (UNIV :'a set))))`),
 ((SUBSET_EMPTY),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool) (((SUBSET :'a set -> 'a set -> bool)
   $0) (EMPTY :'a set))) (((= :'a set -> 'a set -> bool) $0)
   (EMPTY :'a set)))))`),
 ((EMPTY_SUBSET),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((SUBSET :'a set -> 'a set -> bool) (EMPTY :'a set)) $0)))`),
 ((SUBSET_ANTISYM),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set). ((==> ((/\
   (((SUBSET :'a set -> 'a set -> bool) $1) $0))
   (((SUBSET :'a set -> 'a set -> bool) $0) $1)))
   (((= :'a set -> 'a set -> bool) $1) $0))))))`),
 ((SUBSET_REFL),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((SUBSET :'a set -> 'a set -> bool) $0) $0)))`),
 ((SUBSET_TRANS),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   ((! :('a set -> bool) -> bool) (\(u :'a set). ((==> ((/\
   (((SUBSET :'a set -> 'a set -> bool) $2) $1))
   (((SUBSET :'a set -> 'a set -> bool) $1) $0)))
   (((SUBSET :'a set -> 'a set -> bool) $2) $0))))))))`),
 ((EQ_UNIV),
  [],
  `(((= :bool -> bool -> bool) ((! :('a -> bool) -> bool) (\(x :'a).
   (((IN :'a -> 'a set -> bool) $0) (s :'a set)))))
   (((= :'a set -> 'a set -> bool) (s :'a set)) (UNIV :'a set)))`),
 ((EMPTY_NOT_UNIV),
  [],
  `(~ (((= :'a set -> 'a set -> bool) (EMPTY :'a set))
   (UNIV :'a set)))`),
 ((UNIV_NOT_EMPTY),
  [],
  `(~ (((= :'a set -> 'a set -> bool) (UNIV :'a set))
   (EMPTY :'a set)))`),
 ((IN_UNIV),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). (((IN :'a -> 'a set -> bool)
   $0) (UNIV :'a set))))`),
 ((MEMBER_NOT_EMPTY),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   (((= :bool -> bool -> bool) ((? :('a -> bool) -> bool) (\(x :'a).
   (((IN :'a -> 'a set -> bool) $0) $1)))) (~
   (((= :'a set -> 'a set -> bool) $0) (EMPTY :'a set))))))`),
 ((NOT_IN_EMPTY),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). (~
   (((IN :'a -> 'a set -> bool) $0) (EMPTY :'a set)))))`),
 ((SET_MINIMUM),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :(('a -> num) -> bool) -> bool) (\(M :'a -> num).
   (((= :bool -> bool -> bool) ((? :('a -> bool) -> bool) (\(x :'a).
   (((IN :'a -> 'a set -> bool) $0) $2)))) ((? :('a -> bool) -> bool)
   (\(x :'a). ((/\ (((IN :'a -> 'a set -> bool) $0) $2))
   ((! :('a -> bool) -> bool) (\(y :'a). ((==>
   (((IN :'a -> 'a set -> bool) $0) $3)) ((<= ($2 $1)) ($2
   $0)))))))))))))`),
 ((GSPECIFICATION),
  [],
  `((! :(('b -> 'a # bool) -> bool) -> bool) (\(sp :'b -> 'a # bool).
   ((! :('a -> bool) -> bool) (\(v :'a). (((= :bool -> bool -> bool)
   (((IN :'a -> 'a set -> bool) $0)
   ((GSPEC :('b -> 'a # bool) -> 'a set) $1)))
   ((? :('b -> bool) -> bool) (\(y :'b).
   (((= :'a # bool -> 'a # bool -> bool)
   (((, :'a -> bool -> 'a # bool) $1) T)) ($2 $0)))))))))`),
 ((NUM_SET_WOP),
  [],
  `((! :(num set -> bool) -> bool) (\(s :num set).
   (((= :bool -> bool -> bool) ((? :(num -> bool) -> bool) (\(n :num).
   (((IN :num -> num set -> bool) $0) $1))))
   ((? :(num -> bool) -> bool) (\(n :num). ((/\
   (((IN :num -> num set -> bool) $0) $1)) ((! :(num -> bool) -> bool)
   (\(m :num). ((==> (((IN :num -> num set -> bool) $0) $2)) ((<= $1)
   $0))))))))))`),
 ((NOT_EQUAL_SETS),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :bool -> bool -> bool) (~ (((= :'a set -> 'a set -> bool) $1)
   $0))) ((? :('a -> bool) -> bool) (\(x :'a).
   (((= :bool -> bool -> bool) (((IN :'a -> 'a set -> bool) $0) $1))
   (~ (((IN :'a -> 'a set -> bool) $0) $2))))))))))`),
 ((EXTENSION),
  [],
  `((! :('a set -> bool) -> bool) (\(s :'a set).
   ((! :('a set -> bool) -> bool) (\(t :'a set).
   (((= :bool -> bool -> bool) (((= :'a set -> 'a set -> bool) $1)
   $0)) ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :bool -> bool -> bool) (((IN :'a -> 'a set -> bool) $0) $2))
   (((IN :'a -> 'a set -> bool) $0) $1)))))))))`),
 ((SPECIFICATION),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(f :'a -> bool).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :bool -> bool -> bool)
   (((IN :'a -> 'a set -> bool) $0) ((SPEC :('a -> bool) -> 'a set)
   $1))) ($1 $0))))))`)]
