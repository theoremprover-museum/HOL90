thid = (HREAL, 942752354, 924998)
axioms = []
definitions =
[((hreal_sub),
  [],
  `((! :(hreal -> bool) -> bool) (\(Y :hreal).
   ((! :(hreal -> bool) -> bool) (\(X :hreal).
   (((= :hreal -> hreal -> bool) ((hreal_sub $1) $0)) (hreal
   (\(w :hrat). ((? :(hrat -> bool) -> bool) (\(x :hrat). ((/\ (~
   ((cut $2) $0))) ((cut $3) ((hrat_add $0) $1))))))))))))`),
 ((hreal_lt),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hreal -> bool) -> bool) (\(Y :hreal).
   (((= :bool -> bool -> bool) ((hreal_lt $1) $0)) ((/\ (~
   (((= :hreal -> hreal -> bool) $1) $0)))
   ((! :(hrat -> bool) -> bool) (\(x :hrat). ((==> ((cut $2) $0))
   ((cut $1) $0))))))))))`),
 ((hreal_sup),
  [],
  `((! :((hreal -> bool) -> bool) -> bool) (\(P :hreal -> bool).
   (((= :hreal -> hreal -> bool) (hreal_sup $0)) (hreal (\(w :hrat).
   ((? :(hreal -> bool) -> bool) (\(X :hreal). ((/\ ($2 $0)) ((cut $0)
   $1)))))))))`),
 ((hreal_inv),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   (((= :hreal -> hreal -> bool) (hreal_inv $0)) (hreal (\(w :hrat).
   ((? :(hrat -> bool) -> bool) (\(d :hrat). ((/\ ((hrat_lt $0)
   hrat_1)) ((! :(hrat -> bool) -> bool) (\(x :hrat). ((==> ((cut $3)
   $0)) ((hrat_lt ((hrat_mul $2) $0)) $1))))))))))))`),
 ((hreal_mul),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hreal -> bool) -> bool) (\(Y :hreal).
   (((= :hreal -> hreal -> bool) ((hreal_mul $1) $0)) (hreal
   (\(w :hrat). ((? :(hrat -> bool) -> bool) (\(x :hrat).
   ((? :(hrat -> bool) -> bool) (\(y :hrat). ((/\
   (((= :hrat -> hrat -> bool) $2) ((hrat_mul $1) $0))) ((/\ ((cut $4)
   $1)) ((cut $3) $0))))))))))))))`),
 ((hreal_add),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hreal -> bool) -> bool) (\(Y :hreal).
   (((= :hreal -> hreal -> bool) ((hreal_add $1) $0)) (hreal
   (\(w :hrat). ((? :(hrat -> bool) -> bool) (\(x :hrat).
   ((? :(hrat -> bool) -> bool) (\(y :hrat). ((/\
   (((= :hrat -> hrat -> bool) $2) ((hrat_add $1) $0))) ((/\ ((cut $4)
   $1)) ((cut $3) $0))))))))))))))`),
 ((hreal_1),
  [],
  `(((= :hreal -> hreal -> bool) hreal_1) (hreal (cut_of_hrat
   hrat_1)))`),
 ((hreal_tybij),
  [],
  `((/\ ((! :(hreal -> bool) -> bool) (\(a :hreal).
   (((= :hreal -> hreal -> bool) (hreal (cut $0))) $0))))
   ((! :((hrat -> bool) -> bool) -> bool) (\(r :hrat -> bool).
   (((= :bool -> bool -> bool) (isacut $0))
   (((= :(hrat -> bool) -> (hrat -> bool) -> bool) (cut (hreal $0)))
   $0)))))`),
 ((hreal_TY_DEF),
  [],
  `((? :((hreal -> hrat -> bool) -> bool) -> bool)
   (\(rep :hreal -> hrat -> bool).
   (((TYPE_DEFINITION :((hrat -> bool) -> bool) ->
                       (hreal -> hrat -> bool) -> bool) isacut)
   $0)))`),
 ((cut_of_hrat),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   (((= :(hrat -> bool) -> (hrat -> bool) -> bool) (cut_of_hrat $0))
   (\(y :hrat). ((hrat_lt $0) $1)))))`),
 ((isacut),
  [],
  `((! :((hrat -> bool) -> bool) -> bool) (\(C :hrat -> bool).
   (((= :bool -> bool -> bool) (isacut $0)) ((/\
   ((? :(hrat -> bool) -> bool) (\(x :hrat). ($1 $0)))) ((/\
   ((? :(hrat -> bool) -> bool) (\(x :hrat). (~ ($1 $0))))) ((/\
   ((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat). ((==> ((/\ ($2 $1))
   ((hrat_lt $0) $1))) ($2 $0))))))) ((! :(hrat -> bool) -> bool)
   (\(x :hrat). ((==> ($1 $0)) ((? :(hrat -> bool) -> bool)
   (\(y :hrat). ((/\ ($2 $0)) ((hrat_lt $1) $0)))))))))))))`),
 ((hrat_lt),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat).
   (((= :bool -> bool -> bool) ((hrat_lt $1) $0))
   ((? :(hrat -> bool) -> bool) (\(d :hrat).
   (((= :hrat -> hrat -> bool) $1) ((hrat_add $2) $0)))))))))`)]
theorems =
[((HREAL_SUP),
  [],
  `((! :((hreal -> bool) -> bool) -> bool) (\(P :hreal -> bool). ((==>
   ((/\ ((? :(hreal -> bool) -> bool) (\(X :hreal). ($1 $0))))
   ((? :(hreal -> bool) -> bool) (\(Y :hreal).
   ((! :(hreal -> bool) -> bool) (\(X :hreal). ((==> ($2 $0))
   ((hreal_lt $0) $1)))))))) ((! :(hreal -> bool) -> bool)
   (\(Y :hreal). (((= :bool -> bool -> bool)
   ((? :(hreal -> bool) -> bool) (\(X :hreal). ((/\ ($2 $0))
   ((hreal_lt $1) $0))))) ((hreal_lt $0) (hreal_sup $1))))))))`),
 ((HREAL_SUP_ISACUT),
  [],
  `((! :((hreal -> bool) -> bool) -> bool) (\(P :hreal -> bool). ((==>
   ((/\ ((? :(hreal -> bool) -> bool) (\(X :hreal). ($1 $0))))
   ((? :(hreal -> bool) -> bool) (\(Y :hreal).
   ((! :(hreal -> bool) -> bool) (\(X :hreal). ((==> ($2 $0))
   ((hreal_lt $0) $1)))))))) (isacut (\(w :hrat).
   ((? :(hreal -> bool) -> bool) (\(X :hreal). ((/\ ($2 $0)) ((cut $0)
   $1)))))))))`),
 ((HREAL_ADD_TOTAL),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hreal -> bool) -> bool) (\(Y :hreal). ((\/
   (((= :hreal -> hreal -> bool) $1) $0)) ((\/
   ((? :(hreal -> bool) -> bool) (\(D :hreal).
   (((= :hreal -> hreal -> bool) $1) ((hreal_add $2) $0)))))
   ((? :(hreal -> bool) -> bool) (\(D :hreal).
   (((= :hreal -> hreal -> bool) $2) ((hreal_add $1) $0))))))))))`),
 ((HREAL_LT),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hreal -> bool) -> bool) (\(Y :hreal).
   (((= :bool -> bool -> bool) ((hreal_lt $1) $0))
   ((? :(hreal -> bool) -> bool) (\(D :hreal).
   (((= :hreal -> hreal -> bool) $1) ((hreal_add $2) $0)))))))))`),
 ((HREAL_LT_TOTAL),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hreal -> bool) -> bool) (\(Y :hreal). ((\/
   (((= :hreal -> hreal -> bool) $1) $0)) ((\/ ((hreal_lt $1) $0))
   ((hreal_lt $0) $1)))))))`),
 ((HREAL_SUB_ADD),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hreal -> bool) -> bool) (\(Y :hreal). ((==> ((hreal_lt $1)
   $0)) (((= :hreal -> hreal -> bool) ((hreal_add ((hreal_sub $0) $1))
   $1)) $0))))))`),
 ((HREAL_SUB_ISACUT),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hreal -> bool) -> bool) (\(Y :hreal). ((==> ((hreal_lt $1)
   $0)) (isacut (\(w :hrat). ((? :(hrat -> bool) -> bool) (\(x :hrat).
   ((/\ (~ ((cut $3) $0))) ((cut $2) ((hrat_add $0) $1))))))))))))`),
 ((HREAL_LT_LEMMA),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hreal -> bool) -> bool) (\(Y :hreal). ((==> ((hreal_lt $1)
   $0)) ((? :(hrat -> bool) -> bool) (\(x :hrat). ((/\ (~ ((cut $2)
   $0))) ((cut $1) $0)))))))))`),
 ((HREAL_NOZERO),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hreal -> bool) -> bool) (\(Y :hreal). (~
   (((= :hreal -> hreal -> bool) ((hreal_add $1) $0)) $1))))))`),
 ((HREAL_MUL_LINV),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   (((= :hreal -> hreal -> bool) ((hreal_mul (hreal_inv $0)) $0))
   hreal_1)))`),
 ((HREAL_MUL_LID),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   (((= :hreal -> hreal -> bool) ((hreal_mul hreal_1) $0)) $0)))`),
 ((HREAL_LDISTRIB),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hreal -> bool) -> bool) (\(Y :hreal).
   ((! :(hreal -> bool) -> bool) (\(Z :hreal).
   (((= :hreal -> hreal -> bool) ((hreal_mul $2) ((hreal_add $1) $0)))
   ((hreal_add ((hreal_mul $2) $1)) ((hreal_mul $2) $0)))))))))`),
 ((HREAL_MUL_ASSOC),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hreal -> bool) -> bool) (\(Y :hreal).
   ((! :(hreal -> bool) -> bool) (\(Z :hreal).
   (((= :hreal -> hreal -> bool) ((hreal_mul $2) ((hreal_mul $1) $0)))
   ((hreal_mul ((hreal_mul $2) $1)) $0))))))))`),
 ((HREAL_ADD_ASSOC),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hreal -> bool) -> bool) (\(Y :hreal).
   ((! :(hreal -> bool) -> bool) (\(Z :hreal).
   (((= :hreal -> hreal -> bool) ((hreal_add $2) ((hreal_add $1) $0)))
   ((hreal_add ((hreal_add $2) $1)) $0))))))))`),
 ((HREAL_MUL_SYM),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hreal -> bool) -> bool) (\(Y :hreal).
   (((= :hreal -> hreal -> bool) ((hreal_mul $1) $0)) ((hreal_mul $0)
   $1))))))`),
 ((HREAL_ADD_SYM),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hreal -> bool) -> bool) (\(Y :hreal).
   (((= :hreal -> hreal -> bool) ((hreal_add $1) $0)) ((hreal_add $0)
   $1))))))`),
 ((HREAL_MUL_ISACUT),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hreal -> bool) -> bool) (\(Y :hreal). (isacut (\(w :hrat).
   ((? :(hrat -> bool) -> bool) (\(x :hrat).
   ((? :(hrat -> bool) -> bool) (\(y :hrat). ((/\
   (((= :hrat -> hrat -> bool) $2) ((hrat_mul $1) $0))) ((/\ ((cut $4)
   $1)) ((cut $3) $0)))))))))))))`),
 ((HREAL_ADD_ISACUT),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hreal -> bool) -> bool) (\(Y :hreal). (isacut (\(w :hrat).
   ((? :(hrat -> bool) -> bool) (\(x :hrat).
   ((? :(hrat -> bool) -> bool) (\(y :hrat). ((/\
   (((= :hrat -> hrat -> bool) $2) ((hrat_add $1) $0))) ((/\ ((cut $4)
   $1)) ((cut $3) $0)))))))))))))`),
 ((HREAL_INV_ISACUT),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal). (isacut (\(w :hrat).
   ((? :(hrat -> bool) -> bool) (\(d :hrat). ((/\ ((hrat_lt $0)
   hrat_1)) ((! :(hrat -> bool) -> bool) (\(x :hrat). ((==> ((cut $3)
   $0)) ((hrat_lt ((hrat_mul $2) $0)) $1)))))))))))`),
 ((CUT_NEARTOP_MUL),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hrat -> bool) -> bool) (\(u :hrat). ((==> ((hrat_lt hrat_1)
   $0)) ((? :(hrat -> bool) -> bool) (\(x :hrat). ((/\ ((cut $2) $0))
   (~ ((cut $2) ((hrat_mul $1) $0)))))))))))`),
 ((CUT_NEARTOP_ADD),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hrat -> bool) -> bool) (\(e :hrat).
   ((? :(hrat -> bool) -> bool) (\(x :hrat). ((/\ ((cut $2) $0)) (~
   ((cut $2) ((hrat_add $0) $1))))))))))`),
 ((CUT_STRADDLE),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat). ((==> ((/\ ((cut $2) $1))
   (~ ((cut $2) $0)))) ((hrat_lt $1) $0))))))))`),
 ((CUT_UBOUND),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat). ((==> ((/\ (~ ((cut $2)
   $1))) ((hrat_lt $1) $0))) (~ ((cut $2) $0)))))))))`),
 ((CUT_UP),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hrat -> bool) -> bool) (\(x :hrat). ((==> ((cut $1) $0))
   ((? :(hrat -> bool) -> bool) (\(y :hrat). ((/\ ((cut $2) $0))
   ((hrat_lt $1) $0)))))))))`),
 ((CUT_DOWN),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat). ((==> ((/\ ((cut $2) $1))
   ((hrat_lt $0) $1))) ((cut $2) $0))))))))`),
 ((CUT_BOUNDED),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((? :(hrat -> bool) -> bool) (\(x :hrat). (~ ((cut $1) $0))))))`),
 ((CUT_NONEMPTY),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((? :(hrat -> bool) -> bool) (\(x :hrat). ((cut $1) $0)))))`),
 ((CUT_ISACUT),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal). (isacut (cut $0))))`),
 ((EQUAL_CUTS),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal).
   ((! :(hreal -> bool) -> bool) (\(Y :hreal). ((==>
   (((= :(hrat -> bool) -> (hrat -> bool) -> bool) (cut $1)) (cut
   $0))) (((= :hreal -> hreal -> bool) $1) $0))))))`),
 ((ISACUT_HRAT),
  [],
  `((! :(hrat -> bool) -> bool) (\(h :hrat). (isacut (cut_of_hrat
   $0))))`),
 ((HRAT_MEAN),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat). ((==> ((hrat_lt $1) $0))
   ((? :(hrat -> bool) -> bool) (\(z :hrat). ((/\ ((hrat_lt $2) $0))
   ((hrat_lt $0) $1)))))))))`),
 ((HRAT_DOWN2),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat).
   ((? :(hrat -> bool) -> bool) (\(z :hrat). ((/\ ((hrat_lt $0) $2))
   ((hrat_lt $0) $1))))))))`),
 ((HRAT_DOWN),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((? :(hrat -> bool) -> bool) (\(y :hrat). ((hrat_lt $0) $1)))))`),
 ((HRAT_UP),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((? :(hrat -> bool) -> bool) (\(y :hrat). ((hrat_lt $1) $0)))))`),
 ((HRAT_INV_MUL),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat).
   (((= :hrat -> hrat -> bool) (hrat_inv ((hrat_mul $1) $0)))
   ((hrat_mul (hrat_inv $1)) (hrat_inv $0)))))))`),
 ((HRAT_GT_L1),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat).
   (((= :bool -> bool -> bool) ((hrat_lt hrat_1) ((hrat_mul (hrat_inv
   $1)) $0))) ((hrat_lt $1) $0))))))`),
 ((HRAT_LT_R1),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat).
   (((= :bool -> bool -> bool) ((hrat_lt ((hrat_mul $1) (hrat_inv
   $0))) hrat_1)) ((hrat_lt $1) $0))))))`),
 ((HRAT_LT_L1),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat).
   (((= :bool -> bool -> bool) ((hrat_lt ((hrat_mul (hrat_inv $1))
   $0)) hrat_1)) ((hrat_lt $0) $1))))))`),
 ((HRAT_GT_LMUL1),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat).
   (((= :bool -> bool -> bool) ((hrat_lt $0) ((hrat_mul $1) $0)))
   ((hrat_lt hrat_1) $1))))))`),
 ((HRAT_LT_RMUL1),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat).
   (((= :bool -> bool -> bool) ((hrat_lt ((hrat_mul $1) $0)) $1))
   ((hrat_lt $0) hrat_1))))))`),
 ((HRAT_LT_LMUL1),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat).
   (((= :bool -> bool -> bool) ((hrat_lt ((hrat_mul $1) $0)) $0))
   ((hrat_lt $1) hrat_1))))))`),
 ((HRAT_LT_RMUL),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat).
   ((! :(hrat -> bool) -> bool) (\(z :hrat).
   (((= :bool -> bool -> bool) ((hrat_lt ((hrat_mul $2) $0))
   ((hrat_mul $1) $0))) ((hrat_lt $2) $1))))))))`),
 ((HRAT_LT_LMUL),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat).
   ((! :(hrat -> bool) -> bool) (\(z :hrat).
   (((= :bool -> bool -> bool) ((hrat_lt ((hrat_mul $0) $2))
   ((hrat_mul $0) $1))) ((hrat_lt $2) $1))))))))`),
 ((HRAT_LT_MUL2),
  [],
  `((! :(hrat -> bool) -> bool) (\(u :hrat).
   ((! :(hrat -> bool) -> bool) (\(v :hrat).
   ((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat). ((==> ((/\ ((hrat_lt $3)
   $1)) ((hrat_lt $2) $0))) ((hrat_lt ((hrat_mul $3) $2)) ((hrat_mul
   $1) $0)))))))))))`),
 ((HRAT_LT_RADD),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat).
   ((! :(hrat -> bool) -> bool) (\(z :hrat).
   (((= :bool -> bool -> bool) ((hrat_lt ((hrat_add $2) $0))
   ((hrat_add $1) $0))) ((hrat_lt $2) $1))))))))`),
 ((HRAT_LT_LADD),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat).
   ((! :(hrat -> bool) -> bool) (\(z :hrat).
   (((= :bool -> bool -> bool) ((hrat_lt ((hrat_add $0) $2))
   ((hrat_add $0) $1))) ((hrat_lt $2) $1))))))))`),
 ((HRAT_LT_ADD2),
  [],
  `((! :(hrat -> bool) -> bool) (\(u :hrat).
   ((! :(hrat -> bool) -> bool) (\(v :hrat).
   ((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat). ((==> ((/\ ((hrat_lt $3)
   $1)) ((hrat_lt $2) $0))) ((hrat_lt ((hrat_add $3) $2)) ((hrat_add
   $1) $0)))))))))))`),
 ((HRAT_EQ_LMUL),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat).
   ((! :(hrat -> bool) -> bool) (\(z :hrat).
   (((= :bool -> bool -> bool) (((= :hrat -> hrat -> bool) ((hrat_mul
   $2) $1)) ((hrat_mul $2) $0))) (((= :hrat -> hrat -> bool) $1)
   $0))))))))`),
 ((HRAT_EQ_LADD),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat).
   ((! :(hrat -> bool) -> bool) (\(z :hrat).
   (((= :bool -> bool -> bool) (((= :hrat -> hrat -> bool) ((hrat_add
   $2) $1)) ((hrat_add $2) $0))) (((= :hrat -> hrat -> bool) $1)
   $0))))))))`),
 ((HRAT_LT_NE),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat). ((==> ((hrat_lt $1) $0))
   (~ (((= :hrat -> hrat -> bool) $1) $0)))))))`),
 ((HRAT_LT_GT),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat). ((==> ((hrat_lt $1) $0))
   (~ ((hrat_lt $0) $1)))))))`),
 ((HRAT_LT_ADDR),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat). ((hrat_lt $0) ((hrat_add
   $1) $0))))))`),
 ((HRAT_LT_ADDL),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat). ((hrat_lt $1) ((hrat_add
   $1) $0))))))`),
 ((HRAT_RDISTRIB),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat).
   ((! :(hrat -> bool) -> bool) (\(z :hrat).
   (((= :hrat -> hrat -> bool) ((hrat_mul ((hrat_add $2) $1)) $0))
   ((hrat_add ((hrat_mul $2) $0)) ((hrat_mul $1) $0)))))))))`),
 ((HRAT_MUL_RINV),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   (((= :hrat -> hrat -> bool) ((hrat_mul $0) (hrat_inv $0)))
   hrat_1)))`),
 ((HRAT_MUL_RID),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   (((= :hrat -> hrat -> bool) ((hrat_mul $0) hrat_1)) $0)))`),
 ((HRAT_LT_TOTAL),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat). ((\/
   (((= :hrat -> hrat -> bool) $1) $0)) ((\/ ((hrat_lt $1) $0))
   ((hrat_lt $0) $1)))))))`),
 ((HRAT_LT_ANTISYM),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat). (~ ((/\ ((hrat_lt $1)
   $0)) ((hrat_lt $0) $1)))))))`),
 ((HRAT_LT_TRANS),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat).
   ((! :(hrat -> bool) -> bool) (\(y :hrat).
   ((! :(hrat -> bool) -> bool) (\(z :hrat). ((==> ((/\ ((hrat_lt $2)
   $1)) ((hrat_lt $1) $0))) ((hrat_lt $2) $0))))))))`),
 ((HRAT_LT_REFL),
  [],
  `((! :(hrat -> bool) -> bool) (\(x :hrat). (~ ((hrat_lt $0)
   $0))))`)]
