thid = (more_list, 784895471, 96517)
axioms = []
definitions =
[((SOME_arg_DEF),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). (((= :'a -> 'a -> bool)
   ((SOME_arg :'a option -> 'a) ((SOME :'a -> 'a option) $0)))
   $0)))`),
 ((SOME_DEF),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a option -> 'a option -> bool) ((SOME :'a -> 'a option) $0))
   ((ABS_option :(one + 'a) ltree -> 'a option)
   (((Node :one + 'a -> (one + 'a) ltree list -> (one + 'a) ltree)
   ((INR :'a -> one + 'a) $0)) (NIL :(one + 'a) ltree list))))))`),
 ((NONE_DEF),
  [],
  `(((= :'a option -> 'a option -> bool) (NONE :'a option))
   ((ABS_option :(one + 'a) ltree -> 'a option)
   (((Node :one + 'a -> (one + 'a) ltree list -> (one + 'a) ltree)
   ((INL :one -> one + 'a) one)) (NIL :(one + 'a) ltree list))))`),
 ((option_ISO_DEF),
  [],
  `((/\ ((! :('a option -> bool) -> bool) (\(a :'a option).
   (((= :'a option -> 'a option -> bool)
   ((ABS_option :(one + 'a) ltree -> 'a option)
   ((REP_option :'a option -> (one + 'a) ltree) $0))) $0))))
   ((! :((one + 'a) ltree -> bool) -> bool) (\(r :(one + 'a) ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(one + 'a -> (one + 'a) ltree list -> bool) ->
           (one + 'a) ltree -> bool) (\(v :one + 'a).
   (\(tl :(one + 'a) ltree list). ((\/ ((/\
   (((= :one + 'a -> one + 'a -> bool) $1) ((INL :one -> one + 'a)
   one))) (((= :num -> num -> bool)
   ((LENGTH :(one + 'a) ltree list -> num) $0)) 0))) ((/\
   ((? :('a -> bool) -> bool) (\(x :'a).
   (((= :one + 'a -> one + 'a -> bool) $2) ((INR :'a -> one + 'a)
   $0))))) (((= :num -> num -> bool)
   ((LENGTH :(one + 'a) ltree list -> num) $0)) 0)))))) $0))
   (((= :(one + 'a) ltree -> (one + 'a) ltree -> bool)
   ((REP_option :'a option -> (one + 'a) ltree)
   ((ABS_option :(one + 'a) ltree -> 'a option) $0))) $0)))))`),
 ((option_TY_DEF),
  [],
  `((? :(('a option -> (one + 'a) ltree) -> bool) -> bool)
   (\(rep :'a option -> (one + 'a) ltree).
   (((TYPE_DEFINITION :((one + 'a) ltree -> bool) ->
                       ('a option -> (one + 'a) ltree) -> bool)
   ((TRP :(one + 'a -> (one + 'a) ltree list -> bool) ->
          (one + 'a) ltree -> bool) (\(v :one + 'a).
   (\(tl :(one + 'a) ltree list). ((\/ ((/\
   (((= :one + 'a -> one + 'a -> bool) $1) ((INL :one -> one + 'a)
   one))) (((= :num -> num -> bool)
   ((LENGTH :(one + 'a) ltree list -> num) $0)) 0))) ((/\
   ((? :('a -> bool) -> bool) (\(x :'a).
   (((= :one + 'a -> one + 'a -> bool) $2) ((INR :'a -> one + 'a)
   $0))))) (((= :num -> num -> bool)
   ((LENGTH :(one + 'a) ltree list -> num) $0)) 0))))))) $0)))`),
 ((nonempty_FOLDL_WITH_INIT_DEF),
  [],
  `((/\ ((! :(('a -> 'a -> 'a) -> bool) -> bool)
   (\(f :'a -> 'a -> 'a). ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a -> 'a -> bool)
   (((nonempty_FOLDL_WITH_INIT :('a -> 'a -> 'a) -> 'a nonemptylist ->
                                'a) $1) ((ONE :'a -> 'a nonemptylist)
   $0))) $0)))))) ((! :(('a -> 'a -> 'a) -> bool) -> bool)
   (\(f :'a -> 'a -> 'a). ((! :('a nonemptylist -> bool) -> bool)
   (\(xs :'a nonemptylist). ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a -> 'a -> bool)
   (((nonempty_FOLDL_WITH_INIT :('a -> 'a -> 'a) -> 'a nonemptylist ->
                                'a) $2)
   (((MORE :'a -> 'a nonemptylist -> 'a nonemptylist) $0) $1)))
   ((((nonempty_FOLDL :'a -> ('a -> 'a -> 'a) -> 'a nonemptylist ->
                       'a) $0) $2) $1)))))))))`),
 ((nonempty_FOLDL_DEF),
  [],
  `((/\ ((! :('b -> bool) -> bool) (\(start :'b).
   ((! :(('b -> 'a -> 'b) -> bool) -> bool) (\(f :'b -> 'a -> 'b).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :'b -> 'b -> bool)
   ((((nonempty_FOLDL :'b -> ('b -> 'a -> 'b) -> 'a nonemptylist ->
                       'b) $2) $1) ((ONE :'a -> 'a nonemptylist) $0)))
   (($1 $2) $0))))))))) ((! :('b -> bool) -> bool) (\(start :'b).
   ((! :(('b -> 'a -> 'b) -> bool) -> bool) (\(f :'b -> 'a -> 'b).
   ((! :('a nonemptylist -> bool) -> bool) (\(xs :'a nonemptylist).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :'b -> 'b -> bool)
   ((((nonempty_FOLDL :'b -> ('b -> 'a -> 'b) -> 'a nonemptylist ->
                       'b) $3) $2)
   (((MORE :'a -> 'a nonemptylist -> 'a nonemptylist) $0) $1)))
   ((((nonempty_FOLDL :'b -> ('b -> 'a -> 'b) -> 'a nonemptylist ->
                       'b) (($2 $3) $0)) $2) $1)))))))))))`),
 ((nonempty_FOLDR_TO_ONE_DEF),
  [],
  `((/\ ((! :(('a -> 'a -> 'a) -> bool) -> bool)
   (\(f :'a -> 'a -> 'a). ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a -> 'a -> bool)
   (((nonempty_FOLDR_TO_ONE :('a -> 'a -> 'a) -> 'a nonemptylist ->
                             'a) $1) ((ONE :'a -> 'a nonemptylist)
   $0))) $0)))))) ((! :(('a -> 'a -> 'a) -> bool) -> bool)
   (\(f :'a -> 'a -> 'a). ((! :('a nonemptylist -> bool) -> bool)
   (\(l :'a nonemptylist). ((! :('a -> bool) -> bool) (\(y :'a).
   (((= :'a -> 'a -> bool)
   (((nonempty_FOLDR_TO_ONE :('a -> 'a -> 'a) -> 'a nonemptylist ->
                             'a) $2)
   (((MORE :'a -> 'a nonemptylist -> 'a nonemptylist) $0) $1))) (($2
   $0)
   (((nonempty_FOLDR_TO_ONE :('a -> 'a -> 'a) -> 'a nonemptylist ->
                             'a) $2) $1))))))))))`),
 ((nonempty_FOLDR_DEF),
  [],
  `((/\ ((! :(('a -> 'b -> 'b) -> bool) -> bool)
   (\(f :'a -> 'b -> 'b). ((! :('b -> bool) -> bool) (\(start :'b).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :'b -> 'b -> bool)
   ((((nonempty_FOLDR :('a -> 'b -> 'b) -> 'b -> 'a nonemptylist ->
                       'b) $2) $1) ((ONE :'a -> 'a nonemptylist) $0)))
   (($2 $0) $1))))))))) ((! :(('a -> 'b -> 'b) -> bool) -> bool)
   (\(f :'a -> 'b -> 'b). ((! :('b -> bool) -> bool) (\(start :'b).
   ((! :('a nonemptylist -> bool) -> bool) (\(l :'a nonemptylist).
   ((! :('a -> bool) -> bool) (\(y :'a). (((= :'b -> 'b -> bool)
   ((((nonempty_FOLDR :('a -> 'b -> 'b) -> 'b -> 'a nonemptylist ->
                       'b) $3) $2)
   (((MORE :'a -> 'a nonemptylist -> 'a nonemptylist) $0) $1))) (($3
   $0)
   ((((nonempty_FOLDR :('a -> 'b -> 'b) -> 'b -> 'a nonemptylist ->
                       'b) $3) $2) $1))))))))))))`),
 ((nonempty_MAP_DEF),
  [],
  `((/\ ((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'b nonemptylist -> 'b nonemptylist -> bool)
   (((nonempty_MAP :('a -> 'b) -> 'a nonemptylist -> 'b nonemptylist)
   $1) ((ONE :'a -> 'a nonemptylist) $0)))
   ((ONE :'b -> 'b nonemptylist) ($1 $0))))))))
   ((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a nonemptylist -> bool) -> bool) (\(xs :'a nonemptylist).
   ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'b nonemptylist -> 'b nonemptylist -> bool)
   (((nonempty_MAP :('a -> 'b) -> 'a nonemptylist -> 'b nonemptylist)
   $2) (((MORE :'a -> 'a nonemptylist -> 'a nonemptylist) $0) $1)))
   (((MORE :'b -> 'b nonemptylist -> 'b nonemptylist) ($2 $0))
   (((nonempty_MAP :('a -> 'b) -> 'a nonemptylist -> 'b nonemptylist)
   $2) $1))))))))))`),
 ((MORE_DEF),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a nonemptylist -> bool) -> bool) (\(n :'a nonemptylist).
   (((= :'a nonemptylist -> 'a nonemptylist -> bool)
   (((MORE :'a -> 'a nonemptylist -> 'a nonemptylist) $1) $0))
   ((ABS_nonemptylist :('a + 'a) ltree -> 'a nonemptylist)
   (((Node :'a + 'a -> ('a + 'a) ltree list -> ('a + 'a) ltree)
   ((INR :'a -> 'a + 'a) $1))
   (((CONS :('a + 'a) ltree -> ('a + 'a) ltree list ->
            ('a + 'a) ltree list)
   ((REP_nonemptylist :'a nonemptylist -> ('a + 'a) ltree) $0))
   (NIL :('a + 'a) ltree list)))))))))`),
 ((ONE_DEF),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a nonemptylist -> 'a nonemptylist -> bool)
   ((ONE :'a -> 'a nonemptylist) $0))
   ((ABS_nonemptylist :('a + 'a) ltree -> 'a nonemptylist)
   (((Node :'a + 'a -> ('a + 'a) ltree list -> ('a + 'a) ltree)
   ((INL :'a -> 'a + 'a) $0)) (NIL :('a + 'a) ltree list))))))`),
 ((nonemptylist_ISO_DEF),
  [],
  `((/\ ((! :('a nonemptylist -> bool) -> bool)
   (\(a :'a nonemptylist).
   (((= :'a nonemptylist -> 'a nonemptylist -> bool)
   ((ABS_nonemptylist :('a + 'a) ltree -> 'a nonemptylist)
   ((REP_nonemptylist :'a nonemptylist -> ('a + 'a) ltree) $0)))
   $0)))) ((! :(('a + 'a) ltree -> bool) -> bool)
   (\(r :('a + 'a) ltree). (((= :bool -> bool -> bool)
   (((TRP :('a + 'a -> ('a + 'a) ltree list -> bool) ->
           ('a + 'a) ltree -> bool) (\(v :'a + 'a).
   (\(tl :('a + 'a) ltree list). ((\/ ((/\ ((? :('a -> bool) -> bool)
   (\(x :'a). (((= :'a + 'a -> 'a + 'a -> bool) $2)
   ((INL :'a -> 'a + 'a) $0))))) (((= :num -> num -> bool)
   ((LENGTH :('a + 'a) ltree list -> num) $0)) 0))) ((/\
   ((? :('a -> bool) -> bool) (\(x :'a).
   (((= :'a + 'a -> 'a + 'a -> bool) $2) ((INR :'a -> 'a + 'a) $0)))))
   (((= :num -> num -> bool) ((LENGTH :('a + 'a) ltree list -> num)
   $0)) (SUC 0))))))) $0))
   (((= :('a + 'a) ltree -> ('a + 'a) ltree -> bool)
   ((REP_nonemptylist :'a nonemptylist -> ('a + 'a) ltree)
   ((ABS_nonemptylist :('a + 'a) ltree -> 'a nonemptylist) $0)))
   $0)))))`),
 ((nonemptylist_TY_DEF),
  [],
  `((? :(('a nonemptylist -> ('a + 'a) ltree) -> bool) -> bool)
   (\(rep :'a nonemptylist -> ('a + 'a) ltree).
   (((TYPE_DEFINITION :(('a + 'a) ltree -> bool) ->
                       ('a nonemptylist -> ('a + 'a) ltree) -> bool)
   ((TRP :('a + 'a -> ('a + 'a) ltree list -> bool) ->
          ('a + 'a) ltree -> bool) (\(v :'a + 'a).
   (\(tl :('a + 'a) ltree list). ((\/ ((/\ ((? :('a -> bool) -> bool)
   (\(x :'a). (((= :'a + 'a -> 'a + 'a -> bool) $2)
   ((INL :'a -> 'a + 'a) $0))))) (((= :num -> num -> bool)
   ((LENGTH :('a + 'a) ltree list -> num) $0)) 0))) ((/\
   ((? :('a -> bool) -> bool) (\(x :'a).
   (((= :'a + 'a -> 'a + 'a -> bool) $2) ((INR :'a -> 'a + 'a) $0)))))
   (((= :num -> num -> bool) ((LENGTH :('a + 'a) ltree list -> num)
   $0)) (SUC 0)))))))) $0)))`),
 ((FILTER_DEF),
  [],
  `((/\ ((! :(('a -> bool) -> bool) -> bool) (\(pred :'a -> bool).
   (((= :'a list -> 'a list -> bool)
   (((FILTER :('a -> bool) -> 'a list -> 'a list) $0) (NIL :'a list)))
   (NIL :'a list))))) ((! :(('a -> bool) -> bool) -> bool)
   (\(pred :'a -> bool). ((! :('a list -> bool) -> bool)
   (\(tl :'a list). ((! :('a -> bool) -> bool) (\(hd :'a).
   (((= :'a list -> 'a list -> bool)
   (((FILTER :('a -> bool) -> 'a list -> 'a list) $2)
   (((CONS :'a -> 'a list -> 'a list) $0) $1)))
   ((((COND :bool -> 'a list -> 'a list -> 'a list) ($2 $0))
   (((CONS :'a -> 'a list -> 'a list) $0)
   (((FILTER :('a -> bool) -> 'a list -> 'a list) $2) $1)))
   (((FILTER :('a -> bool) -> 'a list -> 'a list) $2) $1))))))))))`),
 ((FOLDL_DEF),
  [],
  `((/\ ((! :(('b -> 'a -> 'b) -> bool) -> bool)
   (\(f :'b -> 'a -> 'b). (((= :('b -> 'b) -> ('b -> 'b) -> bool)
   (((FOLDL :('b -> 'a -> 'b) -> 'a list -> 'b -> 'b) $0)
   (NIL :'a list))) (\(start :'b). $0)))))
   ((! :(('b -> 'a -> 'b) -> bool) -> bool) (\(f :'b -> 'a -> 'b).
   ((! :('a list -> bool) -> bool) (\(l :'a list).
   ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :('b -> 'b) -> ('b -> 'b) -> bool)
   (((FOLDL :('b -> 'a -> 'b) -> 'a list -> 'b -> 'b) $2)
   (((CONS :'a -> 'a list -> 'a list) $0) $1))) (\(start :'b).
   ((((FOLDL :('b -> 'a -> 'b) -> 'a list -> 'b -> 'b) $3) $2) (($3
   $0) $1)))))))))))`),
 ((FOLDR_DEF),
  [],
  `((/\ ((! :(('a -> 'b -> 'b) -> bool) -> bool)
   (\(f :'a -> 'b -> 'b). ((! :('b -> bool) -> bool) (\(start :'b).
   (((= :'b -> 'b -> bool)
   ((((FOLDR :('a -> 'b -> 'b) -> 'a list -> 'b -> 'b) $1)
   (NIL :'a list)) $0)) $0))))))
   ((! :(('a -> 'b -> 'b) -> bool) -> bool) (\(f :'a -> 'b -> 'b).
   ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a list -> bool) -> bool) (\(l :'a list).
   ((! :('b -> bool) -> bool) (\(start :'b). (((= :'b -> 'b -> bool)
   ((((FOLDR :('a -> 'b -> 'b) -> 'a list -> 'b -> 'b) $3)
   (((CONS :'a -> 'a list -> 'a list) $2) $1)) $0)) (($3 $2)
   ((((FOLDR :('a -> 'b -> 'b) -> 'a list -> 'b -> 'b) $3) $1)
   $0))))))))))))`)]
theorems =
[((option_constructors_distinct),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). (~
   (((= :'a option -> 'a option -> bool) (NONE :'a option))
   ((SOME :'a -> 'a option) $0)))))`),
 ((option_constructors_one_one),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). ((! :('a -> bool) -> bool)
   (\(x' :'a). (((= :bool -> bool -> bool)
   (((= :'a option -> 'a option -> bool) ((SOME :'a -> 'a option) $1))
   ((SOME :'a -> 'a option) $0))) (((= :'a -> 'a -> bool) $1)
   $0))))))`),
 ((option_cases_thm),
  [],
  `((! :('a option -> bool) -> bool) (\(o' :'a option). ((\/
   (((= :'a option -> 'a option -> bool) $0) (NONE :'a option)))
   ((? :('a -> bool) -> bool) (\(x :'a).
   (((= :'a option -> 'a option -> bool) $1) ((SOME :'a -> 'a option)
   $0)))))))`),
 ((option_induction_thm),
  [],
  `((! :(('a option -> bool) -> bool) -> bool)
   (\(P :'a option -> bool). ((==> ((/\ ($0 (NONE :'a option)))
   ((! :('a -> bool) -> bool) (\(x :'a). ($1 ((SOME :'a -> 'a option)
   $0)))))) ((! :('a option -> bool) -> bool) (\(o' :'a option). ($1
   $0))))))`),
 ((option_Axiom),
  [],
  `((! :('a1 -> bool) -> bool) (\(e :'a1).
   ((! :(('a -> 'a1) -> bool) -> bool) (\(f :'a -> 'a1).
   ((?! :(('a option -> 'a1) -> bool) -> bool)
   (\(fn :'a option -> 'a1). ((/\ (((= :'a1 -> 'a1 -> bool) ($0
   (NONE :'a option))) $2)) ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a1 -> 'a1 -> bool) ($1 ((SOME :'a -> 'a option) $0))) ($2
   $0)))))))))))`),
 ((nonemptylist_constructors_distinct),
  [],
  `((! :('a nonemptylist -> bool) -> bool) (\(n :'a nonemptylist).
   ((! :('a -> bool) -> bool) (\(x' :'a). ((! :('a -> bool) -> bool)
   (\(x :'a). (~ (((= :'a nonemptylist -> 'a nonemptylist -> bool)
   ((ONE :'a -> 'a nonemptylist) $0))
   (((MORE :'a -> 'a nonemptylist -> 'a nonemptylist) $1)
   $2)))))))))`),
 ((nonemptylist_constructors_one_one),
  [],
  `((/\ ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a -> bool) -> bool) (\(x' :'a). (((= :bool -> bool -> bool)
   (((= :'a nonemptylist -> 'a nonemptylist -> bool)
   ((ONE :'a -> 'a nonemptylist) $1)) ((ONE :'a -> 'a nonemptylist)
   $0))) (((= :'a -> 'a -> bool) $1) $0)))))))
   ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a nonemptylist -> bool) -> bool) (\(n :'a nonemptylist).
   ((! :('a -> bool) -> bool) (\(x' :'a).
   ((! :('a nonemptylist -> bool) -> bool) (\(n' :'a nonemptylist).
   (((= :bool -> bool -> bool)
   (((= :'a nonemptylist -> 'a nonemptylist -> bool)
   (((MORE :'a -> 'a nonemptylist -> 'a nonemptylist) $3) $2))
   (((MORE :'a -> 'a nonemptylist -> 'a nonemptylist) $1) $0))) ((/\
   (((= :'a -> 'a -> bool) $3) $1))
   (((= :'a nonemptylist -> 'a nonemptylist -> bool) $2)
   $0))))))))))))`),
 ((nonemptylist_cases_thm),
  [],
  `((! :('a nonemptylist -> bool) -> bool) (\(n :'a nonemptylist).
   ((\/ ((? :('a -> bool) -> bool) (\(x :'a).
   (((= :'a nonemptylist -> 'a nonemptylist -> bool) $1)
   ((ONE :'a -> 'a nonemptylist) $0)))))
   ((? :('a nonemptylist -> bool) -> bool) (\(n' :'a nonemptylist).
   ((? :('a -> bool) -> bool) (\(x :'a).
   (((= :'a nonemptylist -> 'a nonemptylist -> bool) $2)
   (((MORE :'a -> 'a nonemptylist -> 'a nonemptylist) $0)
   $1)))))))))`),
 ((nonemptylist_induction_thm),
  [],
  `((! :(('a nonemptylist -> bool) -> bool) -> bool)
   (\(P :'a nonemptylist -> bool). ((==> ((/\
   ((! :('a -> bool) -> bool) (\(x :'a). ($1
   ((ONE :'a -> 'a nonemptylist) $0)))))
   ((! :('a nonemptylist -> bool) -> bool) (\(n :'a nonemptylist).
   ((==> ($1 $0)) ((! :('a -> bool) -> bool) (\(x :'a). ($2
   (((MORE :'a -> 'a nonemptylist -> 'a nonemptylist) $0) $1)))))))))
   ((! :('a nonemptylist -> bool) -> bool) (\(n :'a nonemptylist). ($1
   $0))))))`),
 ((nonemptylist_Axiom),
  [],
  `((! :(('a -> 'a1) -> bool) -> bool) (\(f0 :'a -> 'a1).
   ((! :(('a1 -> 'a -> 'a nonemptylist -> 'a1) -> bool) -> bool)
   (\(f1 :'a1 -> 'a -> 'a nonemptylist -> 'a1).
   ((?! :(('a nonemptylist -> 'a1) -> bool) -> bool)
   (\(fn :'a nonemptylist -> 'a1). ((/\ ((! :('a -> bool) -> bool)
   (\(x :'a). (((= :'a1 -> 'a1 -> bool) ($1
   ((ONE :'a -> 'a nonemptylist) $0))) ($3 $0)))))
   ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a nonemptylist -> bool) -> bool) (\(n :'a nonemptylist).
   (((= :'a1 -> 'a1 -> bool) ($2
   (((MORE :'a -> 'a nonemptylist -> 'a nonemptylist) $1) $0))) ((($3
   ($2 $0)) $1) $0)))))))))))))`)]
