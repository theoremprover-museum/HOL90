thid = (dijkstra, 942752089, 846451)
axioms = []
definitions =
[((ITER_WLP),
  [],
  `((/\ ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) (((((ITER_WLP 0) $3) $2) $1) $0)) ((==>
   (~ ($3 $0))) ($1 $0)))))))))))) ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) (((((ITER_WLP (SUC $4)) $3) $2) $1)
   $0)) ((==> ($3 $0)) ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) ((((ITER_WLP $4) $3) $2) $1)))
   $0))))))))))))))`),
 ((ITER_WP),
  [],
  `((/\ ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) (((((ITER_WP 0) $3) $2) $1) $0)) ((/\
   (~ ($3 $0))) ($1 $0)))))))))))) ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) (((((ITER_WP (SUC $4)) $3) $2) $1) $0))
   ((/\ ($3 $0)) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) ((((ITER_WP $4) $3) $2) $1)))
   $0))))))))))))))`),
 ((ITER),
  [],
  `((/\
   (((= :(((string -> num) -> bool) #
          ((string -> num) # (string -> num) -> bool) ->
         (string -> num) # (string -> num) -> bool) ->
         (((string -> num) -> bool) #
          ((string -> num) # (string -> num) -> bool) ->
         (string -> num) # (string -> num) -> bool) -> bool) (ITER 0))
   ((UNCURRY :(((string -> num) -> bool) ->
              ((string -> num) # (string -> num) -> bool) ->
              (string -> num) # (string -> num) -> bool) ->
              ((string -> num) -> bool) #
              ((string -> num) # (string -> num) -> bool) ->
              (string -> num) # (string -> num) -> bool)
   (\(b :(string -> num) -> bool).
   (\(c :(string -> num) # (string -> num) -> bool).
   ((UNCURRY :((string -> num) -> (string -> num) -> bool) ->
              (string -> num) # (string -> num) -> bool)
   (\(s :string -> num). (\(s' :string -> num). ((/\ (~ ($3 $1)))
   (((= :(string -> num) -> (string -> num) -> bool) $1) $0))))))))))
   ((! :(num -> bool) -> bool) (\(n :num).
   (((= :(((string -> num) -> bool) #
          ((string -> num) # (string -> num) -> bool) ->
         (string -> num) # (string -> num) -> bool) ->
         (((string -> num) -> bool) #
          ((string -> num) # (string -> num) -> bool) ->
         (string -> num) # (string -> num) -> bool) -> bool) (ITER
   (SUC $0)))
   ((UNCURRY :(((string -> num) -> bool) ->
              ((string -> num) # (string -> num) -> bool) ->
              (string -> num) # (string -> num) -> bool) ->
              ((string -> num) -> bool) #
              ((string -> num) # (string -> num) -> bool) ->
              (string -> num) # (string -> num) -> bool)
   (\(b :(string -> num) -> bool).
   (\(c :(string -> num) # (string -> num) -> bool).
   ((UNCURRY :((string -> num) -> (string -> num) -> bool) ->
              (string -> num) # (string -> num) -> bool)
   (\(s :string -> num). (\(s' :string -> num). ((/\ ($3 $1)) ((MK_SEQ
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $2) ((ITER $4)
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $3) $2))))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0)))))))))))))`),
 ((WLP1),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) ((WLP1
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) $1)) $0))
   ((! :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   ((==> ($3
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0))) ($2
   $0)))))))))))`),
 ((WP1),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) ((WP1
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) $1)) $0)) ((/\
   ((? :((string -> num) -> bool) -> bool) (\(s' :string -> num). ($3
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0)))))
   ((! :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   ((==> ($3
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0))) ($2
   $0))))))))))))`),
 ((WLP),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   (((= :((string -> num) -> bool) -> ((string -> num) -> bool) ->
         bool) (WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0)))
   ((WEAKEST :(((string -> num) -> bool) -> bool) ->
              (string -> num) -> bool) (\(p :(string -> num) -> bool).
   (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $0)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) $1))))))))))`),
 ((WP),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   (((= :((string -> num) -> bool) -> ((string -> num) -> bool) ->
         bool) (WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0)))
   ((WEAKEST :(((string -> num) -> bool) -> bool) ->
              (string -> num) -> bool) (\(p :(string -> num) -> bool).
   (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $0)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) $1))))))))))`),
 ((WEAKEST),
  [],
  `((! :((('a -> bool) -> bool) -> bool) -> bool)
   (\(P :('a -> bool) -> bool).
   (((= :('a -> bool) -> ('a -> bool) -> bool)
   ((WEAKEST :(('a -> bool) -> bool) -> 'a -> bool) $0))
   ((@ :(('a -> bool) -> bool) -> 'a -> bool) (\(p :'a -> bool). ((/\
   ($1 $0)) ((! :(('a -> bool) -> bool) -> bool) (\(p' :'a -> bool).
   ((==> ($2 $0)) (((WEAKER :('a -> bool) -> ('a -> bool) -> bool) $1)
   $0))))))))))`),
 ((WEAKER),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p' :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   (((= :bool -> bool -> bool)
   (((WEAKER :('a -> bool) -> ('a -> bool) -> bool) $1) $0))
   ((! :('a -> bool) -> bool) (\(s :'a). ((==> ($1 $0)) ($2
   $0)))))))))`),
 ((DET),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   (((= :bool -> bool -> bool) (DET $0))
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   ((! :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   ((! :((string -> num) -> bool) -> bool) (\(s'' :string -> num).
   ((==> ((/\ ($3
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $2) $1))) ($3
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $2) $0))))
   (((= :(string -> num) -> (string -> num) -> bool) $1)
   $0)))))))))))`)]
theorems =
[((WHILE_WLP),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_WHILE
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $2) $3))) $1))
   $0)) ((! :(num -> bool) -> bool) (\(n :num). (((((ITER_WLP $0) $3)
   $4) $2) $1))))))))))))`),
 ((WLP_ITER),
  [],
  `((! :(num -> bool) -> bool) (\(n :num).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) ((ITER $1)
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool))))
   (p :(string -> num) -> bool))) $0)) (((((ITER_WLP $1)
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool))
   (p :(string -> num) -> bool)) $0))))))`),
 ((FINITE_WHILE_WP_SUC),
  [],
  `(((= :bool -> bool -> bool) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) ((MK_FINITE_WHILE (SUC (n :num)))
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool))))
   (p :(string -> num) -> bool))) (s :string -> num)))
   ((((COND :bool -> bool -> bool -> bool)
   ((b :(string -> num) -> bool) (s :string -> num))) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_SEQ
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)) ((MK_FINITE_WHILE
   (n :num))
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool))))))
   (p :(string -> num) -> bool))) (s :string -> num)))
   ((p :(string -> num) -> bool) (s :string -> num))))`),
 ((FINITE_WHILE_WP_0),
  [],
  `(((= :bool -> bool -> bool) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) ((MK_FINITE_WHILE 0)
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool))))
   (p :(string -> num) -> bool))) (s :string -> num))) F)`),
 ((WHILE_WP),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool). ((==> (DET $0))
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_WHILE
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $2) $3))) $1))
   $0)) ((? :(num -> bool) -> bool) (\(n :num). (((((ITER_WP $0) $3)
   $4) $2) $1)))))))))))))`),
 ((WP_ITER),
  [],
  `((==> (DET (c :(string -> num) # (string -> num) -> bool)))
   ((! :(num -> bool) -> bool) (\(n :num).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) ((ITER $1)
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool))))
   (p :(string -> num) -> bool))) $0)) (((((ITER_WP $1)
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool))
   (p :(string -> num) -> bool)) $0)))))))`),
 ((DET_ITER),
  [],
  `((==> (DET (c :(string -> num) # (string -> num) -> bool)))
   ((! :(num -> bool) -> bool) (\(n :num). (DET ((ITER $0)
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)))))))`),
 ((ITER_UNIQUE),
  [],
  `((==> (DET (c :(string -> num) # (string -> num) -> bool)))
   ((! :(num -> bool) -> bool) (\(n :num).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   ((! :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   ((==> (((ITER $2)
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0)))
   ((! :(num -> bool) -> bool) (\(n' :num).
   ((! :((string -> num) -> bool) -> bool) (\(s'' :string -> num).
   ((==> (((ITER $1)
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $3) $0)))
   (((= :num -> num -> bool) $4) $1))))))))))))))`),
 ((WHILE_ITER),
  [],
  `(((= :bool -> bool -> bool) ((MK_WHILE
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) (s :string -> num))
   (s' :string -> num)))) ((? :(num -> bool) -> bool) (\(n :num).
   (((ITER $0)
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) (s :string -> num))
   (s' :string -> num))))))`),
 ((WHILE_ITER2),
  [],
  `((! :(num -> bool) -> bool) (\(n :num).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   ((! :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   ((==> (((ITER $2)
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0))) ((MK_WHILE
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0)))))))))`),
 ((WHILE_ITER1),
  [],
  `((==> ((MK_WHILE
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) (s :string -> num))
   (s' :string -> num)))) ((? :(num -> bool) -> bool) (\(n :num).
   (((ITER $0)
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) (s :string -> num))
   (s' :string -> num))))))`),
 ((ITER_CLAUSES),
  [],
  `((/\ (((= :bool -> bool -> bool) (((ITER 0)
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) (s :string -> num))
   (s' :string -> num)))) ((/\ (~ ((b :(string -> num) -> bool)
   (s :string -> num))))
   (((= :(string -> num) -> (string -> num) -> bool)
   (s :string -> num)) (s' :string -> num)))))
   (((= :bool -> bool -> bool) (((ITER (SUC (n :num)))
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) (s :string -> num))
   (s' :string -> num)))) ((/\ ((b :(string -> num) -> bool)
   (s :string -> num))) ((MK_SEQ
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)) ((ITER (n :num))
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)))))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) (s :string -> num))
   (s' :string -> num))))))`),
 ((IF2_WLP),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c' :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_IF2
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $3) $2)))) $1))
   $0)) ((((COND :bool -> bool -> bool -> bool)
   ((b :(string -> num) -> bool) $0)) ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $3) $1)) $0)) ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) $1)) $0)))))))))))`),
 ((IF2_WP),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c' :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_IF2
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $3) $2)))) $1))
   $0)) ((((COND :bool -> bool -> bool -> bool)
   ((b :(string -> num) -> bool) $0)) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $3) $1)) $0)) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) $1)) $0)))))))))))`),
 ((IF1_WLP),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_IF1
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $2) $3))) $1))
   $0)) ((((COND :bool -> bool -> bool -> bool) ($2 $0)) ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $3) $1)) $0)) ($1 $0)))))))))))`),
 ((IF1_WP),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_IF1
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $2) $3))) $1))
   $0)) ((((COND :bool -> bool -> bool -> bool) ($2 $0)) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $3) $1)) $0)) ($1 $0)))))))))))`),
 ((SEQ_WLP),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c' :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_SEQ
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $3) $2))) $1))
   $0)) ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $3) (WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) $1)))) $0))))))))))`),
 ((SEQ_WP),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c' :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool). ((==> (DET $2))
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_SEQ
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $3) $2))) $1))
   $0)) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $3) (WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) $1)))) $0)))))))))))`),
 ((ASSIGN_WLP),
  [],
  `((! :(string -> bool) -> bool) (\(x :string).
   ((! :(((string -> num) -> num) -> bool) -> bool)
   (\(f :(string -> num) -> num).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   (((= :((string -> num) -> bool) -> ((string -> num) -> bool) ->
         bool) (WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_ASSIGN
   (((, :string -> ((string -> num) -> num) ->
         string # ((string -> num) -> num)) $2) $1))) $0)))
   (\(s :string -> num). ($1 (((BND $3) ($2 $0)) $0))))))))))`),
 ((ASSIGN_WP),
  [],
  `((! :(string -> bool) -> bool) (\(x :string).
   ((! :(((string -> num) -> num) -> bool) -> bool)
   (\(f :(string -> num) -> num).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   (((= :((string -> num) -> bool) -> ((string -> num) -> bool) ->
         bool) (WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_ASSIGN
   (((, :string -> ((string -> num) -> num) ->
         string # ((string -> num) -> num)) $2) $1))) $0)))
   (\(s :string -> num). ($1 (((BND $3) ($2 $0)) $0))))))))))`),
 ((ABORT_WLP),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   (((= :((string -> num) -> bool) -> ((string -> num) -> bool) ->
         bool) (WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) MK_ABORT) $0)))
   (\(s :string -> num). T))))`),
 ((ABORT_WP),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   (((= :((string -> num) -> bool) -> ((string -> num) -> bool) ->
         bool) (WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) MK_ABORT) $0)))
   (\(s :string -> num). F))))`),
 ((SKIP_WLP),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   (((= :((string -> num) -> bool) -> ((string -> num) -> bool) ->
         bool) (WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) MK_SKIP) $0))) $0)))`),
 ((SKIP_WP),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   (((= :((string -> num) -> bool) -> ((string -> num) -> bool) ->
         bool) (WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) MK_SKIP) $0))) $0)))`),
 ((WLP_PROP4'),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool). ((==> (DET $0))
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) ((\/ ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $3)) $0)) ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $2)) $0))) ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) (\(s :string -> num). ((\/ ($4
   $0)) ($3 $0))))) $0)))))))))))`),
 ((WP_PROP4'),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool). ((==> (DET $0))
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) ((\/ ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $3)) $0)) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $2)) $0))) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) (\(s :string -> num). ((\/ ($4
   $0)) ($3 $0))))) $0)))))))))))`),
 ((WLP_PROP4),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num). ((==>
   ((\/ ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $3)) $0)) ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $2)) $0))) ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) (\(s :string -> num). ((\/ ($4
   $0)) ($3 $0))))) $0))))))))))`),
 ((WP_PROP4),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num). ((==>
   ((\/ ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $3)) $0)) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $2)) $0))) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) (\(s :string -> num). ((\/ ($4
   $0)) ($3 $0))))) $0))))))))))`),
 ((WLP_PROP3),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) ((/\ ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $3)) $0)) ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $2)) $0))) ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) (\(s :string -> num). ((/\ ($4
   $0)) ($3 $0))))) $0))))))))))`),
 ((WP_PROP3),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :bool -> bool -> bool) ((/\ ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $3)) $0)) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $2)) $0))) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) (\(s :string -> num). ((/\ ($4
   $0)) ($3 $0))))) $0))))))))))`),
 ((WLP_PROP2),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool). ((==>
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num). ((==>
   ($3 $0)) ($2 $0))))) ((! :((string -> num) -> bool) -> bool)
   (\(s :string -> num). ((==> ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $3)) $0)) ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $2)) $0)))))))))))`),
 ((WP_PROP2),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool). ((==>
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num). ((==>
   ($3 $0)) ($2 $0))))) ((! :((string -> num) -> bool) -> bool)
   (\(s :string -> num). ((==> ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $3)) $0)) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $2)) $0)))))))))))`),
 ((WLP_PROP1),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   (((= :((string -> num) -> bool) -> ((string -> num) -> bool) ->
         bool) (WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $0) (\(s :string -> num). F))))
   (\(s :string -> num). (~ ((? :((string -> num) -> bool) -> bool)
   (\(s' :string -> num). ($2
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0)))))))))`),
 ((WP_PROP1),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   (((= :((string -> num) -> bool) -> ((string -> num) -> bool) ->
         bool) (WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $0) (\(s :string -> num). F))))
   (\(s :string -> num). F))))`),
 ((MK_SPEC_WLP),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool). (((= :bool -> bool -> bool)
   (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0))))
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num). ((==>
   ($3 $0)) ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) $1)) $0)))))))))))`),
 ((T_SPEC_WP),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool). (((= :bool -> bool -> bool) (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0))))
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num). ((==>
   ($3 $0)) ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) $1)) $0)))))))))))`),
 ((WLP_WEAKEST),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool). ((==> (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0))))
   (((WEAKER :((string -> num) -> bool) ->
              ((string -> num) -> bool) -> bool) (WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0))) $2))))))))`),
 ((WP_WEAKEST),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool). ((==> (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0))))
   (((WEAKER :((string -> num) -> bool) ->
              ((string -> num) -> bool) -> bool) (WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0))) $2))))))))`),
 ((WLP_MK_SPEC),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool). ((==>
   ((? :((string -> num) -> bool) -> bool) (\(s :string -> num). ((WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) $1)) $0)))) (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0)))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0))))))))`),
 ((WP_T_SPEC),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool). ((==>
   ((? :((string -> num) -> bool) -> bool) (\(s :string -> num). ((WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) $1)) $0)))) (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0)))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0))))))))`),
 ((WLP_THM),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   (((= :((string -> num) -> bool) -> ((string -> num) -> bool) ->
         bool) (WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0))) (\(s :string -> num).
   ((! :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   ((==> ($3
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0))) ($2
   $0))))))))))`),
 ((WP_THM),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   (((= :((string -> num) -> bool) -> ((string -> num) -> bool) ->
         bool) (WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0))) (\(s :string -> num).
   ((/\ ((? :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   ($3
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0)))))
   ((! :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   ((==> ($3
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0))) ($2
   $0)))))))))))`),
 ((WLP_WLP1),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   (((= :((string -> num) -> bool) -> ((string -> num) -> bool) ->
         bool) (WLP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0))) (WLP1
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0)))))))`),
 ((WP_WP1),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   (((= :((string -> num) -> bool) -> ((string -> num) -> bool) ->
         bool) (WP
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0))) (WP1
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0)))))))`),
 ((WLP1_WEAKEST),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool). ((==> (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0))))
   (((WEAKER :((string -> num) -> bool) ->
              ((string -> num) -> bool) -> bool) (WLP1
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0))) $2))))))))`),
 ((WP1_WEAKEST),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool). ((==> (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0))))
   (((WEAKER :((string -> num) -> bool) ->
              ((string -> num) -> bool) -> bool) (WP1
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0))) $2))))))))`),
 ((WLP1_MK_SPEC),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool). (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (WLP1
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0)))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0)))))))`),
 ((WP1_T_SPEC),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool). (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (WP1
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0)))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0)))))))`),
 ((WEAKEST_UNIQUE),
  [],
  `((! :((('a -> bool) -> bool) -> bool) -> bool)
   (\(P :('a -> bool) -> bool). ((! :(('a -> bool) -> bool) -> bool)
   (\(p :'a -> bool). ((==> ((/\ ($1 $0))
   ((! :(('a -> bool) -> bool) -> bool) (\(p' :'a -> bool). ((==> ($2
   $0)) (((WEAKER :('a -> bool) -> ('a -> bool) -> bool) $1) $0))))))
   (((= :('a -> bool) -> ('a -> bool) -> bool) $0)
   ((WEAKEST :(('a -> bool) -> bool) -> 'a -> bool) $1)))))))`),
 ((WEAKEST_UNIQUE_LEMMA),
  [],
  `((! :((('a -> bool) -> bool) -> bool) -> bool)
   (\(P :('a -> bool) -> bool). ((! :(('a -> bool) -> bool) -> bool)
   (\(p1 :'a -> bool). ((! :(('a -> bool) -> bool) -> bool)
   (\(p2 :'a -> bool). ((==> ((/\ ((/\ ($2 $1))
   ((! :(('a -> bool) -> bool) -> bool) (\(p' :'a -> bool). ((==> ($3
   $0)) (((WEAKER :('a -> bool) -> ('a -> bool) -> bool) $2) $0))))))
   ((/\ ($2 $0)) ((! :(('a -> bool) -> bool) -> bool)
   (\(p' :'a -> bool). ((==> ($3 $0))
   (((WEAKER :('a -> bool) -> ('a -> bool) -> bool) $1) $0)))))))
   (((= :('a -> bool) -> ('a -> bool) -> bool) $1) $0))))))))`),
 ((WEAKER_ANTISYM),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p1 :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(p2 :'a -> bool). ((==> ((/\
   (((WEAKER :('a -> bool) -> ('a -> bool) -> bool) $1) $0))
   (((WEAKER :('a -> bool) -> ('a -> bool) -> bool) $0) $1)))
   (((= :('a -> bool) -> ('a -> bool) -> bool) $1) $0))))))`)]
