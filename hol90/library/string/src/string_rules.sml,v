head	1.2;
access;
symbols
	HOL97:1.2.0.4
	bpHOL97:1.2
	hol90_9_alpha:1.2
	hol90_pre8_for_multiple_compilers:1.2.0.2
	hol90_pre8_after_donalds_separate_compilation_changes:1.2
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.2
date	95.10.31.15.29.03;	author drs1004;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	95.10.16.13.31.05;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.31.05;	author rjb;	state Exp;
branches;
next	;

1.2.4.1
date	97.07.15.12.51.17;	author kxs;	state dead;
branches;
next	;


desc
@@


1.2
log
@Changes by DRS for separate compilation using NJSML 108.5/CM
@
text
@(* =====================================================================*)
(* FILE		: string_rules.sml   				        *)
(* DESCRIPTION  : Defines useful derived rules for strings.		*)
(*									*)
(* 		  Assumes string.th a parent of current theory.		*)
(*									*)
(* AUTHOR	: T. Melham						*)
(* DATE		: 87.10.09						*)
(*									*)
(* RENAMED	: M. Gordon (from string.ml)				*)
(* DATE		: 23 March 1989						*)
(*									*)
(* REVISED	: 90.10.27 (melham)					*)
(* TRANSLATED   : Konrad Slind, University of Calgary                   *)
(* =====================================================================*)

functor STRING_RULES(val string_CONV : Abbrev.conv
                     val ascii_EQ_CONV : Abbrev.conv) 
       :sig 
         val string_CONV : Abbrev.conv
         val ascii_EQ_CONV : Abbrev.conv
         val string_EQ_CONV : Abbrev.conv
        end =
struct
open Core; (* open up all of the HOL 0/1 Core - could be replaced by more *)
           (* explicit opens to avoid endless recompilation of libraries  *)
           (* during system development                                   *)

fun STRING_RULES_ERR{function,message} = 
             HOL_ERR{origin_structure = "String_rules",
                     origin_function = function,
                     message = message};
open Rsyntax;
val string_CONV = string_CONV;
val ascii_EQ_CONV = ascii_EQ_CONV;
(* --------------------------------------------------------------------- *)
(* string_EQ_CONV : determines if two string constants are equal.	 *)
(*									 *)
(* string_EQ_CONV (--`"abc" = "abc"`--) ---> (--`("abc" = "abc") = T`--) *)
(* string_EQ_CONV (--`"abc" = "abx"`--) --->(--`("abc" = "abx") = F`--)  *)
(* string_EQ_CONV (--`"abc" = "ab"`--)  --->(--`("abc" = "ab") = F`--)	 *)
(*									 *)
(* ...  etc								 *)
(* --------------------------------------------------------------------- *)

infix 5 |->;
fun (r1 |-> r2) = {redex=r1, residue = r2};
local
val Estr = --`""`--
and a = genvar (==`:ascii`==)
and s = genvar (==`:string`==)
val Nth' = EQF_INTRO(SPECL [s,a] (theorem "string" "NOT_STRING_EMPTY")) 
val pat = mk_eq{lhs= (mk_eq{lhs=Estr, rhs=s}), rhs= (--`F`--)}
and b = genvar (==`:bool`==)
val a' = genvar (==`:ascii`==)
and s' = genvar (==`:string`==)
val S11 = SPECL [a,s,a',s'] (theorem "string" "STRING_11")
val MKeq = let val c = --`$= :string->string->bool`--
           in fn t1 => fn t2 => MK_COMB(AP_TERM c t1,t2)
           end
(* Changed: the double quotes surrounding a string are not
   part of the string; they're only concrete syntax.
KLS August1,1991.
   Changed back (sheepishly): the double quotes surrounding a string are
   absolutely necessary. KLS (Nov. 1992)
*)
fun check c = #Tyop (dest_type(type_of c)) = "string"
val Tand = CONJUNCT1 (SPEC b AND_CLAUSES)
val mkC =  AP_THM o (AP_TERM (--`/\`--)) 
fun conv l r = 
     if (l=Estr) 
     then let 
	      (* thm is something like
	         |- "abc" = STRING (ASCII F T T F F F F T) "bc" *)
              val thm = String_conv.string_CONV r 
              (* A is ASCII b0 ... b7, which indicates the first char
                in string, S is the rest of the string *)
	      val {Rator, Rand=S} = (dest_comb (rand(concl thm)))
              val A = rand Rator
          in
	  (* result of SUBST below is a thm: |- ("" = <r>) = F *)
    	  SUBST [{thm=SYM thm, var=s}] pat (INST [{redex=a, residue=A},
						  {redex=s, residue=S}] Nth')
          end
     else if (r=Estr) 
          then let val thm = String_conv.string_CONV l 
	           val {Rator, Rand=S} = dest_comb (rand(concl thm))
		   val A = rand Rator
    	           (* result of SUBST below is a thm: |- ("" = <l>) = F *)
		   val sth = SUBST [{thm=SYM thm, var=s}]
		                   pat
				   (INST [(a |-> A), (s |-> S)] Nth') 
               in
	       (* result of TRANS below is a thm: |- (<l> = "") = F *)
	       TRANS (SYM(SYM_CONV (lhs(concl sth)))) sth 
               end
          else let (* a1 = ASCII b0 ... b7, indicating first char of l
		      a2 = ASCII b0' ... b7', indicating first char of r
		      s1 = rest of l, s2 = rest of r *)
		   val th1 = String_conv.string_CONV l 
                   and th2 = String_conv.string_CONV r 
		   val {Rator, Rand=s1} = (dest_comb(rand(concl th1))) 
		   val a1 = rand Rator
                   val {Rator, Rand=s2} = (dest_comb(rand(concl th2))) 
		   val a2 = rand Rator
		   (* ooth is something like 
		     |- (<l> = <r>) = (<a1> = <a2>) /\ (<s1> = <s2>) *)
                   val ooth = TRANS (MKeq th1 th2) 
                                    (INST [(a |-> a1), (a' |-> a2),
					   (s |-> s1), (s' |-> s2)] S11) 
               in
               if (a1=a2) 
               then let (* thm1 = |- (<l> = <r>) = T /\ (<s1> = <s2>),
			   thm2 = |- (<l> = <r>) = <s1> = <s2> *)
			val thm1 = TRANS ooth (mkC(EQT_INTRO(REFL a1))
                                                  (mk_eq{lhs=s1, rhs=s2}))
                        val sub1 = (b |-> mk_eq{lhs=s1, rhs=s2})
                        val thm2 = TRANS thm1 (INST [sub1] Tand)
                    in
		    (* result of TRANS below is |- (<l> = <r>) = F *)
	            TRANS thm2 (conv s1 s2) 
                    end
               else let (* th1 = .|- <a1> = <a2>
			   th2 = .|- F *)
			val eq1 = mk_eq {lhs=l,rhs=r}
			val th1 = CONJUNCT1 (EQ_MP ooth (ASSUME (eq1)))
			val eq2 = mk_eq {lhs=a1, rhs=a2}
                        val th2 = EQ_MP (Ascii.ascii_EQ_CONV (eq2)) th1 
                    in
		    (* result of EQF_INTRO below is |- (<l> = <r>) = F *)
                    EQF_INTRO(NOT_INTRO(DISCH eq1 th2))
                    end
               end
in
fun string_EQ_CONV tm =
   let val {lhs, rhs} = (dest_eq tm)
       val _ = assert check lhs;
       val _ = assert check rhs;
   in if (lhs=rhs) 
      then EQT_INTRO(REFL lhs) 
      else conv lhs rhs
   end
   handle _ => raise STRING_RULES_ERR{function = "string_EQ_CONV",
                                      message = ""}
end;


(* ----- TESTS ---
string_EQ_CONV (--`"" = ""`--);
string_EQ_CONV (--`"z" = ""`--);
string_EQ_CONV (--`"" = "f"`--);
string_EQ_CONV (--`"abc" = "abc"`--);
string_EQ_CONV (--`"a" = "a"`--);
string_EQ_CONV (--`"abc" = "abx"`--);
string_EQ_CONV (--`"abc" = "ab"`--);
string_EQ_CONV (--`"ab" = "abc"`--);
string_EQ_CONV (--`"xab" = "abc"`--);
string_EQ_CONV 
      (--`"abcdefghijklmnopqrstuvwxyz" = "abcdefghijklmnopqrstuvwxyz"`--);
string_EQ_CONV
      (--`"abcdefghijklmnopqrstuvwxyz" = "abcdefghijklmnopqrstuvwxyA"`--);

--------------*)

end; (* STRING_RULES *)


structure String_rules = 
          STRING_RULES(val string_CONV = String_conv.string_CONV
                       val ascii_EQ_CONV = Ascii.ascii_EQ_CONV);
@


1.2.4.1
log
@The string library now loads under CM. The entrypoint is the structure
"stringLib";
@
text
@@


1.1
log
@Initial revision
@
text
@d17 2
a18 2
functor STRING_RULES(val string_CONV : conv
                     val ascii_EQ_CONV : conv) 
d20 3
a22 3
         val string_CONV : conv
         val ascii_EQ_CONV : conv
         val string_EQ_CONV : conv
d25 4
a170 1
open String_rules;
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
