head	1.1;
access;
symbols
	HOL97:1.1.2.2.0.2
	bpHOL97:1.1.2.2
	hol90_9_alpha:1.1.2.2
	TFL_1:1.1.2.1
	hol90_pre8_for_multiple_compilers:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	96.06.29.15.07.34;	author rjb;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.06.29.15.07.35;	author rjb;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	96.08.05.15.39.26;	author rjb;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file README was initially added on branch hol90_pre8_for_multiple_compilers.
@
text
@@


1.1.2.1
log
@TFL version 1 for HOL: A well-founded recursive function definition package.
@
text
@a0 57
            TFL-HOL Initial Release
          ----------------------------


To make the system, perform the following 2 commands in the shell:

    make_theories <hol>
    <hol> < sys.sml

where <hol> is a pathname for a hol90 executable. This will first build
3 theories in this directory, and then build and dump the TFL system in
the file "hol90.tfl". 

Some examples can be found in the files "test.sml" and "test1.sml". More
extended developments may be found in the "examples" directory. 

See the file "doc.txt" for further information about the Tfl entrypoints. 

Some Tfl support that is more widely usable are

    1. There is a conditional/contextual rewriter in rw.sig and rw.sml. 
       This is very helpful in shortening proofs. Many of the examples
       make use of it.

    2. The structure Hol_datatype provides a centralized repository 
       of facts about datatypes that gets incrementally adjusted with
       each new datatype definition.

    3. The structure "Q". This folds quotation parsing into certain
       popular entrypoints. Because of this "context-sensitivity"
       interacting with quotations can be more pleasant in some cases.
       For example, type constraints don't have to be given as often. 
       See the file "mk_wf.sml" for examples.


---------------------------------------------------------------------------

              Patches and Bugfixes to Previous Release

* Several bugs in the rewriter have been fixed. The result is that
  normal rewriting, as well as termination-condition extraction, is
  faster and apt to return correct answers in more situations. In particular,
  TC extraction for nested recursions involving "let" was faulty.

* Michael Norrish pointed out a non-portabilism in the source: in rw.sml, I 
  was using the identifier "Term" as a term parser. This has been fixed.

* The termination relation for the "unify" example is more apt to be 
  correct.

* I added a new example - the "select" algorithm. This is fairly demanding on
  the machinery of TFL, so I included it even though I haven't proved that it 
  terminates, or that it is correct.



Please mail any problems to slind@@informatik.tu-muenchen.de.
@


1.1.2.2
log
@Updated to TFL release 4.
@
text
@d1 4
d14 2
a15 3
Some examples can be found in the files "test.sml", "test1.sml", and
"test2.sml". More extended developments may be found in the "examples"
directory.
d19 1
a19 1
Some Tfl support that is more widely usable:
d35 21
@
