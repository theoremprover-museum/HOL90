head	1.5;
access;
symbols
	HOL97:1.2.2.1.0.2
	bpHOL97:1.2.2.1
	hol90_9_alpha:1.2.2.1
	hol90_pre8_for_multiple_compilers:1.2.0.2
	hol90_pre8_after_donalds_separate_compilation_changes:1.2
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.5
date	96.02.08.00.36.38;	author drs1004;	state Exp;
branches;
next	1.4;

1.4
date	96.01.04.13.49.06;	author drs1004;	state Exp;
branches;
next	1.3;

1.3
date	95.12.18.11.36.45;	author drs1004;	state Exp;
branches;
next	1.2;

1.2
date	95.10.31.15.05.38;	author drs1004;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	95.10.16.13.30.19;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.30.19;	author rjb;	state Exp;
branches;
next	;

1.2.2.1
date	96.06.25.15.47.17;	author rjb;	state Exp;
branches
	1.2.2.1.2.1;
next	;

1.2.2.1.2.1
date	97.06.11.17.50.39;	author kxs;	state Exp;
branches;
next	1.2.2.1.2.2;

1.2.2.1.2.2
date	97.07.11.15.16.28;	author kxs;	state Exp;
branches;
next	;


desc
@@


1.5
log
@New theory mechanism, code reorganisation and other enhancements by Don Syme.
@
text
@(* ===================================================================== *)
(* FILE          : Type_def_support.sml                                  *)
(* DESCRIPTION   : Routines supporting the definition of types.          *)
(*                 Translated from hol88.                                *)
(*                                                                       *)
(* AUTHOR        : (c) Tom Melham, University of Cambridge               *)
(* TRANSLATOR    : Konrad Slind, University of Calgary                   *)
(* DATE          : September 11, 1991                                    *)
(* ===================================================================== *)


structure Type_def_support : Type_def_support_sig =
struct
    open Lib Parse Rterms;
       infix |->
    open Drule;
	
    val ERR = Exception.ERR "Type_def_support";
	
    val WRAP_ERR = Exception.WRAP_ERR "Type_def_support";

val ABS_REP_THM = 
   let val th1 = ASSUME (--`?rep:'b->'a. TYPE_DEFINITION P rep`--) 
       and th2 = MK_EXISTS (SPEC (--`P:'a->bool`--) Boolean.TYPE_DEFINITION)
       val def = EQ_MP th2 th1
       val asm = ASSUME (#Body(dest_exists(concl def)))
       val (asm1,asm2)  = CONJ_PAIR asm
       val rep_eq = let val th1 = DISCH (--`a:'b=a'`--)
                                        (AP_TERM (--`rep:'b->'a`--) 
                                                 (ASSUME (--`a:'b=a'`--))) 
                    in
                    IMP_ANTISYM_RULE (SPECL [(--`a:'b`--),(--`a':'b`--)] asm1)
                                     th1
                    end
       val ABS = (--`\r:'a. @@a:'b. r = rep a`--)
       val absd =  RIGHT_BETA (AP_THM (REFL ABS) (--`rep (a:'b):'a`--))
       val lem = SYM(SELECT_RULE(EXISTS ((--`?a':'b.a=a'`--),(--`a:'b`--))
                                        (REFL (--`a:'b`--))))
       val TH1 = GEN (--`a:'b`--)
                     (TRANS(TRANS absd (SELECT_EQ (--`a':'b`--) rep_eq)) lem)
       val t1 = SELECT_RULE(EQ_MP (SPEC (--`r:'a`--) asm2)
                                  (ASSUME (--`(P:'a->bool) r`--)))
       val absd2 =  RIGHT_BETA (AP_THM (REFL ABS) (--`r:'a`--))
       val imp1 = DISCH (--`(P:'a->bool) r`--) (SYM (SUBS [SYM absd2] t1))
       val t2 = EXISTS ((--`?a:'b. r:'a = rep a`--), (--`^ABS r`--)) 
	               (SYM(ASSUME (--`rep(^ABS (r:'a):'b) = r`--)))
       val imp2 = DISCH (--`rep(^ABS (r:'a):'b) = r`--) 
     		        (EQ_MP (SYM (SPEC (--`r:'a`--) asm2)) t2)
       val TH2 = GEN (--`r:'a`--) (IMP_ANTISYM_RULE imp1 imp2)
       val CTH = CONJ TH1 TH2
       val ath = subst [{redex = ABS, residue = --`abs:'a->'b`--}] (concl CTH)
       val eth1 = EXISTS ((--`?abs:'a->'b. ^ath`--), ABS) CTH
       val eth2 = EXISTS ((--`?rep:'b->'a. ^(concl eth1)`--),
                          (--`rep:'b->'a`--)) eth1
       val result = DISCH (concl th1) (CHOOSE ((--`rep:'b->'a`--),def) eth2)
   in
   optimize_thm (GEN (--`P:'a->bool`--) result)
   end
   handle e => Exception.Raise e;


(* --------------------------------------------------------------------- *)
(* NAME: define_new_type_bijections 					*)
(*									*)
(* DESCRIPTION: define isomorphism constants based on a type definition.*)
(*									*)
(* USAGE: define_new_type_bijections name ABS REP tyax                  *)
(*									*)
(* ARGUMENTS: tyax -- a type-defining axiom of the form returned by	*)
(*		     new_type_definition. For example:			*)
(*									*)
(* 			?rep. TYPE_DEFINITION P rep			*)
(*									*)
(*            ABS  --- the name of the required abstraction function    *)
(*									*)
(*            REP  --- the name of the required representation function *)
(*									*)
(*            name --- the name under which the definition is stored    *)
(*									*)
(* SIDE EFFECTS:    Introduces a definition for two constants `ABS` and *)
(*                  (--`REP`--) by the constant specification:          *)
(*									*)
(*  		   |- ?ABS REP. (!a. ABS(REP a) = a) /\                 *)
(*                               (!r. P r = (REP(ABS r) = r)            *)
(*									*)
(*                  The resulting constant specification is stored under*)
(*                  the name given as the first argument.               *)
(*									*)
(* FAILURE: if    1) ABS or REP are already constants.                  *)
(*                2) not in draft mode.                                 *)
(*                3) input theorem of wrong form.			*)
(*									*)
(* RETURNS: The defining property of the representation and abstraction *)
(*          functions, given by:                                        *)
(*             								*)
(*           |- (!a. ABS(REP a) = a) /\ (!r. P r = (REP(ABS r) = r)   	*)
(* ---------------------------------------------------------------------*)

val define_new_type_bijections =
let
    val alpha = ==`:'a`==
    val beta = ==`:'b`==
    fun ty_subst ty1 ty2 = [beta |-> ty1,alpha |-> ty2]
in fn {ABS,REP,tyax} =>
   if not(null (hyp tyax)) 
   then ERR("define_new_type_bijections",
                      "input theorem must have no assumptions")
   else let val (_,[P,rep]) = strip_comb(#Body(dest_exists(concl tyax)))
            val {Args=[a,r],...} = dest_type(type_of rep)
            val eth = MP (SPEC P (INST_TYPE (ty_subst a r) ABS_REP_THM)) tyax
        in Extension.new_specification ([REP,ABS],eth)
        end
        handle e => WRAP_ERR("define_new_type_bijections",e)
end
handle e => Exception.Raise e;


(* ---------------------------------------------------------------------*)
(* NAME: prove_rep_fn_one_one	 					*)
(*									*)
(* DESCRIPTION: prove that a type representation function is one-to-one.*)
(*									*)
(* USAGE: if th is a theorem of the kind returned by the ML function	*)
(*        define_new_type_bijections:					*)
(*									*)
(*           |- (!a. ABS(REP a) = a) /\ (!r. P r = (REP(ABS r) = r)   	*)
(*									*)
(*	 then prove_rep_fn_one_one th will prove and return a theorem	*)
(*	 stating that the representation function REP is one-to-one:	*)
(*									*)
(*	    |- !a a'. (REP a = REP a') = (a = a')			*)
(*									*)
(* ---------------------------------------------------------------------*)


fun prove_rep_fn_one_one th = 
   let val thm = CONJUNCT1 th
       val {Body, ...} = dest_forall(concl thm)
       val {Rator = A, Rand} = dest_comb(lhs Body)
       val {Rator = R, ...} = dest_comb Rand
       val {Args = [aty,rty],...} = Type.dest_type (type_of R)
       val a = mk_primed_var{Name = "a", Ty = aty} 
       val a' = variant [a] a
       val a_eq_a' = mk_eq{lhs = a, rhs = a'}
       and Ra_eq_Ra' = mk_eq{lhs = mk_comb{Rator = R, Rand = a},
                             rhs = mk_comb{Rator = R, Rand = a'}}
       val th1 = AP_TERM A (ASSUME Ra_eq_Ra')
       val ga1 = genvar aty
       and ga2 = genvar aty
       val th2 = SUBST [{var=ga1,thm=SPEC a thm},{var=ga2,thm=SPEC a' thm}]
                       (mk_eq{lhs = ga1, rhs = ga2}) th1
       val th3 = DISCH a_eq_a' (AP_TERM R (ASSUME a_eq_a'))
   in
   GEN a (GEN a' (IMP_ANTISYM_RULE (DISCH Ra_eq_Ra' th2) th3))
   end
   handle e => WRAP_ERR("prove_rep_fn_one_one",e);

(* --------------------------------------------------------------------- *)
(* NAME: prove_rep_fn_onto	 					*)
(*									*)
(* DESCRIPTION: prove that a type representation function is onto. 	*)
(*									*)
(* USAGE: if th is a theorem of the kind returned by the ML function	*)
(*        define_new_type_bijections:					*)
(*									*)
(*           |- (!a. ABS(REP a) = a) /\ (!r. P r = (REP(ABS r) = r)   	*)
(*									*)
(*	 then prove_rep_fn_onto th will prove and return a theorem	*)
(*	 stating that the representation function REP is onto:		*)
(*									*)
(*	    |- !r. P r = (?a. r = REP a)				*)
(*									*)
(* --------------------------------------------------------------------- *)

fun prove_rep_fn_onto th = 
   let val [th1,th2] = CONJUNCTS th
       val {Bvar,Body} = dest_forall(concl th2)
       val {rhs = eq, ...} = dest_eq Body
       val {Rator = RE, Rand = ar} = dest_comb(lhs eq) 
       val a = mk_primed_var {Name = "a", Ty = type_of ar}
       val sra = mk_eq{lhs = Bvar, rhs = mk_comb{Rator = RE, Rand = a}}
       val ex = mk_exists{Bvar = a, Body = sra}
       val imp1 = EXISTS (ex,ar) (SYM(ASSUME eq))
       val v = genvar (type_of Bvar) 
       and A = rator ar 
       and ass = AP_TERM RE (SPEC a th1)
       val th = SUBST[{var = v, thm = SYM(ASSUME sra)}]
                     (mk_eq{lhs = mk_comb{Rator = RE, 
                                          Rand = mk_comb{Rator = A, Rand = v}},
                            rhs = v})
                     ass
       val imp2 = CHOOSE (a,ASSUME ex) th
       val swap = IMP_ANTISYM_RULE (DISCH eq imp1) (DISCH ex imp2)
   in
   GEN Bvar (TRANS (SPEC Bvar th2) swap)
   end
   handle e => WRAP_ERR("prove_rep_fn_onto",e);

(* ---------------------------------------------------------------------*)
(* NAME: prove_abs_fn_onto	 					*)
(*									*)
(* DESCRIPTION: prove that a type absstraction function is onto. 	*)
(*									*)
(* USAGE: if th is a theorem of the kind returned by the ML function	*)
(*        define_new_type_bijections:					*)
(*									*)
(*           |- (!a. ABS(REP a) = a) /\ (!r. P r = (REP(ABS r) = r)   	*)
(*									*)
(*	 then prove_abs_fn_onto th will prove and return a theorem	*)
(*	 stating that the abstraction function ABS is onto:		*)
(*									*)
(*	    |- !a. ?r. (a = ABS r) /\ P r				*)
(*									*)
(* ---------------------------------------------------------------------*)

fun prove_abs_fn_onto th = 
   let val [th1,th2] = CONJUNCTS th
       val {Bvar = bv_th1,Body} = dest_forall(concl th1)
       val {Rator = A,Rand} = dest_comb(lhs Body)
       val {Rator = R,...} = dest_comb Rand
       val rb = mk_comb{Rator = R, Rand = bv_th1}
       val bth1 = SPEC bv_th1 th1
       val thm1 = EQT_ELIM(TRANS (SPEC rb th2) (EQT_INTRO (AP_TERM R bth1)))
       val thm2 = SYM bth1
       val {Bvar = r, Body} = dest_forall(concl th2)
       val P = rator(lhs Body)
       val ex = mk_exists{Bvar = r,
                          Body=mk_conj{conj1=mk_eq{lhs = bv_th1,
                                                   rhs = mk_comb{Rator = A,
                                                                 Rand = r}},
                                       conj2 = mk_comb{Rator = P, Rand = r}}}
   in
   GEN bv_th1 (EXISTS(ex,rb) (CONJ thm2 thm1))
   end
   handle e => WRAP_ERR("prove_abs_fn_onto",e);
    

(* ---------------------------------------------------------------------*)
(* NAME: prove_abs_fn_one_one	 					*)
(*									*)
(* DESCRIPTION: prove that a type abstraction function is one-to-one. 	*)
(*									*)
(* USAGE: if th is a theorem of the kind returned by the ML function	*)
(*        define_new_type_bijections:					*)
(*									*)
(*           |- (!a. ABS(REP a) = a) /\ (!r. P r = (REP(ABS r) = r)   	*)
(*									*)
(*	 then prove_abs_fn_one_one th will prove and return a theorem	*)
(*	 stating that the abstraction function ABS is one-to-one:	*)
(*									*)
(*	    |- !r r'. P r ==>						*)
(*		      P r' ==>						*)
(*		      (ABS r = ABS r') ==> (r = r')			*)
(*									*)
(* ---------------------------------------------------------------------*)

fun prove_abs_fn_one_one th = 
   let val [th1,th2] = CONJUNCTS th
       val {Bvar = r, Body} = dest_forall(concl th2)
       val P = rator(lhs Body)
       val {Rator = A,Rand} = dest_comb(lhs(#Body(dest_forall(concl th1))))
       val R = rator Rand
       val r' = variant [r] r
       val r_eq_r' = mk_eq {lhs = r, rhs = r'}
       val Pr = mk_comb{Rator = P, Rand = r}
       val Pr' = mk_comb{Rator = P, Rand = r'}
       val as1 = ASSUME Pr
       and as2 = ASSUME Pr'
       val t1 = EQ_MP (SPEC r th2) as1 
       and t2 = EQ_MP (SPEC r' th2) as2
       val eq = mk_eq{lhs = mk_comb{Rator = A, Rand = r},
                      rhs = mk_comb{Rator = A, Rand = r'}}
       val v1 = genvar(type_of r) 
       and v2 = genvar(type_of r)
       val i1 = DISCH eq (SUBST [{var = v1, thm = t1},{var = v2, thm = t2}] 
                                (mk_eq{lhs = v1, rhs = v2}) 
                                (AP_TERM R (ASSUME eq))) 
       and i2 = DISCH r_eq_r' (AP_TERM A (ASSUME r_eq_r'))
       val thm = IMP_ANTISYM_RULE i1 i2
       val disch =  DISCH Pr (DISCH Pr' thm)
   in
   GEN r (GEN r' disch)
   end
   handle e => WRAP_ERR("prove_abs_fn_one_one",e);

end; (* Type_def_support *)
@


1.4
log
@Added simplifier components, added drule files, added MK_ABS_CONV, better error messages
@
text
@d14 7
a20 7
(* open Base_logic - no longer needed DRS *)
open Theory
open Thm
open Term
open Dsyntax
open Term_io.Parse;
open Drule;
a21 4
val ERR = Exception.ERR "Type_def_support";

val WRAP_ERR = Exception.WRAP_ERR "Type_def_support";

d57 1
a57 1
   GEN (--`P:'a->bool`--) result
a100 8
    fun is_axiom str = 
      case (Lib.assoc1 str (axioms (current_theory())))
        of NONE => false
         | (SOME _) => true
    fun is_definition str = 
      case (Lib.assoc1 str (definitions (current_theory())))
        of NONE => false
         | (SOME _) => true
d103 3
a105 10
    fun ty_subst ty1 ty2 = [{redex = beta, residue = ty1},
                            {redex = alpha, residue = ty2}]
in fn {name,ABS,REP,tyax} =>
   if (not(draft_mode()))
   then ERR("define_new_type_bijections", "not in draft mode")
   else if (is_axiom name orelse (is_definition name)) 
   then ERR
                ("define_new_type_bijections",
                 ("\""^name^"\" already an axiom or definition"))
   else if not(null (hyp tyax)) 
d108 4
a111 13
   else if (is_constant ABS) 
   then ERR("define_new_type_bijections",(ABS^" is already a constant"))
   else if (is_constant REP) 
   then ERR("define_new_type_bijections",(REP^" is already a constant"))
   else let val (_,[P,rep]) = strip_comb
                                (#Body(dest_exists
                                         (concl tyax)))
            val {Args=[a,r],...} = Type.dest_type
                                           (type_of rep)
            val eth = MP (SPEC P (INST_TYPE (ty_subst a r)
                                            ABS_REP_THM))
                         tyax
        in Const_spec.new_specification (name,[REP,ABS],eth)
d135 1
@


1.3
log
@Preterm and other changes, see 7.changes
@
text
@d139 1
a139 5
        in
        Const_spec.new_specification 
          {name = name, sat_thm = eth,
           consts =[{fixity=Prefix,const_name=REP},
                    {fixity=Prefix,const_name=ABS}]}
@


1.2
log
@First phase of hol90.8 development.  hol90 now compiles using NJSML-CM
108.5, with separate compilation of libraries.  System dependencies
have been isolated in the makefiles and "portable.sml".

This involved a large number of enhancments to the source files,
most of which are documented in the 7.changes file (or will be shortly).
See also the correpsonding email corrspondence between RJB, KLS, TFM,
JRH and DRS that happened during this development.
@
text
@d22 1
a22 4
fun TYPE_DEF_SUPPORT_ERR{function,message} =
    Exception.HOL_ERR{origin_structure = "Type_def_support",
		      origin_function = function,
		      message = message}
d24 2
d62 2
a63 1
   end;
d103 15
a117 15
local
fun is_axiom str = 
   case (Lib.assoc1 str (axioms (current_theory())))
     of NONE => false
      | (SOME _) => true
fun is_definition str = 
   case (Lib.assoc1 str (definitions (current_theory())))
     of NONE => false
      | (SOME _) => true
val alpha = ==`:'a`==
val beta = ==`:'b`==
fun ty_subst ty1 ty2 = [{redex = beta, residue = ty1},
                        {redex = alpha, residue = ty2}]
in
fun define_new_type_bijections{name,ABS,REP,tyax} =
d119 1
a119 2
   then raise TYPE_DEF_SUPPORT_ERR{function = "define_new_type_bijections",
                                   message = "not in draft mode"}
d121 28
a148 40
        then raise TYPE_DEF_SUPPORT_ERR
                     {function = "define_new_type_bijections",
                      message = ("\""^name^
				 "\" already an axiom or definition")}
        else if not(null (hyp tyax)) 
             then raise TYPE_DEF_SUPPORT_ERR
                          {function = "define_new_type_bijections",
                           message = "input theorem must have no assumptions"}
             else if (is_constant ABS) 
                  then raise TYPE_DEF_SUPPORT_ERR
                               {function = "define_new_type_bijections",
                                message = (ABS^" is already a constant")}
                  else if (is_constant REP) 
                       then raise TYPE_DEF_SUPPORT_ERR
                                    {function = "define_new_type_bijections",
                                     message = (REP^" is already a constant")}
                       else let val (_,[P,rep]) = strip_comb
                                                    (#Body(dest_exists
                                                             (concl tyax)))
                                val {Args=[a,r],...} = Type.dest_type
                                                               (type_of rep)
                                val eth = MP (SPEC P (INST_TYPE (ty_subst a r)
                                                                ABS_REP_THM))
                                             tyax
                            in
                            Const_spec.new_specification 
                              {name = name, sat_thm = eth,
                               consts =[{fixity=Prefix,const_name=REP},
                                        {fixity=Prefix,const_name=ABS}]}
                            end
                            handle (e as Exception.HOL_ERR
				        {origin_structure = "Type_def_support",
					 origin_function =
					   "define_new_type_bijections",...})
                                   => raise e
                                 | _ => raise TYPE_DEF_SUPPORT_ERR
                                             {function =
					      "define_new_type_bijections",
					      message = ""}
end;
d187 1
a187 2
   handle _ => raise TYPE_DEF_SUPPORT_ERR{function = "prove_rep_fn_one_one",
					  message = ""};
d228 1
a228 2
   handle _ => raise TYPE_DEF_SUPPORT_ERR{function = "prove_rep_fn_onto",
					  message = ""};
d266 1
a266 2
   handle _ => raise TYPE_DEF_SUPPORT_ERR{function = "prove_abs_fn_onto",
					  message = ""};
d315 1
a315 2
   handle _ => raise TYPE_DEF_SUPPORT_ERR{function = "prove_abs_fn_one_one",
					  message = ""};
@


1.2.2.1
log
@The core of hol90.9.alpha now builds successfully with SML/NJ 109,
SML/NJ 108.5 (using CM), SML/NJ 0.93, and Poly/ML 3.0.
I have not yet tried rebuilding the theory files.
@
text
@a14 1
open Lib;
@


1.2.2.1.2.1
log
@Various updates have been made in order to build on top of SML/NJ 109.26.
@
text
@d20 1
a20 1
open Parse;
@


1.2.2.1.2.2
log
@Minor changes to make HOL CM-friendly.
@
text
@d14 1
a14 1
open CoreHol;
d30 1
a30 1
       and th2 = MK_EXISTS (SPEC (--`P:'a->bool`--) boolThry.TYPE_DEFINITION)
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
open Base_logic
d23 3
a25 3
      HOL_ERR{origin_structure = "Type_def_support",
	      origin_function = function,
	      message = message}
d29 1
a29 1
       and th2 = MK_EXISTS (SPEC (--`P:'a->bool`--) Bool.TYPE_DEFINITION)
d105 1
a105 1
   case (assoc1 str (axioms (current_theory())))
d109 1
a109 1
   case (assoc1 str (definitions (current_theory())))
d152 1
a152 1
                            handle (e as HOL_ERR
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
