head	1.1;
access;
symbols
	HOL97:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	97.06.11.17.42.16;	author kxs;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.06.11.17.42.17;	author kxs;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.06.24.14.55.14;	author kxs;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	97.07.11.15.54.22;	author kxs;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	97.10.05.21.12.57;	author kxs;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	98.02.23.20.56.14;	author kxs;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file njsml.1xx was initially added on branch HOL97.
@
text
@@


1.1.2.1
log
@The various makefiles for the system have been gathered together in this
directory. "Makefile" is the master makefile, and it calls make
recursively on whichever sub-makefile is appropriate. "Makefile" is itself
called from src/BUILD.
@
text
@a0 397
#-------------------------------------------------------------------------
# Makefile for HOL90
#
# Standard ML Version: NJSML 1xx (currently 109.26)
# Compilation done using: use
#
# The building of HOL90 takes place in four stages with theories being
# constructed between each stage if they are not already present. Dummy
# files are left in place of the intermediate executables so that make
# does not try to rebuild unnecessarily. However, this means that the bin
# directory should be cleaned before attempting a rebuild.
#-------------------------------------------------------------------------

#-------------------------------------------------------------------------
# parameters
#-------------------------------------------------------------------------

SML_IMPL=njsml.1xx
ARCH=unknown
HOL_DIR=../..
THEORY_TYPE=ascii
# Libraries to load before dumping HOL executable/heap/database
PRE_LOAD=
# File to `use' before dumping HOL executable/heap/database
USE_FILE=

# Build various parsers in the system
LEX=/home/kxs/109.26/bin/ml-lex
YAK=/home/kxs/109.26/bin/ml-yacc

#-------------------------------------------------------------------------
# computed macros
#-------------------------------------------------------------------------

MAKE_IMPL=$(MAKE) -f Makefiles/$(SML_IMPL) \
		  HOL90_VERSION=$(HOL90_VERSION) \
		  ARCH=$(ARCH) \
		  HOL_DIR=$(HOL_DIR) \
		  THEORY_TYPE=$(THEORY_TYPE) \
		  USE_FILE=$(USE_FILE)

SRC_DIR=$(HOL_DIR)/src
BIN_DIR=$(HOL_DIR)/bin/$(SML_IMPL)
HEAP_DIR=$(BIN_DIR)/.heap
THEORY_SRC=$(HOL_DIR)/theories/src
THMS_DIR=$(HOL_DIR)/theories/$(THEORY_TYPE)
HOLSIG_DIR=$(HOL_DIR)/theories/$(THEORY_TYPE)

SML=$(BIN_DIR)/sml

GRMS=$(SRC_DIR)/Grammars

#SML/NJ automatically appends <machine>-<OS> to the file name it writes!
HOL0_HEAP=$(HEAP_DIR)/hol0
HOL0_HEAP_FILE=$(HOL0_HEAP).$(ARCH)

HOL1_HEAP=$(HEAP_DIR)/hol1
HOL1_HEAP_FILE=$(HOL1_HEAP).$(ARCH)

HOL2_HEAP=$(HEAP_DIR)/hol2
HOL2_HEAP_FILE=$(HOL2_HEAP).$(ARCH)

HOL3_HEAP=$(HEAP_DIR)/hol90
HOL3_HEAP_FILE=$(HOL3_HEAP).$(ARCH)

#fragments of ML code
HANDLE_HOL_ERR= \
	handle e => (print_HOL_ERR e; OS.Process.exit OS.Process.failure)

#-------------------------------------------------------------------------
# all
#-------------------------------------------------------------------------

all: check_sources grammars hol

#-------------------------------------------------------------------------
# check_sources
#-------------------------------------------------------------------------

check_sources:
	@@-mkdir $(BIN_DIR) 2> /dev/null
	@@if test -f $(SML); \
	 then echo \"sml\" found; \
	 else echo \"sml\" not found in $(BIN_DIR)/; \
	      echo Put a symbolic link to the Standard ML executable there.; \
	      exit 1; \
	 fi

#-------------------------------------------------------------------------
# Grammars
#-------------------------------------------------------------------------

grammars: $(GRMS)/hol.lex.sml    $(GRMS)/hol.yak.sig    $(GRMS)/hol.yak.sml \
    $(GRMS)/thy.lex.sml    $(GRMS)/thy.yak.sig    $(GRMS)/thy.yak.sml    \
    $(GRMS)/holsig.lex.sml $(GRMS)/holsig.yak.sig $(GRMS)/holsig.yak.sml \
    $(GRMS)/thms.lex.sml   $(GRMS)/thms.yak.sig   $(GRMS)/thms.yak.sml   \
    $(GRMS)/lib.lex.sml    $(GRMS)/lib.yak.sig    $(GRMS)/lib.yak.sml

# The parser and lexer for types, terms, and datatypes.
$(GRMS)/hol.lex.sml: $(GRMS)/hol.lex 
	(cd $(GRMS); $(LEX) hol.lex)
$(GRMS)/hol.yak.sig $(GRMS)/hol.yak.sml: $(GRMS)/hol.yak
	(cd $(GRMS); $(YAK) hol.yak)

# The parser and lexer for theory files.
$(GRMS)/thy.lex.sml: $(GRMS)/thy.lex 
	(cd $(GRMS); $(LEX) thy.lex)
$(GRMS)/thy.yak.sig $(GRMS)/thy.yak.sml: $(GRMS)/thy.yak 
	(cd $(GRMS); $(YAK) thy.yak)

# The parser and lexer for hol signature files.
$(GRMS)/holsig.lex.sml: $(GRMS)/holsig.lex
	(cd $(GRMS); $(LEX) holsig.lex)
$(GRMS)/holsig.yak.sig $(GRMS)/holsig.yak.sml: $(GRMS)/holsig.yak 
	(cd $(GRMS); $(YAK) holsig.yak)

# The parser and lexer for hol theorem files.
$(GRMS)/thms.lex.sml: $(GRMS)/thms.lex
	(cd $(GRMS); $(LEX) thms.lex)
$(GRMS)/thms.yak.sig $(GRMS)/thms.yak.sml: $(GRMS)/thms.yak 
	(cd $(GRMS); $(YAK) thms.yak)

# The parser and lexer for hol library descriptions.
$(GRMS)/lib.lex.sml: $(GRMS)/lib.lex
	(cd $(GRMS); $(LEX) lib.lex)
$(GRMS)/lib.yak.sig $(GRMS)/lib.yak.sml: $(GRMS)/lib.yak 
	(cd $(GRMS); $(YAK) lib.yak)


#-------------------------------------------------------------------------
# hol0
#-------------------------------------------------------------------------

$(HOL0_HEAP_FILE): $(SRC_DIR)/0/* $(SRC_DIR)/0/library/* $(SRC_DIR)/0/theory/*
	@@-mkdir $(BIN_DIR) 2> /dev/null
	@@-mkdir $(HEAP_DIR) 2> /dev/null
	echo 'use "$(SRC_DIR)/SysParams.sml";'\
	     'use "$(SRC_DIR)/portableML/njsml.109.xx.sml";'\
	     'use "$(SRC_DIR)/0/sources.sml";'\
	     'use "$(SRC_DIR)/0/hol0.sml";'\
	     'Portable.exportML "$(HOL0_HEAP)";'\
	| $(SML) 2>&1 | tee $(BIN_DIR)/log.$(ARCH).0
	echo >$@@.blank

#-------------------------------------------------------------------------
# Theories built after hol0
#
# How we ensure theory files don't get rebuilt
# --------------------------------------------
#
# We carefully make the theories dependent only on their source,
# not on the executable which is used to process the source.
# This takes the optimistic approach that if a theory file
# is up-to-date with respect to its source then it is correct - even
# though it is possible the executable has changed the theory file format.
#
# To remake the theory files, go "make clobber" before you begin.
#
# Making the theory files not dependent on the executable 
# stops theory files getting rebuilt unnecessarily.
# However, we still need to force the make of the executable
# which processes the theory file if it doesn't exist at all!
# We do this by running a shell "if" command to do a
# make in the case where no executable is available.  
# Shell wizardry courtesy of Michael Norrish. 
#
#                                                  DRS
#-------------------------------------------------------------------------

$(HOLSIG_DIR)/min.holsig: \
		$(THEORY_SRC)/min.sig \
		$(THEORY_SRC)/mk_min.sml
	@@-mkdir $(HOLSIG_DIR) 2> /dev/null
	@@if test ! -f $(HOL0_HEAP_FILE); then $(MAKE_IMPL) $(HOL0_HEAP); fi
	echo 'use "$(THEORY_SRC)/min.sig" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/mk_min.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL0_HEAP_FILE) 2>&1 \
	| tee -a $(BIN_DIR)/log.$(ARCH).0

$(HOLSIG_DIR)/bool.holsig:  \
		$(HOLSIG_DIR)/min.holsig \
		$(THEORY_SRC)/exists.sig \
		$(THEORY_SRC)/mk_exists.sml \
		$(THEORY_SRC)/bool.sig \
		$(THEORY_SRC)/mk_bool.sml
	@@-mkdir $(HOLSIG_DIR) 2> /dev/null
	@@if test ! -f $(HOL0_HEAP_FILE); then $(MAKE_IMPL) $(HOL0_HEAP); fi
	echo 'use "$(THEORY_SRC)/min.sig" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/ld_min.sml" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/exists.sig" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/mk_exists.sml" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/bool.sig" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/mk_bool.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL0_HEAP_FILE) 2>&1 \
	| tee -a $(BIN_DIR)/log.$(ARCH).0

#-------------------------------------------------------------------------
# hol1
#-------------------------------------------------------------------------

$(HOL1_HEAP_FILE): $(HOL0_HEAP_FILE) $(SRC_DIR)/1/* $(HOLSIG_DIR)/bool.holsig
	@@-mkdir $(BIN_DIR) 2> /dev/null
	@@-mkdir $(HEAP_DIR) 2> /dev/null
	echo 'use "$(SRC_DIR)/1/sources.sml";'\
	     'use "$(SRC_DIR)/1/hol1.sml";'\
	     'Portable.exportML "$(HOL1_HEAP)";'\
	| $(SML) @@SMLload=$(HOL0_HEAP_FILE) 2>&1 | tee $(BIN_DIR)/log.$(ARCH).1
	echo >$@@.blank
	rm -f $(HOL0_HEAP_FILE)
	mv $(HOL0_HEAP_FILE).blank $(HOL0_HEAP_FILE)

#-------------------------------------------------------------------------
# Theories built after hol1
#-------------------------------------------------------------------------

$(HOLSIG_DIR)/combin.holsig: \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_combin.sml
	@@if test ! -f $(HOL1_HEAP_FILE); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_combin.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP_FILE) 2>&1 \
	| tee -a $(BIN_DIR)/log.$(ARCH).1

$(HOLSIG_DIR)/num.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_num.sml
	@@if test ! -f $(HOL1_HEAP_FILE); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_num.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP_FILE) 2>&1 \
	| tee -a $(BIN_DIR)/log.$(ARCH).1

$(HOLSIG_DIR)/one.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_one.sml
	@@if test ! -f $(HOL1_HEAP_FILE); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_one.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP_FILE) 2>&1 \
	| tee -a $(BIN_DIR)/log.$(ARCH).1

$(HOLSIG_DIR)/sum.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(HOLSIG_DIR)/combin.holsig \
		$(THEORY_SRC)/mk_sum.sml
	@@if test ! -f $(HOL1_HEAP_FILE); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_sum.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP_FILE) 2>&1 \
	| tee -a $(BIN_DIR)/log.$(ARCH).1

$(HOLSIG_DIR)/restr_binder.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_restr_binder.sml
	@@if test ! -f $(HOL1_HEAP_FILE); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_restr_binder.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP_FILE) 2>&1 \
	| tee -a $(BIN_DIR)/log.$(ARCH).1

$(HOLSIG_DIR)/pair.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_pair.sml
	@@if test ! -f $(HOL1_HEAP_FILE); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_pair.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP_FILE) 2>&1 \
	| tee -a $(BIN_DIR)/log.$(ARCH).1

$(HOLSIG_DIR)/BASIC_HOL.holsig:  \
		$(THEORY_SRC)/mk_BASIC_HOL.sml \
		$(HOLSIG_DIR)/bool.holsig \
		$(HOLSIG_DIR)/restr_binder.holsig \
		$(HOLSIG_DIR)/pair.holsig \
		$(HOLSIG_DIR)/sum.holsig \
		$(HOLSIG_DIR)/one.holsig \
		$(HOLSIG_DIR)/num.holsig
	@@if test ! -f $(HOL1_HEAP_FILE); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_BASIC_HOL.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP_FILE) 2>&1 \
	| tee -a $(BIN_DIR)/log.$(ARCH).1

#-------------------------------------------------------------------------
# hol2
#-------------------------------------------------------------------------

$(HOL2_HEAP_FILE): $(HOL1_HEAP_FILE) $(SRC_DIR)/2/* $(HOLSIG_DIR)/BASIC_HOL.holsig
	@@-mkdir $(BIN_DIR) 2> /dev/null
	@@-mkdir $(HEAP_DIR) 2> /dev/null
	echo 'use "$(SRC_DIR)/2/sources.sml";' \
	     'use "$(SRC_DIR)/2/hol2.sml";'\
	     'Portable.exportML "$@@";' \
	| $(SML) @@SMLload=$(HOL1_HEAP_FILE) 2>&1 | tee $(BIN_DIR)/log.$(ARCH).2
	echo >$@@.blank
	rm -f $(HOL1_HEAP_FILE)
	mv $(HOL1_HEAP_FILE).blank $(HOL1_HEAP_FILE)

#-------------------------------------------------------------------------
# Theories built after hol2
#-------------------------------------------------------------------------

$(HOLSIG_DIR)/prim_rec.holsig:  \
		$(THEORY_SRC)/mk_prim_rec.sml
	@@if test ! -f $(HOL2_HEAP_FILE); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_prim_rec.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP_FILE) 2>&1 \
	| tee -a $(BIN_DIR)/log.$(ARCH).2

$(HOLSIG_DIR)/arithmetic.holsig:  \
		$(HOLSIG_DIR)/prim_rec.holsig \
		$(THEORY_SRC)/mk_arithmetic.sml
	@@if test ! -f $(HOL2_HEAP_FILE); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_arithmetic.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP_FILE) 2>&1 \
	| tee -a $(BIN_DIR)/log.$(ARCH).2

$(HOLSIG_DIR)/list.holsig:  \
		$(HOLSIG_DIR)/arithmetic.holsig \
		$(THEORY_SRC)/mk_list.sml \
		$(THEORY_SRC)/mk_list_thms.sml
	@@if test ! -f $(HOL2_HEAP_FILE); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_list.sml" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/mk_list_thms.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP_FILE) 2>&1 \
	| tee -a $(BIN_DIR)/log.$(ARCH).2

$(HOLSIG_DIR)/tree.holsig:  \
		$(HOLSIG_DIR)/list.holsig \
		$(THEORY_SRC)/mk_tree.sml
	@@if test ! -f $(HOL2_HEAP_FILE); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_tree.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP_FILE) 2>&1 \
	| tee -a $(BIN_DIR)/log.$(ARCH).2

$(HOLSIG_DIR)/ltree.holsig:  \
		$(HOLSIG_DIR)/tree.holsig \
		$(THEORY_SRC)/mk_ltree.sml
	@@if test ! -f $(HOL2_HEAP_FILE); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_ltree.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP_FILE) 2>&1 \
	| tee -a $(BIN_DIR)/log.$(ARCH).2

$(HOLSIG_DIR)/rec_type.holsig:  \
		$(HOLSIG_DIR)/ltree.holsig \
		$(THEORY_SRC)/mk_rec_type.sml
	@@if test ! -f $(HOL2_HEAP_FILE); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_rec_type.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP_FILE) 2>&1 \
	| tee -a $(BIN_DIR)/log.$(ARCH).2

$(HOLSIG_DIR)/HOL.holsig:  \
		$(HOLSIG_DIR)/rec_type.holsig \
		$(HOLSIG_DIR)/sum.holsig \
		$(HOLSIG_DIR)/restr_binder.holsig \
		$(HOLSIG_DIR)/one.holsig \
		$(THEORY_SRC)/mk_HOL.sml
	@@if test ! -f $(HOL2_HEAP_FILE); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_HOL.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP_FILE) 2>&1 \
	| tee -a $(BIN_DIR)/log.$(ARCH).2

#-------------------------------------------------------------------------
# hol3
#-------------------------------------------------------------------------

$(HOL3_HEAP_FILE): $(HOL2_HEAP_FILE) $(SRC_DIR)/3/* $(HOLSIG_DIR)/HOL.holsig
	@@-mkdir $(BIN_DIR) 2> /dev/null
	@@-mkdir $(HEAP_DIR) 2> /dev/null
	echo 'use "$(SRC_DIR)/3/sources.sml";'\
	     'use "$(SRC_DIR)/3/hol3.sml";'\
	     'map (load_library_in_place o find_library)'\
	     '   (Lib.words2 " " "$(PRE_LOAD)");'\
	     'if not ("$(USE_FILE)" = "") andalso'\
	     '   Portable.file_exists_for_reading "$(USE_FILE)"'\
	     'then use "$(USE_FILE)"'\
	     'else ();'\
	     'Globals.use_init_file := true;'\
	     'Save_hol.save_hol "$@@";'\
	| $(SML) @@SMLload=$(HOL2_HEAP_FILE) 2>&1 | tee $(BIN_DIR)/log.$(ARCH).3
	chmod ugo+r $(HOL3_HEAP_FILE)
	rm -f $(HOL2_HEAP_FILE)
	mv $(HOL2_HEAP_FILE).blank $(HOL2_HEAP_FILE)

#-------------------------------------------------------------------------
# HOL90
#-------------------------------------------------------------------------

hol: $(HOL3_HEAP_FILE)


#-------------------------------------------------------------------------
# cleaning
#-------------------------------------------------------------------------

clean:
	rm -f $(HOL0_HEAP_FILE) $(HOL1_HEAP_FILE) \
	      $(HOL2_HEAP_FILE) $(HOL3_HEAP_FILE) \
	      $(GRMS)/*.sig $(GRMS)/*.sml $(GRMS)/*.desc

clobber: clean
	rm -f $(HOLSIG_DIR)/*.holsig $(THMS_DIR)/*.thms

@


1.1.2.2
log
@Change to have YAK  and LEX refer to system versions, not private ones of kxs!
@
text
@d28 2
a29 2
LEX=/usr/groups/theory/njml/mldist.109.27/bin/ml-lex
YAK=/usr/groups/theory/njml/mldist.109.27/bin/ml-yacc
d67 2
a68 1
HANDLE_HOL_ERR=	handle e => (Exception.print_HOL_ERR e; OS.Process.exit OS.Process.failure)
@


1.1.2.3
log
@(Re-)Added makefiles
@
text
@d67 1
a67 2
HANDLE_HOL_ERR= \
	handle e => (print_HOL_ERR e; OS.Process.exit OS.Process.failure)
d92 1
a92 2
grammars: $(GRMS)/hol.lex.sml    $(GRMS)/hol.lex.90.sml                  \
    $(GRMS)/hol.yak.sig    $(GRMS)/hol.yak.sml                           \
a100 3
$(GRMS)/hol.lex.90.sml: $(GRMS)/hol.lex.90 
	(cd $(GRMS); $(LEX) hol.lex.90)

d142 1
a142 1
#	echo >$@@.blank
a180 2
	        $(SRC_DIR)/0/exists_def.sig \
	        $(SRC_DIR)/0/exists_def.sml \
a188 2
	     'use "$(SRC_DIR)/0/exists_def.sig";'\
	     'use "$(SRC_DIR)/0/exists_def.sml";'\
d207 3
a209 3
#	echo >$@@.blank
#	rm -f $(HOL0_HEAP_FILE)
#	mv $(HOL0_HEAP_FILE).blank $(HOL0_HEAP_FILE)
d288 3
a290 3
#	echo >$@@.blank
#	rm -f $(HOL1_HEAP_FILE)
#	mv $(HOL1_HEAP_FILE).blank $(HOL1_HEAP_FILE)
d374 3
a376 3
#	chmod ugo+r $(HOL3_HEAP_FILE)
#	rm -f $(HOL2_HEAP_FILE)
#	mv $(HOL2_HEAP_FILE).blank $(HOL2_HEAP_FILE)
@


1.1.2.4
log
@Small changes to accomodate changes in ML.
@
text
@d28 2
a29 2
LEX=/usr/groups/hol/109.32/bin/ml-lex
YAK=/usr/groups/hol/109.32/bin/ml-yacc
d141 3
a143 1
	echo 'use "$(SRC_DIR)/0/sources.sml";'\
@


1.1.2.5
log
@Change of path to SML/NJ executables.
@
text
@d28 2
a29 2
LEX=/usr/groups/theory/njml/working/bin/ml-lex
YAK=/usr/groups/theory/njml/working/bin/ml-yacc
d145 1
a145 1
	echo >$@@.blank
d214 3
a216 3
	echo >$@@.blank
	rm -f $(HOL0_HEAP_FILE)
	mv $(HOL0_HEAP_FILE).blank $(HOL0_HEAP_FILE)
d295 3
a297 3
	echo >$@@.blank
	rm -f $(HOL1_HEAP_FILE)
	mv $(HOL1_HEAP_FILE).blank $(HOL1_HEAP_FILE)
d381 3
a383 3
	chmod ugo+r $(HOL3_HEAP_FILE)
	rm -f $(HOL2_HEAP_FILE)
	mv $(HOL2_HEAP_FILE).blank $(HOL2_HEAP_FILE)
@
