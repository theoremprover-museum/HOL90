head	1.1;
branch	1.1.1;
access;
symbols
	HOL97:1.1.1.1.0.6
	bpHOL97:1.1.1.1
	hol90_9_alpha:1.1.1.1
	hol90_pre8_for_multiple_compilers:1.1.1.1.0.4
	hol90_pre8_after_donalds_separate_compilation_changes:1.1.1.1
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.10.16.13.35.51;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.35.51;	author rjb;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@\DOC new_type

\TYPE {new_type : {{Name :string, Arity :int}} -> unit}

\SYNOPSIS
Declares a new type or type constructor.

\DESCRIBE
A call {new_type{{Name = "t", Arity = n}}} declares a new {n}-ary type 
constructor called {t} in the current theory segment. If {n} is zero, this is 
just a new base type.

\FAILURE
Fails if HOL is not in draft mode, or if the name is not a valid type
name, or there is already a type operator of that name in the current theory.

\EXAMPLE
A non-definitional version of ZF set theory might declare a new type {set} and 
start using it as follows:
{
   - new_theory `ZF`;;
   () : unit

   - new_type{{Name="set", Arity=0}};
   () : unit

   - new_infix{{Name="mem",Ty = ==`:set->set->bool`==}};
   () : unit

   - new_open_axiom("ext", --`(!z. z mem x = z mem y) ==> (x = y)`--);
   |- (!z. z mem x = z mem y) ==> (x = y)
}
\SEEALSO
types, type_abbrevs, new_type_abbrev.

\ENDDOC
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
