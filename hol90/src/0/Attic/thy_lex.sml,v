head	1.5;
access;
symbols
	HOL97:1.4.0.4
	bpHOL97:1.4
	hol90_9_alpha:1.4
	hol90_pre8_for_multiple_compilers:1.4.0.2
	hol90_pre8_after_donalds_separate_compilation_changes:1.3
	hol90_8_after_merging_Konrad_Elsa:1.2
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.5
date	96.02.08.00.32.20;	author drs1004;	state dead;
branches;
next	1.4;

1.4
date	95.11.15.13.24.45;	author rjb;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	95.10.31.13.56.41;	author drs1004;	state Exp;
branches;
next	1.2;

1.2
date	95.10.17.17.07.35;	author drs1004;	state Exp;
branches;
next	1.1;

1.1
date	95.10.16.13.29.59;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.29.59;	author rjb;	state Exp;
branches;
next	;

1.4.4.1
date	97.06.11.17.24.48;	author kxs;	state dead;
branches;
next	;


desc
@@


1.5
log
@New theory mechanism, by Donald Syme, and many other enhancements.
@
text
@functor THY_LEX((* structure Lib : Lib_sig *)
                         structure Tokens : thy_TOKENS)=
   struct
    structure UserDeclarations =
      struct
type pos = int;
val line:pos = 0;
type svalue = Tokens.svalue;
type ('a,'b) token = ('a,'b) Tokens.token;
type lexresult = (svalue,pos) Tokens.token;


fun error(s,_,_) = output(std_out,"Theory lexer error: "^s^"\n");
fun eof () = Tokens.EOF(line,line);

val type_paren_count = ref 0;
val string_list = ref ([]:string list);

local
fun ch_list_to_num (dollar::(L as (_::_))) =
    if dollar = Portable.String.sub("$",0)
	then
	    let fun rev_it([],A) = A
		  | rev_it ((ch::rst),A) =
		    rev_it (rst, (A*10)+(Portable.Char.ord ch-48))
	    in
		rev_it(L,0)
	    end
    else raise Exception.HOL_ERR{origin_structure = "Theory_lexer",
                                     origin_function="ch_list_to_num",
                                     message = "malformed dB"}
  | ch_list_to_num _ =
             raise Exception.HOL_ERR{origin_structure = "Theory_lexer",
                                     origin_function="ch_list_to_num",
                                     message = "malformed dB"}
in
fun break_dB "$0" = 0    | break_dB "$1" = 1
  | break_dB "$2" = 2    | break_dB "$3" = 3
  | break_dB "$4" = 4    | break_dB "$5" = 5
  | break_dB "$6" = 6    | break_dB "$7" = 7
  | break_dB "$8" = 8    | break_dB "$9" = 9
  | break_dB "$10" = 10  | break_dB "$11" = 11
  | break_dB "$12" = 12  | break_dB "$13" = 13
  | break_dB "$14" = 14  | break_dB "$15" = 15
  | break_dB "$16" = 16
  | break_dB s = ch_list_to_num (explode s)
end;

exception LEX_ERR of string;

(* The next "end" closes the UserDeclarations structure in the compiled file
   so that the declarations below are available in the rest of the compiled
   code. The Empty structure then matches with the "end" that should have
   closed the UserDeclarations structure.
*)
end

val substring = Portable.String.substring;
val ordof = Portable.String.ordof;
val concat = Portable.String.concat;
structure Vector = Portable.Vector;

structure Empty =
struct
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s0 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s1 =
"\007\007\007\007\007\007\007\007\007\021\023\007\021\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\021\008\020\008\018\008\008\007\017\016\008\008\008\008\015\008\
\\013\013\013\013\013\013\013\013\013\013\008\008\008\008\008\008\
\\008\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\007\012\007\007\008\
\\007\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\007\008\007\008\007\
\\007"
val s3 =
"\024\024\024\024\024\024\024\024\024\036\038\024\036\024\024\024\
\\024\024\024\024\024\024\024\024\024\024\024\024\024\024\024\024\
\\036\024\024\035\024\024\024\033\032\031\024\030\029\027\024\024\
\\025\025\025\025\025\025\025\025\025\025\024\024\024\024\024\024\
\\024\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\
\\025\025\025\025\025\025\025\025\025\025\025\024\024\024\024\024\
\\024\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\
\\025\025\025\025\025\025\025\025\025\025\025\024\024\024\024\024\
\\024"
val s5 =
"\039\039\039\039\039\039\039\039\039\039\043\039\039\039\039\039\
\\039\039\039\039\039\039\039\039\039\039\039\039\039\039\039\039\
\\039\039\042\039\039\039\039\039\039\039\039\039\039\039\039\039\
\\039\039\039\039\039\039\039\039\039\039\039\039\039\039\039\039\
\\039\039\039\039\039\039\039\039\039\039\039\039\039\039\039\039\
\\039\039\039\039\039\039\039\039\039\039\039\039\040\039\039\039\
\\039\039\039\039\039\039\039\039\039\039\039\039\039\039\039\039\
\\039\039\039\039\039\039\039\039\039\039\039\039\039\039\039\039\
\\039"
val s8 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\009\000\009\000\009\009\000\000\000\009\009\009\009\000\009\
\\000\000\000\000\000\000\000\000\000\000\009\009\009\009\009\009\
\\009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\009\000\000\009\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\009\000\009\000\
\\000"
val s10 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\
\\000"
val s13 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\
\\000"
val s18 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\019\019\019\019\019\019\019\019\019\019\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s21 =
"\000\000\000\000\000\000\000\000\000\022\022\000\022\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s25 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\000\
\\026\026\026\026\026\026\026\026\026\026\000\000\000\000\000\000\
\\000\026\026\026\026\026\026\026\026\026\026\026\026\026\026\026\
\\026\026\026\026\026\026\026\026\026\026\026\000\000\000\000\026\
\\000\026\026\026\026\026\026\026\026\026\026\026\026\026\026\026\
\\026\026\026\026\026\026\026\026\026\026\026\000\000\000\000\000\
\\000"
val s27 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s33 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\000\000\000\000\000\
\\000\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\000\000\000\000\000\
\\000"
val s34 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\034\034\034\034\034\034\034\034\034\034\000\000\000\000\000\000\
\\000\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\000\000\000\000\034\
\\000\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\
\\034\034\034\034\034\034\034\034\034\034\034\000\000\000\000\000\
\\000"
val s36 =
"\000\000\000\000\000\000\000\000\000\037\037\000\037\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\037\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s40 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\041\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
in Vector.fromList
[{fin = [], trans = s0},
{fin = [], trans = s1},
{fin = [], trans = s1},
{fin = [], trans = s3},
{fin = [], trans = s3},
{fin = [], trans = s5},
{fin = [], trans = s5},
{fin = [(N 29)], trans = s0},
{fin = [(N 27),(N 29)], trans = s8},
{fin = [(N 27)], trans = s8},
{fin = [(N 24),(N 29)], trans = s10},
{fin = [(N 24)], trans = s10},
{fin = [(N 8),(N 27),(N 29)], trans = s8},
{fin = [(N 17),(N 24),(N 29)], trans = s13},
{fin = [(N 17),(N 24)], trans = s13},
{fin = [(N 10),(N 29)], trans = s0},
{fin = [(N 14),(N 29)], trans = s0},
{fin = [(N 12),(N 29)], trans = s0},
{fin = [(N 29)], trans = s18},
{fin = [(N 21)], trans = s18},
{fin = [(N 6),(N 29)], trans = s0},
{fin = [(N 4),(N 29)], trans = s21},
{fin = [(N 4)], trans = s21},
{fin = [(N 1),(N 4)], trans = s21},
{fin = [(N 56)], trans = s0},
{fin = [(N 41),(N 56)], trans = s25},
{fin = [(N 41)], trans = s25},
{fin = [(N 56)], trans = s27},
{fin = [(N 44)], trans = s0},
{fin = [(N 50),(N 56)], trans = s0},
{fin = [(N 46),(N 56)], trans = s0},
{fin = [(N 54),(N 56)], trans = s0},
{fin = [(N 52),(N 56)], trans = s0},
{fin = [(N 56)], trans = s33},
{fin = [(N 38)], trans = s34},
{fin = [(N 48),(N 56)], trans = s0},
{fin = [(N 34),(N 56)], trans = s36},
{fin = [(N 34)], trans = s36},
{fin = [(N 31),(N 34)], trans = s36},
{fin = [(N 65)], trans = s0},
{fin = [(N 65)], trans = s40},
{fin = [(N 61)], trans = s0},
{fin = [(N 63),(N 65)], trans = s0},
{fin = [(N 58)], trans = s0}]
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;
val STRING = STARTSTATE 5;
val TYPE = STARTSTATE 3;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

fun makeLexer yyinput = 
let 
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref 1		(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let val yytext = substring(!yyb,i0,i-i0)
			     val yypos = i0+ !yygone
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  1 => (continue())
| 10 => (Tokens.dot(line,line))
| 12 => (Tokens.lparen(line,line))
| 14 => (Tokens.rparen(line,line))
| 17 => (Tokens.num(yytext,line,line))
| 21 => (Tokens.db_index(break_dB yytext,line,line))
| 24 => (Tokens.ident(yytext,line,line))
| 27 => ( case yytext 
              of ":" => ( YYBEGIN TYPE; 
                          type_paren_count := 0;
                          Tokens.colon(line,line))
               |   _  => Tokens.ident(yytext,line,line))
| 29 => (raise LEX_ERR "INITIAL.catchall")
| 31 => (continue())
| 34 => (continue())
| 38 => (Tokens.type_var_ident(yytext,line,line))
| 4 => (continue())
| 41 => (Tokens.type_ident(yytext,line,line))
| 44 => (Tokens.type_right_arrow(line,line))
| 46 => (Tokens.type_plus(line,line))
| 48 => (Tokens.type_hash(line,line))
| 50 => (Tokens.type_comma(line,line))
| 52 => (Lib.inc type_paren_count; Tokens.type_lparen(line,line))
| 54 => (if (!type_paren_count = 0)
               then (YYBEGIN INITIAL; Tokens.rparen(line,line))
               else (Lib.dec type_paren_count; Tokens.type_rparen(line,line)))
| 56 => (raise LEX_ERR "TYPE.catchall")
| 58 => (string_list :=  yytext::(!string_list); continue())
| 6 => ( YYBEGIN STRING; string_list := [yytext]; continue())
| 61 => (string_list := "\""::(!string_list); continue())
| 63 => (YYBEGIN INITIAL; 
              Tokens.string_(concat(rev(yytext::(!string_list))),line,line))
| 65 => (string_list :=  yytext::(!string_list); continue())
| 8 => (Tokens.lambda(line,line))
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := !yygone+i0;
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = ordof(!yyb,l)
		val NewState = if NewChar<128 then ordof(trans,NewChar) else ordof(trans,128)
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
@


1.4
log
@The HOL90 sources have been changed to allow for the use of different
Standard ML compilers (possibly simultaneously).

 * Many files in "src/0" changed to make them more portable across different
   ML compilers. Various additions have been made to the Portable structure
   and files changed to access identifiers in the Portable structure rather
   than from the global environment. Worthy of special note are:

   - The pointer equality used in "src/0/term.sml" has been made into a
     function in the Portable structure.

   - The ML-Lex and ML-Yacc files for the various parsers have been changed
     to access the Portable structure. Both the source files and the SML
     produced from them have been changed but I have not verified that the
     source files would reproduce the new SML versions if ML-Lex and ML-Yacc
     were to be rerun on them. The changes involve some hacks that exploit the
     way ML-Lex and ML-Yacc work. See the sources for details.

R.J.Boulton, 15th November 1995.
@
text
@@


1.4.4.1
log
@Removed files are parse files and portability files that have
effectively been moved elsewhere.

Modified files are up to date for ML 109.26.
@
text
@@


1.3
log
@First phase of hol90.8 development.  hol90 now compiles using NJSML-CM
108.5, with separate compilation of libraries.  System dependencies
have been isolated in the makefiles and "portable.sml".

This involved a large number of enhancments to the source files,
most of which are documented in the 7.changes file (or will be shortly).
See also the correpsonding email corrspondence between RJB, KLS, TFM,
JRH and DRS that happened during this development.
@
text
@d51 14
d224 1
a224 1
in Portable.Vector.fromList
d343 1
a343 1
              Tokens.string_(Portable.String.concat(rev(yytext::(!string_list))),line,line))
d366 2
a367 2
	  else let val NewChar = Portable.String.ordof(!yyb,l)
		val NewState = if NewChar<128 then Portable.String.ordof(trans,NewChar) else Portable.String.ordof(trans,128)
@


1.2
log
@Keeping you up to date:

I'm about to do a checkin of elsa's modifications to the hol90.7
sources to create her hol90.pre8.  To recap what I've done:
	- I checked out hol90 (in /usr/groups/hol/drs1004/hol90)
		cvs co hol90
	  (Well, to be honest, I only checked out those
	  parts of hol90 I knew I'd be changing, e.g. not the
	  Manual, and only parts of the library.  Checking out the
	  entire source takes a while, mainly due to the enormous number
	  of help files.  The limiting factor is files/second, which
         runs at around 5 when CVS is working on nfs over a network, not
         KB/second, which you might at first think it would be).

	- By doing a recursive diff between Elsa's source and the
	hol90.7 source I found all the changes Elsa had made to
	source files.  I copied relevant files from Elsa's source
	into my checked out version.  The only new files were
		- the sml_system files in src/0
		- some make scripts in src/.
	Changed files were in:
		src/{0,1,2,3}
		library/arith/src/thm_convs.sml
		library/list/src/list_conv1.sml
		library/num/src/num_lib.sml
		library/prog_logic/src/halts_logic.sml
		library/prog_logic/src/translation.sml
		library/prog_logic/theories/src/mk_halts.sml
		library/real/theories/src/Make
		library/real/theories/src/equiv.sml
		library/real/theories/src/seq.sml
		library/reduce/src/arithconv.sml
		library/string/src/string_conv.sml
		library/unity/theories/src/aux_definitions.sml
		library/word/theories/src/*

	- I will now commit these changes, with this email as the log message.
		cvs commit

	- Tomorrow I will get this version compiling
	with NJSML 108 (I will probably add
	the files to enable the NJSML compilation manager to make
	this easier), then check those changes in.  I think it's
	good to get things in a working state.
@
text
@d21 1
a21 1
    if dollar = Sml_system.String.sub("$",0)
d25 1
a25 1
		    rev_it (rst, (A*10)+(Sml_system.Char.ord ch-48))
d210 1
a210 1
in Sml_system.Vector.fromList
d329 1
a329 1
              Tokens.string_(Sml_system.String.concat(rev(yytext::(!string_list))),line,line))
d352 2
a353 2
	  else let val NewChar = Sml_system.String.ordof(!yyb,l)
		val NewState = if NewChar<128 then Sml_system.String.ordof(trans,NewChar) else Sml_system.String.ordof(trans,128)
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
functor THY_LEX(structure Tokens : thy_TOKENS)=
d20 14
a33 7
fun ch_list_to_num ("$"::(L as (_::_))) =
      let fun rev_it([],A) = A
            | rev_it ((ch::rst),A) = rev_it (rst, (A*10)+(ord ch-48))
      in
      rev_it(L,0)
      end
  | ch_list_to_num _ = raise HOL_ERR{origin_structure = "Theory_lexer",
d210 1
a210 1
in Vector.vector
d320 1
a320 1
| 52 => (inc type_paren_count; Tokens.type_lparen(line,line))
d323 1
a323 1
               else (dec type_paren_count; Tokens.type_rparen(line,line)))
d329 1
a329 1
              Tokens.string_(implode(rev(yytext::(!string_list))),line,line))
d352 2
a353 2
	  else let val NewChar = ordof(!yyb,l)
		val NewState = if NewChar<128 then ordof(trans,NewChar) else ordof(trans,128)
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
