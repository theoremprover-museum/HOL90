thid = (monoid, 782102162, 770438)
axioms = []
definitions =
[((monoid_sq),
  [],
  `((! :('a monoid -> bool) -> bool) (\(m :'a monoid).
   ((! :('a -> bool) -> bool) (\(a :'a). (((= :'a -> 'a -> bool)
   (((monoid_sq :'a monoid -> 'a -> 'a) $1) $0))
   ((((op :'a monoid -> 'a -> 'a -> 'a) $1) $0) $0))))))`),
 ((monoid_oblig),
  [],
  `((! :('a monoid -> bool) -> bool) (\(m :'a monoid).
   (((= :bool -> bool -> bool) ((monoid_oblig :'a monoid -> bool) $0))
   ((/\ ((! :('a -> bool) -> bool) (\(x :'a). (((= :'a -> 'a -> bool)
   ((((op :'a monoid -> 'a -> 'a -> 'a) $1) $0) ((e :'a monoid -> 'a)
   $1))) $0)))) ((/\ ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a -> 'a -> bool) ((((op :'a monoid -> 'a -> 'a -> 'a) $1)
   ((e :'a monoid -> 'a) $1)) $0)) $0)))) ((! :('a -> bool) -> bool)
   (\(x :'a). ((! :('a -> bool) -> bool) (\(y :'a).
   ((! :('a -> bool) -> bool) (\(z :'a). (((= :'a -> 'a -> bool)
   ((((op :'a monoid -> 'a -> 'a -> 'a) $3) $2)
   ((((op :'a monoid -> 'a -> 'a -> 'a) $3) $1) $0)))
   ((((op :'a monoid -> 'a -> 'a -> 'a) $3)
   ((((op :'a monoid -> 'a -> 'a -> 'a) $3) $2) $1))
   $0)))))))))))))`),
 ((op_abs_rep),
  [],
  `((! :(('a -> 'a -> 'a) -> bool) -> bool) (\(op :'a -> 'a -> 'a).
   ((! :('a -> bool) -> bool) (\(e :'a).
   (((= :('a -> 'a -> 'a) -> ('a -> 'a -> 'a) -> bool)
   ((op :'a monoid -> 'a -> 'a -> 'a)
   (((monoid :'a -> ('a -> 'a -> 'a) -> 'a monoid) $0) $1)))
   $1)))))`),
 ((e_abs_rep),
  [],
  `((! :(('a -> 'a -> 'a) -> bool) -> bool) (\(op :'a -> 'a -> 'a).
   ((! :('a -> bool) -> bool) (\(e :'a). (((= :'a -> 'a -> bool)
   ((e :'a monoid -> 'a)
   (((monoid :'a -> ('a -> 'a -> 'a) -> 'a monoid) $0) $1)))
   $0)))))`),
 ((monoid_DEF),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :(('a -> 'a -> 'a) -> bool) -> bool) (\(f' :'a -> 'a -> 'a).
   (((= :'a monoid -> 'a monoid -> bool)
   (((monoid :'a -> ('a -> 'a -> 'a) -> 'a monoid) $1) $0))
   ((ABS_monoid :('a # ('a -> 'a -> 'a)) ltree -> 'a monoid)
   (((Node :'a # ('a -> 'a -> 'a) ->
            ('a # ('a -> 'a -> 'a)) ltree list ->
            ('a # ('a -> 'a -> 'a)) ltree)
   (((, :'a -> ('a -> 'a -> 'a) -> 'a # ('a -> 'a -> 'a)) $1) $0))
   (NIL :('a # ('a -> 'a -> 'a)) ltree list))))))))`),
 ((monoid_ISO_DEF),
  [],
  `((/\ ((! :('a monoid -> bool) -> bool) (\(a :'a monoid).
   (((= :'a monoid -> 'a monoid -> bool)
   ((ABS_monoid :('a # ('a -> 'a -> 'a)) ltree -> 'a monoid)
   ((REP_monoid :'a monoid -> ('a # ('a -> 'a -> 'a)) ltree) $0)))
   $0)))) ((! :(('a # ('a -> 'a -> 'a)) ltree -> bool) -> bool)
   (\(r :('a # ('a -> 'a -> 'a)) ltree). (((= :bool -> bool -> bool)
   (((TRP :('a # ('a -> 'a -> 'a) ->
           ('a # ('a -> 'a -> 'a)) ltree list -> bool) ->
           ('a # ('a -> 'a -> 'a)) ltree -> bool)
   (\(v :'a # ('a -> 'a -> 'a)).
   (\(tl :('a # ('a -> 'a -> 'a)) ltree list). ((/\
   ((? :('a -> bool) -> bool) (\(x :'a).
   ((? :(('a -> 'a -> 'a) -> bool) -> bool) (\(f :'a -> 'a -> 'a).
   (((= :'a # ('a -> 'a -> 'a) -> 'a # ('a -> 'a -> 'a) -> bool) $3)
   (((, :'a -> ('a -> 'a -> 'a) -> 'a # ('a -> 'a -> 'a)) $1)
   $0))))))) (((= :num -> num -> bool)
   ((LENGTH :('a # ('a -> 'a -> 'a)) ltree list -> num) $0)) 0)))))
   $0))
   (((= :('a # ('a -> 'a -> 'a)) ltree ->
         ('a # ('a -> 'a -> 'a)) ltree -> bool)
   ((REP_monoid :'a monoid -> ('a # ('a -> 'a -> 'a)) ltree)
   ((ABS_monoid :('a # ('a -> 'a -> 'a)) ltree -> 'a monoid) $0)))
   $0)))))`),
 ((monoid_TY_DEF),
  [],
  `((? :(('a monoid -> ('a # ('a -> 'a -> 'a)) ltree) -> bool) ->
        bool) (\(rep :'a monoid -> ('a # ('a -> 'a -> 'a)) ltree).
   (((TYPE_DEFINITION :(('a # ('a -> 'a -> 'a)) ltree -> bool) ->
                       ('a monoid -> ('a # ('a -> 'a -> 'a)) ltree) ->
                       bool)
   ((TRP :('a # ('a -> 'a -> 'a) ->
          ('a # ('a -> 'a -> 'a)) ltree list -> bool) ->
          ('a # ('a -> 'a -> 'a)) ltree -> bool)
   (\(v :'a # ('a -> 'a -> 'a)).
   (\(tl :('a # ('a -> 'a -> 'a)) ltree list). ((/\
   ((? :('a -> bool) -> bool) (\(x :'a).
   ((? :(('a -> 'a -> 'a) -> bool) -> bool) (\(f :'a -> 'a -> 'a).
   (((= :'a # ('a -> 'a -> 'a) -> 'a # ('a -> 'a -> 'a) -> bool) $3)
   (((, :'a -> ('a -> 'a -> 'a) -> 'a # ('a -> 'a -> 'a)) $1)
   $0))))))) (((= :num -> num -> bool)
   ((LENGTH :('a # ('a -> 'a -> 'a)) ltree list -> num) $0)) 0))))))
   $0)))`)]
theorems =
[((OP_DETERMINES_IDENTITY),
  [],
  `((! :('a monoid -> bool) -> bool) (\(m1 :'a monoid).
   ((! :('a monoid -> bool) -> bool) (\(m2 :'a monoid). ((==> ((/\
   ((monoid_oblig :'a monoid -> bool) $1))
   ((monoid_oblig :'a monoid -> bool) $0))) ((==>
   (((= :('a -> 'a -> 'a) -> ('a -> 'a -> 'a) -> bool)
   ((op :'a monoid -> 'a -> 'a -> 'a) $1))
   ((op :'a monoid -> 'a -> 'a -> 'a) $0))) (((= :'a -> 'a -> bool)
   ((e :'a monoid -> 'a) $1)) ((e :'a monoid -> 'a) $0))))))))`),
 ((IDENTITY_UNIQUE),
  [],
  `((! :('a monoid -> bool) -> bool) (\(m :'a monoid). ((==>
   ((monoid_oblig :'a monoid -> bool) $0)) ((! :('a -> bool) -> bool)
   (\(f :'a). ((==> ((! :('a -> bool) -> bool) (\(a :'a). ((/\
   (((= :'a -> 'a -> bool) ((((op :'a monoid -> 'a -> 'a -> 'a) $2)
   $0) $1)) $0)) (((= :'a -> 'a -> bool)
   ((((op :'a monoid -> 'a -> 'a -> 'a) $2) $1) $0)) $0)))))
   (((= :'a -> 'a -> bool) $0) ((e :'a monoid -> 'a) $1))))))))`),
 ((monoid),
  [],
  `((! :(('a -> ('a -> 'a -> 'a) -> 'a1) -> bool) -> bool)
   (\(f :'a -> ('a -> 'a -> 'a) -> 'a1).
   ((?! :(('a monoid -> 'a1) -> bool) -> bool)
   (\(fn :'a monoid -> 'a1). ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :(('a -> 'a -> 'a) -> bool) -> bool) (\(f' :'a -> 'a -> 'a).
   (((= :'a1 -> 'a1 -> bool) ($2
   (((monoid :'a -> ('a -> 'a -> 'a) -> 'a monoid) $1) $0))) (($3 $1)
   $0))))))))))`)]
