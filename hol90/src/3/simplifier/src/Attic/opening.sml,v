head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	96.01.04.14.15.03;	author drs1004;	state dead;
branches;
next	1.1;

1.1
date	95.12.18.11.39.32;	author drs1004;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Added simplifier components, added drule files, added MK_ABS_CONV, better error messages
@
text
@signature Congprocs_sig = sig

   (* ----------------------------------------------------------------------
    * CONGPROC
    *
    * INPUTS
    *    The first argument should be a function implementing reflexivity
    * for the congruence relation (e.g. REFL for equality).  For any
    * reflexivity theorem you can make this easily by:
    *    fun refl x = SPEC x thm;
    *
    *    The second should be the congruence theorem for the relation
    *    Providing these two returns a function which implements a
    * congruence rule suitable for use with the TRAVERSE engine.
    * Create a congruence procedure for a given congruence rule.
    * 
    * "CONGRUENCE" PROCEDURES
    *   - Use the given continuation to derive simplified subterms
    *   - Use the provided solver to solve side conditions (solver
    * is normally just ASSUME)
    *   - Rename abstractions to avoid certain variables. (only implemented
    * for EQ_CONGPROC at present).
    *
    * NOTES FROM THE SIMPLIFIER DOCUMENTATION 
    *
    * Arbitrary extra contextual information can be introduced by
    * using "congurence rules".  These are theorems of a particular
    * shape.
    * 
    * The general form must be:
    * \begin{verbatim}
    * |- !x1 x1' ... xn xn'.
    *      side-condition1 ==>
    *      side-condition2 ==>
    *      (!v11...v1m. x1 v11 ... v1m REL x1' v11 ... v1m) ==>
    *      (!v21...v2m. [P[x1',v21,...v2m] ==>] x2 v21 ... v2m REL
    *                                           x2' v21 ... v2m) ==>
    *      ...
    *      F[x1,x2,..,xn] REL F[x1',x2',..,xn']
    * \end{verbatim}
    * That probably doesn't make much sense.  Think of F as the construct
    * over which you are expressing the congruence.  Think of x1,x2,...xn
    * as the sub-constructs which are being rewritten, some of them under
    * additional assumptions.  The implications (one on each line in the 
    * sample above) state the necessary results which need to be derived 
    * about the subcomponents before the congruence can be deduced.  Some
    * of these subcomponenets may be simplified with extra assumpions - this
    * is indicated by P[x1] above.
    * 
    * Some subterms may be functions which we want
    * to rewrite under application. See the rule for restricted 
    * quantifiers for examples.
    * The simplifier does a degree of higher order matching when
    * these variables are specified.
    * 
    * Some examples (where REL is HOL equality)
    * \begin{verbatim}
    *  |- !g g' t t' e e'.
    *        (g = g') ==>
    *        (g ==> (t = t')) ==>
    *        (~g ==> (e = e')) ==>
    *        ((g => t | e) = (g' => t' | e')) : thm
    * 
    *   |- !P P' Q Q'.
    *        (!x. P x = P' x) ==>
    *        (!x. P x ==> (Q x = Q' x)) ==>
    *        (RES_EXISTS P Q = RES_EXISTS P' Q') : thm
    * \end{verbatim}
    * 
    * ---------------------------------------------------------------------*)

   type congproc (*  = { solver : term -> thm,
                         freevars: term list,
                         depther : (thm list * term) -> conv}  -> conv *)
   val CONGPROC :  Abbrev.conv ->  Thm.thm -> congproc

   val rel_of_congrule : Thm.thm -> Term.term  
   val nconds_of_congrule : Thm.thm -> int
  
   (* ---------------------------------------------------------------------
    * EQ_CONGPROC                                                       
    *
    * Optimized implementations of the HOL equality congruence rules using the
    * built in operations AP_TERM, AP_THM, MK_ABS and MK_COMB.  These could
    * conceivably be implemented by:
    *     (x = x') ==> (f = f') ==> (f x = f' x')
    *     (b = b') ==> (\x. b) = (\x. b')
    * ---------------------------------------------------------------------*)

   val EQ_CONGPROC : congproc
  

end;




structure Congprocs :  Congprocs_sig =
struct

open Core;
open Trace;
open Psyntax;
open Mk_abs_conv;

val WRAP = Exception.WRAP_ERR "Congprocs";
val ERR = Exception.ERR "Congprocs";

type congproc  = { solver : term -> thm,
                   freevars: term list,
                   depther : thm list * term -> conv}  -> conv

(* ---------------------------------------------------------------------
 * is_congruence
 *    Test if a term is a valid conclusion of a congruence rule,
 *
 * EXAMPLES
 *   is_congruence (--`(A ==> B) = (A' ==> B')`--);
 *   is_congruence (--`(A ==> B) ==> (A' ==> B')`--);
 *   is_congruence (--`(A ==> B) <== (A' ==> B')`--);
 *   is_congruence (--`(!x:'a. P x) <== (!x:'a. P' x)`--);
 *   is_congruence (--`(A <== A') ==> (A ==> B) ==> (A' ==> B')`--); (* false *)
 *  
 * rel_of_congruence
 *   Discover the relation a congruence is expressed over.                                                                
 *
 * EXAMPLES
 *   rel_of_congrule imp_imp_rule;
 *   rel_of_congrule imp_pmi_rule;
 *   rel_of_congrule pmi_imp_rule;
 *   rel_of_congrule pmi_neg_rule;
 *   rel_of_congrule imp_forall_rule;
 *
 * nconds_of_congrule
 *   Discover how many side conditions a congruence rule has.  Nb. Can't
 * just call strip_imp as the congruence may be expressed over (--`$==>`--)
 *
 *   nconds_of_congrule imp_imp_rule;  (* 2 *)
 *   nconds_of_congrule imp_pmi_rule;  (* 2 *)
 *   nconds_of_congrule pmi_imp_rule;  (* 2 *)
 *   nconds_of_congrule pmi_neg_rule;  (* 1 *)
 *   nconds_of_congrule pmi_forall_rule;  (* 1 *)
 *   nconds_of_congrule imp_forall_rule;  (* 1 *)
 * ---------------------------------------------------------------------*)

fun is_congruence tm =
   let val (rel,[left,right]) = strip_comb tm
       val (lop,largs) = strip_comb left
       val (rop,rargs) = strip_comb right
   in (can (match_term left) right) andalso (can (match_term right) left)
   end
   handle e => false;
fun rel_of_congrule thm =
   let fun aux tm = if (is_congruence tm)
                    then fst (strip_comb tm)
                    else aux (snd (dest_imp tm))
   in aux (snd(strip_forall (concl thm)))
   end
   handle e => WRAP("rel_of_congrule",e);
fun nconds_of_congrule thm =
   let fun aux tm = if (is_congruence tm)
                    then 0
                    else aux (snd (dest_imp tm)) + 1
   in aux (snd(strip_forall(concl thm)))
   end
   handle e => WRAP("nconds_of_congrule",e);
   
(* ---------------------------------------------------------------------
 * CONGPROC : REFL -> congrule -> congproc
 *                                                                   
 * ---------------------------------------------------------------------*)

fun strip_n_imp 0 tm = ([],tm)
  | strip_n_imp n tm = 
      let val (x,y) = dest_imp tm
          val (z,w) = strip_n_imp (n-1) y
      in (x::z,w)
      end;

(* ---------------------------------------------------------------------
 * strip_imp_until_rel
 *                                                                   
 * this function strips implications off a sub-congruence until
 * it is a relation (i.e. the rhs is one of the genvars we have chosen)
 * or it is no longer an implication (in which case the sub-congruence
 * is really a side condition.
 *
 * ---------------------------------------------------------------------*)


fun strip_imp_until_rel genvars tm =
     (if (is_var (rand tm) andalso mem (rand tm) genvars)
     then ([],tm)
     else let val (x,y) = dest_imp tm
              val (z,w) = strip_imp_until_rel genvars y
          in (x::z,w)
          end)
     handle _ => ([],tm);

(* ---------------------------------------------------------------------
 * CONGPROC : REFL -> congrule -> congproc
 *                                                                   
 * ---------------------------------------------------------------------*)

fun CONGPROC refl congrule = let

   (* this discharges each antecedent of the congruence rule.  Each
      antecedent is either a side condition or a sub-congruence.
      Side conditions must be passed to the solver, sub-congruences
      must be passed to the depther. .*)

   
   val congrule' = SPEC_ALL congrule
   val nconds = nconds_of_congrule congrule'
   val rel = rel_of_congrule congrule'
   val matcher = PART_MATCH (rand o rator o snd o strip_n_imp nconds) congrule'

in fn {solver,depther,freevars} => fn tm => let
   val match_thm = matcher tm
   val _ = trace_tm_thm(2,"",tm,"matches congruence rule",congrule')
   val genvars = free_vars (rand (snd (strip_n_imp nconds (concl match_thm))))

   (* this function does all the work of solving the side conditions
      one by one.  The integer is the number of side conditions
      remaining to be discharged.  Most of the side conditions
      will be sub-congruences of the form (--`A = ?A`--) where
      ?A will be a genvar created by PART_MATCH. *)

   fun process_subgoals (0,match_thm) = match_thm
     | process_subgoals (n,match_thm) =
       let val condition = #1 (dest_imp (concl match_thm))

           (* work out whether the condition is a congruence condition
              or a side condition.  If it is two place and the
              head combinator of the rhs is one of the subterms
              in the congruence (see subterms above)  *)
           val (gvars,bdy1) = strip_forall condition
           val (assums,bdy2) = strip_imp_until_rel genvars bdy1
           val (oper,args) = strip_comb bdy2
       in
           if (length args = 2 andalso mem (#1 (strip_comb (el 2 args))) genvars)
           then let val [orig,res] = args
                    val genv = #1 (strip_comb res)
                    val assum_thms = map ASSUME assums
                    val rewr_thm = 
                         (depther (assum_thms,oper) orig)
                         handle UNCHANGED => (trace_production(5,orig,"UNCHANGED",refl orig)) 
                    val abs_rewr_thm = 
                  CONV_RULE (EVERY_CONV (map (RAND_CONV o MK_ABS_CONV) gvars)) 
                           rewr_thm
                    val disch_abs_rewr_thm = itlist DISCH assums abs_rewr_thm
                    val gen_abs_rewr_thm = GENL gvars disch_abs_rewr_thm
                    val gen_abs_res = funpow (length gvars) rator (rand (concl abs_rewr_thm))
                    val spec_match_thm = SPEC gen_abs_res (GEN genv match_thm)
                    val new_match_thm = MP spec_match_thm gen_abs_rewr_thm
               in process_subgoals (n-1,new_match_thm)
               end
           else
               let val side_condition_thm = solver condition
                   val new_match_thm = MP match_thm side_condition_thm
               in process_subgoals (n-1,new_match_thm)
               end
       end

   val final_thm = process_subgoals (nconds,match_thm)

   in
       if (rand (rator (concl final_thm)) = rand (concl final_thm))
       then raise UNCHANGED
       else trace_production(2,tm,"congruence rule",final_thm)
   end
end;


(* ---------------------------------------------------------------------
 * EQ_CONGPROC
 *
 *  Opening through HOL terms under HOL equality. 
 * ---------------------------------------------------------------------*)

val equality = #const (const_decl "=");
fun EQ_CONGPROC {depther,solver,freevars} tm =
     case (Term.dest_term tm)
     of (COMB{Rator,Rand}) =>
           (let val th = depther ([],equality) Rator
            in  MK_COMB (th, depther ([],equality)  Rand)
                handle UNCHANGED => AP_THM th Rand
            end
            handle UNCHANGED => AP_TERM Rator (depther ([],equality)  Rand))
      | (LAMB{Bvar,Body}) =>
         if mem Bvar freevars
         then let val v = variant freevars Bvar
                  val _ = trace_tm(4,"alpha converting to",v)
                  val th1 = ALPHA_CONV v tm
                  val rhs' = rhs(concl th1)
                  val Body' = body rhs' (* v = Bvar *)
                  val _ = trace(4,"simplifiying body")
                  val body_thm = depther ([],equality) Body'
                  val eq_thm' = ABS v body_thm
              in TRANS th1 eq_thm'
              end
         else let val Bth = depther ([],equality) Body
              in ABS Bvar Bth
              end
      | _ => raise UNCHANGED;
   

(*======================================================================
 * Experimental
 * ====================================================================*)

(* ---------------------------------------------------------------------
 * remaining_path
 *
 * remaining_path (--`1`--,--`1 + 2`--,[RATOR,RAND,RATOR]); (* [RATOR] *)
 * remaining_path (--`2`--,--`1 + 2`--,[RATOR,RAND,RATOR]); (* HOL_ERR *)
 * lookup_path  [RATOR,RAND] (--`1 + 2`--);
 * ---------------------------------------------------------------------*)

(* ---------------------------------------------------------------------
 * open Term_paths;
 * 
 * type openproc  = { solver : term -> thm,
 *                    freevars: term list,
 *                    depther : thm list * term * termpath -> conv} 
 *                         -> termpath -> conv
 * 
 * exception NOT_ON_PATH;
 * fun remaining_path (subtm,tm,[]) = 
 *        if (subtm = tm) then [] 
 *        else raise NOT_ON_PATH
 *   | remaining_path (subtm,tm,path as (h::t)) = 
 *       if (subtm = tm) then path 
 *       else remaining_path (subtm,lookup_branch h tm,t);
 * ---------------------------------------------------------------------*)

(* ---------------------------------------------------------------------
 * OPENPROC : REFL -> congrule -> openproc
 *    this discharges each antecedent of the congruence rule.  Each
      antecedent is either a side condition or a sub-congruence.
      Side conditions must be passed to the solver, sub-congruences
      must be passed to the depther, when they are sub-congruences
      on the correct sub term we are opening onto.                                                                
 * ---------------------------------------------------------------------*)


(* ---------------------------------------------------------------------
 * fun OPENPROC refl congrule = let
 * 
 *    val congrule' = SPEC_ALL congrule
 *    val nconds = nconds_of_congrule congrule'
 *    val rel = rel_of_congrule congrule'
 *    val matcher = PART_MATCH (rand o rator o snd o strip_n_imp nconds) congrule'
 * 
 * in fn {solver,depther,freevars} => fn path => fn tm => let
 *    val match_thm = matcher tm
 *    val _ = trace_tm_thm(2,"",tm,"matches congruence rule",congrule')
 *    val genvars = free_vars (rand (snd (strip_n_imp nconds (concl match_thm))))
 * 
 *    fun process_subgoals (0,match_thm) = match_thm
 *      | process_subgoals (n,match_thm) =
 *        let val condition = #1 (dest_imp (concl match_thm))
 * 
 *            (* work out whether the condition is a congruence condition
 *               or a side condition.  If it is two place and the
 *               head combinator of the rhs is one of the subterms
 *               in the congruence (see subterms above)  *)
 *            val (gvars,bdy1) = strip_forall condition
 *            val (assums,bdy2) = strip_imp_until_rel genvars bdy1
 *            val (oper,args) = strip_comb bdy2
 *        in
 *         if (length args = 2 andalso mem (#1 (strip_comb (el 2 args))) genvars)
 *         then 
 *           let val [orig,res] = args
 *               val rewr_thm = 
 *                  let val rpath = remaining_path (orig,tm,path)
 *                      val assum_thms = map ASSUME assums
 *                  in  (depther (assum_thms,oper,rpath) orig)
 *                           handle UNCHANGED => 
 *                             (trace_production(5,orig,"UNCHANGED",refl orig)) 
 *                  end 
 *                  handle NOT_ON_PATH => refl orig
 *               val abs_rewr_thm = 
 *             CONV_RULE (EVERY_CONV (map (RAND_CONV o MK_ABS_CONV) gvars)) 
 *                      rewr_thm
 *               val genv = #1 (strip_comb res)
 *               val disch_abs_rewr_thm = itlist DISCH assums abs_rewr_thm
 *               val gen_abs_rewr_thm = GENL gvars disch_abs_rewr_thm
 *               val gen_abs_res = funpow (length gvars) rator (rand (concl abs_rewr_thm))
 *               val spec_match_thm = SPEC gen_abs_res (GEN genv match_thm)
 *               val new_match_thm = MP spec_match_thm gen_abs_rewr_thm
 *             in process_subgoals (n-1,new_match_thm)
 *             end
 *          else
 *            let val side_condition_thm = solver condition
 *                val new_match_thm = MP match_thm side_condition_thm
 *            in process_subgoals (n-1,new_match_thm)
 *            end
 *        end
 * 
 *    val final_thm = process_subgoals (nconds,match_thm)
 * 
 *    in
 *        if (rand (rator (concl final_thm)) = rand (concl final_thm))
 *        then raise UNCHANGED
 *        else trace_production(2,tm,"congruence rule",final_thm)
 *    end
 * end;
 * ---------------------------------------------------------------------*)

(* ---------------------------------------------------------------------
 * EQ_OPENPROC                                                        
 *
 *  Opening into HOL terms under HOL equality. 
 * ---------------------------------------------------------------------*)

(* ---------------------------------------------------------------------
 * fun EQ_OPENPROC {depther,solver,freevars} (RAND::path) tm =
 *      AP_TERM (rator tm) (depther ([],equality,path) (rand tm))
 *   | EQ_OPENPROC {depther,solver,freevars} (RATOR::path) tm =
 *      AP_THM (depther ([],equality,path) (rator tm)) (rand tm) 
 *   | EQ_OPENPROC {depther,solver,freevars} (BODY::path) tm =
 *     let val (Bvar,Body) = dest_abs tm
 *     in if mem Bvar freevars
 *        then let val v = variant freevars Bvar
 *                 val _ = trace_tm(4,"alpha converting to",v)
 *                 val th1 = ALPHA_CONV v tm
 *                 val rhs' = rhs(concl th1)
 *                 val Body' = body rhs' 
 *                 val _ = trace(4,"simplifiying body")
 *                 val body_thm = depther ([],equality,path) Body'
 *                 val eq_thm' = ABS v body_thm
 *             in TRANS th1 eq_thm'
 *             end
 *        else let val Bth = depther ([],equality,path) Body
 *             in ABS Bvar Bth
 *             end
 *     end
 *   | EQ_OPENPROC _ _ _ = ERR("BODY_OPENPROC","path empty");
 * ---------------------------------------------------------------------*)

end; (* structure *)






@


1.1
log
@Preterm and other changes, see 7.changes
@
text
@@
