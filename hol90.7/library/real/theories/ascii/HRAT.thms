thid = (HRAT, 784060143, 117238)
axioms = []
definitions =
[((hrat_sucint),
  [],
  `((! :(num -> bool) -> bool) (\(T1 :num).
   (((= :hrat -> hrat -> bool) (hrat_sucint $0)) (mk_hrat (trat_eq
   (trat_sucint $0))))))`),
 ((hrat_mul),
  [],
  `((! :(hrat -> bool) -> bool) (\(T1 :hrat).
   ((! :(hrat -> bool) -> bool) (\(T2 :hrat).
   (((= :hrat -> hrat -> bool) ((hrat_mul $1) $0)) (mk_hrat (trat_eq
   ((trat_mul ((@ :(num # num -> bool) -> num # num) (dest_hrat $1)))
   ((@ :(num # num -> bool) -> num # num) (dest_hrat $0))))))))))`),
 ((hrat_add),
  [],
  `((! :(hrat -> bool) -> bool) (\(T1 :hrat).
   ((! :(hrat -> bool) -> bool) (\(T2 :hrat).
   (((= :hrat -> hrat -> bool) ((hrat_add $1) $0)) (mk_hrat (trat_eq
   ((trat_add ((@ :(num # num -> bool) -> num # num) (dest_hrat $1)))
   ((@ :(num # num -> bool) -> num # num) (dest_hrat $0))))))))))`),
 ((hrat_inv),
  [],
  `((! :(hrat -> bool) -> bool) (\(T1 :hrat).
   (((= :hrat -> hrat -> bool) (hrat_inv $0)) (mk_hrat (trat_eq
   (trat_inv ((@ :(num # num -> bool) -> num # num) (dest_hrat
   $0))))))))`),
 ((hrat_1),
  [],
  `(((= :hrat -> hrat -> bool) hrat_1) (mk_hrat (trat_eq trat_1)))`),
 ((hrat_tybij),
  [],
  `((/\ ((! :(hrat -> bool) -> bool) (\(a :hrat).
   (((= :hrat -> hrat -> bool) (mk_hrat (dest_hrat $0))) $0))))
   ((! :((num # num -> bool) -> bool) -> bool)
   (\(r :num # num -> bool). (((= :bool -> bool -> bool)
   ((\(c :num # num -> bool). ((? :(num # num -> bool) -> bool)
   (\(x :num # num).
   (((= :(num # num -> bool) -> (num # num -> bool) -> bool) $1)
   (trat_eq $0))))) $0))
   (((= :(num # num -> bool) -> (num # num -> bool) -> bool)
   (dest_hrat (mk_hrat $0))) $0)))))`),
 ((hrat_TY_DEF),
  [],
  `((? :((hrat -> num # num -> bool) -> bool) -> bool)
   (\(rep :hrat -> num # num -> bool).
   (((TYPE_DEFINITION :((num # num -> bool) -> bool) ->
                       (hrat -> num # num -> bool) -> bool)
   (\(c :num # num -> bool). ((? :(num # num -> bool) -> bool)
   (\(x :num # num).
   (((= :(num # num -> bool) -> (num # num -> bool) -> bool) $1)
   (trat_eq $0)))))) $0)))`),
 ((trat_eq),
  [],
  `((! :(num -> bool) -> bool) (\(x :num). ((! :(num -> bool) -> bool)
   (\(y :num). ((! :(num -> bool) -> bool) (\(x' :num).
   ((! :(num -> bool) -> bool) (\(y' :num).
   (((= :bool -> bool -> bool) ((trat_eq
   (((, :num -> num -> num # num) $3) $2))
   (((, :num -> num -> num # num) $1) $0))) (((= :num -> num -> bool)
   ((* (SUC $3)) (SUC $0))) ((* (SUC $1)) (SUC $2))))))))))))`),
 ((trat_sucint),
  [],
  `((/\ (((= :num # num -> num # num -> bool) (trat_sucint 0))
   trat_1)) ((! :(num -> bool) -> bool) (\(n :num).
   (((= :num # num -> num # num -> bool) (trat_sucint (SUC $0)))
   ((trat_add (trat_sucint $0)) trat_1)))))`),
 ((trat_mul),
  [],
  `((! :(num -> bool) -> bool) (\(x :num). ((! :(num -> bool) -> bool)
   (\(y :num). ((! :(num -> bool) -> bool) (\(x' :num).
   ((! :(num -> bool) -> bool) (\(y' :num).
   (((= :num # num -> num # num -> bool) ((trat_mul
   (((, :num -> num -> num # num) $3) $2))
   (((, :num -> num -> num # num) $1) $0)))
   (((, :num -> num -> num # num) (PRE ((* (SUC $3)) (SUC $1)))) (PRE
   ((* (SUC $2)) (SUC $0)))))))))))))`),
 ((trat_add),
  [],
  `((! :(num -> bool) -> bool) (\(x :num). ((! :(num -> bool) -> bool)
   (\(y :num). ((! :(num -> bool) -> bool) (\(x' :num).
   ((! :(num -> bool) -> bool) (\(y' :num).
   (((= :num # num -> num # num -> bool) ((trat_add
   (((, :num -> num -> num # num) $3) $2))
   (((, :num -> num -> num # num) $1) $0)))
   (((, :num -> num -> num # num) (PRE ((+ ((* (SUC $3)) (SUC $0)))
   ((* (SUC $1)) (SUC $2))))) (PRE ((* (SUC $2)) (SUC
   $0)))))))))))))`),
 ((trat_inv),
  [],
  `((! :(num -> bool) -> bool) (\(x :num). ((! :(num -> bool) -> bool)
   (\(y :num). (((= :num # num -> num # num -> bool) (trat_inv
   (((, :num -> num -> num # num) $1) $0)))
   (((, :num -> num -> num # num) $0) $1))))))`),
 ((trat_1),
  [],
  `(((= :num # num -> num # num -> bool) trat_1)
   (((, :num -> num -> num # num) 0) 0))`)]
theorems =
[((HRAT_SUCINT),
  [],
  `((/\ (((= :hrat -> hrat -> bool) (hrat_sucint 0)) hrat_1))
   ((! :(num -> bool) -> bool) (\(n :num). (((= :hrat -> hrat -> bool)
   (hrat_sucint (SUC $0))) ((hrat_add (hrat_sucint $0)) hrat_1)))))`),
 ((HRAT_ARCH),
  [],
  `((! :(hrat -> bool) -> bool) (\(h :hrat).
   ((? :(num -> bool) -> bool) (\(n :num).
   ((? :(hrat -> bool) -> bool) (\(d :hrat).
   (((= :hrat -> hrat -> bool) (hrat_sucint $1)) ((hrat_add $2)
   $0))))))))`),
 ((HRAT_ADD_TOTAL),
  [],
  `((! :(hrat -> bool) -> bool) (\(h :hrat).
   ((! :(hrat -> bool) -> bool) (\(i :hrat). ((\/
   (((= :hrat -> hrat -> bool) $1) $0)) ((\/
   ((? :(hrat -> bool) -> bool) (\(d :hrat).
   (((= :hrat -> hrat -> bool) $2) ((hrat_add $1) $0)))))
   ((? :(hrat -> bool) -> bool) (\(d :hrat).
   (((= :hrat -> hrat -> bool) $1) ((hrat_add $2) $0))))))))))`),
 ((HRAT_NOZERO),
  [],
  `((! :(hrat -> bool) -> bool) (\(h :hrat).
   ((! :(hrat -> bool) -> bool) (\(i :hrat). (~
   (((= :hrat -> hrat -> bool) ((hrat_add $1) $0)) $1))))))`),
 ((HRAT_MUL_LINV),
  [],
  `((! :(hrat -> bool) -> bool) (\(h :hrat).
   (((= :hrat -> hrat -> bool) ((hrat_mul (hrat_inv $0)) $0))
   hrat_1)))`),
 ((HRAT_MUL_LID),
  [],
  `((! :(hrat -> bool) -> bool) (\(h :hrat).
   (((= :hrat -> hrat -> bool) ((hrat_mul hrat_1) $0)) $0)))`),
 ((HRAT_LDISTRIB),
  [],
  `((! :(hrat -> bool) -> bool) (\(h :hrat).
   ((! :(hrat -> bool) -> bool) (\(i :hrat).
   ((! :(hrat -> bool) -> bool) (\(j :hrat).
   (((= :hrat -> hrat -> bool) ((hrat_mul $2) ((hrat_add $1) $0)))
   ((hrat_add ((hrat_mul $2) $1)) ((hrat_mul $2) $0)))))))))`),
 ((HRAT_MUL_ASSOC),
  [],
  `((! :(hrat -> bool) -> bool) (\(h :hrat).
   ((! :(hrat -> bool) -> bool) (\(i :hrat).
   ((! :(hrat -> bool) -> bool) (\(j :hrat).
   (((= :hrat -> hrat -> bool) ((hrat_mul $2) ((hrat_mul $1) $0)))
   ((hrat_mul ((hrat_mul $2) $1)) $0))))))))`),
 ((HRAT_MUL_SYM),
  [],
  `((! :(hrat -> bool) -> bool) (\(h :hrat).
   ((! :(hrat -> bool) -> bool) (\(i :hrat).
   (((= :hrat -> hrat -> bool) ((hrat_mul $1) $0)) ((hrat_mul $0)
   $1))))))`),
 ((HRAT_ADD_ASSOC),
  [],
  `((! :(hrat -> bool) -> bool) (\(h :hrat).
   ((! :(hrat -> bool) -> bool) (\(i :hrat).
   ((! :(hrat -> bool) -> bool) (\(j :hrat).
   (((= :hrat -> hrat -> bool) ((hrat_add $2) ((hrat_add $1) $0)))
   ((hrat_add ((hrat_add $2) $1)) $0))))))))`),
 ((HRAT_ADD_SYM),
  [],
  `((! :(hrat -> bool) -> bool) (\(h :hrat).
   ((! :(hrat -> bool) -> bool) (\(i :hrat).
   (((= :hrat -> hrat -> bool) ((hrat_add $1) $0)) ((hrat_add $0)
   $1))))))`),
 ((TRAT_EQ_EQUIV),
  [],
  `((! :(num # num -> bool) -> bool) (\(p :num # num).
   ((! :(num # num -> bool) -> bool) (\(q :num # num).
   (((= :bool -> bool -> bool) ((trat_eq $1) $0))
   (((= :(num # num -> bool) -> (num # num -> bool) -> bool) (trat_eq
   $1)) (trat_eq $0)))))))`),
 ((TRAT_SUCINT),
  [],
  `((/\ ((trat_eq (trat_sucint 0)) trat_1))
   ((! :(num -> bool) -> bool) (\(n :num). ((trat_eq (trat_sucint (SUC
   $0))) ((trat_add (trat_sucint $0)) trat_1)))))`),
 ((TRAT_ARCH),
  [],
  `((! :(num # num -> bool) -> bool) (\(h :num # num).
   ((? :(num -> bool) -> bool) (\(n :num).
   ((? :(num # num -> bool) -> bool) (\(d :num # num). ((trat_eq
   (trat_sucint $1)) ((trat_add $2) $0))))))))`),
 ((TRAT_SUCINT_0),
  [],
  `((! :(num -> bool) -> bool) (\(n :num). ((trat_eq (trat_sucint $0))
   (((, :num -> num -> num # num) $0) 0))))`),
 ((TRAT_ADD_TOTAL),
  [],
  `((! :(num # num -> bool) -> bool) (\(h :num # num).
   ((! :(num # num -> bool) -> bool) (\(i :num # num). ((\/ ((trat_eq
   $1) $0)) ((\/ ((? :(num # num -> bool) -> bool) (\(d :num # num).
   ((trat_eq $2) ((trat_add $1) $0)))))
   ((? :(num # num -> bool) -> bool) (\(d :num # num). ((trat_eq $1)
   ((trat_add $2) $0))))))))))`),
 ((TRAT_NOZERO),
  [],
  `((! :(num # num -> bool) -> bool) (\(h :num # num).
   ((! :(num # num -> bool) -> bool) (\(i :num # num). (~ ((trat_eq
   ((trat_add $1) $0)) $1))))))`),
 ((TRAT_MUL_LINV),
  [],
  `((! :(num # num -> bool) -> bool) (\(h :num # num). ((trat_eq
   ((trat_mul (trat_inv $0)) $0)) trat_1)))`),
 ((TRAT_MUL_LID),
  [],
  `((! :(num # num -> bool) -> bool) (\(h :num # num). ((trat_eq
   ((trat_mul trat_1) $0)) $0)))`),
 ((TRAT_LDISTRIB),
  [],
  `((! :(num # num -> bool) -> bool) (\(h :num # num).
   ((! :(num # num -> bool) -> bool) (\(i :num # num).
   ((! :(num # num -> bool) -> bool) (\(j :num # num). ((trat_eq
   ((trat_mul $2) ((trat_add $1) $0))) ((trat_add ((trat_mul $2) $1))
   ((trat_mul $2) $0)))))))))`),
 ((TRAT_MUL_ASSOC),
  [],
  `((! :(num # num -> bool) -> bool) (\(h :num # num).
   ((! :(num # num -> bool) -> bool) (\(i :num # num).
   ((! :(num # num -> bool) -> bool) (\(j :num # num). ((trat_eq
   ((trat_mul $2) ((trat_mul $1) $0))) ((trat_mul ((trat_mul $2) $1))
   $0))))))))`),
 ((TRAT_MUL_SYM),
  [],
  `((! :(num # num -> bool) -> bool) (\(h :num # num).
   ((! :(num # num -> bool) -> bool) (\(i :num # num). ((trat_eq
   ((trat_mul $1) $0)) ((trat_mul $0) $1))))))`),
 ((TRAT_ADD_ASSOC),
  [],
  `((! :(num # num -> bool) -> bool) (\(h :num # num).
   ((! :(num # num -> bool) -> bool) (\(i :num # num).
   ((! :(num # num -> bool) -> bool) (\(j :num # num). ((trat_eq
   ((trat_add $2) ((trat_add $1) $0))) ((trat_add ((trat_add $2) $1))
   $0))))))))`),
 ((TRAT_ADD_SYM),
  [],
  `((! :(num # num -> bool) -> bool) (\(h :num # num).
   ((! :(num # num -> bool) -> bool) (\(i :num # num). ((trat_eq
   ((trat_add $1) $0)) ((trat_add $0) $1))))))`),
 ((TRAT_MUL_WELLDEFINED2),
  [],
  `((! :(num # num -> bool) -> bool) (\(p1 :num # num).
   ((! :(num # num -> bool) -> bool) (\(p2 :num # num).
   ((! :(num # num -> bool) -> bool) (\(q1 :num # num).
   ((! :(num # num -> bool) -> bool) (\(q2 :num # num). ((==> ((/\
   ((trat_eq $3) $2)) ((trat_eq $1) $0))) ((trat_eq ((trat_mul $3)
   $1)) ((trat_mul $2) $0)))))))))))`),
 ((TRAT_MUL_WELLDEFINED),
  [],
  `((! :(num # num -> bool) -> bool) (\(p :num # num).
   ((! :(num # num -> bool) -> bool) (\(q :num # num).
   ((! :(num # num -> bool) -> bool) (\(r :num # num). ((==> ((trat_eq
   $2) $1)) ((trat_eq ((trat_mul $2) $0)) ((trat_mul $1)
   $0)))))))))`),
 ((TRAT_ADD_WELLDEFINED2),
  [],
  `((! :(num # num -> bool) -> bool) (\(p1 :num # num).
   ((! :(num # num -> bool) -> bool) (\(p2 :num # num).
   ((! :(num # num -> bool) -> bool) (\(q1 :num # num).
   ((! :(num # num -> bool) -> bool) (\(q2 :num # num). ((==> ((/\
   ((trat_eq $3) $2)) ((trat_eq $1) $0))) ((trat_eq ((trat_add $3)
   $1)) ((trat_add $2) $0)))))))))))`),
 ((TRAT_ADD_WELLDEFINED),
  [],
  `((! :(num # num -> bool) -> bool) (\(p :num # num).
   ((! :(num # num -> bool) -> bool) (\(q :num # num).
   ((! :(num # num -> bool) -> bool) (\(r :num # num). ((==> ((trat_eq
   $2) $1)) ((trat_eq ((trat_add $2) $0)) ((trat_add $1)
   $0)))))))))`),
 ((TRAT_INV_WELLDEFINED),
  [],
  `((! :(num # num -> bool) -> bool) (\(p :num # num).
   ((! :(num # num -> bool) -> bool) (\(q :num # num). ((==> ((trat_eq
   $1) $0)) ((trat_eq (trat_inv $1)) (trat_inv $0)))))))`),
 ((TRAT_MUL_SYM_EQ),
  [],
  `((! :(num # num -> bool) -> bool) (\(h :num # num).
   ((! :(num # num -> bool) -> bool) (\(i :num # num).
   (((= :num # num -> num # num -> bool) ((trat_mul $1) $0))
   ((trat_mul $0) $1))))))`),
 ((TRAT_ADD_SYM_EQ),
  [],
  `((! :(num # num -> bool) -> bool) (\(h :num # num).
   ((! :(num # num -> bool) -> bool) (\(i :num # num).
   (((= :num # num -> num # num -> bool) ((trat_add $1) $0))
   ((trat_add $0) $1))))))`),
 ((TRAT_EQ_AP),
  [],
  `((! :(num # num -> bool) -> bool) (\(p :num # num).
   ((! :(num # num -> bool) -> bool) (\(q :num # num). ((==>
   (((= :num # num -> num # num -> bool) $1) $0)) ((trat_eq $1)
   $0))))))`),
 ((TRAT_EQ_TRANS),
  [],
  `((! :(num # num -> bool) -> bool) (\(p :num # num).
   ((! :(num # num -> bool) -> bool) (\(q :num # num).
   ((! :(num # num -> bool) -> bool) (\(r :num # num). ((==> ((/\
   ((trat_eq $2) $1)) ((trat_eq $1) $0))) ((trat_eq $2) $0))))))))`),
 ((TRAT_EQ_SYM),
  [],
  `((! :(num # num -> bool) -> bool) (\(p :num # num).
   ((! :(num # num -> bool) -> bool) (\(q :num # num).
   (((= :bool -> bool -> bool) ((trat_eq $1) $0)) ((trat_eq $0)
   $1))))))`),
 ((TRAT_EQ_REFL),
  [],
  `((! :(num # num -> bool) -> bool) (\(p :num # num). ((trat_eq $0)
   $0)))`)]
