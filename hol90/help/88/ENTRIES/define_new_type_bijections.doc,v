head	1.1;
branch	1.1.1;
access;
symbols
	HOL97:1.1.1.1.0.6
	bpHOL97:1.1.1.1
	hol90_9_alpha:1.1.1.1
	hol90_pre8_for_multiple_compilers:1.1.1.1.0.4
	hol90_pre8_after_donalds_separate_compilation_changes:1.1.1.1
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.10.16.13.34.36;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.34.36;	author rjb;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@\DOC define_new_type_bijections

\TYPE {define_new_type_bijections : (string -> string -> string -> thm -> thm)}

\SYNOPSIS
Introduces abstraction and representation functions for a defined type.

\DESCRIBE
The result of making a type definition using {new_type_definition} is a
theorem of the following form:
{
   |- ?rep:nty->ty. TYPE_DEFINITION P rep
}
\noindent which asserts only the existence of a bijection from the type it
defines (in this case, {nty}) to the corresponding subset of an existing type
(here, {ty}) whose characteristic function is specified by {P}.  To
automatically introduce constants that in fact denote this bijection and its
inverse, the ML function {define_new_type_bijections} is provided.

This function takes three string arguments and a theorem argument.  The theorem
argument must be a definitional axiom of the form returned by
{new_type_definition}.  The first string argument is the name under which the
constant definition (a constant specification, in fact) made by
{define_new_type_bijections} will be stored in the current theory segment. The
second and third string arguments are user-specified names for the two
constants that are to be defined. These constants are defined so as to denote
mutually inverse bijections between the defined type, whose definition is given
by the supplied theorem, and the representing type of this defined type.

If {th} is a theorem of the form returned by {new_type_definition}:
{
   |- ?rep:newty->ty. TYPE_DEFINITION P rep
}
\noindent then evaluating:
{
   define_new_type_bijections `name` `abs` `rep` th
}
\noindent automatically defines two new constants {abs:ty->newty} and
{rep:newty->ty} such that:
{
   |- (!a. abs(rep a) = a) /\ (!r. P r = (rep(abs r) = r))
}
\noindent This theorem, which is the defining property for the constants {abs}
and {rep}, is stored under the name {name} in the current theory segment.  It
is also the value returned by {define_new_type_bijections}.  The theorem states
that {abs} is the left inverse of {rep} and, for values satisfying {P}, that
{rep} is the left inverse of {abs}.

\FAILURE
A call to {define_new_type_bijections name abs rep th} fails if {th} is not a
theorem of the form returned by {new_type_definition}, or if either {abs} or
{rep} is already the name of a constant in the current theory, or there already
exists a constant definition, constant specification, type definition or axiom
named {name} in the current theory, or HOL is not in draft mode.

\SEEALSO
new_type_definition, prove_abs_fn_one_one, prove_abs_fn_onto,
prove_rep_fn_one_one, prove_rep_fn_onto.

\ENDDOC
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
