thid = (pair_thms, 783975805, 473186)
axioms = []
definitions = []
theorems =
[((RIGHT_EXISTS_IMP_THM),
  [],
  `((! :(bool -> bool) -> bool) (\(P :bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(g :'a -> bool).
   (((= :bool -> bool -> bool) ((? :('a -> bool) -> bool) (\(x :'a).
   ((==> $2) ($1 $0))))) ((==> $1) ((? :('a -> bool) -> bool)
   (\(x :'a). ($1 $0)))))))))`),
 ((LEFT_EXISTS_IMP_THM),
  [],
  `((! :(bool -> bool) -> bool) (\(Q :bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(f :'a -> bool).
   (((= :bool -> bool -> bool) ((? :('a -> bool) -> bool) (\(x :'a).
   ((==> ($1 $0)) $2)))) ((==> ((! :('a -> bool) -> bool) (\(x :'a).
   ($1 $0)))) $1))))))`),
 ((BOTH_EXISTS_IMP_THM),
  [],
  `((! :(bool -> bool) -> bool) (\(P :bool).
   ((! :(bool -> bool) -> bool) (\(Q :bool).
   (((= :bool -> bool -> bool) ((? :('a -> bool) -> bool) (\(x :'a).
   ((==> $2) $1)))) ((==> ((! :('a -> bool) -> bool) (\(x :'a). $2)))
   ((? :('a -> bool) -> bool) (\(x :'a). $1))))))))`),
 ((RIGHT_FORALL_IMP_THM),
  [],
  `((! :(bool -> bool) -> bool) (\(P :bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(g :'a -> bool).
   (((= :bool -> bool -> bool) ((! :('a -> bool) -> bool) (\(x :'a).
   ((==> $2) ($1 $0))))) ((==> $1) ((! :('a -> bool) -> bool)
   (\(x :'a). ($1 $0)))))))))`),
 ((LEFT_FORALL_IMP_THM),
  [],
  `((! :(bool -> bool) -> bool) (\(Q :bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(f :'a -> bool).
   (((= :bool -> bool -> bool) ((! :('a -> bool) -> bool) (\(x :'a).
   ((==> ($1 $0)) $2)))) ((==> ((? :('a -> bool) -> bool) (\(x :'a).
   ($1 $0)))) $1))))))`),
 ((BOTH_FORALL_IMP_THM),
  [],
  `((! :(bool -> bool) -> bool) (\(P :bool).
   ((! :(bool -> bool) -> bool) (\(Q :bool).
   (((= :bool -> bool -> bool) ((! :('a -> bool) -> bool) (\(x :'a).
   ((==> $2) $1)))) ((==> ((? :('a -> bool) -> bool) (\(x :'a). $2)))
   ((! :('a -> bool) -> bool) (\(x :'a). $1))))))))`),
 ((RIGHT_FORALL_OR_THM),
  [],
  `((! :(bool -> bool) -> bool) (\(P :bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(g :'a -> bool).
   (((= :bool -> bool -> bool) ((! :('a -> bool) -> bool) (\(x :'a).
   ((\/ $2) ($1 $0))))) ((\/ $1) ((! :('a -> bool) -> bool) (\(x :'a).
   ($1 $0)))))))))`),
 ((LEFT_FORALL_OR_THM),
  [],
  `((! :(bool -> bool) -> bool) (\(Q :bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(f :'a -> bool).
   (((= :bool -> bool -> bool) ((! :('a -> bool) -> bool) (\(x :'a).
   ((\/ ($1 $0)) $2)))) ((\/ ((! :('a -> bool) -> bool) (\(x :'a). ($1
   $0)))) $1))))))`),
 ((BOTH_FORALL_OR_THM),
  [],
  `((! :(bool -> bool) -> bool) (\(P :bool).
   ((! :(bool -> bool) -> bool) (\(Q :bool).
   (((= :bool -> bool -> bool) ((! :('a -> bool) -> bool) (\(x :'a).
   ((\/ $2) $1)))) ((\/ ((! :('a -> bool) -> bool) (\(x :'a). $2)))
   ((! :('a -> bool) -> bool) (\(x :'a). $1))))))))`),
 ((RIGHT_EXISTS_AND_THM),
  [],
  `((! :(bool -> bool) -> bool) (\(P :bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(g :'a -> bool).
   (((= :bool -> bool -> bool) ((? :('a -> bool) -> bool) (\(x :'a).
   ((/\ $2) ($1 $0))))) ((/\ $1) ((? :('a -> bool) -> bool) (\(x :'a).
   ($1 $0)))))))))`),
 ((LEFT_EXISTS_AND_THM),
  [],
  `((! :(bool -> bool) -> bool) (\(Q :bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(f :'a -> bool).
   (((= :bool -> bool -> bool) ((? :('a -> bool) -> bool) (\(x :'a).
   ((/\ ($1 $0)) $2)))) ((/\ ((? :('a -> bool) -> bool) (\(x :'a). ($1
   $0)))) $1))))))`),
 ((BOTH_EXISTS_AND_THM),
  [],
  `((! :(bool -> bool) -> bool) (\(P :bool).
   ((! :(bool -> bool) -> bool) (\(Q :bool).
   (((= :bool -> bool -> bool) ((? :('a -> bool) -> bool) (\(x :'a).
   ((/\ $2) $1)))) ((/\ ((? :('a -> bool) -> bool) (\(x :'a). $2)))
   ((? :('a -> bool) -> bool) (\(x :'a). $1))))))))`),
 ((RIGHT_OR_EXISTS_THM),
  [],
  `((! :(bool -> bool) -> bool) (\(P :bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(g :'a -> bool).
   (((= :bool -> bool -> bool) ((\/ $1) ((? :('a -> bool) -> bool)
   (\(x :'a). ($1 $0))))) ((? :('a -> bool) -> bool) (\(x :'a). ((\/
   $2) ($1 $0)))))))))`),
 ((LEFT_OR_EXISTS_THM),
  [],
  `((! :(bool -> bool) -> bool) (\(Q :bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(f :'a -> bool).
   (((= :bool -> bool -> bool) ((\/ ((? :('a -> bool) -> bool)
   (\(x :'a). ($1 $0)))) $1)) ((? :('a -> bool) -> bool) (\(x :'a).
   ((\/ ($1 $0)) $2))))))))`),
 ((RIGHT_AND_FORALL_THM),
  [],
  `((! :(bool -> bool) -> bool) (\(P :bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(g :'a -> bool).
   (((= :bool -> bool -> bool) ((/\ $1) ((! :('a -> bool) -> bool)
   (\(x :'a). ($1 $0))))) ((! :('a -> bool) -> bool) (\(x :'a). ((/\
   $2) ($1 $0)))))))))`),
 ((LEFT_AND_FORALL_THM),
  [],
  `((! :(bool -> bool) -> bool) (\(Q :bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(f :'a -> bool).
   (((= :bool -> bool -> bool) ((/\ ((! :('a -> bool) -> bool)
   (\(x :'a). ($1 $0)))) $1)) ((! :('a -> bool) -> bool) (\(x :'a).
   ((/\ ($1 $0)) $2))))))))`),
 ((EXISTS_OR_THM),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(f :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(g :'a -> bool).
   (((= :bool -> bool -> bool) ((? :('a -> bool) -> bool) (\(x :'a).
   ((\/ ($2 $0)) ($1 $0))))) ((\/ ((? :('a -> bool) -> bool)
   (\(x :'a). ($2 $0)))) ((? :('a -> bool) -> bool) (\(x :'a). ($1
   $0)))))))))`),
 ((FORALL_AND_THM),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(f :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(g :'a -> bool).
   (((= :bool -> bool -> bool) ((! :('a -> bool) -> bool) (\(x :'a).
   ((/\ ($2 $0)) ($1 $0))))) ((/\ ((! :('a -> bool) -> bool)
   (\(x :'a). ($2 $0)))) ((! :('a -> bool) -> bool) (\(x :'a). ($1
   $0)))))))))`),
 ((NOT_EXISTS_THM),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(f :'a -> bool).
   (((= :bool -> bool -> bool) (~ ((? :('a -> bool) -> bool)
   (\(x :'a). ($1 $0))))) ((! :('a -> bool) -> bool) (\(x :'a). (~ ($1
   $0)))))))`),
 ((NOT_FORALL_THM),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(f :'a -> bool).
   (((= :bool -> bool -> bool) (~ ((! :('a -> bool) -> bool)
   (\(x :'a). ($1 $0))))) ((? :('a -> bool) -> bool) (\(x :'a). (~ ($1
   $0)))))))`),
 ((PEXISTS_THM),
  [],
  `((! :(('a -> 'b -> bool) -> bool) -> bool) (\(f :'a -> 'b -> bool).
   (((= :bool -> bool -> bool) ((? :('a -> bool) -> bool) (\(x :'a).
   ((? :('b -> bool) -> bool) (\(y :'b). (($2 $1) $0))))))
   ((? :('a # 'b -> bool) -> bool)
   ((UNCURRY :('a -> 'b -> bool) -> 'a # 'b -> bool) (\(x :'a).
   (\(y :'b). (($2 $1) $0))))))))`),
 ((PFORALL_THM),
  [],
  `((! :(('a -> 'b -> bool) -> bool) -> bool) (\(f :'a -> 'b -> bool).
   (((= :bool -> bool -> bool) ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('b -> bool) -> bool) (\(y :'b). (($2 $1) $0))))))
   ((! :('a # 'b -> bool) -> bool)
   ((UNCURRY :('a -> 'b -> bool) -> 'a # 'b -> bool) (\(x :'a).
   (\(y :'b). (($2 $1) $0))))))))`),
 ((UNCURRY_ONE_ONE_THM),
  [],
  `(((= :bool -> bool -> bool)
   (((= :('a # 'b -> 'c) -> ('a # 'b -> 'c) -> bool)
   ((UNCURRY :('a -> 'b -> 'c) -> 'a # 'b -> 'c) (f :'a -> 'b -> 'c)))
   ((UNCURRY :('a -> 'b -> 'c) -> 'a # 'b -> 'c)
   (g :'a -> 'b -> 'c))))
   (((= :('a -> 'b -> 'c) -> ('a -> 'b -> 'c) -> bool)
   (f :'a -> 'b -> 'c)) (g :'a -> 'b -> 'c)))`),
 ((CURRY_ONE_ONE_THM),
  [],
  `(((= :bool -> bool -> bool)
   (((= :('a -> 'b -> 'c) -> ('a -> 'b -> 'c) -> bool)
   ((CURRY :('a # 'b -> 'c) -> 'a -> 'b -> 'c) (f :'a # 'b -> 'c)))
   ((CURRY :('a # 'b -> 'c) -> 'a -> 'b -> 'c) (g :'a # 'b -> 'c))))
   (((= :('a # 'b -> 'c) -> ('a # 'b -> 'c) -> bool)
   (f :'a # 'b -> 'c)) (g :'a # 'b -> 'c)))`),
 ((UNCURRY_CURRY_THM),
  [],
  `((! :(('a # 'b -> 'c) -> bool) -> bool) (\(f :'a # 'b -> 'c).
   (((= :('a # 'b -> 'c) -> ('a # 'b -> 'c) -> bool)
   ((UNCURRY :('a -> 'b -> 'c) -> 'a # 'b -> 'c)
   ((CURRY :('a # 'b -> 'c) -> 'a -> 'b -> 'c) $0))) $0)))`),
 ((CURRY_UNCURRY_THM),
  [],
  `((! :(('a -> 'b -> 'c) -> bool) -> bool) (\(f :'a -> 'b -> 'c).
   (((= :('a -> 'b -> 'c) -> ('a -> 'b -> 'c) -> bool)
   ((CURRY :('a # 'b -> 'c) -> 'a -> 'b -> 'c)
   ((UNCURRY :('a -> 'b -> 'c) -> 'a # 'b -> 'c) $0))) $0)))`)]
