thid = (par_laws, 784894985, 291603)
axioms = []
definitions = []
theorems =
[((PREFIX_PAR_2),
  [],
  `((! :(string -> bool) -> bool) (\(c :string).
   ((! :(string -> bool) -> bool) (\(d :string).
   ((! :(process -> bool) -> bool) (\(P :process).
   ((! :(process -> bool) -> bool) (\(Q :process). ((==> ((/\
   (((SUBSET :string set -> string set -> bool)
   (((INSERT :string -> string set -> string set) $3)
   (((INSERT :string -> string set -> string set) $2)
   (EMPTY :string set))))
   (((INTER :string set -> string set -> string set) (ALPHA $1))
   (ALPHA $0)))) (~ (((= :string -> string -> bool) $3) $2))))
   (((= :process -> process -> bool) ((PAR ((--> $3) $1)) ((--> $2)
   $0))) (STOP (((UNION :string set -> string set -> string set)
   (ALPHA $1)) (ALPHA $0)))))))))))))`),
 ((PREFIX_PAR_1),
  [],
  `((! :(string -> bool) -> bool) (\(c :string).
   ((! :(process -> bool) -> bool) (\(P :process).
   ((! :(process -> bool) -> bool) (\(Q :process). ((==>
   (((IN :string -> string set -> bool) $2)
   (((INTER :string set -> string set -> string set) (ALPHA $1))
   (ALPHA $0)))) (((= :process -> process -> bool) ((PAR ((--> $2)
   $1)) ((--> $2) $0))) ((--> $2) ((PAR $1) $0))))))))))`),
 ((PAR_RUN),
  [],
  `((! :(process -> bool) -> bool) (\(P :process).
   (((= :process -> process -> bool) ((PAR $0) (RUN (ALPHA $0))))
   $0)))`),
 ((PAR_STOP),
  [],
  `((! :(process -> bool) -> bool) (\(P :process).
   (((= :process -> process -> bool) ((PAR $0) (STOP (ALPHA $0))))
   (STOP (ALPHA $0)))))`),
 ((PAR_ASSOC),
  [],
  `((! :(process -> bool) -> bool) (\(P :process).
   ((! :(process -> bool) -> bool) (\(Q :process).
   ((! :(process -> bool) -> bool) (\(R :process).
   (((= :process -> process -> bool) ((PAR $2) ((PAR $1) $0))) ((PAR
   ((PAR $2) $1)) $0))))))))`),
 ((PAR_SYM),
  [],
  `((! :(process -> bool) -> bool) (\(P :process).
   ((! :(process -> bool) -> bool) (\(Q :process).
   (((= :process -> process -> bool) ((PAR $1) $0)) ((PAR $0)
   $1))))))`),
 ((INTER_UNION_IMP),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a set -> bool) -> bool) (\(A :'a set).
   ((! :('a set -> bool) -> bool) (\(B :'a set). ((==>
   (((IN :'a -> 'a set -> bool) $2)
   (((INTER :'a set -> 'a set -> 'a set) $1) $0)))
   (((IN :'a -> 'a set -> bool) $2)
   (((UNION :'a set -> 'a set -> 'a set) $1) $0)))))))))`)]
