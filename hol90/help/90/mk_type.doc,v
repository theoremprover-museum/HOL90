head	1.1;
branch	1.1.1;
access;
symbols
	HOL97:1.1.1.1.0.6
	bpHOL97:1.1.1.1
	hol90_9_alpha:1.1.1.1
	hol90_pre8_for_multiple_compilers:1.1.1.1.0.4
	hol90_pre8_after_donalds_separate_compilation_changes:1.1.1.1
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.10.16.13.35.49;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.35.49;	author rjb;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@\DOC mk_type

\TYPE {mk_type : {{Tyop :string, Args :hol_type list}} -> hol_type}

\SYNOPSIS
Constructs a type (other than a variable type).

\DESCRIBE
{mk_type{{Tyop = "op", Args = [ty1,...,tyn]}}} returns 

    {==`:(ty1,...,tyn)op`==} 

where {op} is the name of a known {n}-ary type constructor. 


\FAILURE
Fails with 

    HOL_ERR{{origin_structure = "Dsyntax",origin_function="mk_type", message}}

where {message} is "type op not defined", if {Tyop} is not the name of a known
type, or "arities don't match" if the type is known but the length of the list
of argument types is not equal to the arity of the type constructor.

\EXAMPLE
{
- mk_type {{Tyop = "bool", Args = []}};
(==`:bool`==) : hol_type

- mk_type {{Tyop = "list", Args = [==`:bool`==]}};
(==`:bool list`==) : hol_type

- mk_type {{Tyop = "fun", Args = [==`:num`==,  ==`:bool`==]}};
(==`:num -> bool`==) : hol_type
}
\SEEALSO
dest_type, mk_vartype.

\ENDDOC
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
