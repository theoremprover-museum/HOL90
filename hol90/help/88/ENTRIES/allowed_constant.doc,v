head	1.1;
branch	1.1.1;
access;
symbols
	HOL97:1.1.1.1.0.6
	bpHOL97:1.1.1.1
	hol90_9_alpha:1.1.1.1
	hol90_pre8_for_multiple_compilers:1.1.1.1.0.4
	hol90_pre8_after_donalds_separate_compilation_changes:1.1.1.1
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.10.16.13.34.27;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.34.27;	author rjb;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@\DOC allowed_constant

\TYPE {allowed_constant : (string -> bool)}

\SYNOPSIS
Tests if a string has a permissible name for a constant.

\DESCRIBE
When applied to a string, {allowed_constant} returns {true} if the string is a
permissible constant name, that is, if it is an identifier (see the DESCRIPTION
for more details), and {false} otherwise.

\FAILURE
Never fails.

\EXAMPLE
The following shows how the lexical rules can be altered:
{
   #map allowed_constant [`pi`; `@@`; `a name`; `+++++`; `*`];;
   [true; true; false; false; true] : bool list

   #new_special_symbol `+++++`;;
   () : void

   #map allowed_constant [`pi`; `@@`; `a name`; `+++++`; `*`];;
   [true; true; false; true; true] : bool list
}
\COMMENTS
Note that this function only performs a lexical test; it does not check whether
there is already a constant of that name in the current theory.

\SEEALSO
constants, is_constant, new_alphanum, new_special_symbol, special_symbols.

\ENDDOC
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
