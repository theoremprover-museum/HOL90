head	1.4;
access;
symbols
	HOL97:1.2.0.4
	bpHOL97:1.2
	hol90_9_alpha:1.2
	hol90_pre8_for_multiple_compilers:1.2.0.2
	hol90_pre8_after_donalds_separate_compilation_changes:1.2
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.4
date	96.01.04.15.59.24;	author drs1004;	state Exp;
branches;
next	1.3;

1.3
date	95.12.18.11.38.19;	author drs1004;	state Exp;
branches;
next	1.2;

1.2
date	95.10.31.15.07.54;	author drs1004;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	95.10.16.13.30.23;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.30.23;	author rjb;	state Exp;
branches;
next	;

1.2.4.1
date	97.06.11.17.54.05;	author kxs;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	97.07.11.15.33.40;	author kxs;	state Exp;
branches;
next	;


desc
@@


1.4
log
@io transformers moved to 0/
@
text
@structure Psyntax :Psyntax_sig =
struct
open Exception;
infix ##;
open Lib;

open Pterms;

type thm = Thm.thm;

(*
fun PSYNTAX_ERR{func,mesg} =
        HOL_ERR{origin_structure = "Psyntax",
                origin_function = func,
                message = mesg};
*)


val mk_subst = map (fn (residue,redex) => {redex=redex,residue=residue});
val mk_old_subst = map (fn {residue,redex} =>(residue,redex))

val type_subst = Type.type_subst o mk_subst;
val subst = Term.subst o mk_subst;
fun subst_occs occs_list = (Dsyntax.subst_occs occs_list) o mk_subst;

val inst = Term.inst o mk_subst
val INST = Drule.INST o mk_subst

fun match_type ty = mk_old_subst o Match.match_type ty
fun match_term tm = (mk_old_subst##mk_old_subst) o Match.match_term tm;

local
val mk_s = map (fn (th,v) => {thm = th, var = v})
in
val SUBST = Thm.SUBST o mk_s
val SUBST_CONV = Drule.SUBST_CONV o mk_s
end;

val INST_TYPE = Thm.INST_TYPE o mk_subst;
val INST_TY_TERM = Conv.INST_TY_TERM o (mk_subst##mk_subst);

(*
fun new_type i s = Theory.new_type{Name = s, Arity = i};
fun new_constant(s,ty) = Theory.new_constant{Name = s, Ty = ty};
fun new_infix(s,ty,i) = Theory.new_infix{Name = s, Ty = ty,Prec=i};
fun new_binder(s,ty) = Theory.new_binder{Name = s, Ty = ty};

local
fun mk_fixity "binder" _ = Term.Binder
  | mk_fixity "constant" _ = Term.Prefix
  | mk_fixity "infix" i = Term.Infix i
  | mk_fixity s _ = raise PSYNTAX_ERR
                   {func = "new_specification",
                    mesg=s^" must be \"constant\", \"infix\" or \"binder\""}
fun tran (f,n,i) = {fixity=mk_fixity f i, const_name=n}
in
fun new_specification s alist th = 
     Const_spec.new_specification{name=s,consts = map tran alist,sat_thm = th}
end;

fun new_type_definition (n,p,th) = 
   Type_def.new_type_definition{name = n, pred = p, inhab_thm = th};


fun new_recursive_definition fix ax name tm =
     Prim_rec.new_recursive_definition
             {name = name,fixity = fix, rec_axiom = ax, def = tm};

fun define_new_type_bijections name ABS REP tyax =
     Type_def_support.define_new_type_bijections
             {name = name, ABS = ABS, REP = REP, tyax = tyax};

*)

end; (* Psyntax *)
@


1.3
log
@Preterm and other changes, see 7.changes
@
text
@a9 1
type fixity = Term.fixity;
d11 1
d16 1
d18 1
d42 1
a42 1

d73 2
@


1.2
log
@First phase of hol90.8 development.  hol90 now compiles using NJSML-CM
108.5, with separate compilation of libraries.  System dependencies
have been isolated in the makefiles and "portable.sml".

This involved a large number of enhancments to the source files,
most of which are documented in the 7.changes file (or will be shortly).
See also the correpsonding email corrspondence between RJB, KLS, TFM,
JRH and DRS that happened during this development.
@
text
@a4 1
open Term;
d7 1
a7 4
    type term = Term.term;
    type thm = Thm.thm;
    type hol_type = Type.hol_type;
    type fixity = Term.fixity;
d9 3
a16 53
fun mk_var(s,ty) = Term.mk_var{Name = s, Ty = ty};
fun mk_const(s,ty) = Dsyntax.mk_const{Name = s, Ty = ty};
fun mk_comb(t1,t2) = Term.mk_comb {Rator = t1, Rand = t2};
fun mk_abs(v,body) = Term.mk_abs{Bvar = v, Body = body};
fun mk_primed_var(s,ty) = Term.mk_primed_var{Name = s, Ty = ty};
fun mk_eq(t1,t2) = Dsyntax.mk_eq{lhs = t1, rhs = t2};
fun mk_imp(t1,t2) = Dsyntax.mk_imp{ant = t1, conseq = t2};
fun mk_select(v,body) = Dsyntax.mk_select{Bvar = v, Body = body};
fun mk_forall(v,body) = Dsyntax.mk_forall{Bvar = v, Body = body};
fun mk_exists(v,body) = Dsyntax.mk_exists{Bvar = v, Body = body};
fun mk_conj(t1,t2) = Dsyntax.mk_conj{conj1 = t1, conj2 = t2};
fun mk_disj(t1,t2) = Dsyntax.mk_disj{disj1 = t1, disj2 = t2};
fun mk_cond(p,t1,t2) = Dsyntax.mk_cond{cond = p, larm = t1, rarm = t2};
fun mk_pair(t1,t2) = Dsyntax.mk_pair{fst = t1, snd = t2};
fun mk_let(f,a)= Dsyntax.mk_let{func = f, arg  = a};
fun mk_cons(h,t) = Dsyntax.mk_cons {hd = h, tl = t};
fun mk_list(L,ty) = Dsyntax.mk_list{els = L, ty = ty};
fun mk_pabs(t1,t2) = Dsyntax.mk_pabs{varstruct = t1, body = t2};

(* Destruction routines *)
fun pair_atom{Name,Ty} = (Name,Ty);
fun pair_comb{Rator,Rand} = (Rator,Rand);
fun pair_binder{Bvar,Body} = (Bvar,Body);

val dest_var = pair_atom o Term.dest_var;
val dest_const = pair_atom o Term.dest_const;
val dest_comb = pair_comb o Term.dest_comb;
val dest_abs = pair_binder o Term.dest_abs;
fun dest_eq tm = let val {lhs,rhs} = Dsyntax.dest_eq tm in (lhs,rhs) end;
fun dest_imp tm = let val {ant,conseq} = Dsyntax.dest_imp tm
                  in (ant,conseq) end;
val dest_select = pair_binder o Dsyntax.dest_select;
val dest_forall = pair_binder o Dsyntax.dest_forall;
val dest_exists = pair_binder o Dsyntax.dest_exists;
fun dest_conj tm = let val {conj1,conj2} = Dsyntax.dest_conj tm
                   in (conj1,conj2) end;
fun dest_disj tm = let val {disj1,disj2} = Dsyntax.dest_disj tm
                   in (disj1,disj2) end;
fun dest_cond tm = let val {cond,larm,rarm} = Dsyntax.dest_cond tm 
                   in (cond,larm,rarm)  end;
fun dest_pair tm = let val{fst,snd} = Dsyntax.dest_pair tm in (fst,snd) end;
fun dest_let tm = let val {func, arg} = Dsyntax.dest_let tm in (func,arg) end;
fun dest_cons tm = let val {hd, tl} = Dsyntax.dest_cons tm in (hd,tl) end;
fun dest_list tm = let val {els, ty} = Dsyntax.dest_list tm in (els,ty) end;
fun dest_pabs tm = let val {varstruct, body} = Dsyntax.dest_pabs tm 
                   in (varstruct,body)
                   end;

fun mk_type(s,ty) = Type.mk_type{Tyop = s, Args = ty};
fun dest_type ty = let val {Tyop,Args} = Type.dest_type ty
                   in (Tyop,Args)
                   end;

d47 3
a49 3
fun mk_fixity "binder" _ = Binder
  | mk_fixity "constant" _ = Prefix
  | mk_fixity "infix" i = Infix i
@


1.2.4.1
log
@Changes made so that HOL builds on SMLNJ 109.26.
@
text
@d71 2
a72 2
fun mk_subst L = map (fn (residue,redex) => {redex=redex,residue=residue}) L;
fun mk_old_subst L = map (fn {residue,redex} =>(residue,redex)) L;
d74 2
a75 2
fun type_subst x = Type.type_subst (mk_subst x);
fun subst s = Term.subst (mk_subst s);
d84 2
a85 1
local fun mk_s  x = map (fn (th,v) => {thm = th, var = v}) x
@


1.2.4.2
log
@Updates to make HOP CM-friendly. gstack.sml.0 deleted because it was just a
security copy.
@
text
@a2 1

a4 1
open CoreHol;
@


1.1
log
@Initial revision
@
text
@d3 10
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
