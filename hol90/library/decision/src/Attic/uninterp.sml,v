head	1.1;
access;
symbols
	HOL97:1.1.2.1.0.2
	bpHOL97:1.1.2.1
	hol90_9_alpha:1.1.2.1
	hol90_pre8_for_multiple_compilers:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	96.08.23.09.14.24;	author rjb;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.08.23.09.14.25;	author rjb;	state Exp;
branches
	1.1.2.1.2.1;
next	;

1.1.2.1.2.1
date	97.07.11.19.38.39;	author kxs;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file uninterp.sml was initially added on branch hol90_pre8_for_multiple_compilers.
@
text
@@


1.1.2.1
log
@Initial version.
@
text
@a0 37
(****************************************************************************)
(* FILE          : uninterp.sml                                             *)
(* DESCRIPTION   : Decision procedure for uninterpreted function symbols.   *)
(*                                                                          *)
(* AUTHOR        : R.J.Boulton, University of Cambridge                     *)
(* DATE          : 22nd February 1995                                       *)
(*                                                                          *)
(* LAST MODIFIED : R.J.Boulton                                              *)
(* DATE          : 1st June 1996                                            *)
(****************************************************************************)

structure DecideUninterp =
struct

local

fun uninterp_discrim tm =
   let val (f,args) = strip_comb tm
   in  if (is_var f)
       then (fn args' => list_mk_comb (f,args'),args)
       else Decide.failwith "uninterp_discrim"
   end;

in

val uninterp_proc =
   {Name = "uninterp",
    Description = "Theory of equality on uninterpreted function symbols",
    Author = "Richard J. Boulton",
    Discriminator = uninterp_discrim,
    Normalizer = DecisionConv.ALL_CONV,
    Procedure = Decide.make_incremental_procedure LazyRules.CONJ
                   CongruenceClosure.CONGRUENCE_CONV};

end;

end; (* DecideUninterp *)
@


1.1.2.1.2.1
log
@Making the library CM friendly.
@
text
@d15 1
a15 1
local  open CoreHol.Term CoreHol.Dsyntax
@
