thid = (fixpoint, 866814635, 327311)
axioms = []
definitions =
[((ADMITS_INDUCTION),
  [],
  `((! :((('a -> bool) -> bool) -> bool) -> bool)
   (\(p :('a -> bool) -> bool). (((= :bool -> bool -> bool)
   ((ADMITS_INDUCTION :(('a -> bool) -> bool) -> bool) $0))
   ((! :((num -> 'a -> bool) -> bool) -> bool)
   (\(c :num -> 'a -> bool). ((==> ((/\
   ((CHAINF :(num -> 'a -> bool) -> bool) $0))
   ((! :(num -> bool) -> bool) (\(n :num). ($2 ($1 $0)))))) ($1
   ((SUP :(num -> 'a -> bool) -> 'a -> bool) $0))))))))`),
 ((CONTINUOUSF),
  [],
  `((! :((('a -> bool) -> 'a -> bool) -> bool) -> bool)
   (\(fun :('a -> bool) -> 'a -> bool). (((= :bool -> bool -> bool)
   ((CONTINUOUSF :(('a -> bool) -> 'a -> bool) -> bool) $0))
   ((! :((num -> 'a -> bool) -> bool) -> bool)
   (\(c :num -> 'a -> bool). ((==>
   ((CHAINF :(num -> 'a -> bool) -> bool) $0))
   (((= :('a -> bool) -> ('a -> bool) -> bool) ($1
   ((SUP :(num -> 'a -> bool) -> 'a -> bool) $0)))
   ((SUP :(num -> 'a -> bool) -> 'a -> bool) (\(n :num). ($2 ($1
   $0)))))))))))`),
 ((MONOTONE),
  [],
  `((! :((('a -> bool) -> 'a -> bool) -> bool) -> bool)
   (\(fun :('a -> bool) -> 'a -> bool). (((= :bool -> bool -> bool)
   ((MONOTONE :(('a -> bool) -> 'a -> bool) -> bool) $0))
   ((! :(('a -> bool) -> bool) -> bool) (\(p1 :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(p2 :'a -> bool). ((==>
   (((<<< :('a -> bool) -> ('a -> bool) -> bool) $1) $0))
   (((<<< :('a -> bool) -> ('a -> bool) -> bool) ($2 $1)) ($2
   $0))))))))))`),
 ((TRIV_CHAINF),
  [],
  `((! :('a -> bool) -> bool) (\(p1 :'a). ((! :('a -> bool) -> bool)
   (\(p2 :'a). (((= :(num -> 'a) -> (num -> 'a) -> bool)
   (((TRIV_CHAINF :'a -> 'a -> num -> 'a) $1) $0)) (\(n :num).
   ((((COND :bool -> 'a -> 'a -> 'a) (((= :num -> num -> bool) $0) 0))
   $2) $1)))))))`),
 ((CHAINF),
  [],
  `((! :((num -> 'a -> bool) -> bool) -> bool)
   (\(c :num -> 'a -> bool). (((= :bool -> bool -> bool)
   ((CHAINF :(num -> 'a -> bool) -> bool) $0))
   ((! :(num -> bool) -> bool) (\(n :num).
   (((<<< :('a -> bool) -> ('a -> bool) -> bool) ($1 $0)) ($1 (SUC
   $0))))))))`),
 ((LIM_FUNPOW),
  [],
  `((! :((('a -> bool) -> 'a -> bool) -> bool) -> bool)
   (\(fun :('a -> bool) -> 'a -> bool).
   (((= :('a -> bool) -> ('a -> bool) -> bool)
   ((LIM_FUNPOW :(('a -> bool) -> 'a -> bool) -> 'a -> bool) $0))
   ((SUP :(num -> 'a -> bool) -> 'a -> bool) (\(n :num).
   ((((FUNPOW :num -> (('a -> bool) -> 'a -> bool) -> ('a -> bool) ->
               'a -> bool) $0) $1) (BOT :'a -> bool)))))))`),
 ((BOT),
  [],
  `(((= :('a -> bool) -> ('a -> bool) -> bool) (BOT :'a -> bool))
   (\(x :'a). F))`),
 ((SUP),
  [],
  `((! :((num -> 'a -> bool) -> bool) -> bool)
   (\(c :num -> 'a -> bool).
   (((= :('a -> bool) -> ('a -> bool) -> bool)
   ((SUP :(num -> 'a -> bool) -> 'a -> bool) $0)) (\(x :'a).
   ((? :(num -> bool) -> bool) (\(n :num). (($2 $0) $1)))))))`),
 ((FUNPOW),
  [],
  `((/\ ((! :(('a -> 'a) -> bool) -> bool) (\(f :'a -> 'a).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :'a -> 'a -> bool)
   ((((FUNPOW :num -> ('a -> 'a) -> 'a -> 'a) 0) $1) $0)) $0))))))
   ((! :(num -> bool) -> bool) (\(n :num).
   ((! :(('a -> 'a) -> bool) -> bool) (\(f :'a -> 'a).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :'a -> 'a -> bool)
   ((((FUNPOW :num -> ('a -> 'a) -> 'a -> 'a) (SUC $2)) $1) $0)) ($1
   ((((FUNPOW :num -> ('a -> 'a) -> 'a -> 'a) $2) $1) $0))))))))))`),
 ((FIX),
  [],
  `((! :((('a -> bool) -> 'a -> bool) -> bool) -> bool)
   (\(fun :('a -> bool) -> 'a -> bool).
   (((= :('a -> bool) -> ('a -> bool) -> bool)
   ((FIX :(('a -> bool) -> 'a -> bool) -> 'a -> bool) $0))
   ((@ :(('a -> bool) -> bool) -> 'a -> bool) (\(f :'a -> bool). ((/\
   (((= :('a -> bool) -> ('a -> bool) -> bool) ($1 $0)) $0))
   ((! :(('a -> bool) -> bool) -> bool) (\(f' :'a -> bool). ((==>
   (((= :('a -> bool) -> ('a -> bool) -> bool) ($2 $0)) $0))
   (((<<< :('a -> bool) -> ('a -> bool) -> bool) $1) $0))))))))))`),
 ((LESS_DEF),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(f1 :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(f2 :'a -> bool).
   (((= :bool -> bool -> bool)
   (((<<< :('a -> bool) -> ('a -> bool) -> bool) $1) $0))
   ((! :('a -> bool) -> bool) (\(x :'a). ((==> ($2 $0)) ($1
   $0)))))))))`)]
theorems =
[((SCOTT_INDUCTION_THM),
  [],
  `((! :((('a -> bool) -> bool) -> bool) -> bool)
   (\(p :('a -> bool) -> bool).
   ((! :((('a -> bool) -> 'a -> bool) -> bool) -> bool)
   (\(fun :('a -> bool) -> 'a -> bool). ((==> ((/\
   ((ADMITS_INDUCTION :(('a -> bool) -> bool) -> bool) $1)) ((/\
   ((CONTINUOUSF :(('a -> bool) -> 'a -> bool) -> bool) $0)) ((/\ ($1
   (BOT :'a -> bool))) ((! :(('a -> bool) -> bool) -> bool)
   (\(f :'a -> bool). ((==> ($2 $0)) ($2 ($1 $0))))))))) ($1
   ((FIX :(('a -> bool) -> 'a -> bool) -> 'a -> bool) $0)))))))`),
 ((SCOTT_INDUCTION_LEMMA),
  [],
  `((! :((('a -> bool) -> bool) -> bool) -> bool)
   (\(p :('a -> bool) -> bool).
   ((! :((('a -> bool) -> 'a -> bool) -> bool) -> bool)
   (\(fun :('a -> bool) -> 'a -> bool). ((==> ((/\
   ((CONTINUOUSF :(('a -> bool) -> 'a -> bool) -> bool) $0)) ((/\ ($1
   (BOT :'a -> bool))) ((! :(('a -> bool) -> bool) -> bool)
   (\(f :'a -> bool). ((==> ($2 $0)) ($2 ($1 $0))))))))
   ((! :(num -> bool) -> bool) (\(n :num). ($2
   ((((FUNPOW :num -> (('a -> bool) -> 'a -> bool) -> ('a -> bool) ->
               'a -> bool) $0) $1) (BOT :'a -> bool))))))))))`),
 ((HOARE_ADMITS_LEMMA),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(q :'a -> bool).
   ((ADMITS_INDUCTION :(('a # 'a -> bool) -> bool) -> bool)
   (\(f :'a # 'a -> bool). ((! :('a -> bool) -> bool) (\(s1 :'a).
   ((! :('a -> bool) -> bool) (\(s2 :'a). ((==> ((/\ ($4 $1)) ($2
   (((, :'a -> 'a -> 'a # 'a) $1) $0)))) ($3 $0))))))))))))`),
 ((FIX_LIM_FUNPOW_THM),
  [],
  `((! :((('a -> bool) -> 'a -> bool) -> bool) -> bool)
   (\(fun :('a -> bool) -> 'a -> bool). ((==>
   ((CONTINUOUSF :(('a -> bool) -> 'a -> bool) -> bool) $0))
   (((= :('a -> bool) -> ('a -> bool) -> bool)
   ((FIX :(('a -> bool) -> 'a -> bool) -> 'a -> bool) $0))
   ((LIM_FUNPOW :(('a -> bool) -> 'a -> bool) -> 'a -> bool)
   $0)))))`),
 ((ANTISYM_LEMMA),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(f :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(g :'a -> bool). ((==> ((/\
   (((<<< :('a -> bool) -> ('a -> bool) -> bool) $1) $0))
   (((<<< :('a -> bool) -> ('a -> bool) -> bool) $0) $1)))
   (((= :('a -> bool) -> ('a -> bool) -> bool) $1) $0))))))`),
 ((FIX_THM),
  [],
  `((! :((('a -> bool) -> 'a -> bool) -> bool) -> bool)
   (\(fun :('a -> bool) -> 'a -> bool). ((==>
   ((CONTINUOUSF :(('a -> bool) -> 'a -> bool) -> bool) $0)) ((/\
   (((= :('a -> bool) -> ('a -> bool) -> bool) ($0
   ((FIX :(('a -> bool) -> 'a -> bool) -> 'a -> bool) $0)))
   ((FIX :(('a -> bool) -> 'a -> bool) -> 'a -> bool) $0)))
   ((! :(('a -> bool) -> bool) -> bool) (\(f :'a -> bool). ((==>
   (((= :('a -> bool) -> ('a -> bool) -> bool) ($1 $0)) $0))
   (((<<< :('a -> bool) -> ('a -> bool) -> bool)
   ((FIX :(('a -> bool) -> 'a -> bool) -> 'a -> bool) $1))
   $0))))))))`),
 ((FIX_EXISTS),
  [],
  `((! :((('a -> bool) -> 'a -> bool) -> bool) -> bool)
   (\(fun :('a -> bool) -> 'a -> bool). ((==>
   ((CONTINUOUSF :(('a -> bool) -> 'a -> bool) -> bool) $0))
   ((? :(('a -> bool) -> bool) -> bool) (\(f :'a -> bool). ((/\
   (((= :('a -> bool) -> ('a -> bool) -> bool) ($1 $0)) $0))
   ((! :(('a -> bool) -> bool) -> bool) (\(f' :'a -> bool). ((==>
   (((= :('a -> bool) -> ('a -> bool) -> bool) ($2 $0)) $0))
   (((<<< :('a -> bool) -> ('a -> bool) -> bool) $1) $0))))))))))`),
 ((LIM_FUNPOW_THM),
  [],
  `((! :((('a -> bool) -> 'a -> bool) -> bool) -> bool)
   (\(fun :('a -> bool) -> 'a -> bool). ((==>
   ((CONTINUOUSF :(('a -> bool) -> 'a -> bool) -> bool) $0)) ((/\
   (((= :('a -> bool) -> ('a -> bool) -> bool) ($0
   ((LIM_FUNPOW :(('a -> bool) -> 'a -> bool) -> 'a -> bool) $0)))
   ((LIM_FUNPOW :(('a -> bool) -> 'a -> bool) -> 'a -> bool) $0)))
   ((! :(('a -> bool) -> bool) -> bool) (\(f :'a -> bool). ((==>
   (((= :('a -> bool) -> ('a -> bool) -> bool) ($1 $0)) $0))
   (((<<< :('a -> bool) -> ('a -> bool) -> bool)
   ((LIM_FUNPOW :(('a -> bool) -> 'a -> bool) -> 'a -> bool) $1))
   $0))))))))`),
 ((LEAST_FIX_THM),
  [],
  `((! :((('a -> bool) -> 'a -> bool) -> bool) -> bool)
   (\(fun :('a -> bool) -> 'a -> bool). ((==>
   ((CONTINUOUSF :(('a -> bool) -> 'a -> bool) -> bool) $0))
   ((! :(('a -> bool) -> bool) -> bool) (\(f :'a -> bool). ((==>
   (((= :('a -> bool) -> ('a -> bool) -> bool) ($1 $0)) $0))
   (((<<< :('a -> bool) -> ('a -> bool) -> bool)
   ((LIM_FUNPOW :(('a -> bool) -> 'a -> bool) -> 'a -> bool) $1))
   $0)))))))`),
 ((LEAST_FIX_LEMMA),
  [],
  `((! :((('a -> bool) -> 'a -> bool) -> bool) -> bool)
   (\(fun :('a -> bool) -> 'a -> bool). ((==>
   ((CONTINUOUSF :(('a -> bool) -> 'a -> bool) -> bool) $0))
   ((! :(('a -> bool) -> bool) -> bool) (\(f :'a -> bool). ((==>
   (((= :('a -> bool) -> ('a -> bool) -> bool) ($1 $0)) $0))
   ((! :(num -> bool) -> bool) (\(n :num).
   (((<<< :('a -> bool) -> ('a -> bool) -> bool)
   ((((FUNPOW :num -> (('a -> bool) -> 'a -> bool) -> ('a -> bool) ->
               'a -> bool) $0) $2) (BOT :'a -> bool))) $1)))))))))`),
 ((FIX_LEMMA),
  [],
  `((! :((('a -> bool) -> 'a -> bool) -> bool) -> bool)
   (\(fun :('a -> bool) -> 'a -> bool). ((==>
   ((CONTINUOUSF :(('a -> bool) -> 'a -> bool) -> bool) $0))
   (((= :('a -> bool) -> ('a -> bool) -> bool) ($0
   ((LIM_FUNPOW :(('a -> bool) -> 'a -> bool) -> 'a -> bool) $0)))
   ((LIM_FUNPOW :(('a -> bool) -> 'a -> bool) -> 'a -> bool)
   $0)))))`),
 ((CONT_MONOTONE),
  [],
  `((! :((('a -> bool) -> 'a -> bool) -> bool) -> bool)
   (\(fun :('a -> bool) -> 'a -> bool). ((==>
   ((CONTINUOUSF :(('a -> bool) -> 'a -> bool) -> bool) $0))
   ((MONOTONE :(('a -> bool) -> 'a -> bool) -> bool) $0))))`),
 ((LAMB_TRIV_CHAINF),
  [],
  `((! :((('a -> bool) -> 'a -> bool) -> bool) -> bool)
   (\(fun :('a -> bool) -> 'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(p1 :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(p2 :'a -> bool).
   (((= :(num -> 'a -> bool) -> (num -> 'a -> bool) -> bool)
   (\(n :num). ($3
   ((((TRIV_CHAINF :('a -> bool) -> ('a -> bool) -> num -> 'a -> bool)
   $2) $1) $0))))
   (((TRIV_CHAINF :('a -> bool) -> ('a -> bool) -> num -> 'a -> bool)
   ($2 $1)) ($2 $0)))))))))`),
 ((SUP_CHAINF_LEMMA),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p1 :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(p2 :'a -> bool).
   (((= :bool -> bool -> bool)
   (((<<< :('a -> bool) -> ('a -> bool) -> bool) $1) $0))
   (((= :('a -> bool) -> ('a -> bool) -> bool)
   ((SUP :(num -> 'a -> bool) -> 'a -> bool)
   (((TRIV_CHAINF :('a -> bool) -> ('a -> bool) -> num -> 'a -> bool)
   $1) $0))) $0))))))`),
 ((CHAINF_FUNPOW),
  [],
  `((! :((('a -> bool) -> 'a -> bool) -> bool) -> bool)
   (\(fun :('a -> bool) -> 'a -> bool). ((==>
   ((MONOTONE :(('a -> bool) -> 'a -> bool) -> bool) $0))
   ((CHAINF :(num -> 'a -> bool) -> bool) (\(n :num).
   ((((FUNPOW :num -> (('a -> bool) -> 'a -> bool) -> ('a -> bool) ->
               'a -> bool) $0) $1) (BOT :'a -> bool)))))))`),
 ((TRIV_CHAINF_LEMMA),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p1 :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(p2 :'a -> bool). ((==>
   (((<<< :('a -> bool) -> ('a -> bool) -> bool) $1) $0))
   ((CHAINF :(num -> 'a -> bool) -> bool)
   (((TRIV_CHAINF :('a -> bool) -> ('a -> bool) -> num -> 'a -> bool)
   $1) $0)))))))`)]
