head	1.1;
branch	1.1.1;
access;
symbols
	HOL97:1.1.1.1.4.1.0.2
	bpHOL97:1.1.1.1.4.1
	hol90_9_alpha:1.1.1.1.4.1
	hol90_pre8_for_multiple_compilers:1.1.1.1.0.4
	hol90_pre8_after_donalds_separate_compilation_changes:1.1.1.1
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.10.16.13.31.53;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.31.53;	author rjb;	state Exp;
branches
	1.1.1.1.4.1;
next	;

1.1.1.1.4.1
date	96.08.23.09.44.35;	author rjb;	state Exp;
branches
	1.1.1.1.4.1.2.1;
next	;

1.1.1.1.4.1.2.1
date	97.07.14.17.34.23;	author kxs;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@signature HOARE_LOGIC =
    sig
        (* forward proof rules *)

	val ASSIGN_AX  : term -> term -> thm

	val SEQ_RULE   : thm * thm -> thm
	val SEQL_RULE  : thm list -> thm
	val IF1_RULE   : thm * thm -> thm
	val IF2_RULE   : thm * thm -> thm
        val WHILE_RULE : thm -> thm

	val PRE_STRENGTH_RULE : thm * thm -> thm
	val POST_WEAK_RULE    : thm * thm -> thm

        (* tactics *)

	val SKIP_TAC   : tactic
	val ASSIGN_TAC : tactic
	val SEQ_TAC    : tactic
	val IF1_TAC    : tactic
	val IF2_TAC    : tactic
        val WHILE_TAC  : tactic
	val VC_TAC     : tactic
    end

(* ========================================================================= *)
(*  FILE          : hoare_logic.sml                                          *)
(*  DESCRIPTION   : Provides rules and tactics for Hoare Logic, using        *)
(*                  theorems in theory "hoare_thms". This is the theory of   *)
(*                  PARTIAL CORRECTNESS specifications.                      *)
(*                                                                           *)
(*  AUTHOR        : Matthew Morley, University of Edinburgh                  *)
(*  DATE          : January 1993                                             *)
(*  HISTORY       : Specialised to HOL90 from HOL88 prog_lib library.        *)
(* ========================================================================= *)

functor Hoare_Logic (structure Syntax : SYNTAX
                     structure Trans  : TRANSLATION
                     structure Holm   : HOL_MATCH
                     structure Bnd    : BND_CONV) : HOARE_LOGIC =
    struct

    open Rsyntax;
    structure S = Syntax
    structure T = Trans
    structure B = Bnd
	
    exception FAIL
    
    fun LOGIC_ERR{function,message} = 
	HOL_ERR{origin_structure="Hoare_Logic",
		origin_function=function,
		message=message}

    val SKIP_THM    = theorem "hoare_thms" "SKIP_THM"
    val ASSIGN_THM  = theorem "hoare_thms" "ASSIGN_THM"
    val SEQ_THM     = theorem "hoare_thms" "SEQ_THM"
    val IF1_THM     = theorem "hoare_thms" "IF1_THM"
    val IF2_THM     = theorem "hoare_thms" "IF2_THM"
    val WHILE_THM   = theorem "hoare_thms" "WHILE_THM"

    val PRE_STRENGTH_THM = theorem "hoare_thms" "PRE_STRENGTH_THM"
    val POST_WEAK_THM    = theorem "hoare_thms" "POST_WEAK_THM"
	
    val TRANS_THM = Trans.TRANS_THM
    val HOL_MATCH_MP = Holm.HOL_MATCH_MP

    (* ****************************************************************** *)
    (*                                                                    *)
    (* Assignment Axiom ASS_AX :                                          *)
    (*                                                                    *)
    (* "P" "{X := E}"   --->   |- MK_SPEC({P[E/X]}, MK_ASS("X",{E}), {P}) *)
    (*                                                                    *)
    (* That at least is the general idea.                                 *)
    (*                                                                    *)
    (* ****************************************************************** *)

    fun ASSIGN_AX p c = 
	let val (x,e) = S.dest_assign c
	    val th1 = SPECL [p,x,e] ASSIGN_THM
	    val (p',_,_) = (S.dest_spec o concl) th1
	    val t1 = (#Body o dest_abs ) p'
	    val t2 = (hd o tl o snd o strip_comb o #Rand o dest_comb) t1
	    val th2 = RIGHT_CONV_RULE (B.SUBS_CONV (BETA_CONV t2)) 
		(BETA_CONV t1)
	    val th3 = RIGHT_CONV_RULE (ONCE_DEPTH_CONV B.BND_CONV) th2
	    val th4 = ABS (--`s:string -> num`--) th3
	in 
	    SUBS [th4] th1
	end

    (* ****************************************************************** *)
    (*                                                                    *)
    (* Sequencing Rule SEQ_RULE:                                          *)
    (*                                                                    *)
    (*  |- MK_SPEC({P},C1,{Q})   ,   |- MK_SPEC({Q},C2,{R})               *)
    (*  ---------------------------------------------------               *)
    (*             |- MK_SPEC({P},MK_SEQ(C1,C2),{R})                      *)
    (*                                                                    *)
    (* ****************************************************************** *)
    (* ****************************************************************** *)
    (*                                                                    *)
    (* Derived Sequencing Rule SEQL_RULE:                                 *)
    (*                                                                    *)
    (*  |- MK_SPEC({P},C1,{Q1}), ... , |- MK_SPEC({Q(n-1)},Cn,{R})        *)
    (*  ------------------------------------------------------------      *)
    (*      |- MK_SPEC({P},MK_SEQ(MK_SEQ(C1,C2), ... ,Cn),{R})            *)
    (*                                                                    *)
    (* ****************************************************************** *)


    fun SEQ_RULE(hth1,hth2) = MATCH_MP SEQ_THM (CONJ hth1 hth2)


    fun SEQL_RULE thl =
	if thl = [] then raise FAIL
	else if (tl thl) = [] then hd thl
	     else SEQL_RULE(SEQ_RULE(hd thl,hd(tl thl))::tl(tl thl))
		 handle FAIL => 
                   raise LOGIC_ERR{function= "SEQL_RULE",
				   message="Empty command sequence."}


    (* ****************************************************************** *)
    (*                                                                    *)
    (* Precondition Strengthening PRE_STRENGTH_RULE:                      *)
    (*                                                                    *)
    (*  |- P' ==> P   ,   |- MK_SPEC({P},C,{Q})                           *)
    (*  ---------------------------------------                           *)
    (*           |- MK_SPEC({P'},C,{Q})                                   *)
    (*                                                                    *)
    (* ****************************************************************** *)
    (* ****************************************************************** *)
    (*                                                                    *)
    (* Postcondition Weakening POST_WEAK_RULE:                            *)
    (*                                                                    *)
    (*  |- MK_SPEC({P},C,{Q})   ,   |- Q ==> Q'                           *)
    (*  ---------------------------------------                           *)
    (*          |- MK_SPEC({P},C,{Q'})                                    *)
    (*                                                                    *)
    (* ****************************************************************** *)


    fun PRE_STRENGTH_RULE (th,hth) = 
	HOL_MATCH_MP PRE_STRENGTH_THM (CONJ (TRANS_THM th) hth)


    fun POST_WEAK_RULE(hth,th) = 
	HOL_MATCH_MP POST_WEAK_THM (CONJ hth (TRANS_THM th))


    (* ****************************************************************** *)
    (*                                                                    *)
    (* One-armed Conditional Rule IF1_RULE:                               *)
    (*                                                                    *)
    (*  |- MK_SPEC({P/\B},C,{Q})   ,   |- P /\ ~B ==> Q                   *)
    (*  -----------------------------------------------                   *)
    (*       |- MK_SPEC({P},MK_IF1({B},C),{Q})                            *)
    (*                                                                    *)
    (* ****************************************************************** *)
    (* ****************************************************************** *)
    (*                                                                    *)
    (* Two-armed Conditional Rule IF2_RULE:                               *)
    (*                                                                    *)
    (*  |- MK_SPEC({P/\B},{C1},{Q})   ,   |- MK_SPEC({P/\~B},{C2},{Q})    *)
    (*  --------------------------------------------------------------    *)
    (*            |- MK_SPEC({P},MK_IF2({B},C1,C2),{Q})                   *)
    (*                                                                    *)
    (* ****************************************************************** *)


    fun IF1_RULE(hth,th) = HOL_MATCH_MP IF1_THM (CONJ hth (TRANS_THM th))


    fun IF2_RULE (hth1,hth2) = HOL_MATCH_MP IF2_THM (CONJ hth1 hth2)

    (* ****************************************************************** *)
    (*                                                                    *)
    (* While-rule WHILE_RULE:                                             *)
    (*                                                                    *)
    (*         |- MK_SPEC({P /\ B},C,{P})                                 *)
    (*  -----------------------------------------                         *)
    (*  |- MK_SPEC({P},MK_WHILE({B},C),{P /\ ~B})                         *)
    (*                                                                    *)
    (* ****************************************************************** *)


    fun WHILE_RULE hth = HOL_MATCH_MP WHILE_THM hth


    (* ****************************************************************** *)
    (*                                                                    *)
    (* Tactics are defined here for generating verification conditions    *)
    (* from annotated partial correctness specifications. The idea is     *)
    (* that a goal (with annotations)                                     *)
    (*                                                                    *)
    (*     MK_SPEC({P},C,{Q})                                             *)
    (*                                                                    *)
    (* is achieved by a theorem (without annotations)                     *)
    (*                                                                    *)
    (*     |- MK_SPEC({P},{C},{Q})                                        *)
    (*                                                                    *)
    (* The validations of these tactics use the derived rules of Hoare    *)
    (* logic above. Note that the theorems generated do not technically   *)
    (* achieve the goal, since they do not contain the annotations.       *)
    (*                                                                    *)
    (* ****************************************************************** *)
    (* ****************************************************************** *)
    (*
       TACTICS PROVIDED
       ################


                         {P} SKIP {Q}
       SKIP_TAC          ============
                           P ==> Q

                         {P} X:=E {Q}
       ASSIGN_TAC        ============
                         P ==> Q[E/X]


                         {P} C1; ...  Cn; X:=E {Q}
       SEQ_TAC           =========================
                          {P} C1; ... Cn {Q[E/X]} 

    
                          {P} C1; ... Cn; ASSERT R; C {Q}
       SEQ_TAC           =================================
                         {P} C1; ... Cn {R}  ,   {R} C {Q}


                                {P} IF B THEN C {Q}
       IF1_TAC           ==================================
                         {P /\ B} C {Q}   ,   P /\ ~B ==> Q


                              {P} IF B THEN C1 ELSE C2 {Q}
       IF2_TAC           ======================================
                         {P /\ B} C1 {Q}   ,   {P /\ ~B} C2 {Q}

                               {P} WHILE B SEQ [INVARIANT R; C] {Q}
       WHILE_TAC         ================================================
                         P ==> R   ,   {R /\ B} C {R}   ,   R /\ ~B ==> Q
                                                                          *)
    (*                                                                    *)
    (* ****************************************************************** *)


    fun SKIP_TAC ((asl,t):goal) =
	(let val (p,skip,q) = S.dest_spec t
	     val SKIP = (--`MK_SKIP`--)
	     val p' = T.untrans_term p
	     and q' = T.untrans_term q
		
	     val just = fn [th] => POST_WEAK_RULE(SPEC p SKIP_THM, th)
	 in
	     if skip = SKIP
		 then ([(asl,(--`^p' ==> ^q'`--))],just)
	     else raise FAIL
	 end) handle FAIL => 
	     raise LOGIC_ERR{function= "SKIP_TAC",message=""}


    fun ASSIGN_TAC ((asl,t):goal) =
	let val (p,c,q) = S.dest_spec t
	    val (x,e) = S.dest_assign c
	    val p' = T.untrans_term p
	    and q' = T.untrans_term q
	    val s_list = [{residue= T.untrans_term e, redex= T.unprime x}]

	    val just = fn [th] => PRE_STRENGTH_RULE(th, ASSIGN_AX q c)
	in
	    ([(asl,mk_imp{ant=p', conseq= subst s_list q'})],just)
	end


    fun SEQ_TAC ((asl,t):goal) =
	(let val (P,SEQ,Q) = S.dest_spec t 
	     val (c::seql) = (rev o S.dest_seql) SEQ    
	     val (x,e) = S.dest_assign c
	     val {Bvar=s,Body=q} = dest_abs Q
	     val {Bvar=v,Body=e'} = dest_abs e
	     val s_list = [{residue= e', redex= mk_comb{Rator=v,Rand=x}}]
		
	     val Q' = mk_abs{Bvar=s,Body= subst s_list q}
	     val just = fn [hth] => SEQ_RULE(hth, ASSIGN_AX Q c)
	 in
	     if null(tl seql)
		 then ([(asl,(--`MK_SPEC(^P, ^(hd seql), ^Q')`--))],just)
	     else ([(asl,(--`MK_SPEC(^P, 
				     ^(S.mk_seql (rev seql)), ^Q')`--))]
		   ,just)
	 end) handle _ => 

	 (let val (P,SEQ,Q) = S.dest_spec t 
	      val (c::seql) = (rev o S.dest_seql) SEQ    
	      val (seql',R) = ((tl seql),S.dest_assert(hd seql))
		  
	      val just = fn [th1,th2] => SEQ_RULE(th1,th2)
	  in
	      if null(tl seql')
		  then
		      ([(asl,(--`MK_SPEC(^P, ^(hd seql'), ^R)`--)),
			(asl,(--`MK_SPEC(^R, ^c, ^Q)`--))],just)
	      else
		  ([(asl,(--`MK_SPEC(^P, ^(S.mk_seql (rev seql')), ^R)`--)),
		    (asl,(--`MK_SPEC(^R, ^c, ^Q)`--))],just)
	  end)


    fun IF1_TAC ((asl,t):goal) =
	let val (P,IF1,Q) = S.dest_spec t 
	    val (B,c) = S.dest_if1 IF1
	    val p = T.untrans_term P
	    and q = T.untrans_term Q
	    and b = T.untrans_term B
	    val {Bvar=s,Body=p'} = dest_abs P
	    and {Body=b',...} = dest_abs B
	in
	    ([(asl,(--`MK_SPEC((\^s.^p' /\ ^b'), ^c, ^Q)`--)),
	      (asl,(--`^p /\ ~^b ==> ^q`--))],
	     fn [hth,th] => IF1_RULE(hth,th))
	end


    fun IF2_TAC ((asl,t):goal) =
	let val (P,IF2,Q) = S.dest_spec t 
	    val (B,c,c') = S.dest_if2 IF2
	    val {Bvar=s,Body=p'} = dest_abs P
	    and {Body=b',...}    = dest_abs B
	in
	    ([(asl,(--`MK_SPEC((\^s. ^p' /\ ^b'), ^c, ^Q)`--)),
	      (asl,(--`MK_SPEC((\^s. ^p' /\ ~^b'), ^c', ^Q)`--))],
	     fn [hth1,hth2] => IF2_RULE(hth1,hth2))
	end

    fun WHILE_TAC ((asl,t):goal) =
	let val (p,W,q) = S.dest_spec t 
            val (b,body) = S.dest_while W
            val cl = S.dest_seql body
            val r = S.dest_invariant(hd cl)
            and c = if null(tl(tl cl)) then hd(tl cl) else S.mk_seql(tl cl)

            val p'     = T.untrans_term p
	    and q'     = T.untrans_term q
	    and r'     = T.untrans_term r
	    and b'     = T.untrans_term b
	    and {Bvar=sr,Body=r''} = dest_abs r
	    and {Bvar=sb,Body=b''} = dest_abs b

            val just = fn [th1,th2,th3] => 
                  POST_WEAK_RULE(PRE_STRENGTH_RULE(th1, WHILE_RULE th2), th3)
	in
	    ([(asl,(--`^p' ==> ^r'`--)),
	      (asl,(--`MK_SPEC((\^sr. ^r'' /\ ^b''), ^c, ^r)`--)),
	      (asl,(--`^r' /\ ~^b' ==> ^q'`--))],just)
	end

    val VC_TAC =
	REPEAT(ASSIGN_TAC 
	   ORELSE SKIP_TAC 
	   ORELSE SEQ_TAC 
	   ORELSE IF1_TAC 
	   ORELSE IF2_TAC
           ORELSE WHILE_TAC)

    end (* Functor Hoare_Logic() *)
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@


1.1.1.1.4.1
log
@Added semicolon for Poly/ML.
@
text
@d25 1
a25 1
    end;
@


1.1.1.1.4.1.2.1
log
@The prog_logic library now loads under CM. The entrypoint is the
structure prog_logicLib. The removed files are target files of hol_lex and
hol_yak.
@
text
@d2 1
a2 6
sig

 type term
 type thm
 type tactic

d25 1
a25 1
end;
d44 1
a44 5
 type term = CoreHol.Term.term
 type thm = CoreHol.Thm.thm
 type tactic = Abbrev.tactic
 type goal = Abbrev.goal;

a50 4
  open Lib Exception CoreHol Parse;
  open Term Dsyntax Thm Theory Drule Tactical Tactic Conv
  infix THEN ORELSE;

@
