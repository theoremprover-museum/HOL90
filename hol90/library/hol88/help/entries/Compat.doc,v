head	1.1;
branch	1.1.1;
access;
symbols
	HOL97:1.1.1.1.0.6
	bpHOL97:1.1.1.1
	hol90_9_alpha:1.1.1.1
	hol90_pre8_for_multiple_compilers:1.1.1.1.0.4
	hol90_pre8_after_donalds_separate_compilation_changes:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.10.16.13.30.41;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.30.41;	author rjb;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@\DOC Compat

\TYPE {Compat : Compat_sig}

\SYNOPSIS
A structure that provides a limited form of compatibility between hol90 
and hol88.

\DESCRIBE

The Compat structure is intended to provide hol88 functions and
functionality otherwise lacking in hol90. To operate much as in hol88,
one would open Psyntax and Compat. Warning: the Compat structure is
by no means complete! If you have additions you want made, send them to
slind@@informatik.tu-muenchen.de.

\FAILURE
The library hol88 must be loaded in order to get access to Compat.

\EXAMPLE

The following shows how to open the Compat structure and the functions
that become available in the top-level environment as a result.
Documentation for each of these functions is available online.

{
- open Compat;
open Compat
  val setify = fn : ''a list -> ''a list
  val find = fn : ('a -> bool) -> 'a list -> 'a
  val match = fn
    : term -> term -> (term * term) list * (hol_type * hol_type) list
  val prove_thm = fn : string * term * tactic -> thm
  val PROVE = fn : term * tactic -> thm
  val string_of_int = fn : int -> string
  val int_of_string = fn : string -> int
  val save = fn : string -> unit
  val assoc = fn : ''a -> (''a * 'b) list -> ''a * 'b
  val rev_assoc = fn : ''a -> ('b * ''a) list -> 'b * ''a
  val inst_type = fn : (hol_type * hol_type) list -> hol_type -> hol_type
  val frees = fn : term -> term list
  val freesl = fn : term list -> term list
  val tyvars = fn : term -> hol_type list
  val tyvarsl = fn : term list -> hol_type list
  val conjuncts = fn : term -> term list
  val disjuncts = fn : term -> term list
  val gen_all = fn : term -> term
  val GEN_ALL = fn : thm -> thm
  val new_axiom = fn : string * term -> thm
  val new_prim_rec_definition = fn : string * term -> thm
  val new_infix_prim_rec_definition = fn : string * term * int -> thm
  val flat = fn : 'a list list -> 'a list
  val forall = fn : ('a -> bool) -> 'a list -> bool
  val ancestry : unit -> string list
  val last : 'a list -> 'a
  val butlast : 'a list -> 'a list
  val W : ('a -> 'a -> 'b) -> 'a -> 'b
  val CB :('a -> 'b) -> ('b -> 'c) -> 'a -> 'c
  val KI :'a -> 'b -> 'b
  val oo :('a * 'b -> 'c) * (('d -> 'a) * ('d -> 'b)) -> 'd -> 'c
  val funpow :int -> ('a -> 'a) -> 'a -> 'a
  val replicate :int -> 'a -> 'a list

-
}

\SEEALSO
hol88, New_syntax, Old_syntax.

\ENDDOC
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
