thid = (common_holML_core, 784033212, 330117)
axioms = []
definitions =
[((cut_exconenv_DEF),
  [],
  `((! :((excon # exname) list finmap -> bool) -> bool)
   (\(e :(excon # exname) list finmap).
   ((! :(excon set -> bool) -> bool) (\(excons :excon set).
   (((= :exconenv -> exconenv -> bool) ((cut_exconenv (EXCONENV $1))
   $0)) (EXCONENV
   (((restrict_finmap :(excon # exname) list finmap -> excon set ->
                       (excon # exname) list finmap) $1) $0)))))))`),
 ((excons_from_exconenv_DEF),
  [],
  `((! :((excon # exname) list finmap -> bool) -> bool)
   (\(e :(excon # exname) list finmap).
   (((= :excon set -> excon set -> bool) (excons_from_exconenv
   (EXCONENV $0)))
   ((finmap_dom :(excon # exname) list finmap -> excon set) $0))))`),
 ((add_exconenv_DEF),
  [],
  `((! :(exconenv -> bool) -> bool) (\(e1 :exconenv).
   ((! :(exconenv -> bool) -> bool) (\(e2 :exconenv).
   (((= :exconenv -> exconenv -> bool) ((add_exconenv $1) $0))
   (EXCONENV
   ((((finmap_modify :(excon -> excon -> bool) ->
                      (excon # exname) list finmap ->
                      (excon # exname) list finmap ->
                      (excon # exname) list finmap) less_excon)
   (EXCONENV_arg $1)) (EXCONENV_arg $0))))))))`),
 ((insert_into_exconenv_DEF),
  [],
  `((! :((excon # exname) list finmap -> bool) -> bool)
   (\(fm :(excon # exname) list finmap). ((! :(excon -> bool) -> bool)
   (\(excon :excon). ((! :(exname -> bool) -> bool)
   (\(exname :exname). (((= :exconenv -> exconenv -> bool)
   (((insert_into_exconenv (EXCONENV $2)) $1) $0)) (EXCONENV
   (((((finmap_insert :(excon -> excon -> bool) -> excon -> exname ->
                       (excon # exname) list finmap ->
                       (excon # exname) list finmap) less_excon) $1)
   $0) $2)))))))))`),
 ((lookupexcon_exconenv_DEF),
  [],
  `((! :((excon # exname) list finmap -> bool) -> bool)
   (\(fm :(excon # exname) list finmap). ((! :(excon -> bool) -> bool)
   (\(ec :excon). (((= :exname lift -> exname lift -> bool)
   ((lookupexcon_exconenv (EXCONENV $1)) $0))
   (((finmap_lookup :excon -> (excon # exname) list finmap ->
                     exname lift) $0) $1))))))`),
 ((empty_exconenv_DEF),
  [],
  `(((= :exconenv -> exconenv -> bool) empty_exconenv) (EXCONENV
   (empty_finmap :(excon # exname) list finmap)))`),
 ((EXCONENV_arg_DEF),
  [],
  `((! :((excon # exname) list finmap -> bool) -> bool)
   (\(f :(excon # exname) list finmap).
   (((= :(excon # exname) list finmap ->
         (excon # exname) list finmap -> bool) (EXCONENV_arg (EXCONENV
   $0))) $0)))`),
 ((EXCONENV_DEF),
  [],
  `((! :((excon # exname) list finmap -> bool) -> bool)
   (\(f' :(excon # exname) list finmap).
   (((= :exconenv -> exconenv -> bool) (EXCONENV $0)) (ABS_exconenv
   (((Node :(excon # exname) list finmap ->
            (excon # exname) list finmap ltree list ->
            (excon # exname) list finmap ltree) $0)
   (NIL :(excon # exname) list finmap ltree list))))))`),
 ((exconenv_ISO_DEF),
  [],
  `((/\ ((! :(exconenv -> bool) -> bool) (\(a :exconenv).
   (((= :exconenv -> exconenv -> bool) (ABS_exconenv (REP_exconenv
   $0))) $0))))
   ((! :((excon # exname) list finmap ltree -> bool) -> bool)
   (\(r :(excon # exname) list finmap ltree).
   (((= :bool -> bool -> bool)
   (((TRP :((excon # exname) list finmap ->
           (excon # exname) list finmap ltree list -> bool) ->
           (excon # exname) list finmap ltree -> bool)
   (\(v :(excon # exname) list finmap).
   (\(tl :(excon # exname) list finmap ltree list). ((/\
   ((? :((excon # exname) list finmap -> bool) -> bool)
   (\(f :(excon # exname) list finmap).
   (((= :(excon # exname) list finmap ->
         (excon # exname) list finmap -> bool) $2) $0))))
   (((= :num -> num -> bool)
   ((LENGTH :(excon # exname) list finmap ltree list -> num) $0))
   0))))) $0))
   (((= :(excon # exname) list finmap ltree ->
         (excon # exname) list finmap ltree -> bool) (REP_exconenv
   (ABS_exconenv $0))) $0)))))`),
 ((exconenv_TY_DEF),
  [],
  `((? :((exconenv -> (excon # exname) list finmap ltree) -> bool) ->
        bool) (\(rep :exconenv -> (excon # exname) list finmap ltree).
   (((TYPE_DEFINITION :((excon # exname) list finmap ltree -> bool) ->
                       (exconenv ->
                       (excon # exname) list finmap ltree) -> bool)
   ((TRP :((excon # exname) list finmap ->
          (excon # exname) list finmap ltree list -> bool) ->
          (excon # exname) list finmap ltree -> bool)
   (\(v :(excon # exname) list finmap).
   (\(tl :(excon # exname) list finmap ltree list). ((/\
   ((? :((excon # exname) list finmap -> bool) -> bool)
   (\(f :(excon # exname) list finmap).
   (((= :(excon # exname) list finmap ->
         (excon # exname) list finmap -> bool) $2) $0))))
   (((= :num -> num -> bool)
   ((LENGTH :(excon # exname) list finmap ltree list -> num) $0))
   0)))))) $0)))`),
 ((is_SVSTR_DEF),
  [],
  `((/\ ((! :(string -> bool) -> bool) (\(s :string).
   (((= :bool -> bool -> bool) (is_SVSTR (SVSTR $0))) T))))
   ((! :(integer -> bool) -> bool) (\(i :integer).
   (((= :bool -> bool -> bool) (is_SVSTR (SVINT $0))) F))))`),
 ((is_SVINT_DEF),
  [],
  `((/\ ((! :(integer -> bool) -> bool) (\(i :integer).
   (((= :bool -> bool -> bool) (is_SVINT (SVINT $0))) T))))
   ((! :(string -> bool) -> bool) (\(s :string).
   (((= :bool -> bool -> bool) (is_SVINT (SVSTR $0))) F))))`),
 ((SVSTR_arg_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) (SVSTR_arg (SVSTR $0))) $0)))`),
 ((SVINT_arg_DEF),
  [],
  `((! :(integer -> bool) -> bool) (\(i :integer).
   (((= :integer -> integer -> bool) (SVINT_arg (SVINT $0))) $0)))`),
 ((EXNAMESET_arg_DEF),
  [],
  `((! :(exname set -> bool) -> bool) (\(es :exname set).
   (((= :exname set -> exname set -> bool) (EXNAMESET_arg (EXNAMESET
   $0))) $0)))`),
 ((EXNAMESET_DEF),
  [],
  `((! :(exname set -> bool) -> bool) (\(s :exname set).
   (((= :exnameset -> exnameset -> bool) (EXNAMESET $0))
   (ABS_exnameset
   (((Node :exname set -> exname set ltree list -> exname set ltree)
   $0) (NIL :exname set ltree list))))))`),
 ((exnameset_ISO_DEF),
  [],
  `((/\ ((! :(exnameset -> bool) -> bool) (\(a :exnameset).
   (((= :exnameset -> exnameset -> bool) (ABS_exnameset (REP_exnameset
   $0))) $0)))) ((! :(exname set ltree -> bool) -> bool)
   (\(r :exname set ltree). (((= :bool -> bool -> bool)
   (((TRP :(exname set -> exname set ltree list -> bool) ->
           exname set ltree -> bool) (\(v :exname set).
   (\(tl :exname set ltree list). ((/\
   ((? :(exname set -> bool) -> bool) (\(s :exname set).
   (((= :exname set -> exname set -> bool) $2) $0))))
   (((= :num -> num -> bool) ((LENGTH :exname set ltree list -> num)
   $0)) 0))))) $0))
   (((= :exname set ltree -> exname set ltree -> bool) (REP_exnameset
   (ABS_exnameset $0))) $0)))))`),
 ((exnameset_TY_DEF),
  [],
  `((? :((exnameset -> exname set ltree) -> bool) -> bool)
   (\(rep :exnameset -> exname set ltree).
   (((TYPE_DEFINITION :(exname set ltree -> bool) ->
                       (exnameset -> exname set ltree) -> bool)
   ((TRP :(exname set -> exname set ltree list -> bool) ->
          exname set ltree -> bool) (\(v :exname set).
   (\(tl :exname set ltree list). ((/\
   ((? :(exname set -> bool) -> bool) (\(s :exname set).
   (((= :exname set -> exname set -> bool) $2) $0))))
   (((= :num -> num -> bool) ((LENGTH :exname set ltree list -> num)
   $0)) 0)))))) $0)))`),
 ((less_exname_DEF),
  [],
  `((! :(exname -> bool) -> bool) (\(a1 :exname).
   ((! :(exname -> bool) -> bool) (\(a2 :exname).
   (((= :bool -> bool -> bool) ((less_exname $1) $0)) ((< (EXNAME_arg
   $1)) (EXNAME_arg $0)))))))`),
 ((EXNAME_arg_DEF),
  [],
  `((! :(num -> bool) -> bool) (\(n :num). (((= :num -> num -> bool)
   (EXNAME_arg (EXNAME $0))) $0)))`),
 ((EXNAME_DEF),
  [],
  `((! :(num -> bool) -> bool) (\(n :num).
   (((= :exname -> exname -> bool) (EXNAME $0)) (ABS_exname
   (((Node :num -> num ltree list -> num ltree) $0)
   (NIL :num ltree list))))))`),
 ((exname_ISO_DEF),
  [],
  `((/\ ((! :(exname -> bool) -> bool) (\(a :exname).
   (((= :exname -> exname -> bool) (ABS_exname (REP_exname $0)))
   $0)))) ((! :(num ltree -> bool) -> bool) (\(r :num ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(num -> num ltree list -> bool) -> num ltree -> bool)
   (\(v :num). (\(tl :num ltree list). ((/\
   ((? :(num -> bool) -> bool) (\(n :num). (((= :num -> num -> bool)
   $2) $0)))) (((= :num -> num -> bool)
   ((LENGTH :num ltree list -> num) $0)) 0))))) $0))
   (((= :num ltree -> num ltree -> bool) (REP_exname (ABS_exname $0)))
   $0)))))`),
 ((exname_TY_DEF),
  [],
  `((? :((exname -> num ltree) -> bool) -> bool)
   (\(rep :exname -> num ltree).
   (((TYPE_DEFINITION :(num ltree -> bool) -> (exname -> num ltree) ->
                       bool)
   ((TRP :(num -> num ltree list -> bool) -> num ltree -> bool)
   (\(v :num). (\(tl :num ltree list). ((/\
   ((? :(num -> bool) -> bool) (\(n :num). (((= :num -> num -> bool)
   $2) $0)))) (((= :num -> num -> bool)
   ((LENGTH :num ltree list -> num) $0)) 0)))))) $0)))`),
 ((Greatereql_DEF),
  [],
  `(((= :basval -> basval -> bool) Greatereql) (ABS_basval
   (((Node :one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one) ltree
            list ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one)
            ltree)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one ->
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one ->
          one + one + one + one + one + one)
   ((INR :one + one + one + one -> one + one + one + one + one)
   ((INR :one + one + one -> one + one + one + one)
   ((INR :one + one -> one + one + one) ((INR :one -> one + one)
   one))))))))))))))))))
   (NIL :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree
         list))))`),
 ((Lesseql_DEF),
  [],
  `(((= :basval -> basval -> bool) Lesseql) (ABS_basval
   (((Node :one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one) ltree
            list ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one)
            ltree)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one ->
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one ->
          one + one + one + one + one + one)
   ((INR :one + one + one + one -> one + one + one + one + one)
   ((INR :one + one + one -> one + one + one + one)
   ((INR :one + one -> one + one + one) ((INL :one -> one + one)
   one))))))))))))))))))
   (NIL :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree
         list))))`),
 ((Greater_DEF),
  [],
  `(((= :basval -> basval -> bool) Greater) (ABS_basval
   (((Node :one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one) ltree
            list ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one)
            ltree)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one ->
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one ->
          one + one + one + one + one + one)
   ((INR :one + one + one + one -> one + one + one + one + one)
   ((INR :one + one + one -> one + one + one + one)
   ((INL :one -> one + one + one) one)))))))))))))))))
   (NIL :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree
         list))))`),
 ((Less_DEF),
  [],
  `(((= :basval -> basval -> bool) Less) (ABS_basval
   (((Node :one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one) ltree
            list ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one)
            ltree)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one ->
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one ->
          one + one + one + one + one + one)
   ((INR :one + one + one + one -> one + one + one + one + one)
   ((INL :one -> one + one + one + one) one))))))))))))))))
   (NIL :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree
         list))))`),
 ((Noteql_DEF),
  [],
  `(((= :basval -> basval -> bool) Noteql) (ABS_basval
   (((Node :one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one) ltree
            list ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one)
            ltree)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one ->
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one ->
          one + one + one + one + one + one)
   ((INL :one -> one + one + one + one + one) one)))))))))))))))
   (NIL :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree
         list))))`),
 ((Eql_DEF),
  [],
  `(((= :basval -> basval -> bool) Eql) (ABS_basval
   (((Node :one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one) ltree
            list ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one)
            ltree)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one ->
          one + one + one + one + one + one + one)
   ((INL :one -> one + one + one + one + one + one) one))))))))))))))
   (NIL :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree
         list))))`),
 ((Minus_DEF),
  [],
  `(((= :basval -> basval -> bool) Minus) (ABS_basval
   (((Node :one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one) ltree
            list ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one)
            ltree)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INL :one -> one + one + one + one + one + one + one)
   one)))))))))))))
   (NIL :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree
         list))))`),
 ((Plus_DEF),
  [],
  `(((= :basval -> basval -> bool) Plus) (ABS_basval
   (((Node :one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one) ltree
            list ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one)
            ltree)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INL :one -> one + one + one + one + one + one + one + one)
   one))))))))))))
   (NIL :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree
         list))))`),
 ((Times_DEF),
  [],
  `(((= :basval -> basval -> bool) Times) (ABS_basval
   (((Node :one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one) ltree
            list ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one)
            ltree)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INL :one -> one + one + one + one + one + one + one + one + one)
   one)))))))))))
   (NIL :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree
         list))))`),
 ((Neg_DEF),
  [],
  `(((= :basval -> basval -> bool) Neg) (ABS_basval
   (((Node :one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one) ltree
            list ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one)
            ltree)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one)
   one))))))))))
   (NIL :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree
         list))))`),
 ((Mod_DEF),
  [],
  `(((= :basval -> basval -> bool) Mod) (ABS_basval
   (((Node :one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one) ltree
            list ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one)
            ltree)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one) one)))))))))
   (NIL :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree
         list))))`),
 ((Div_DEF),
  [],
  `(((= :basval -> basval -> bool) Div) (ABS_basval
   (((Node :one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one) ltree
            list ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one)
            ltree)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one) one))))))))
   (NIL :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree
         list))))`),
 ((Abs_DEF),
  [],
  `(((= :basval -> basval -> bool) Abs) (ABS_basval
   (((Node :one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one) ltree
            list ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one)
            ltree)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one) one)))))))
   (NIL :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree
         list))))`),
 ((Implode_DEF),
  [],
  `(((= :basval -> basval -> bool) Implode) (ABS_basval
   (((Node :one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one) ltree
            list ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one)
            ltree)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one) one))))))
   (NIL :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree
         list))))`),
 ((Explode_DEF),
  [],
  `(((= :basval -> basval -> bool) Explode) (ABS_basval
   (((Node :one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one) ltree
            list ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one)
            ltree)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one) one)))))
   (NIL :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree
         list))))`),
 ((Ord_DEF),
  [],
  `(((= :basval -> basval -> bool) Ord) (ABS_basval
   (((Node :one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one) ltree
            list ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one)
            ltree)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one) one))))
   (NIL :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree
         list))))`),
 ((Chr_DEF),
  [],
  `(((= :basval -> basval -> bool) Chr) (ABS_basval
   (((Node :one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one) ltree
            list ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one)
            ltree)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one) one)))
   (NIL :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree
         list))))`),
 ((Size_DEF),
  [],
  `(((= :basval -> basval -> bool) Size) (ABS_basval
   (((Node :one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one) ltree
            list ->
            (one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one)
            ltree)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one) one))
   (NIL :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree
         list))))`),
 ((basval_ISO_DEF),
  [],
  `((/\ ((! :(basval -> bool) -> bool) (\(a :basval).
   (((= :basval -> basval -> bool) (ABS_basval (REP_basval $0)))
   $0))))
   ((! :((one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree ->
        bool) -> bool)
   (\(r :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(one + one + one + one + one + one + one + one + one +
            one + one + one + one + one + one + one + one + one ->
           (one + one + one + one + one + one + one + one + one +
           one + one + one + one + one + one + one + one + one) ltree
           list -> bool) ->
           (one + one + one + one + one + one + one + one + one +
           one + one + one + one + one + one + one + one + one)
           ltree -> bool)
   (\(v :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one).
   (\(tl :(one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one) ltree list).
   ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one) one)))
   (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one) one))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one) one)))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one) one))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one) one))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one) one)))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one) one))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one) one)))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one)
   one))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INL :one -> one + one + one + one + one + one + one + one + one)
   one)))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INL :one -> one + one + one + one + one + one + one + one)
   one))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INL :one -> one + one + one + one + one + one + one)
   one)))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one ->
          one + one + one + one + one + one + one)
   ((INL :one -> one + one + one + one + one + one) one)))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one ->
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one ->
          one + one + one + one + one + one)
   ((INL :one -> one + one + one + one + one) one))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one ->
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one ->
          one + one + one + one + one + one)
   ((INR :one + one + one + one -> one + one + one + one + one)
   ((INL :one -> one + one + one + one) one)))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one ->
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one ->
          one + one + one + one + one + one)
   ((INR :one + one + one + one -> one + one + one + one + one)
   ((INR :one + one + one -> one + one + one + one)
   ((INL :one -> one + one + one) one))))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one ->
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one ->
          one + one + one + one + one + one)
   ((INR :one + one + one + one -> one + one + one + one + one)
   ((INR :one + one + one -> one + one + one + one)
   ((INR :one + one -> one + one + one) ((INL :one -> one + one)
   one))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one ->
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one ->
          one + one + one + one + one + one)
   ((INR :one + one + one + one -> one + one + one + one + one)
   ((INR :one + one + one -> one + one + one + one)
   ((INR :one + one -> one + one + one) ((INR :one -> one + one)
   one))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0)))))))))))))))))))))) $0))
   (((= :(one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree ->
         (one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree -> bool)
   (REP_basval (ABS_basval $0))) $0)))))`),
 ((basval_TY_DEF),
  [],
  `((? :((basval ->
         (one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one) ltree) ->
        bool) -> bool)
   (\(rep :basval ->
           (one + one + one + one + one + one + one + one + one +
           one + one + one + one + one + one + one + one + one)
           ltree).
   (((TYPE_DEFINITION :((one + one + one + one + one + one + one +
                        one + one + one + one + one + one + one +
                        one + one + one + one) ltree -> bool) ->
                       (basval ->
                       (one + one + one + one + one + one + one +
                       one + one + one + one + one + one + one + one +
                       one + one + one) ltree) -> bool)
   ((TRP :(one + one + one + one + one + one + one + one + one + one +
           one + one + one + one + one + one + one + one ->
          (one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one) ltree list ->
          bool) ->
          (one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one) ltree ->
          bool)
   (\(v :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one).
   (\(tl :(one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one) ltree list).
   ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one) one)))
   (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one) one))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one) one)))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one) one))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one) one))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one) one)))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one) one))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one +
          one) one)))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INL :one ->
          one + one + one + one + one + one + one + one + one + one)
   one))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INL :one -> one + one + one + one + one + one + one + one + one)
   one)))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INL :one -> one + one + one + one + one + one + one + one)
   one))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INL :one -> one + one + one + one + one + one + one)
   one)))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one ->
          one + one + one + one + one + one + one)
   ((INL :one -> one + one + one + one + one + one) one)))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one ->
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one ->
          one + one + one + one + one + one)
   ((INL :one -> one + one + one + one + one) one))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one ->
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one ->
          one + one + one + one + one + one)
   ((INR :one + one + one + one -> one + one + one + one + one)
   ((INL :one -> one + one + one + one) one)))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one ->
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one ->
          one + one + one + one + one + one)
   ((INR :one + one + one + one -> one + one + one + one + one)
   ((INR :one + one + one -> one + one + one + one)
   ((INL :one -> one + one + one) one))))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one ->
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one ->
          one + one + one + one + one + one)
   ((INR :one + one + one + one -> one + one + one + one + one)
   ((INR :one + one + one -> one + one + one + one)
   ((INR :one + one -> one + one + one) ((INL :one -> one + one)
   one))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))) ((/\
   (((= :one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one ->
         one + one + one + one + one + one + one + one + one + one +
         one + one + one + one + one + one + one + one -> bool) $1)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one +
          one ->
          one + one + one + one + one + one + one + one + one + one +
          one + one)
   ((INR :one + one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one +
          one)
   ((INR :one + one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one + one ->
          one + one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one + one ->
          one + one + one + one + one + one + one)
   ((INR :one + one + one + one + one ->
          one + one + one + one + one + one)
   ((INR :one + one + one + one -> one + one + one + one + one)
   ((INR :one + one + one -> one + one + one + one)
   ((INR :one + one -> one + one + one) ((INR :one -> one + one)
   one))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + one + one + one + one + one + one + one + one +
             one + one + one + one + one + one + one + one + one)
             ltree list -> num) $0)) 0))))))))))))))))))))))) $0)))`),
 ((less_addr_DEF),
  [],
  `((! :(addr -> bool) -> bool) (\(a1 :addr).
   ((! :(addr -> bool) -> bool) (\(a2 :addr).
   (((= :bool -> bool -> bool) ((less_addr $1) $0)) ((< (ADDR_arg $1))
   (ADDR_arg $0)))))))`),
 ((ADDR_arg_DEF),
  [],
  `((! :(num -> bool) -> bool) (\(n :num). (((= :num -> num -> bool)
   (ADDR_arg (ADDR $0))) $0)))`),
 ((ADDR_DEF),
  [],
  `((! :(num -> bool) -> bool) (\(n :num). (((= :addr -> addr -> bool)
   (ADDR $0)) (ABS_addr (((Node :num -> num ltree list -> num ltree)
   $0) (NIL :num ltree list))))))`),
 ((addr_ISO_DEF),
  [],
  `((/\ ((! :(addr -> bool) -> bool) (\(a :addr).
   (((= :addr -> addr -> bool) (ABS_addr (REP_addr $0))) $0))))
   ((! :(num ltree -> bool) -> bool) (\(r :num ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(num -> num ltree list -> bool) -> num ltree -> bool)
   (\(v :num). (\(tl :num ltree list). ((/\
   ((? :(num -> bool) -> bool) (\(n :num). (((= :num -> num -> bool)
   $2) $0)))) (((= :num -> num -> bool)
   ((LENGTH :num ltree list -> num) $0)) 0))))) $0))
   (((= :num ltree -> num ltree -> bool) (REP_addr (ABS_addr $0)))
   $0)))))`),
 ((addr_TY_DEF),
  [],
  `((? :((addr -> num ltree) -> bool) -> bool)
   (\(rep :addr -> num ltree).
   (((TYPE_DEFINITION :(num ltree -> bool) -> (addr -> num ltree) ->
                       bool)
   ((TRP :(num -> num ltree list -> bool) -> num ltree -> bool)
   (\(v :num). (\(tl :num ltree list). ((/\
   ((? :(num -> bool) -> bool) (\(n :num). (((= :num -> num -> bool)
   $2) $0)))) (((= :num -> num -> bool)
   ((LENGTH :num ltree list -> num) $0)) 0)))))) $0)))`),
 ((value_of_DEF),
  [],
  `((/\ ((! :(integer -> bool) -> bool) (\(i :integer).
   (((= :sval -> sval -> bool) (value_of (SCINT $0))) (SVINT $0)))))
   ((! :(string -> bool) -> bool) (\(s :string).
   (((= :sval -> sval -> bool) (value_of (SCSTR $0))) (SVSTR
   $0)))))`),
 ((SVSTR_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :sval -> sval -> bool) (SVSTR $0)) (ABS_sval
   (((Node :integer + string -> (integer + string) ltree list ->
            (integer + string) ltree)
   ((INR :string -> integer + string) $0))
   (NIL :(integer + string) ltree list))))))`),
 ((SVINT_DEF),
  [],
  `((! :(integer -> bool) -> bool) (\(i :integer).
   (((= :sval -> sval -> bool) (SVINT $0)) (ABS_sval
   (((Node :integer + string -> (integer + string) ltree list ->
            (integer + string) ltree)
   ((INL :integer -> integer + string) $0))
   (NIL :(integer + string) ltree list))))))`),
 ((sval_ISO_DEF),
  [],
  `((/\ ((! :(sval -> bool) -> bool) (\(a :sval).
   (((= :sval -> sval -> bool) (ABS_sval (REP_sval $0))) $0))))
   ((! :((integer + string) ltree -> bool) -> bool)
   (\(r :(integer + string) ltree). (((= :bool -> bool -> bool)
   (((TRP :(integer + string -> (integer + string) ltree list ->
           bool) -> (integer + string) ltree -> bool)
   (\(v :integer + string). (\(tl :(integer + string) ltree list).
   ((\/ ((/\ ((? :(integer -> bool) -> bool) (\(i :integer).
   (((= :integer + string -> integer + string -> bool) $2)
   ((INL :integer -> integer + string) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(integer + string) ltree list -> num) $0)) 0))) ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :integer + string -> integer + string -> bool) $2)
   ((INR :string -> integer + string) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(integer + string) ltree list -> num) $0)) 0)))))) $0))
   (((= :(integer + string) ltree -> (integer + string) ltree -> bool)
   (REP_sval (ABS_sval $0))) $0)))))`),
 ((sval_TY_DEF),
  [],
  `((? :((sval -> (integer + string) ltree) -> bool) -> bool)
   (\(rep :sval -> (integer + string) ltree).
   (((TYPE_DEFINITION :((integer + string) ltree -> bool) ->
                       (sval -> (integer + string) ltree) -> bool)
   ((TRP :(integer + string -> (integer + string) ltree list ->
          bool) -> (integer + string) ltree -> bool)
   (\(v :integer + string). (\(tl :(integer + string) ltree list).
   ((\/ ((/\ ((? :(integer -> bool) -> bool) (\(i :integer).
   (((= :integer + string -> integer + string -> bool) $2)
   ((INL :integer -> integer + string) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(integer + string) ltree list -> num) $0)) 0))) ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :integer + string -> integer + string -> bool) $2)
   ((INR :string -> integer + string) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(integer + string) ltree list -> num) $0)) 0)))))))
   $0)))`),
 ((int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_valbind_arg_DEF),
  [],
  `((/\ ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :valbind -> valbind -> bool)
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_valbind_arg
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_valbind $0)))
   $0)))) (((= :valbind -> valbind -> bool)
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_valbind_arg
   int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_valbind))
   ((@ :(valbind -> bool) -> valbind) (\(x :valbind). T))))`),
 ((int_RECvalbind_arg_DEF),
  [],
  `((/\ ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :valbind -> valbind -> bool) (int_RECvalbind_arg
   (int_RECvalbind $0))) $0)))) ((! :(pat -> bool) -> bool)
   (\(x1 :pat). ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x3 :valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :valbind -> valbind -> bool) (int_RECvalbind_arg
   (((int_PLAINvalbind $2) $1) $0)))
   ((@ :(valbind -> bool) -> valbind) (\(x :valbind). T))))))))))`),
 ((int_PLAINvalbind_arg3_DEF),
  [],
  `((/\ ((! :(pat -> bool) -> bool) (\(x1 :pat).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x3 :valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (int_PLAINvalbind_arg3 (((int_PLAINvalbind $2) $1)
   $0))) $0)))))))) ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (int_PLAINvalbind_arg3 (int_RECvalbind $0)))
   ((@ :(valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) ->
        valbind_option_atexp_dec_exp_exprow_match_mrule_valbind)
   (\(x :valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   T))))))`),
 ((int_PLAINvalbind_arg2_DEF),
  [],
  `((/\ ((! :(pat -> bool) -> bool) (\(x1 :pat).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x3 :valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :exp -> exp -> bool) (int_PLAINvalbind_arg2
   (((int_PLAINvalbind $2) $1) $0))) $1))))))))
   ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :exp -> exp -> bool) (int_PLAINvalbind_arg2 (int_RECvalbind
   $0))) ((@ :(exp -> bool) -> exp) (\(x :exp). T))))))`),
 ((int_PLAINvalbind_arg1_DEF),
  [],
  `((/\ ((! :(pat -> bool) -> bool) (\(x1 :pat).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x3 :valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :pat -> pat -> bool) (int_PLAINvalbind_arg1
   (((int_PLAINvalbind $2) $1) $0))) $2))))))))
   ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :pat -> pat -> bool) (int_PLAINvalbind_arg1 (int_RECvalbind
   $0))) ((@ :(pat -> bool) -> pat) (\(x :pat). T))))))`),
 ((int_MRULE_arg2_DEF),
  [],
  `((! :(pat -> bool) -> bool) (\(x1 :pat).
   ((! :(exp -> bool) -> bool) (\(x2 :exp). (((= :exp -> exp -> bool)
   (int_MRULE_arg2 ((int_MRULE $1) $0))) $0)))))`),
 ((int_MRULE_arg1_DEF),
  [],
  `((! :(pat -> bool) -> bool) (\(x1 :pat).
   ((! :(exp -> bool) -> bool) (\(x2 :exp). (((= :pat -> pat -> bool)
   (int_MRULE_arg1 ((int_MRULE $1) $0))) $1)))))`),
 ((int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_match_arg_DEF),
  [],
  `((/\ ((! :(match -> bool) -> bool) (\(x1 :match).
   (((= :match -> match -> bool)
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_match_arg
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_match $0)))
   $0)))) (((= :match -> match -> bool)
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_match_arg
   int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_match))
   ((@ :(match -> bool) -> match) (\(x :match). T))))`),
 ((int_MATCH_arg2_DEF),
  [],
  `((! :(mrule -> bool) -> bool) (\(x1 :mrule).
   ((! :(match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x2 :match_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (int_MATCH_arg2 ((int_MATCH $1) $0))) $0)))))`),
 ((int_MATCH_arg1_DEF),
  [],
  `((! :(mrule -> bool) -> bool) (\(x1 :mrule).
   ((! :(match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x2 :match_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :mrule -> mrule -> bool) (int_MATCH_arg1 ((int_MATCH $1) $0)))
   $1)))))`),
 ((int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_exprow_arg_DEF),
  [],
  `((/\ ((! :(exprow -> bool) -> bool) (\(x1 :exprow).
   (((= :exprow -> exprow -> bool)
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_exprow_arg
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_exprow $0)))
   $0)))) (((= :exprow -> exprow -> bool)
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_exprow_arg
   int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_exprow))
   ((@ :(exprow -> bool) -> exprow) (\(x :exprow). T))))`),
 ((int_EXPROW_arg3_DEF),
  [],
  `((! :(label -> bool) -> bool) (\(x1 :label).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x3 :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (int_EXPROW_arg3 (((int_EXPROW $2) $1) $0)))
   $0)))))))`),
 ((int_EXPROW_arg2_DEF),
  [],
  `((! :(label -> bool) -> bool) (\(x1 :label).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x3 :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :exp -> exp -> bool) (int_EXPROW_arg2 (((int_EXPROW $2) $1)
   $0))) $1)))))))`),
 ((int_EXPROW_arg1_DEF),
  [],
  `((! :(label -> bool) -> bool) (\(x1 :label).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x3 :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :label -> label -> bool) (int_EXPROW_arg1 (((int_EXPROW $2)
   $1) $0))) $2)))))))`),
 ((int_FNexp_arg_DEF),
  [],
  `((/\ ((! :(match -> bool) -> bool) (\(x1 :match).
   (((= :match -> match -> bool) (int_FNexp_arg (int_FNexp $0)))
   $0)))) ((/\ ((! :(atexp -> bool) -> bool) (\(x1 :atexp).
   (((= :match -> match -> bool) (int_FNexp_arg (int_ATEXPexp $0)))
   ((@ :(match -> bool) -> match) (\(x :match). T)))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(atexp -> bool) -> bool) (\(x2 :atexp).
   (((= :match -> match -> bool) (int_FNexp_arg ((int_APPexp $1) $0)))
   ((@ :(match -> bool) -> match) (\(x :match). T)))))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(match -> bool) -> bool) (\(x2 :match).
   (((= :match -> match -> bool) (int_FNexp_arg ((int_HANDLEexp $1)
   $0))) ((@ :(match -> bool) -> match) (\(x :match). T))))))))
   ((! :(exp -> bool) -> bool) (\(x1 :exp).
   (((= :match -> match -> bool) (int_FNexp_arg (int_RAISEexp $0)))
   ((@ :(match -> bool) -> match) (\(x :match). T)))))))))`),
 ((int_RAISEexp_arg_DEF),
  [],
  `((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   (((= :exp -> exp -> bool) (int_RAISEexp_arg (int_RAISEexp $0)))
   $0)))) ((/\ ((! :(atexp -> bool) -> bool) (\(x1 :atexp).
   (((= :exp -> exp -> bool) (int_RAISEexp_arg (int_ATEXPexp $0)))
   ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(atexp -> bool) -> bool) (\(x2 :atexp).
   (((= :exp -> exp -> bool) (int_RAISEexp_arg ((int_APPexp $1) $0)))
   ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(match -> bool) -> bool) (\(x2 :match).
   (((= :exp -> exp -> bool) (int_RAISEexp_arg ((int_HANDLEexp $1)
   $0))) ((@ :(exp -> bool) -> exp) (\(x :exp). T))))))))
   ((! :(match -> bool) -> bool) (\(x1 :match).
   (((= :exp -> exp -> bool) (int_RAISEexp_arg (int_FNexp $0)))
   ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))))))`),
 ((int_HANDLEexp_arg2_DEF),
  [],
  `((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(match -> bool) -> bool) (\(x2 :match).
   (((= :match -> match -> bool) (int_HANDLEexp_arg2 ((int_HANDLEexp
   $1) $0))) $0)))))) ((/\ ((! :(atexp -> bool) -> bool)
   (\(x1 :atexp). (((= :match -> match -> bool) (int_HANDLEexp_arg2
   (int_ATEXPexp $0))) ((@ :(match -> bool) -> match) (\(x :match).
   T)))))) ((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(atexp -> bool) -> bool) (\(x2 :atexp).
   (((= :match -> match -> bool) (int_HANDLEexp_arg2 ((int_APPexp $1)
   $0))) ((@ :(match -> bool) -> match) (\(x :match). T)))))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp).
   (((= :match -> match -> bool) (int_HANDLEexp_arg2 (int_RAISEexp
   $0))) ((@ :(match -> bool) -> match) (\(x :match). T))))))
   ((! :(match -> bool) -> bool) (\(x1 :match).
   (((= :match -> match -> bool) (int_HANDLEexp_arg2 (int_FNexp $0)))
   ((@ :(match -> bool) -> match) (\(x :match). T)))))))))`),
 ((int_HANDLEexp_arg1_DEF),
  [],
  `((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(match -> bool) -> bool) (\(x2 :match).
   (((= :exp -> exp -> bool) (int_HANDLEexp_arg1 ((int_HANDLEexp $1)
   $0))) $1)))))) ((/\ ((! :(atexp -> bool) -> bool) (\(x1 :atexp).
   (((= :exp -> exp -> bool) (int_HANDLEexp_arg1 (int_ATEXPexp $0)))
   ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(atexp -> bool) -> bool) (\(x2 :atexp).
   (((= :exp -> exp -> bool) (int_HANDLEexp_arg1 ((int_APPexp $1)
   $0))) ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp). (((= :exp -> exp -> bool)
   (int_HANDLEexp_arg1 (int_RAISEexp $0))) ((@ :(exp -> bool) -> exp)
   (\(x :exp). T)))))) ((! :(match -> bool) -> bool) (\(x1 :match).
   (((= :exp -> exp -> bool) (int_HANDLEexp_arg1 (int_FNexp $0)))
   ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))))))`),
 ((int_APPexp_arg2_DEF),
  [],
  `((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(atexp -> bool) -> bool) (\(x2 :atexp).
   (((= :atexp -> atexp -> bool) (int_APPexp_arg2 ((int_APPexp $1)
   $0))) $0)))))) ((/\ ((! :(atexp -> bool) -> bool) (\(x1 :atexp).
   (((= :atexp -> atexp -> bool) (int_APPexp_arg2 (int_ATEXPexp $0)))
   ((@ :(atexp -> bool) -> atexp) (\(x :atexp). T)))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(match -> bool) -> bool) (\(x2 :match).
   (((= :atexp -> atexp -> bool) (int_APPexp_arg2 ((int_HANDLEexp $1)
   $0))) ((@ :(atexp -> bool) -> atexp) (\(x :atexp). T)))))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp).
   (((= :atexp -> atexp -> bool) (int_APPexp_arg2 (int_RAISEexp $0)))
   ((@ :(atexp -> bool) -> atexp) (\(x :atexp). T))))))
   ((! :(match -> bool) -> bool) (\(x1 :match).
   (((= :atexp -> atexp -> bool) (int_APPexp_arg2 (int_FNexp $0)))
   ((@ :(atexp -> bool) -> atexp) (\(x :atexp). T)))))))))`),
 ((int_APPexp_arg1_DEF),
  [],
  `((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(atexp -> bool) -> bool) (\(x2 :atexp).
   (((= :exp -> exp -> bool) (int_APPexp_arg1 ((int_APPexp $1) $0)))
   $1)))))) ((/\ ((! :(atexp -> bool) -> bool) (\(x1 :atexp).
   (((= :exp -> exp -> bool) (int_APPexp_arg1 (int_ATEXPexp $0)))
   ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(match -> bool) -> bool) (\(x2 :match).
   (((= :exp -> exp -> bool) (int_APPexp_arg1 ((int_HANDLEexp $1)
   $0))) ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp). (((= :exp -> exp -> bool)
   (int_APPexp_arg1 (int_RAISEexp $0))) ((@ :(exp -> bool) -> exp)
   (\(x :exp). T)))))) ((! :(match -> bool) -> bool) (\(x1 :match).
   (((= :exp -> exp -> bool) (int_APPexp_arg1 (int_FNexp $0)))
   ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))))))`),
 ((int_ATEXPexp_arg_DEF),
  [],
  `((/\ ((! :(atexp -> bool) -> bool) (\(x1 :atexp).
   (((= :atexp -> atexp -> bool) (int_ATEXPexp_arg (int_ATEXPexp $0)))
   $0)))) ((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(atexp -> bool) -> bool) (\(x2 :atexp).
   (((= :atexp -> atexp -> bool) (int_ATEXPexp_arg ((int_APPexp $1)
   $0))) ((@ :(atexp -> bool) -> atexp) (\(x :atexp). T)))))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(match -> bool) -> bool) (\(x2 :match).
   (((= :atexp -> atexp -> bool) (int_ATEXPexp_arg ((int_HANDLEexp $1)
   $0))) ((@ :(atexp -> bool) -> atexp) (\(x :atexp). T)))))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp).
   (((= :atexp -> atexp -> bool) (int_ATEXPexp_arg (int_RAISEexp $0)))
   ((@ :(atexp -> bool) -> atexp) (\(x :atexp). T))))))
   ((! :(match -> bool) -> bool) (\(x1 :match).
   (((= :atexp -> atexp -> bool) (int_ATEXPexp_arg (int_FNexp $0)))
   ((@ :(atexp -> bool) -> atexp) (\(x :atexp). T)))))))))`),
 ((int_SEQdec_arg2_DEF),
  [],
  `((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec). (((= :dec -> dec -> bool)
   (int_SEQdec_arg2 ((int_SEQdec $1) $0))) $0)))))) ((/\
   ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :dec -> dec -> bool) (int_SEQdec_arg2 (int_VALdec $0)))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))) ((/\
   ((! :(exbind -> bool) -> bool) (\(x1 :exbind).
   (((= :dec -> dec -> bool) (int_SEQdec_arg2 (int_EXCEPTdec $0)))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec). (((= :dec -> dec -> bool)
   (int_SEQdec_arg2 ((int_LOCALdec $1) $0)))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :dec -> dec -> bool)
   (int_SEQdec_arg2 (int_OPENdec $0))) ((@ :(dec -> bool) -> dec)
   (\(x :dec). T)))))) (((= :dec -> dec -> bool) (int_SEQdec_arg2
   int_EMPTYdec)) ((@ :(dec -> bool) -> dec) (\(x :dec). T))))))))`),
 ((int_SEQdec_arg1_DEF),
  [],
  `((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec). (((= :dec -> dec -> bool)
   (int_SEQdec_arg1 ((int_SEQdec $1) $0))) $1)))))) ((/\
   ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :dec -> dec -> bool) (int_SEQdec_arg1 (int_VALdec $0)))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))) ((/\
   ((! :(exbind -> bool) -> bool) (\(x1 :exbind).
   (((= :dec -> dec -> bool) (int_SEQdec_arg1 (int_EXCEPTdec $0)))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec). (((= :dec -> dec -> bool)
   (int_SEQdec_arg1 ((int_LOCALdec $1) $0)))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :dec -> dec -> bool)
   (int_SEQdec_arg1 (int_OPENdec $0))) ((@ :(dec -> bool) -> dec)
   (\(x :dec). T)))))) (((= :dec -> dec -> bool) (int_SEQdec_arg1
   int_EMPTYdec)) ((@ :(dec -> bool) -> dec) (\(x :dec). T))))))))`),
 ((int_OPENdec_arg_DEF),
  [],
  `((/\ ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENdec_arg (int_OPENdec $0))) $0)))) ((/\
   ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENdec_arg (int_VALdec $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))))) ((/\
   ((! :(exbind -> bool) -> bool) (\(x1 :exbind).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENdec_arg (int_EXCEPTdec $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENdec_arg ((int_LOCALdec $1) $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENdec_arg ((int_SEQdec $1) $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T))))))))
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENdec_arg int_EMPTYdec))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T))))))))`),
 ((int_LOCALdec_arg2_DEF),
  [],
  `((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec). (((= :dec -> dec -> bool)
   (int_LOCALdec_arg2 ((int_LOCALdec $1) $0))) $0)))))) ((/\
   ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :dec -> dec -> bool) (int_LOCALdec_arg2 (int_VALdec $0)))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))) ((/\
   ((! :(exbind -> bool) -> bool) (\(x1 :exbind).
   (((= :dec -> dec -> bool) (int_LOCALdec_arg2 (int_EXCEPTdec $0)))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :dec -> dec -> bool)
   (int_LOCALdec_arg2 (int_OPENdec $0))) ((@ :(dec -> bool) -> dec)
   (\(x :dec). T)))))) ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec). (((= :dec -> dec -> bool)
   (int_LOCALdec_arg2 ((int_SEQdec $1) $0)))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T))))))))
   (((= :dec -> dec -> bool) (int_LOCALdec_arg2 int_EMPTYdec))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T))))))))`),
 ((int_LOCALdec_arg1_DEF),
  [],
  `((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec). (((= :dec -> dec -> bool)
   (int_LOCALdec_arg1 ((int_LOCALdec $1) $0))) $1)))))) ((/\
   ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :dec -> dec -> bool) (int_LOCALdec_arg1 (int_VALdec $0)))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))) ((/\
   ((! :(exbind -> bool) -> bool) (\(x1 :exbind).
   (((= :dec -> dec -> bool) (int_LOCALdec_arg1 (int_EXCEPTdec $0)))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :dec -> dec -> bool)
   (int_LOCALdec_arg1 (int_OPENdec $0))) ((@ :(dec -> bool) -> dec)
   (\(x :dec). T)))))) ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec). (((= :dec -> dec -> bool)
   (int_LOCALdec_arg1 ((int_SEQdec $1) $0)))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T))))))))
   (((= :dec -> dec -> bool) (int_LOCALdec_arg1 int_EMPTYdec))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T))))))))`),
 ((int_EXCEPTdec_arg_DEF),
  [],
  `((/\ ((! :(exbind -> bool) -> bool) (\(x1 :exbind).
   (((= :exbind -> exbind -> bool) (int_EXCEPTdec_arg (int_EXCEPTdec
   $0))) $0)))) ((/\ ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :exbind -> exbind -> bool) (int_EXCEPTdec_arg (int_VALdec
   $0))) ((@ :(exbind -> bool) -> exbind) (\(x :exbind). T)))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec).
   (((= :exbind -> exbind -> bool) (int_EXCEPTdec_arg ((int_LOCALdec
   $1) $0))) ((@ :(exbind -> bool) -> exbind) (\(x :exbind). T))))))))
   ((/\ ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :exbind -> exbind -> bool)
   (int_EXCEPTdec_arg (int_OPENdec $0)))
   ((@ :(exbind -> bool) -> exbind) (\(x :exbind). T)))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec).
   (((= :exbind -> exbind -> bool) (int_EXCEPTdec_arg ((int_SEQdec $1)
   $0))) ((@ :(exbind -> bool) -> exbind) (\(x :exbind). T))))))))
   (((= :exbind -> exbind -> bool) (int_EXCEPTdec_arg int_EMPTYdec))
   ((@ :(exbind -> bool) -> exbind) (\(x :exbind). T))))))))`),
 ((int_VALdec_arg_DEF),
  [],
  `((/\ ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :valbind -> valbind -> bool) (int_VALdec_arg (int_VALdec $0)))
   $0)))) ((/\ ((! :(exbind -> bool) -> bool) (\(x1 :exbind).
   (((= :valbind -> valbind -> bool) (int_VALdec_arg (int_EXCEPTdec
   $0))) ((@ :(valbind -> bool) -> valbind) (\(x :valbind). T))))))
   ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec).
   (((= :valbind -> valbind -> bool) (int_VALdec_arg ((int_LOCALdec
   $1) $0))) ((@ :(valbind -> bool) -> valbind) (\(x :valbind).
   T)))))))) ((/\ ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :valbind -> valbind -> bool)
   (int_VALdec_arg (int_OPENdec $0)))
   ((@ :(valbind -> bool) -> valbind) (\(x :valbind). T)))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec).
   (((= :valbind -> valbind -> bool) (int_VALdec_arg ((int_SEQdec $1)
   $0))) ((@ :(valbind -> bool) -> valbind) (\(x :valbind). T))))))))
   (((= :valbind -> valbind -> bool) (int_VALdec_arg int_EMPTYdec))
   ((@ :(valbind -> bool) -> valbind) (\(x :valbind). T))))))))`),
 ((int_RECORDatexp_arg_DEF),
  [],
  `((/\
   ((! :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x1 :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (int_RECORDatexp_arg (int_RECORDatexp $0))) $0)))) ((/\
   ((! :(scon -> bool) -> bool) (\(x1 :scon).
   (((= :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (int_RECORDatexp_arg (int_SCONatexp $0)))
   ((@ :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) ->
        exprow_option_atexp_dec_exp_exprow_match_mrule_valbind)
   (\(x :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   T)))))) ((/\ ((! :(var long -> bool) -> bool) (\(x1 :var long).
   (((= :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (int_RECORDatexp_arg (int_VARatexp $0)))
   ((@ :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) ->
        exprow_option_atexp_dec_exp_exprow_match_mrule_valbind)
   (\(x :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   T)))))) ((/\ ((! :(con long -> bool) -> bool) (\(x1 :con long).
   (((= :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (int_RECORDatexp_arg (int_CONatexp $0)))
   ((@ :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) ->
        exprow_option_atexp_dec_exp_exprow_match_mrule_valbind)
   (\(x :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   T)))))) ((/\ ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   (((= :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (int_RECORDatexp_arg (int_EXCONatexp $0)))
   ((@ :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) ->
        exprow_option_atexp_dec_exp_exprow_match_mrule_valbind)
   (\(x :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   T)))))) ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   (((= :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (int_RECORDatexp_arg ((int_LETatexp $1) $0)))
   ((@ :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) ->
        exprow_option_atexp_dec_exp_exprow_match_mrule_valbind)
   (\(x :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   T)))))))) ((! :(exp -> bool) -> bool) (\(x1 :exp).
   (((= :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (int_RECORDatexp_arg (int_PARatexp $0)))
   ((@ :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) ->
        exprow_option_atexp_dec_exp_exprow_match_mrule_valbind)
   (\(x :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   T)))))))))))`),
 ((int_PARatexp_arg_DEF),
  [],
  `((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   (((= :exp -> exp -> bool) (int_PARatexp_arg (int_PARatexp $0)))
   $0)))) ((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   (((= :exp -> exp -> bool) (int_PARatexp_arg (int_SCONatexp $0)))
   ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))) ((/\
   ((! :(var long -> bool) -> bool) (\(x1 :var long).
   (((= :exp -> exp -> bool) (int_PARatexp_arg (int_VARatexp $0)))
   ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))) ((/\
   ((! :(con long -> bool) -> bool) (\(x1 :con long).
   (((= :exp -> exp -> bool) (int_PARatexp_arg (int_CONatexp $0)))
   ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))) ((/\
   ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   (((= :exp -> exp -> bool) (int_PARatexp_arg (int_EXCONatexp $0)))
   ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(exp -> bool) -> bool) (\(x2 :exp). (((= :exp -> exp -> bool)
   (int_PARatexp_arg ((int_LETatexp $1) $0)))
   ((@ :(exp -> bool) -> exp) (\(x :exp). T))))))))
   ((! :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x1 :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :exp -> exp -> bool) (int_PARatexp_arg (int_RECORDatexp $0)))
   ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))))))))`),
 ((int_LETatexp_arg2_DEF),
  [],
  `((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(exp -> bool) -> bool) (\(x2 :exp). (((= :exp -> exp -> bool)
   (int_LETatexp_arg2 ((int_LETatexp $1) $0))) $0)))))) ((/\
   ((! :(scon -> bool) -> bool) (\(x1 :scon).
   (((= :exp -> exp -> bool) (int_LETatexp_arg2 (int_SCONatexp $0)))
   ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))) ((/\
   ((! :(var long -> bool) -> bool) (\(x1 :var long).
   (((= :exp -> exp -> bool) (int_LETatexp_arg2 (int_VARatexp $0)))
   ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))) ((/\
   ((! :(con long -> bool) -> bool) (\(x1 :con long).
   (((= :exp -> exp -> bool) (int_LETatexp_arg2 (int_CONatexp $0)))
   ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))) ((/\
   ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   (((= :exp -> exp -> bool) (int_LETatexp_arg2 (int_EXCONatexp $0)))
   ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp). (((= :exp -> exp -> bool)
   (int_LETatexp_arg2 (int_PARatexp $0))) ((@ :(exp -> bool) -> exp)
   (\(x :exp). T))))))
   ((! :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x1 :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :exp -> exp -> bool) (int_LETatexp_arg2 (int_RECORDatexp $0)))
   ((@ :(exp -> bool) -> exp) (\(x :exp). T)))))))))))`),
 ((int_LETatexp_arg1_DEF),
  [],
  `((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(exp -> bool) -> bool) (\(x2 :exp). (((= :dec -> dec -> bool)
   (int_LETatexp_arg1 ((int_LETatexp $1) $0))) $1)))))) ((/\
   ((! :(scon -> bool) -> bool) (\(x1 :scon).
   (((= :dec -> dec -> bool) (int_LETatexp_arg1 (int_SCONatexp $0)))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))) ((/\
   ((! :(var long -> bool) -> bool) (\(x1 :var long).
   (((= :dec -> dec -> bool) (int_LETatexp_arg1 (int_VARatexp $0)))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))) ((/\
   ((! :(con long -> bool) -> bool) (\(x1 :con long).
   (((= :dec -> dec -> bool) (int_LETatexp_arg1 (int_CONatexp $0)))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))) ((/\
   ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   (((= :dec -> dec -> bool) (int_LETatexp_arg1 (int_EXCONatexp $0)))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp). (((= :dec -> dec -> bool)
   (int_LETatexp_arg1 (int_PARatexp $0))) ((@ :(dec -> bool) -> dec)
   (\(x :dec). T))))))
   ((! :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x1 :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :dec -> dec -> bool) (int_LETatexp_arg1 (int_RECORDatexp $0)))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))))))))`),
 ((int_EXCONatexp_arg_DEF),
  [],
  `((/\ ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   (((= :excon long -> excon long -> bool) (int_EXCONatexp_arg
   (int_EXCONatexp $0))) $0)))) ((/\ ((! :(scon -> bool) -> bool)
   (\(x1 :scon). (((= :excon long -> excon long -> bool)
   (int_EXCONatexp_arg (int_SCONatexp $0)))
   ((@ :(excon long -> bool) -> excon long) (\(x :excon long). T))))))
   ((/\ ((! :(var long -> bool) -> bool) (\(x1 :var long).
   (((= :excon long -> excon long -> bool) (int_EXCONatexp_arg
   (int_VARatexp $0))) ((@ :(excon long -> bool) -> excon long)
   (\(x :excon long). T)))))) ((/\ ((! :(con long -> bool) -> bool)
   (\(x1 :con long). (((= :excon long -> excon long -> bool)
   (int_EXCONatexp_arg (int_CONatexp $0)))
   ((@ :(excon long -> bool) -> excon long) (\(x :excon long). T))))))
   ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   (((= :excon long -> excon long -> bool) (int_EXCONatexp_arg
   ((int_LETatexp $1) $0))) ((@ :(excon long -> bool) -> excon long)
   (\(x :excon long). T)))))))) ((/\ ((! :(exp -> bool) -> bool)
   (\(x1 :exp). (((= :excon long -> excon long -> bool)
   (int_EXCONatexp_arg (int_PARatexp $0)))
   ((@ :(excon long -> bool) -> excon long) (\(x :excon long). T))))))
   ((! :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x1 :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :excon long -> excon long -> bool) (int_EXCONatexp_arg
   (int_RECORDatexp $0))) ((@ :(excon long -> bool) -> excon long)
   (\(x :excon long). T)))))))))))`),
 ((int_CONatexp_arg_DEF),
  [],
  `((/\ ((! :(con long -> bool) -> bool) (\(x1 :con long).
   (((= :con long -> con long -> bool) (int_CONatexp_arg (int_CONatexp
   $0))) $0)))) ((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   (((= :con long -> con long -> bool) (int_CONatexp_arg
   (int_SCONatexp $0))) ((@ :(con long -> bool) -> con long)
   (\(x :con long). T)))))) ((/\ ((! :(var long -> bool) -> bool)
   (\(x1 :var long). (((= :con long -> con long -> bool)
   (int_CONatexp_arg (int_VARatexp $0)))
   ((@ :(con long -> bool) -> con long) (\(x :con long). T)))))) ((/\
   ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   (((= :con long -> con long -> bool) (int_CONatexp_arg
   (int_EXCONatexp $0))) ((@ :(con long -> bool) -> con long)
   (\(x :con long). T)))))) ((/\ ((! :(dec -> bool) -> bool)
   (\(x1 :dec). ((! :(exp -> bool) -> bool) (\(x2 :exp).
   (((= :con long -> con long -> bool) (int_CONatexp_arg
   ((int_LETatexp $1) $0))) ((@ :(con long -> bool) -> con long)
   (\(x :con long). T)))))))) ((/\ ((! :(exp -> bool) -> bool)
   (\(x1 :exp). (((= :con long -> con long -> bool) (int_CONatexp_arg
   (int_PARatexp $0))) ((@ :(con long -> bool) -> con long)
   (\(x :con long). T))))))
   ((! :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x1 :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :con long -> con long -> bool) (int_CONatexp_arg
   (int_RECORDatexp $0))) ((@ :(con long -> bool) -> con long)
   (\(x :con long). T)))))))))))`),
 ((int_VARatexp_arg_DEF),
  [],
  `((/\ ((! :(var long -> bool) -> bool) (\(x1 :var long).
   (((= :var long -> var long -> bool) (int_VARatexp_arg (int_VARatexp
   $0))) $0)))) ((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   (((= :var long -> var long -> bool) (int_VARatexp_arg
   (int_SCONatexp $0))) ((@ :(var long -> bool) -> var long)
   (\(x :var long). T)))))) ((/\ ((! :(con long -> bool) -> bool)
   (\(x1 :con long). (((= :var long -> var long -> bool)
   (int_VARatexp_arg (int_CONatexp $0)))
   ((@ :(var long -> bool) -> var long) (\(x :var long). T)))))) ((/\
   ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   (((= :var long -> var long -> bool) (int_VARatexp_arg
   (int_EXCONatexp $0))) ((@ :(var long -> bool) -> var long)
   (\(x :var long). T)))))) ((/\ ((! :(dec -> bool) -> bool)
   (\(x1 :dec). ((! :(exp -> bool) -> bool) (\(x2 :exp).
   (((= :var long -> var long -> bool) (int_VARatexp_arg
   ((int_LETatexp $1) $0))) ((@ :(var long -> bool) -> var long)
   (\(x :var long). T)))))))) ((/\ ((! :(exp -> bool) -> bool)
   (\(x1 :exp). (((= :var long -> var long -> bool) (int_VARatexp_arg
   (int_PARatexp $0))) ((@ :(var long -> bool) -> var long)
   (\(x :var long). T))))))
   ((! :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x1 :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :var long -> var long -> bool) (int_VARatexp_arg
   (int_RECORDatexp $0))) ((@ :(var long -> bool) -> var long)
   (\(x :var long). T)))))))))))`),
 ((int_SCONatexp_arg_DEF),
  [],
  `((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   (((= :scon -> scon -> bool) (int_SCONatexp_arg (int_SCONatexp $0)))
   $0)))) ((/\ ((! :(var long -> bool) -> bool) (\(x1 :var long).
   (((= :scon -> scon -> bool) (int_SCONatexp_arg (int_VARatexp $0)))
   ((@ :(scon -> bool) -> scon) (\(x :scon). T)))))) ((/\
   ((! :(con long -> bool) -> bool) (\(x1 :con long).
   (((= :scon -> scon -> bool) (int_SCONatexp_arg (int_CONatexp $0)))
   ((@ :(scon -> bool) -> scon) (\(x :scon). T)))))) ((/\
   ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   (((= :scon -> scon -> bool) (int_SCONatexp_arg (int_EXCONatexp
   $0))) ((@ :(scon -> bool) -> scon) (\(x :scon). T)))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   (((= :scon -> scon -> bool) (int_SCONatexp_arg ((int_LETatexp $1)
   $0))) ((@ :(scon -> bool) -> scon) (\(x :scon). T)))))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp).
   (((= :scon -> scon -> bool) (int_SCONatexp_arg (int_PARatexp $0)))
   ((@ :(scon -> bool) -> scon) (\(x :scon). T))))))
   ((! :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x1 :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :scon -> scon -> bool) (int_SCONatexp_arg (int_RECORDatexp
   $0))) ((@ :(scon -> bool) -> scon) (\(x :scon). T)))))))))))`),
 ((dist_aux_ftn_atexp_DEF),
  [],
  `((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   (((= :num -> num -> bool) (dist_aux_ftn_atexp (int_SCONatexp $0)))
   0)))) ((/\ ((! :(var long -> bool) -> bool) (\(x1 :var long).
   (((= :num -> num -> bool) (dist_aux_ftn_atexp (int_VARatexp $0)))
   1)))) ((/\ ((! :(con long -> bool) -> bool) (\(x1 :con long).
   (((= :num -> num -> bool) (dist_aux_ftn_atexp (int_CONatexp $0)))
   2)))) ((/\ ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   (((= :num -> num -> bool) (dist_aux_ftn_atexp (int_EXCONatexp $0)))
   3)))) ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(exp -> bool) -> bool) (\(x2 :exp). (((= :num -> num -> bool)
   (dist_aux_ftn_atexp ((int_LETatexp $1) $0))) 4)))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp). (((= :num -> num -> bool)
   (dist_aux_ftn_atexp (int_PARatexp $0))) 5)))) ((/\
   ((! :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x1 :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool) (dist_aux_ftn_atexp (int_RECORDatexp
   $0))) 6)))) ((/\ ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :num -> num -> bool) (dist_aux_ftn_dec (int_VALdec $0))) 7))))
   ((/\ ((! :(exbind -> bool) -> bool) (\(x1 :exbind).
   (((= :num -> num -> bool) (dist_aux_ftn_dec (int_EXCEPTdec $0)))
   8)))) ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec). (((= :num -> num -> bool)
   (dist_aux_ftn_dec ((int_LOCALdec $1) $0))) 9)))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :num -> num -> bool)
   (dist_aux_ftn_dec (int_OPENdec $0))) 10)))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec). (((= :num -> num -> bool)
   (dist_aux_ftn_dec ((int_SEQdec $1) $0))) 11)))))) ((/\
   (((= :num -> num -> bool) (dist_aux_ftn_dec int_EMPTYdec)) 12))
   ((/\ ((! :(atexp -> bool) -> bool) (\(x1 :atexp).
   (((= :num -> num -> bool) (dist_aux_ftn_exp (int_ATEXPexp $0)))
   13)))) ((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(atexp -> bool) -> bool) (\(x2 :atexp).
   (((= :num -> num -> bool) (dist_aux_ftn_exp ((int_APPexp $1) $0)))
   14)))))) ((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(match -> bool) -> bool) (\(x2 :match).
   (((= :num -> num -> bool) (dist_aux_ftn_exp ((int_HANDLEexp $1)
   $0))) 15)))))) ((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   (((= :num -> num -> bool) (dist_aux_ftn_exp (int_RAISEexp $0)))
   16)))) ((/\ ((! :(match -> bool) -> bool) (\(x1 :match).
   (((= :num -> num -> bool) (dist_aux_ftn_exp (int_FNexp $0))) 17))))
   ((/\ ((! :(label -> bool) -> bool) (\(x1 :label).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x3 :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool) (dist_aux_ftn_exprow (((int_EXPROW $2)
   $1) $0))) 18)))))))) ((/\ (((= :num -> num -> bool)
   (dist_aux_ftn_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind
   int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_exprow)) 19))
   ((/\ ((! :(exprow -> bool) -> bool) (\(x1 :exprow).
   (((= :num -> num -> bool)
   (dist_aux_ftn_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_exprow $0)))
   20)))) ((/\ ((! :(mrule -> bool) -> bool) (\(x1 :mrule).
   ((! :(match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x2 :match_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool) (dist_aux_ftn_match ((int_MATCH $1) $0)))
   21)))))) ((/\ (((= :num -> num -> bool)
   (dist_aux_ftn_match_option_atexp_dec_exp_exprow_match_mrule_valbind
   int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_match)) 22)) ((/\
   ((! :(match -> bool) -> bool) (\(x1 :match).
   (((= :num -> num -> bool)
   (dist_aux_ftn_match_option_atexp_dec_exp_exprow_match_mrule_valbind
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_match $0)))
   23)))) ((/\ ((! :(pat -> bool) -> bool) (\(x1 :pat).
   ((! :(exp -> bool) -> bool) (\(x2 :exp). (((= :num -> num -> bool)
   (dist_aux_ftn_mrule ((int_MRULE $1) $0))) 24)))))) ((/\
   ((! :(pat -> bool) -> bool) (\(x1 :pat).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x3 :valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool) (dist_aux_ftn_valbind (((int_PLAINvalbind
   $2) $1) $0))) 25)))))))) ((/\ ((! :(valbind -> bool) -> bool)
   (\(x1 :valbind). (((= :num -> num -> bool) (dist_aux_ftn_valbind
   (int_RECvalbind $0))) 26)))) ((/\ (((= :num -> num -> bool)
   (dist_aux_ftn_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_valbind)) 27))
   ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :num -> num -> bool)
   (dist_aux_ftn_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_valbind $0)))
   28)))))))))))))))))))))))))))))))`),
 ((RECvalbind),
  [],
  `(((= :(valbind -> valbind) -> (valbind -> valbind) -> bool)
   RECvalbind) (\(x0 :valbind). (int_RECvalbind $0)))`),
 ((PLAINvalbind),
  [],
  `(((= :(pat -> exp -> valbind option -> valbind) ->
         (pat -> exp -> valbind option -> valbind) -> bool)
   PLAINvalbind) (\(x0 :pat). (\(x1 :exp). (\(x2 :valbind option).
   (((int_PLAINvalbind $2) $1)
   (int_inj_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))))))`),
 ((int_inv_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind),
  [],
  `((/\ (((= :valbind option -> valbind option -> bool)
   (int_inv_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_valbind))
   (NONE :valbind option))) ((! :(valbind -> bool) -> bool)
   (\(x1 :valbind). (((= :valbind option -> valbind option -> bool)
   (int_inv_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_valbind $0)))
   ((SOME :valbind -> valbind option) $0)))))`),
 ((int_inj_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind),
  [],
  `((/\
   (((= :valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (int_inj_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (NONE :valbind option)))
   int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_valbind))
   ((! :(valbind -> bool) -> bool) (\(x0 :valbind).
   (((= :valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (int_inj_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   ((SOME :valbind -> valbind option) $0)))
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_valbind
   $0)))))`),
 ((MRULE),
  [],
  `(((= :(pat -> exp -> mrule) -> (pat -> exp -> mrule) -> bool)
   MRULE) (\(x0 :pat). (\(x1 :exp). ((int_MRULE $1) $0))))`),
 ((MATCH),
  [],
  `(((= :(mrule -> match option -> match) ->
         (mrule -> match option -> match) -> bool) MATCH)
   (\(x0 :mrule). (\(x1 :match option). ((int_MATCH $1)
   (int_inj_match_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0)))))`),
 ((int_inv_match_option_atexp_dec_exp_exprow_match_mrule_valbind),
  [],
  `((/\ (((= :match option -> match option -> bool)
   (int_inv_match_option_atexp_dec_exp_exprow_match_mrule_valbind
   int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_match))
   (NONE :match option))) ((! :(match -> bool) -> bool) (\(x1 :match).
   (((= :match option -> match option -> bool)
   (int_inv_match_option_atexp_dec_exp_exprow_match_mrule_valbind
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_match $0)))
   ((SOME :match -> match option) $0)))))`),
 ((int_inj_match_option_atexp_dec_exp_exprow_match_mrule_valbind),
  [],
  `((/\
   (((= :match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (int_inj_match_option_atexp_dec_exp_exprow_match_mrule_valbind
   (NONE :match option)))
   int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_match))
   ((! :(match -> bool) -> bool) (\(x0 :match).
   (((= :match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (int_inj_match_option_atexp_dec_exp_exprow_match_mrule_valbind
   ((SOME :match -> match option) $0)))
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_match $0)))))`),
 ((EXPROW),
  [],
  `(((= :(label -> exp -> exprow option -> exprow) ->
         (label -> exp -> exprow option -> exprow) -> bool) EXPROW)
   (\(x0 :label). (\(x1 :exp). (\(x2 :exprow option). (((int_EXPROW
   $2) $1)
   (int_inj_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))))))`),
 ((RECORDatexp),
  [],
  `(((= :(exprow option -> atexp) -> (exprow option -> atexp) -> bool)
   RECORDatexp) (\(x0 :exprow option). (int_RECORDatexp
   (int_inj_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))))`),
 ((PARatexp),
  [],
  `(((= :(exp -> atexp) -> (exp -> atexp) -> bool) PARatexp)
   (\(x0 :exp). (int_PARatexp $0)))`),
 ((LETatexp),
  [],
  `(((= :(dec -> exp -> atexp) -> (dec -> exp -> atexp) -> bool)
   LETatexp) (\(x0 :dec). (\(x1 :exp). ((int_LETatexp $1) $0))))`),
 ((EXCONatexp),
  [],
  `(((= :(excon long -> atexp) -> (excon long -> atexp) -> bool)
   EXCONatexp) (\(x0 :excon long). (int_EXCONatexp $0)))`),
 ((CONatexp),
  [],
  `(((= :(con long -> atexp) -> (con long -> atexp) -> bool) CONatexp)
   (\(x0 :con long). (int_CONatexp $0)))`),
 ((VARatexp),
  [],
  `(((= :(var long -> atexp) -> (var long -> atexp) -> bool) VARatexp)
   (\(x0 :var long). (int_VARatexp $0)))`),
 ((SCONatexp),
  [],
  `(((= :(scon -> atexp) -> (scon -> atexp) -> bool) SCONatexp)
   (\(x0 :scon). (int_SCONatexp $0)))`),
 ((int_inv_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind),
  [],
  `((/\ (((= :exprow option -> exprow option -> bool)
   (int_inv_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind
   int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_exprow))
   (NONE :exprow option))) ((! :(exprow -> bool) -> bool)
   (\(x1 :exprow). (((= :exprow option -> exprow option -> bool)
   (int_inv_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_exprow $0)))
   ((SOME :exprow -> exprow option) $0)))))`),
 ((int_inj_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind),
  [],
  `((/\
   (((= :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (int_inj_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind
   (NONE :exprow option)))
   int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_exprow))
   ((! :(exprow -> bool) -> bool) (\(x0 :exprow).
   (((= :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (int_inj_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind
   ((SOME :exprow -> exprow option) $0)))
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_exprow
   $0)))))`),
 ((FNexp),
  [],
  `(((= :(match -> exp) -> (match -> exp) -> bool) FNexp)
   (\(x0 :match). (int_FNexp $0)))`),
 ((RAISEexp),
  [],
  `(((= :(exp -> exp) -> (exp -> exp) -> bool) RAISEexp) (\(x0 :exp).
   (int_RAISEexp $0)))`),
 ((HANDLEexp),
  [],
  `(((= :(exp -> match -> exp) -> (exp -> match -> exp) -> bool)
   HANDLEexp) (\(x0 :exp). (\(x1 :match). ((int_HANDLEexp $1)
   $0))))`),
 ((APPexp),
  [],
  `(((= :(exp -> atexp -> exp) -> (exp -> atexp -> exp) -> bool)
   APPexp) (\(x0 :exp). (\(x1 :atexp). ((int_APPexp $1) $0))))`),
 ((ATEXPexp),
  [],
  `(((= :(atexp -> exp) -> (atexp -> exp) -> bool) ATEXPexp)
   (\(x0 :atexp). (int_ATEXPexp $0)))`),
 ((EMPTYdec),
  [],
  `(((= :dec -> dec -> bool) EMPTYdec) int_EMPTYdec)`),
 ((SEQdec),
  [],
  `(((= :(dec -> dec -> dec) -> (dec -> dec -> dec) -> bool) SEQdec)
   (\(x0 :dec). (\(x1 :dec). ((int_SEQdec $1) $0))))`),
 ((OPENdec),
  [],
  `(((= :(strid long nonemptylist -> dec) ->
         (strid long nonemptylist -> dec) -> bool) OPENdec)
   (\(x0 :strid long nonemptylist). (int_OPENdec $0)))`),
 ((LOCALdec),
  [],
  `(((= :(dec -> dec -> dec) -> (dec -> dec -> dec) -> bool) LOCALdec)
   (\(x0 :dec). (\(x1 :dec). ((int_LOCALdec $1) $0))))`),
 ((EXCEPTdec),
  [],
  `(((= :(exbind -> dec) -> (exbind -> dec) -> bool) EXCEPTdec)
   (\(x0 :exbind). (int_EXCEPTdec $0)))`),
 ((VALdec),
  [],
  `(((= :(valbind -> dec) -> (valbind -> dec) -> bool) VALdec)
   (\(x0 :valbind). (int_VALdec $0)))`),
 ((int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_valbind_DEF),
  [],
  `((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_valbind $0))
   (valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_abs
   (JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_valbind
   (valbind_rep $0))))))`),
 ((int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_valbind_DEF),
  [],
  `(((= :valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_valbind)
   (valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_abs
   JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_valbind))`),
 ((int_RECvalbind_DEF),
  [],
  `((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :valbind -> valbind -> bool) (int_RECvalbind $0)) (valbind_abs
   (JOINT_int_RECvalbind (valbind_rep $0))))))`),
 ((int_PLAINvalbind_DEF),
  [],
  `((! :(pat -> bool) -> bool) (\(x1 :pat).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x3 :valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :valbind -> valbind -> bool) (((int_PLAINvalbind $2) $1) $0))
   (valbind_abs (((JOINT_int_PLAINvalbind $2) (exp_rep $1))
   (valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_rep
   $0))))))))))`),
 ((int_MRULE_DEF),
  [],
  `((! :(pat -> bool) -> bool) (\(x1 :pat).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   (((= :mrule -> mrule -> bool) ((int_MRULE $1) $0)) (mrule_abs
   ((JOINT_int_MRULE $1) (exp_rep $0))))))))`),
 ((int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_match_DEF),
  [],
  `((! :(match -> bool) -> bool) (\(x1 :match).
   (((= :match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_match $0))
   (match_option_atexp_dec_exp_exprow_match_mrule_valbind_abs
   (JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_match
   (match_rep $0))))))`),
 ((int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_match_DEF),
  [],
  `(((= :match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_match)
   (match_option_atexp_dec_exp_exprow_match_mrule_valbind_abs
   JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_match))`),
 ((int_MATCH_DEF),
  [],
  `((! :(mrule -> bool) -> bool) (\(x1 :mrule).
   ((! :(match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x2 :match_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :match -> match -> bool) ((int_MATCH $1) $0)) (match_abs
   ((JOINT_int_MATCH (mrule_rep $1))
   (match_option_atexp_dec_exp_exprow_match_mrule_valbind_rep
   $0))))))))`),
 ((int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_exprow_DEF),
  [],
  `((! :(exprow -> bool) -> bool) (\(x1 :exprow).
   (((= :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_exprow $0))
   (exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_abs
   (JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_exprow
   (exprow_rep $0))))))`),
 ((int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_exprow_DEF),
  [],
  `(((= :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_exprow)
   (exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_abs
   JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_exprow))`),
 ((int_EXPROW_DEF),
  [],
  `((! :(label -> bool) -> bool) (\(x1 :label).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x3 :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :exprow -> exprow -> bool) (((int_EXPROW $2) $1) $0))
   (exprow_abs (((JOINT_int_EXPROW $2) (exp_rep $1))
   (exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_rep
   $0))))))))))`),
 ((int_FNexp_DEF),
  [],
  `((! :(match -> bool) -> bool) (\(x1 :match).
   (((= :exp -> exp -> bool) (int_FNexp $0)) (exp_abs (JOINT_int_FNexp
   (match_rep $0))))))`),
 ((int_RAISEexp_DEF),
  [],
  `((! :(exp -> bool) -> bool) (\(x1 :exp). (((= :exp -> exp -> bool)
   (int_RAISEexp $0)) (exp_abs (JOINT_int_RAISEexp (exp_rep
   $0))))))`),
 ((int_HANDLEexp_DEF),
  [],
  `((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(match -> bool) -> bool) (\(x2 :match).
   (((= :exp -> exp -> bool) ((int_HANDLEexp $1) $0)) (exp_abs
   ((JOINT_int_HANDLEexp (exp_rep $1)) (match_rep $0))))))))`),
 ((int_APPexp_DEF),
  [],
  `((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(atexp -> bool) -> bool) (\(x2 :atexp).
   (((= :exp -> exp -> bool) ((int_APPexp $1) $0)) (exp_abs
   ((JOINT_int_APPexp (exp_rep $1)) (atexp_rep $0))))))))`),
 ((int_ATEXPexp_DEF),
  [],
  `((! :(atexp -> bool) -> bool) (\(x1 :atexp).
   (((= :exp -> exp -> bool) (int_ATEXPexp $0)) (exp_abs
   (JOINT_int_ATEXPexp (atexp_rep $0))))))`),
 ((int_EMPTYdec_DEF),
  [],
  `(((= :dec -> dec -> bool) int_EMPTYdec) (dec_abs
   JOINT_int_EMPTYdec))`),
 ((int_SEQdec_DEF),
  [],
  `((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec). (((= :dec -> dec -> bool)
   ((int_SEQdec $1) $0)) (dec_abs ((JOINT_int_SEQdec (dec_rep $1))
   (dec_rep $0))))))))`),
 ((int_OPENdec_DEF),
  [],
  `((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :dec -> dec -> bool)
   (int_OPENdec $0)) (dec_abs (JOINT_int_OPENdec $0)))))`),
 ((int_LOCALdec_DEF),
  [],
  `((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec). (((= :dec -> dec -> bool)
   ((int_LOCALdec $1) $0)) (dec_abs ((JOINT_int_LOCALdec (dec_rep $1))
   (dec_rep $0))))))))`),
 ((int_EXCEPTdec_DEF),
  [],
  `((! :(exbind -> bool) -> bool) (\(x1 :exbind).
   (((= :dec -> dec -> bool) (int_EXCEPTdec $0)) (dec_abs
   (JOINT_int_EXCEPTdec $0)))))`),
 ((int_VALdec_DEF),
  [],
  `((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :dec -> dec -> bool) (int_VALdec $0)) (dec_abs
   (JOINT_int_VALdec (valbind_rep $0))))))`),
 ((int_RECORDatexp_DEF),
  [],
  `((! :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(x1 :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :atexp -> atexp -> bool) (int_RECORDatexp $0)) (atexp_abs
   (JOINT_int_RECORDatexp
   (exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_rep
   $0))))))`),
 ((int_PARatexp_DEF),
  [],
  `((! :(exp -> bool) -> bool) (\(x1 :exp).
   (((= :atexp -> atexp -> bool) (int_PARatexp $0)) (atexp_abs
   (JOINT_int_PARatexp (exp_rep $0))))))`),
 ((int_LETatexp_DEF),
  [],
  `((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   (((= :atexp -> atexp -> bool) ((int_LETatexp $1) $0)) (atexp_abs
   ((JOINT_int_LETatexp (dec_rep $1)) (exp_rep $0))))))))`),
 ((int_EXCONatexp_DEF),
  [],
  `((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   (((= :atexp -> atexp -> bool) (int_EXCONatexp $0)) (atexp_abs
   (JOINT_int_EXCONatexp $0)))))`),
 ((int_CONatexp_DEF),
  [],
  `((! :(con long -> bool) -> bool) (\(x1 :con long).
   (((= :atexp -> atexp -> bool) (int_CONatexp $0)) (atexp_abs
   (JOINT_int_CONatexp $0)))))`),
 ((int_VARatexp_DEF),
  [],
  `((! :(var long -> bool) -> bool) (\(x1 :var long).
   (((= :atexp -> atexp -> bool) (int_VARatexp $0)) (atexp_abs
   (JOINT_int_VARatexp $0)))))`),
 ((int_SCONatexp_DEF),
  [],
  `((! :(scon -> bool) -> bool) (\(x1 :scon).
   (((= :atexp -> atexp -> bool) (int_SCONatexp $0)) (atexp_abs
   (JOINT_int_SCONatexp $0)))))`),
 ((atexp_REP_ABS),
  [],
  `((/\ ((! :(atexp -> bool) -> bool) (\(a :atexp).
   (((= :atexp -> atexp -> bool) (atexp_abs (atexp_rep $0))) $0))))
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(r :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 1)) $0))
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (atexp_rep (atexp_abs $0))) $0)))))`),
 ((atexp_TY_DEF),
  [],
  `((? :((atexp ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
        bool) -> bool)
   (\(rep :atexp ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((TYPE_DEFINITION :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
                       bool) ->
                       (atexp ->
                       joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
                       bool)
   (\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 1))) $0)))`),
 ((dec_REP_ABS),
  [],
  `((/\ ((! :(dec -> bool) -> bool) (\(a :dec).
   (((= :dec -> dec -> bool) (dec_abs (dec_rep $0))) $0))))
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(r :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 2)) $0))
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (dec_rep (dec_abs $0))) $0)))))`),
 ((dec_TY_DEF),
  [],
  `((? :((dec ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
        bool) -> bool)
   (\(rep :dec ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((TYPE_DEFINITION :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
                       bool) ->
                       (dec ->
                       joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
                       bool)
   (\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 2))) $0)))`),
 ((exp_REP_ABS),
  [],
  `((/\ ((! :(exp -> bool) -> bool) (\(a :exp).
   (((= :exp -> exp -> bool) (exp_abs (exp_rep $0))) $0))))
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(r :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 3)) $0))
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (exp_rep (exp_abs $0))) $0)))))`),
 ((exp_TY_DEF),
  [],
  `((? :((exp ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
        bool) -> bool)
   (\(rep :exp ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((TYPE_DEFINITION :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
                       bool) ->
                       (exp ->
                       joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
                       bool)
   (\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 3))) $0)))`),
 ((exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_REP_ABS),
  [],
  `((/\
   ((! :(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(a :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_abs
   (exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_rep $0)))
   $0))))
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(r :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 5)) $0))
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_rep
   (exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_abs $0)))
   $0)))))`),
 ((exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_TY_DEF),
  [],
  `((? :((exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
        bool) -> bool)
   (\(rep :exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((TYPE_DEFINITION :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
                       bool) ->
                       (exprow_option_atexp_dec_exp_exprow_match_mrule_valbind ->
                       joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
                       bool)
   (\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 5))) $0)))`),
 ((match_option_atexp_dec_exp_exprow_match_mrule_valbind_REP_ABS),
  [],
  `((/\
   ((! :(match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(a :match_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (match_option_atexp_dec_exp_exprow_match_mrule_valbind_abs
   (match_option_atexp_dec_exp_exprow_match_mrule_valbind_rep $0)))
   $0))))
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(r :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 7)) $0))
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (match_option_atexp_dec_exp_exprow_match_mrule_valbind_rep
   (match_option_atexp_dec_exp_exprow_match_mrule_valbind_abs $0)))
   $0)))))`),
 ((match_option_atexp_dec_exp_exprow_match_mrule_valbind_TY_DEF),
  [],
  `((? :((match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
        bool) -> bool)
   (\(rep :match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((TYPE_DEFINITION :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
                       bool) ->
                       (match_option_atexp_dec_exp_exprow_match_mrule_valbind ->
                       joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
                       bool)
   (\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 7))) $0)))`),
 ((mrule_REP_ABS),
  [],
  `((/\ ((! :(mrule -> bool) -> bool) (\(a :mrule).
   (((= :mrule -> mrule -> bool) (mrule_abs (mrule_rep $0))) $0))))
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(r :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 8)) $0))
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (mrule_rep (mrule_abs $0))) $0)))))`),
 ((mrule_TY_DEF),
  [],
  `((? :((mrule ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
        bool) -> bool)
   (\(rep :mrule ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((TYPE_DEFINITION :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
                       bool) ->
                       (mrule ->
                       joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
                       bool)
   (\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 8))) $0)))`),
 ((valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_REP_ABS),
  [],
  `((/\
   ((! :(valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(a :valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_abs
   (valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_rep $0)))
   $0))))
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(r :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 10)) $0))
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_rep
   (valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_abs $0)))
   $0)))))`),
 ((valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_TY_DEF),
  [],
  `((? :((valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
        bool) -> bool)
   (\(rep :valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((TYPE_DEFINITION :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
                       bool) ->
                       (valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
                       joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
                       bool)
   (\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 10))) $0)))`),
 ((valbind_REP_ABS),
  [],
  `((/\ ((! :(valbind -> bool) -> bool) (\(a :valbind).
   (((= :valbind -> valbind -> bool) (valbind_abs (valbind_rep $0)))
   $0))))
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(r :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 9)) $0))
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (valbind_rep (valbind_abs $0))) $0)))))`),
 ((valbind_TY_DEF),
  [],
  `((? :((valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
        bool) -> bool)
   (\(rep :valbind ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((TYPE_DEFINITION :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
                       bool) ->
                       (valbind ->
                       joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
                       bool)
   (\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 9))) $0)))`),
 ((match_REP_ABS),
  [],
  `((/\ ((! :(match -> bool) -> bool) (\(a :match).
   (((= :match -> match -> bool) (match_abs (match_rep $0))) $0))))
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(r :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 6)) $0))
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (match_rep (match_abs $0))) $0)))))`),
 ((match_TY_DEF),
  [],
  `((? :((match ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
        bool) -> bool)
   (\(rep :match ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((TYPE_DEFINITION :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
                       bool) ->
                       (match ->
                       joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
                       bool)
   (\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 6))) $0)))`),
 ((exprow_REP_ABS),
  [],
  `((/\ ((! :(exprow -> bool) -> bool) (\(a :exprow).
   (((= :exprow -> exprow -> bool) (exprow_abs (exprow_rep $0)))
   $0))))
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(r :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 4)) $0))
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (exprow_rep (exprow_abs $0))) $0)))))`),
 ((exprow_TY_DEF),
  [],
  `((? :((exprow ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
        bool) -> bool)
   (\(rep :exprow ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((TYPE_DEFINITION :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
                       bool) ->
                       (exprow ->
                       joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind) ->
                       bool)
   (\(x :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 4))) $0)))`),
 ((joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select_DEF),
  [],
  `((/\ ((! :(scon -> bool) -> bool) (\(s :scon).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   (JOINT_int_SCONatexp $0))) 1)))) ((/\
   ((! :(var long -> bool) -> bool) (\(l :var long).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   (JOINT_int_VARatexp $0))) 1)))) ((/\
   ((! :(con long -> bool) -> bool) (\(l :con long).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   (JOINT_int_CONatexp $0))) 1)))) ((/\
   ((! :(excon long -> bool) -> bool) (\(l :excon long).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   (JOINT_int_EXCONatexp $0))) 1)))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   ((JOINT_int_LETatexp $1) $0))) ((((COND :bool -> num -> num -> num)
   ((/\ (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $1)) 2)) (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 3))) 1) 0))))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   (JOINT_int_PARatexp $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 3)) 1) 0))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   (JOINT_int_RECORDatexp $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 5)) 1) 0))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   (JOINT_int_VALdec $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 9)) 2) 0))))) ((/\ ((! :(exbind -> bool) -> bool)
   (\(e :exbind). (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   (JOINT_int_EXCEPTdec $0))) 2)))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   ((JOINT_int_LOCALdec $1) $0))) ((((COND :bool -> num -> num -> num)
   ((/\ (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $1)) 2)) (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 2))) 2) 0))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist). (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   (JOINT_int_OPENdec $0))) 2)))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   ((JOINT_int_SEQdec $1) $0))) ((((COND :bool -> num -> num -> num)
   ((/\ (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $1)) 2)) (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 2))) 2) 0))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   JOINT_int_EMPTYdec)) 2)) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   (JOINT_int_ATEXPexp $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 1)) 3) 0))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   ((JOINT_int_APPexp $1) $0))) ((((COND :bool -> num -> num -> num)
   ((/\ (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $1)) 3)) (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 1))) 3) 0))))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   ((JOINT_int_HANDLEexp $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $1)) 3)) (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 6))) 3) 0))))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   (JOINT_int_RAISEexp $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 3)) 3) 0))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   (JOINT_int_FNexp $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 6)) 3) 0))))) ((/\ ((! :(label -> bool) -> bool)
   (\(l' :label).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   (((JOINT_int_EXPROW $2) $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $1)) 3)) (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 5))) 4) 0))))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_exprow))
   5)) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   (JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_exprow
   $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 4)) 5) 0))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   ((JOINT_int_MATCH $1) $0))) ((((COND :bool -> num -> num -> num)
   ((/\ (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $1)) 8)) (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 7))) 6) 0))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_match)) 7))
   ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   (JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_match
   $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 6)) 7) 0))))) ((/\ ((! :(pat -> bool) -> bool) (\(p :pat).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   ((JOINT_int_MRULE $1) $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 3)) 8) 0))))))) ((/\ ((! :(pat -> bool) -> bool) (\(p :pat).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   (((JOINT_int_PLAINvalbind $2) $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $1)) 3)) (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 10))) 9) 0))))))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   (JOINT_int_RECvalbind $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 9)) 9) 0))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_valbind))
   10))
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   (JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_valbind
   $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_select
   $0)) 9)) 10) 0))))))))))))))))))))))))))))))))`),
 ((JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_valbind_DEF),
  [],
  `((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_valbind
   $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INR :one + pat + pat + one + one + one ->
          one + one + pat + pat + one + one + one)
   ((INR :pat + pat + one + one + one ->
          one + pat + pat + one + one + one)
   ((INR :pat + one + one + one -> pat + pat + one + one + one)
   ((INR :one + one + one -> pat + one + one + one)
   ((INR :one + one -> one + one + one) ((INR :one -> one + one)
   one)))))))))))))))))))))))))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list)))))))`),
 ((JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_valbind_DEF),
  [],
  `(((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_valbind)
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INR :one + pat + pat + one + one + one ->
          one + one + pat + pat + one + one + one)
   ((INR :pat + pat + one + one + one ->
          one + pat + pat + one + one + one)
   ((INR :pat + one + one + one -> pat + pat + one + one + one)
   ((INR :one + one + one -> pat + one + one + one)
   ((INR :one + one -> one + one + one) ((INL :one -> one + one)
   one)))))))))))))))))))))))))))))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list))))`),
 ((JOINT_int_RECvalbind_DEF),
  [],
  `((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (JOINT_int_RECvalbind $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INR :one + pat + pat + one + one + one ->
          one + one + pat + pat + one + one + one)
   ((INR :pat + pat + one + one + one ->
          one + pat + pat + one + one + one)
   ((INR :pat + one + one + one -> pat + pat + one + one + one)
   ((INR :one + one + one -> pat + one + one + one)
   ((INL :one -> one + one + one) one))))))))))))))))))))))))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list)))))))`),
 ((JOINT_int_PLAINvalbind_DEF),
  [],
  `((! :(pat -> bool) -> bool) (\(p :pat).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (((JOINT_int_PLAINvalbind $2) $1) $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INR :one + pat + pat + one + one + one ->
          one + one + pat + pat + one + one + one)
   ((INR :pat + pat + one + one + one ->
          one + pat + pat + one + one + one)
   ((INR :pat + one + one + one -> pat + pat + one + one + one)
   ((INL :pat -> pat + one + one + one) $2)))))))))))))))))))))))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $1))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list))))))))))))`),
 ((JOINT_int_MRULE_DEF),
  [],
  `((! :(pat -> bool) -> bool) (\(p :pat).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) ((JOINT_int_MRULE $1) $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INR :one + pat + pat + one + one + one ->
          one + one + pat + pat + one + one + one)
   ((INR :pat + pat + one + one + one ->
          one + pat + pat + one + one + one)
   ((INL :pat -> pat + pat + one + one + one)
   $1))))))))))))))))))))))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list)))))))))`),
 ((JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_match_DEF),
  [],
  `((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_match $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INR :one + pat + pat + one + one + one ->
          one + one + pat + pat + one + one + one)
   ((INL :one -> one + pat + pat + one + one + one)
   one)))))))))))))))))))))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list)))))))`),
 ((JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_match_DEF),
  [],
  `(((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_match)
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INL :one -> one + one + pat + pat + one + one + one)
   one))))))))))))))))))))))))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list))))`),
 ((JOINT_int_MATCH_DEF),
  [],
  `((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) ((JOINT_int_MATCH $1) $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INL :one -> one + one + one + pat + pat + one + one + one)
   one)))))))))))))))))))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $1))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list))))))))))`),
 ((JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_exprow_DEF),
  [],
  `((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_exprow
   $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INL :one -> one + one + one + one + pat + pat + one + one + one)
   one))))))))))))))))))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list)))))))`),
 ((JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_exprow_DEF),
  [],
  `(((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_exprow)
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INL :one ->
          one + one + one + one + one + pat + pat + one + one + one)
   one)))))))))))))))))))))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list))))`),
 ((JOINT_int_EXPROW_DEF),
  [],
  `((! :(label -> bool) -> bool) (\(l' :label).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (((JOINT_int_EXPROW $2) $1) $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INL :label ->
          label + one + one + one + one + one + pat + pat + one +
          one + one) $2))))))))))))))))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $1))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list))))))))))))`),
 ((JOINT_int_FNexp_DEF),
  [],
  `((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (JOINT_int_FNexp $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INL :one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one) one)))))))))))))))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list)))))))`),
 ((JOINT_int_RAISEexp_DEF),
  [],
  `((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (JOINT_int_RAISEexp $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INL :one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one) one))))))))))))))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list)))))))`),
 ((JOINT_int_HANDLEexp_DEF),
  [],
  `((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) ((JOINT_int_HANDLEexp $1) $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INL :one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one) one)))))))))))))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $1))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list))))))))))`),
 ((JOINT_int_APPexp_DEF),
  [],
  `((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) ((JOINT_int_APPexp $1) $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INL :one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one) one))))))))))))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $1))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list))))))))))`),
 ((JOINT_int_ATEXPexp_DEF),
  [],
  `((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (JOINT_int_ATEXPexp $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INL :one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one) one)))))))))))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list)))))))`),
 ((JOINT_int_EMPTYdec_DEF),
  [],
  `(((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) JOINT_int_EMPTYdec)
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   one))))))))))))))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list))))`),
 ((JOINT_int_SEQdec_DEF),
  [],
  `((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) ((JOINT_int_SEQdec $1) $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   one)))))))))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $1))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list))))))))))`),
 ((JOINT_int_OPENdec_DEF),
  [],
  `((! :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (JOINT_int_OPENdec $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INL :strid long nonemptylist ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one) $0))))))))))))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list))))))`),
 ((JOINT_int_LOCALdec_DEF),
  [],
  `((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) ((JOINT_int_LOCALdec $1) $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INL :one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one) one)))))))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $1))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list))))))))))`),
 ((JOINT_int_EXCEPTdec_DEF),
  [],
  `((! :(exbind -> bool) -> bool) (\(e :exbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (JOINT_int_EXCEPTdec $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INL :exbind ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one) $0))))))))))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list))))))`),
 ((JOINT_int_VALdec_DEF),
  [],
  `((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (JOINT_int_VALdec $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INL :one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one) one)))))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list)))))))`),
 ((JOINT_int_RECORDatexp_DEF),
  [],
  `((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (JOINT_int_RECORDatexp $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INL :one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one) one))))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list)))))))`),
 ((JOINT_int_PARatexp_DEF),
  [],
  `((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (JOINT_int_PARatexp $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INL :one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   one)))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list)))))))`),
 ((JOINT_int_LETatexp_DEF),
  [],
  `((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) ((JOINT_int_LETatexp $1) $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INL :one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one) one))))))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $1))
   (((CONS :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree list)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list))))))))))`),
 ((JOINT_int_EXCONatexp_DEF),
  [],
  `((! :(excon long -> bool) -> bool) (\(l :excon long).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (JOINT_int_EXCONatexp $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INL :excon long ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one) $0)))))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list))))))`),
 ((JOINT_int_CONatexp_DEF),
  [],
  `((! :(con long -> bool) -> bool) (\(l :con long).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (JOINT_int_CONatexp $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INL :con long ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one) $0))))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list))))))`),
 ((JOINT_int_VARatexp_DEF),
  [],
  `((! :(var long -> bool) -> bool) (\(l :var long).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (JOINT_int_VARatexp $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INL :var long ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one) $0)))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list))))))`),
 ((JOINT_int_SCONatexp_DEF),
  [],
  `((! :(scon -> bool) -> bool) (\(s :scon).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool) (JOINT_int_SCONatexp $0))
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (((Node :scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree
            list ->
            (scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one) ltree)
   ((INL :scon ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one) $0))
   (NIL :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree list))))))`),
 ((joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_ISO_DEF),
  [],
  `((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(a :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         bool)
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))) $0))))
   ((! :((scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree -> bool) -> bool)
   (\(r :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(scon + var long + con long + excon long + one + one +
            one + one + exbind + one + strid long nonemptylist + one +
            one + one + one + one + one + one + label + one + one +
            one + one + one + pat + pat + one + one + one ->
           (scon + var long + con long + excon long + one + one +
           one + one + exbind + one + strid long nonemptylist + one +
           one + one + one + one + one + one + label + one + one +
           one + one + one + pat + pat + one + one + one) ltree
           list -> bool) ->
           (scon + var long + con long + excon long + one + one +
           one + one + exbind + one + strid long nonemptylist + one +
           one + one + one + one + one + one + label + one + one +
           one + one + one + pat + pat + one + one + one) ltree ->
           bool)
   (\(v :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one).
   (\(tl :(scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one) ltree list). ((\/
   ((/\ ((? :(scon -> bool) -> bool) (\(s :scon).
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $2)
   ((INL :scon ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   ((? :(var long -> bool) -> bool) (\(l :var long).
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $2)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INL :var long ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one) $0))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   ((? :(con long -> bool) -> bool) (\(l :con long).
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $2)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INL :con long ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one) $0)))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   ((? :(excon long -> bool) -> bool) (\(l :excon long).
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $2)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INL :excon long ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one) $0)))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INL :one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one) one))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INL :one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   one)))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INL :one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one) one)))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INL :one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one) one))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(exbind -> bool) -> bool) (\(e :exbind).
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $2)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INL :exbind ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one) $0)))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INL :one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one) one))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   ((? :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist).
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $2)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INL :strid long nonemptylist ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one) $0)))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   one)))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   one))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INL :one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one) one))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INL :one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one) one)))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INL :one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one) one))))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INL :one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one) one)))))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INL :one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one) one))))))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(label -> bool) -> bool) (\(l :label).
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $2)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INL :label ->
          label + one + one + one + one + one + pat + pat + one +
          one + one) $0)))))))))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INL :one ->
          one + one + one + one + one + pat + pat + one + one + one)
   one)))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INL :one -> one + one + one + one + pat + pat + one + one + one)
   one))))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INL :one -> one + one + one + pat + pat + one + one + one)
   one)))))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INL :one -> one + one + pat + pat + one + one + one)
   one))))))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INR :one + pat + pat + one + one + one ->
          one + one + pat + pat + one + one + one)
   ((INL :one -> one + pat + pat + one + one + one)
   one)))))))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(pat -> bool) -> bool) (\(p :pat).
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $2)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INR :one + pat + pat + one + one + one ->
          one + one + pat + pat + one + one + one)
   ((INR :pat + pat + one + one + one ->
          one + pat + pat + one + one + one)
   ((INL :pat -> pat + pat + one + one + one)
   $0))))))))))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(pat -> bool) -> bool) (\(p :pat).
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $2)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INR :one + pat + pat + one + one + one ->
          one + one + pat + pat + one + one + one)
   ((INR :pat + pat + one + one + one ->
          one + pat + pat + one + one + one)
   ((INR :pat + one + one + one -> pat + pat + one + one + one)
   ((INL :pat -> pat + one + one + one)
   $0)))))))))))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INR :one + pat + pat + one + one + one ->
          one + one + pat + pat + one + one + one)
   ((INR :pat + pat + one + one + one ->
          one + pat + pat + one + one + one)
   ((INR :pat + one + one + one -> pat + pat + one + one + one)
   ((INR :one + one + one -> pat + one + one + one)
   ((INL :one -> one + one + one) one)))))))))))))))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INR :one + pat + pat + one + one + one ->
          one + one + pat + pat + one + one + one)
   ((INR :pat + pat + one + one + one ->
          one + pat + pat + one + one + one)
   ((INR :pat + one + one + one -> pat + pat + one + one + one)
   ((INR :one + one + one -> pat + one + one + one)
   ((INR :one + one -> one + one + one) ((INL :one -> one + one)
   one)))))))))))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INR :one + pat + pat + one + one + one ->
          one + one + pat + pat + one + one + one)
   ((INR :pat + pat + one + one + one ->
          one + pat + pat + one + one + one)
   ((INR :pat + one + one + one -> pat + pat + one + one + one)
   ((INR :one + one + one -> pat + one + one + one)
   ((INR :one + one -> one + one + one) ((INR :one -> one + one)
   one)))))))))))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC
   0)))))))))))))))))))))))))))))))))) $0))
   (((= :(scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree ->
         (scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree -> bool)
   (REP_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   (ABS_joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind
   $0))) $0)))))`),
 ((joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_TY_DEF),
  [],
  `((? :((joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         (scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one) ltree) -> bool) -> bool)
   (\(rep :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           (scon + var long + con long + excon long + one + one +
           one + one + exbind + one + strid long nonemptylist + one +
           one + one + one + one + one + one + label + one + one +
           one + one + one + pat + pat + one + one + one) ltree).
   (((TYPE_DEFINITION :((scon + var long + con long + excon long +
                        one + one + one + one + exbind + one +
                        strid long nonemptylist + one + one + one +
                        one + one + one + one + label + one + one +
                        one + one + one + pat + pat + one + one + one)
                        ltree -> bool) ->
                       (joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
                       (scon + var long + con long + excon long +
                       one + one + one + one + exbind + one +
                       strid long nonemptylist + one + one + one +
                       one + one + one + one + label + one + one +
                       one + one + one + pat + pat + one + one + one)
                       ltree) -> bool)
   ((TRP :(scon + var long + con long + excon long + one + one + one +
           one + exbind + one + strid long nonemptylist + one + one +
           one + one + one + one + one + label + one + one + one +
           one + one + pat + pat + one + one + one ->
          (scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one) ltree list ->
          bool) ->
          (scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one) ltree -> bool)
   (\(v :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one).
   (\(tl :(scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one) ltree list). ((\/
   ((/\ ((? :(scon -> bool) -> bool) (\(s :scon).
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $2)
   ((INL :scon ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   ((? :(var long -> bool) -> bool) (\(l :var long).
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $2)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INL :var long ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one) $0))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   ((? :(con long -> bool) -> bool) (\(l :con long).
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $2)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INL :con long ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one) $0)))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   ((? :(excon long -> bool) -> bool) (\(l :excon long).
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $2)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INL :excon long ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one) $0)))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INL :one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one) one))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INL :one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   one)))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INL :one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one) one)))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INL :one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one) one))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(exbind -> bool) -> bool) (\(e :exbind).
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $2)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INL :exbind ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one) $0)))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INL :one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one) one))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   ((? :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist).
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $2)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INL :strid long nonemptylist ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one) $0)))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   one)))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INL :one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   one))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INL :one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one) one))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INL :one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one) one)))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INL :one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one) one))))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INL :one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one) one)))))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INL :one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one) one))))))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(label -> bool) -> bool) (\(l :label).
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $2)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INL :label ->
          label + one + one + one + one + one + pat + pat + one +
          one + one) $0)))))))))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INL :one ->
          one + one + one + one + one + pat + pat + one + one + one)
   one)))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INL :one -> one + one + one + one + pat + pat + one + one + one)
   one))))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INL :one -> one + one + one + pat + pat + one + one + one)
   one)))))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INL :one -> one + one + pat + pat + one + one + one)
   one))))))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INR :one + pat + pat + one + one + one ->
          one + one + pat + pat + one + one + one)
   ((INL :one -> one + pat + pat + one + one + one)
   one)))))))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(pat -> bool) -> bool) (\(p :pat).
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $2)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INR :one + pat + pat + one + one + one ->
          one + one + pat + pat + one + one + one)
   ((INR :pat + pat + one + one + one ->
          one + pat + pat + one + one + one)
   ((INL :pat -> pat + pat + one + one + one)
   $0))))))))))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(pat -> bool) -> bool) (\(p :pat).
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $2)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INR :one + pat + pat + one + one + one ->
          one + one + pat + pat + one + one + one)
   ((INR :pat + pat + one + one + one ->
          one + pat + pat + one + one + one)
   ((INR :pat + one + one + one -> pat + pat + one + one + one)
   ((INL :pat -> pat + one + one + one)
   $0)))))))))))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INR :one + pat + pat + one + one + one ->
          one + one + pat + pat + one + one + one)
   ((INR :pat + pat + one + one + one ->
          one + pat + pat + one + one + one)
   ((INR :pat + one + one + one -> pat + pat + one + one + one)
   ((INR :one + one + one -> pat + one + one + one)
   ((INL :one -> one + one + one) one)))))))))))))))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INR :one + pat + pat + one + one + one ->
          one + one + pat + pat + one + one + one)
   ((INR :pat + pat + one + one + one ->
          one + pat + pat + one + one + one)
   ((INR :pat + one + one + one -> pat + pat + one + one + one)
   ((INR :one + one + one -> pat + one + one + one)
   ((INR :one + one -> one + one + one) ((INL :one -> one + one)
   one)))))))))))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) 0))) ((/\
   (((= :scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one ->
         scon + var long + con long + excon long + one + one + one +
         one + exbind + one + strid long nonemptylist + one + one +
         one + one + one + one + one + label + one + one + one + one +
         one + pat + pat + one + one + one -> bool) $1)
   ((INR :var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          scon + var long + con long + excon long + one + one + one +
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          var long + con long + excon long + one + one + one + one +
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          con long + excon long + one + one + one + one + exbind +
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          excon long + one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + exbind + one +
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + exbind + one + strid long nonemptylist +
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + exbind + one + strid long nonemptylist + one +
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + exbind + one + strid long nonemptylist + one + one +
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          exbind + one + strid long nonemptylist + one + one + one +
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + strid long nonemptylist + one + one + one + one +
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one ->
          strid long nonemptylist + one + one + one + one + one +
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + one + label + one +
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one ->
          one + one + one + one + one + one + label + one + one +
          one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one ->
          one + one + one + one + one + label + one + one + one +
          one + one + pat + pat + one + one + one)
   ((INR :one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one ->
          one + one + one + one + label + one + one + one + one +
          one + pat + pat + one + one + one)
   ((INR :one + one + label + one + one + one + one + one + pat +
          pat + one + one + one ->
          one + one + one + label + one + one + one + one + one +
          pat + pat + one + one + one)
   ((INR :one + label + one + one + one + one + one + pat + pat +
          one + one + one ->
          one + one + label + one + one + one + one + one + pat +
          pat + one + one + one)
   ((INR :label + one + one + one + one + one + pat + pat + one +
          one + one ->
          one + label + one + one + one + one + one + pat + pat +
          one + one + one)
   ((INR :one + one + one + one + one + pat + pat + one + one + one ->
          label + one + one + one + one + one + pat + pat + one +
          one + one)
   ((INR :one + one + one + one + pat + pat + one + one + one ->
          one + one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + one + pat + pat + one + one + one ->
          one + one + one + one + pat + pat + one + one + one)
   ((INR :one + one + pat + pat + one + one + one ->
          one + one + one + pat + pat + one + one + one)
   ((INR :one + pat + pat + one + one + one ->
          one + one + pat + pat + one + one + one)
   ((INR :pat + pat + one + one + one ->
          one + pat + pat + one + one + one)
   ((INR :pat + one + one + one -> pat + pat + one + one + one)
   ((INR :one + one + one -> pat + one + one + one)
   ((INR :one + one -> one + one + one) ((INR :one -> one + one)
   one)))))))))))))))))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(scon + var long + con long + excon long + one + one +
             one + one + exbind + one + strid long nonemptylist +
             one + one + one + one + one + one + one + label + one +
             one + one + one + one + pat + pat + one + one + one)
             ltree list -> num) $0)) (SUC
   0))))))))))))))))))))))))))))))))))) $0)))`),
 ((int_atpat_pat_patrow_SOME_patrow_arg_DEF),
  [],
  `((/\ ((! :(patrow -> bool) -> bool) (\(x1 :patrow).
   (((= :patrow -> patrow -> bool)
   (int_atpat_pat_patrow_SOME_patrow_arg
   (int_atpat_pat_patrow_SOME_patrow $0))) $0))))
   (((= :patrow -> patrow -> bool)
   (int_atpat_pat_patrow_SOME_patrow_arg
   int_atpat_pat_patrow_NONE_patrow)) ((@ :(patrow -> bool) -> patrow)
   (\(x :patrow). T))))`),
 ((int_PATROW_arg3_DEF),
  [],
  `((/\ ((! :(label -> bool) -> bool) (\(x1 :label).
   ((! :(pat -> bool) -> bool) (\(x2 :pat).
   ((! :(patrow_option_atpat_pat_patrow -> bool) -> bool)
   (\(x3 :patrow_option_atpat_pat_patrow).
   (((= :patrow_option_atpat_pat_patrow ->
         patrow_option_atpat_pat_patrow -> bool) (int_PATROW_arg3
   (((int_PATROW $2) $1) $0))) $0))))))))
   (((= :patrow_option_atpat_pat_patrow ->
         patrow_option_atpat_pat_patrow -> bool) (int_PATROW_arg3
   int_DOTDOTDOT))
   ((@ :(patrow_option_atpat_pat_patrow -> bool) ->
        patrow_option_atpat_pat_patrow)
   (\(x :patrow_option_atpat_pat_patrow). T))))`),
 ((int_PATROW_arg2_DEF),
  [],
  `((/\ ((! :(label -> bool) -> bool) (\(x1 :label).
   ((! :(pat -> bool) -> bool) (\(x2 :pat).
   ((! :(patrow_option_atpat_pat_patrow -> bool) -> bool)
   (\(x3 :patrow_option_atpat_pat_patrow). (((= :pat -> pat -> bool)
   (int_PATROW_arg2 (((int_PATROW $2) $1) $0))) $1))))))))
   (((= :pat -> pat -> bool) (int_PATROW_arg2 int_DOTDOTDOT))
   ((@ :(pat -> bool) -> pat) (\(x :pat). T))))`),
 ((int_PATROW_arg1_DEF),
  [],
  `((/\ ((! :(label -> bool) -> bool) (\(x1 :label).
   ((! :(pat -> bool) -> bool) (\(x2 :pat).
   ((! :(patrow_option_atpat_pat_patrow -> bool) -> bool)
   (\(x3 :patrow_option_atpat_pat_patrow).
   (((= :label -> label -> bool) (int_PATROW_arg1 (((int_PATROW $2)
   $1) $0))) $2)))))))) (((= :label -> label -> bool) (int_PATROW_arg1
   int_DOTDOTDOT)) ((@ :(label -> bool) -> label) (\(x :label).
   T))))`),
 ((int_LAYEREDpat_arg2_DEF),
  [],
  `((/\ ((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(pat -> bool) -> bool) (\(x2 :pat). (((= :pat -> pat -> bool)
   (int_LAYEREDpat_arg2 ((int_LAYEREDpat $1) $0))) $0)))))) ((/\
   ((! :(atpat -> bool) -> bool) (\(x1 :atpat).
   (((= :pat -> pat -> bool) (int_LAYEREDpat_arg2 (int_ATPATpat $0)))
   ((@ :(pat -> bool) -> pat) (\(x :pat). T)))))) ((/\
   ((! :(con long -> bool) -> bool) (\(x1 :con long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :pat -> pat -> bool) (int_LAYEREDpat_arg2 ((int_CONpat $1)
   $0))) ((@ :(pat -> bool) -> pat) (\(x :pat). T))))))))
   ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :pat -> pat -> bool) (int_LAYEREDpat_arg2 ((int_EXCONpat $1)
   $0))) ((@ :(pat -> bool) -> pat) (\(x :pat). T))))))))))`),
 ((int_LAYEREDpat_arg1_DEF),
  [],
  `((/\ ((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(pat -> bool) -> bool) (\(x2 :pat). (((= :var -> var -> bool)
   (int_LAYEREDpat_arg1 ((int_LAYEREDpat $1) $0))) $1)))))) ((/\
   ((! :(atpat -> bool) -> bool) (\(x1 :atpat).
   (((= :var -> var -> bool) (int_LAYEREDpat_arg1 (int_ATPATpat $0)))
   ((@ :(var -> bool) -> var) (\(x :var). T)))))) ((/\
   ((! :(con long -> bool) -> bool) (\(x1 :con long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :var -> var -> bool) (int_LAYEREDpat_arg1 ((int_CONpat $1)
   $0))) ((@ :(var -> bool) -> var) (\(x :var). T))))))))
   ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :var -> var -> bool) (int_LAYEREDpat_arg1 ((int_EXCONpat $1)
   $0))) ((@ :(var -> bool) -> var) (\(x :var). T))))))))))`),
 ((int_EXCONpat_arg2_DEF),
  [],
  `((/\ ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :atpat -> atpat -> bool) (int_EXCONpat_arg2 ((int_EXCONpat $1)
   $0))) $0)))))) ((/\ ((! :(atpat -> bool) -> bool) (\(x1 :atpat).
   (((= :atpat -> atpat -> bool) (int_EXCONpat_arg2 (int_ATPATpat
   $0))) ((@ :(atpat -> bool) -> atpat) (\(x :atpat). T)))))) ((/\
   ((! :(con long -> bool) -> bool) (\(x1 :con long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :atpat -> atpat -> bool) (int_EXCONpat_arg2 ((int_CONpat $1)
   $0))) ((@ :(atpat -> bool) -> atpat) (\(x :atpat). T))))))))
   ((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(pat -> bool) -> bool) (\(x2 :pat).
   (((= :atpat -> atpat -> bool) (int_EXCONpat_arg2 ((int_LAYEREDpat
   $1) $0))) ((@ :(atpat -> bool) -> atpat) (\(x :atpat).
   T))))))))))`),
 ((int_EXCONpat_arg1_DEF),
  [],
  `((/\ ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :excon long -> excon long -> bool) (int_EXCONpat_arg1
   ((int_EXCONpat $1) $0))) $1)))))) ((/\
   ((! :(atpat -> bool) -> bool) (\(x1 :atpat).
   (((= :excon long -> excon long -> bool) (int_EXCONpat_arg1
   (int_ATPATpat $0))) ((@ :(excon long -> bool) -> excon long)
   (\(x :excon long). T)))))) ((/\ ((! :(con long -> bool) -> bool)
   (\(x1 :con long). ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :excon long -> excon long -> bool) (int_EXCONpat_arg1
   ((int_CONpat $1) $0))) ((@ :(excon long -> bool) -> excon long)
   (\(x :excon long). T)))))))) ((! :(var -> bool) -> bool)
   (\(x1 :var). ((! :(pat -> bool) -> bool) (\(x2 :pat).
   (((= :excon long -> excon long -> bool) (int_EXCONpat_arg1
   ((int_LAYEREDpat $1) $0))) ((@ :(excon long -> bool) -> excon long)
   (\(x :excon long). T))))))))))`),
 ((int_CONpat_arg2_DEF),
  [],
  `((/\ ((! :(con long -> bool) -> bool) (\(x1 :con long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :atpat -> atpat -> bool) (int_CONpat_arg2 ((int_CONpat $1)
   $0))) $0)))))) ((/\ ((! :(atpat -> bool) -> bool) (\(x1 :atpat).
   (((= :atpat -> atpat -> bool) (int_CONpat_arg2 (int_ATPATpat $0)))
   ((@ :(atpat -> bool) -> atpat) (\(x :atpat). T)))))) ((/\
   ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :atpat -> atpat -> bool) (int_CONpat_arg2 ((int_EXCONpat $1)
   $0))) ((@ :(atpat -> bool) -> atpat) (\(x :atpat). T))))))))
   ((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(pat -> bool) -> bool) (\(x2 :pat).
   (((= :atpat -> atpat -> bool) (int_CONpat_arg2 ((int_LAYEREDpat $1)
   $0))) ((@ :(atpat -> bool) -> atpat) (\(x :atpat). T))))))))))`),
 ((int_CONpat_arg1_DEF),
  [],
  `((/\ ((! :(con long -> bool) -> bool) (\(x1 :con long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :con long -> con long -> bool) (int_CONpat_arg1 ((int_CONpat
   $1) $0))) $1)))))) ((/\ ((! :(atpat -> bool) -> bool)
   (\(x1 :atpat). (((= :con long -> con long -> bool) (int_CONpat_arg1
   (int_ATPATpat $0))) ((@ :(con long -> bool) -> con long)
   (\(x :con long). T)))))) ((/\ ((! :(excon long -> bool) -> bool)
   (\(x1 :excon long). ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :con long -> con long -> bool) (int_CONpat_arg1 ((int_EXCONpat
   $1) $0))) ((@ :(con long -> bool) -> con long) (\(x :con long).
   T)))))))) ((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(pat -> bool) -> bool) (\(x2 :pat).
   (((= :con long -> con long -> bool) (int_CONpat_arg1
   ((int_LAYEREDpat $1) $0))) ((@ :(con long -> bool) -> con long)
   (\(x :con long). T))))))))))`),
 ((int_ATPATpat_arg_DEF),
  [],
  `((/\ ((! :(atpat -> bool) -> bool) (\(x1 :atpat).
   (((= :atpat -> atpat -> bool) (int_ATPATpat_arg (int_ATPATpat $0)))
   $0)))) ((/\ ((! :(con long -> bool) -> bool) (\(x1 :con long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :atpat -> atpat -> bool) (int_ATPATpat_arg ((int_CONpat $1)
   $0))) ((@ :(atpat -> bool) -> atpat) (\(x :atpat). T)))))))) ((/\
   ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :atpat -> atpat -> bool) (int_ATPATpat_arg ((int_EXCONpat $1)
   $0))) ((@ :(atpat -> bool) -> atpat) (\(x :atpat). T))))))))
   ((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(pat -> bool) -> bool) (\(x2 :pat).
   (((= :atpat -> atpat -> bool) (int_ATPATpat_arg ((int_LAYEREDpat
   $1) $0))) ((@ :(atpat -> bool) -> atpat) (\(x :atpat).
   T))))))))))`),
 ((int_PARatpat_arg_DEF),
  [],
  `((/\ ((! :(pat -> bool) -> bool) (\(x1 :pat).
   (((= :pat -> pat -> bool) (int_PARatpat_arg (int_PARatpat $0)))
   $0)))) ((/\ (((= :pat -> pat -> bool) (int_PARatpat_arg
   int_WILDCARDatpat)) ((@ :(pat -> bool) -> pat) (\(x :pat). T))))
   ((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   (((= :pat -> pat -> bool) (int_PARatpat_arg (int_SCONatpat $0)))
   ((@ :(pat -> bool) -> pat) (\(x :pat). T)))))) ((/\
   ((! :(var -> bool) -> bool) (\(x1 :var). (((= :pat -> pat -> bool)
   (int_PARatpat_arg (int_VARatpat $0))) ((@ :(pat -> bool) -> pat)
   (\(x :pat). T)))))) ((/\ ((! :(con long -> bool) -> bool)
   (\(x1 :con long). (((= :pat -> pat -> bool) (int_PARatpat_arg
   (int_CONatpat $0))) ((@ :(pat -> bool) -> pat) (\(x :pat). T))))))
   ((/\ ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   (((= :pat -> pat -> bool) (int_PARatpat_arg (int_EXCONatpat $0)))
   ((@ :(pat -> bool) -> pat) (\(x :pat). T))))))
   ((! :(patrow_option_atpat_pat_patrow -> bool) -> bool)
   (\(x1 :patrow_option_atpat_pat_patrow). (((= :pat -> pat -> bool)
   (int_PARatpat_arg (int_RECORDatpat $0))) ((@ :(pat -> bool) -> pat)
   (\(x :pat). T)))))))))))`),
 ((int_RECORDatpat_arg_DEF),
  [],
  `((/\ ((! :(patrow_option_atpat_pat_patrow -> bool) -> bool)
   (\(x1 :patrow_option_atpat_pat_patrow).
   (((= :patrow_option_atpat_pat_patrow ->
         patrow_option_atpat_pat_patrow -> bool) (int_RECORDatpat_arg
   (int_RECORDatpat $0))) $0)))) ((/\
   (((= :patrow_option_atpat_pat_patrow ->
         patrow_option_atpat_pat_patrow -> bool) (int_RECORDatpat_arg
   int_WILDCARDatpat))
   ((@ :(patrow_option_atpat_pat_patrow -> bool) ->
        patrow_option_atpat_pat_patrow)
   (\(x :patrow_option_atpat_pat_patrow). T)))) ((/\
   ((! :(scon -> bool) -> bool) (\(x1 :scon).
   (((= :patrow_option_atpat_pat_patrow ->
         patrow_option_atpat_pat_patrow -> bool) (int_RECORDatpat_arg
   (int_SCONatpat $0)))
   ((@ :(patrow_option_atpat_pat_patrow -> bool) ->
        patrow_option_atpat_pat_patrow)
   (\(x :patrow_option_atpat_pat_patrow). T)))))) ((/\
   ((! :(var -> bool) -> bool) (\(x1 :var).
   (((= :patrow_option_atpat_pat_patrow ->
         patrow_option_atpat_pat_patrow -> bool) (int_RECORDatpat_arg
   (int_VARatpat $0)))
   ((@ :(patrow_option_atpat_pat_patrow -> bool) ->
        patrow_option_atpat_pat_patrow)
   (\(x :patrow_option_atpat_pat_patrow). T)))))) ((/\
   ((! :(con long -> bool) -> bool) (\(x1 :con long).
   (((= :patrow_option_atpat_pat_patrow ->
         patrow_option_atpat_pat_patrow -> bool) (int_RECORDatpat_arg
   (int_CONatpat $0)))
   ((@ :(patrow_option_atpat_pat_patrow -> bool) ->
        patrow_option_atpat_pat_patrow)
   (\(x :patrow_option_atpat_pat_patrow). T)))))) ((/\
   ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   (((= :patrow_option_atpat_pat_patrow ->
         patrow_option_atpat_pat_patrow -> bool) (int_RECORDatpat_arg
   (int_EXCONatpat $0)))
   ((@ :(patrow_option_atpat_pat_patrow -> bool) ->
        patrow_option_atpat_pat_patrow)
   (\(x :patrow_option_atpat_pat_patrow). T))))))
   ((! :(pat -> bool) -> bool) (\(x1 :pat).
   (((= :patrow_option_atpat_pat_patrow ->
         patrow_option_atpat_pat_patrow -> bool) (int_RECORDatpat_arg
   (int_PARatpat $0)))
   ((@ :(patrow_option_atpat_pat_patrow -> bool) ->
        patrow_option_atpat_pat_patrow)
   (\(x :patrow_option_atpat_pat_patrow). T)))))))))))`),
 ((int_EXCONatpat_arg_DEF),
  [],
  `((/\ ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   (((= :excon long -> excon long -> bool) (int_EXCONatpat_arg
   (int_EXCONatpat $0))) $0)))) ((/\
   (((= :excon long -> excon long -> bool) (int_EXCONatpat_arg
   int_WILDCARDatpat)) ((@ :(excon long -> bool) -> excon long)
   (\(x :excon long). T)))) ((/\ ((! :(scon -> bool) -> bool)
   (\(x1 :scon). (((= :excon long -> excon long -> bool)
   (int_EXCONatpat_arg (int_SCONatpat $0)))
   ((@ :(excon long -> bool) -> excon long) (\(x :excon long). T))))))
   ((/\ ((! :(var -> bool) -> bool) (\(x1 :var).
   (((= :excon long -> excon long -> bool) (int_EXCONatpat_arg
   (int_VARatpat $0))) ((@ :(excon long -> bool) -> excon long)
   (\(x :excon long). T)))))) ((/\ ((! :(con long -> bool) -> bool)
   (\(x1 :con long). (((= :excon long -> excon long -> bool)
   (int_EXCONatpat_arg (int_CONatpat $0)))
   ((@ :(excon long -> bool) -> excon long) (\(x :excon long). T))))))
   ((/\ ((! :(patrow_option_atpat_pat_patrow -> bool) -> bool)
   (\(x1 :patrow_option_atpat_pat_patrow).
   (((= :excon long -> excon long -> bool) (int_EXCONatpat_arg
   (int_RECORDatpat $0))) ((@ :(excon long -> bool) -> excon long)
   (\(x :excon long). T)))))) ((! :(pat -> bool) -> bool) (\(x1 :pat).
   (((= :excon long -> excon long -> bool) (int_EXCONatpat_arg
   (int_PARatpat $0))) ((@ :(excon long -> bool) -> excon long)
   (\(x :excon long). T)))))))))))`),
 ((int_CONatpat_arg_DEF),
  [],
  `((/\ ((! :(con long -> bool) -> bool) (\(x1 :con long).
   (((= :con long -> con long -> bool) (int_CONatpat_arg (int_CONatpat
   $0))) $0)))) ((/\ (((= :con long -> con long -> bool)
   (int_CONatpat_arg int_WILDCARDatpat))
   ((@ :(con long -> bool) -> con long) (\(x :con long). T)))) ((/\
   ((! :(scon -> bool) -> bool) (\(x1 :scon).
   (((= :con long -> con long -> bool) (int_CONatpat_arg
   (int_SCONatpat $0))) ((@ :(con long -> bool) -> con long)
   (\(x :con long). T)))))) ((/\ ((! :(var -> bool) -> bool)
   (\(x1 :var). (((= :con long -> con long -> bool) (int_CONatpat_arg
   (int_VARatpat $0))) ((@ :(con long -> bool) -> con long)
   (\(x :con long). T)))))) ((/\ ((! :(excon long -> bool) -> bool)
   (\(x1 :excon long). (((= :con long -> con long -> bool)
   (int_CONatpat_arg (int_EXCONatpat $0)))
   ((@ :(con long -> bool) -> con long) (\(x :con long). T)))))) ((/\
   ((! :(patrow_option_atpat_pat_patrow -> bool) -> bool)
   (\(x1 :patrow_option_atpat_pat_patrow).
   (((= :con long -> con long -> bool) (int_CONatpat_arg
   (int_RECORDatpat $0))) ((@ :(con long -> bool) -> con long)
   (\(x :con long). T)))))) ((! :(pat -> bool) -> bool) (\(x1 :pat).
   (((= :con long -> con long -> bool) (int_CONatpat_arg (int_PARatpat
   $0))) ((@ :(con long -> bool) -> con long) (\(x :con long).
   T)))))))))))`),
 ((int_VARatpat_arg_DEF),
  [],
  `((/\ ((! :(var -> bool) -> bool) (\(x1 :var).
   (((= :var -> var -> bool) (int_VARatpat_arg (int_VARatpat $0)))
   $0)))) ((/\ (((= :var -> var -> bool) (int_VARatpat_arg
   int_WILDCARDatpat)) ((@ :(var -> bool) -> var) (\(x :var). T))))
   ((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   (((= :var -> var -> bool) (int_VARatpat_arg (int_SCONatpat $0)))
   ((@ :(var -> bool) -> var) (\(x :var). T)))))) ((/\
   ((! :(con long -> bool) -> bool) (\(x1 :con long).
   (((= :var -> var -> bool) (int_VARatpat_arg (int_CONatpat $0)))
   ((@ :(var -> bool) -> var) (\(x :var). T)))))) ((/\
   ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   (((= :var -> var -> bool) (int_VARatpat_arg (int_EXCONatpat $0)))
   ((@ :(var -> bool) -> var) (\(x :var). T)))))) ((/\
   ((! :(patrow_option_atpat_pat_patrow -> bool) -> bool)
   (\(x1 :patrow_option_atpat_pat_patrow). (((= :var -> var -> bool)
   (int_VARatpat_arg (int_RECORDatpat $0))) ((@ :(var -> bool) -> var)
   (\(x :var). T)))))) ((! :(pat -> bool) -> bool) (\(x1 :pat).
   (((= :var -> var -> bool) (int_VARatpat_arg (int_PARatpat $0)))
   ((@ :(var -> bool) -> var) (\(x :var). T)))))))))))`),
 ((int_SCONatpat_arg_DEF),
  [],
  `((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   (((= :scon -> scon -> bool) (int_SCONatpat_arg (int_SCONatpat $0)))
   $0)))) ((/\ (((= :scon -> scon -> bool) (int_SCONatpat_arg
   int_WILDCARDatpat)) ((@ :(scon -> bool) -> scon) (\(x :scon). T))))
   ((/\ ((! :(var -> bool) -> bool) (\(x1 :var).
   (((= :scon -> scon -> bool) (int_SCONatpat_arg (int_VARatpat $0)))
   ((@ :(scon -> bool) -> scon) (\(x :scon). T)))))) ((/\
   ((! :(con long -> bool) -> bool) (\(x1 :con long).
   (((= :scon -> scon -> bool) (int_SCONatpat_arg (int_CONatpat $0)))
   ((@ :(scon -> bool) -> scon) (\(x :scon). T)))))) ((/\
   ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   (((= :scon -> scon -> bool) (int_SCONatpat_arg (int_EXCONatpat
   $0))) ((@ :(scon -> bool) -> scon) (\(x :scon). T)))))) ((/\
   ((! :(patrow_option_atpat_pat_patrow -> bool) -> bool)
   (\(x1 :patrow_option_atpat_pat_patrow). (((= :scon -> scon -> bool)
   (int_SCONatpat_arg (int_RECORDatpat $0)))
   ((@ :(scon -> bool) -> scon) (\(x :scon). T))))))
   ((! :(pat -> bool) -> bool) (\(x1 :pat).
   (((= :scon -> scon -> bool) (int_SCONatpat_arg (int_PARatpat $0)))
   ((@ :(scon -> bool) -> scon) (\(x :scon). T)))))))))))`),
 ((dist_aux_ftn_atpat_DEF),
  [],
  `((/\ (((= :num -> num -> bool) (dist_aux_ftn_atpat
   int_WILDCARDatpat)) 0)) ((/\ ((! :(scon -> bool) -> bool)
   (\(x1 :scon). (((= :num -> num -> bool) (dist_aux_ftn_atpat
   (int_SCONatpat $0))) 1)))) ((/\ ((! :(var -> bool) -> bool)
   (\(x1 :var). (((= :num -> num -> bool) (dist_aux_ftn_atpat
   (int_VARatpat $0))) 2)))) ((/\ ((! :(con long -> bool) -> bool)
   (\(x1 :con long). (((= :num -> num -> bool) (dist_aux_ftn_atpat
   (int_CONatpat $0))) 3)))) ((/\ ((! :(excon long -> bool) -> bool)
   (\(x1 :excon long). (((= :num -> num -> bool) (dist_aux_ftn_atpat
   (int_EXCONatpat $0))) 4)))) ((/\
   ((! :(patrow_option_atpat_pat_patrow -> bool) -> bool)
   (\(x1 :patrow_option_atpat_pat_patrow). (((= :num -> num -> bool)
   (dist_aux_ftn_atpat (int_RECORDatpat $0))) 5)))) ((/\
   ((! :(pat -> bool) -> bool) (\(x1 :pat). (((= :num -> num -> bool)
   (dist_aux_ftn_atpat (int_PARatpat $0))) 6)))) ((/\
   ((! :(atpat -> bool) -> bool) (\(x1 :atpat).
   (((= :num -> num -> bool) (dist_aux_ftn_pat (int_ATPATpat $0)))
   7)))) ((/\ ((! :(con long -> bool) -> bool) (\(x1 :con long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :num -> num -> bool) (dist_aux_ftn_pat ((int_CONpat $1) $0)))
   8)))))) ((/\ ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :num -> num -> bool) (dist_aux_ftn_pat ((int_EXCONpat $1)
   $0))) 9)))))) ((/\ ((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(pat -> bool) -> bool) (\(x2 :pat). (((= :num -> num -> bool)
   (dist_aux_ftn_pat ((int_LAYEREDpat $1) $0))) 10)))))) ((/\
   (((= :num -> num -> bool) (dist_aux_ftn_patrow int_DOTDOTDOT)) 11))
   ((/\ ((! :(label -> bool) -> bool) (\(x1 :label).
   ((! :(pat -> bool) -> bool) (\(x2 :pat).
   ((! :(patrow_option_atpat_pat_patrow -> bool) -> bool)
   (\(x3 :patrow_option_atpat_pat_patrow). (((= :num -> num -> bool)
   (dist_aux_ftn_patrow (((int_PATROW $2) $1) $0))) 12)))))))) ((/\
   (((= :num -> num -> bool)
   (dist_aux_ftn_patrow_option_atpat_pat_patrow
   int_atpat_pat_patrow_NONE_patrow)) 13))
   ((! :(patrow -> bool) -> bool) (\(x1 :patrow).
   (((= :num -> num -> bool)
   (dist_aux_ftn_patrow_option_atpat_pat_patrow
   (int_atpat_pat_patrow_SOME_patrow $0))) 14)))))))))))))))))`),
 ((PATROW),
  [],
  `(((= :(label -> pat -> patrow option -> patrow) ->
         (label -> pat -> patrow option -> patrow) -> bool) PATROW)
   (\(x0 :label). (\(x1 :pat). (\(x2 :patrow option). (((int_PATROW
   $2) $1) (int_inj_patrow_option_atpat_pat_patrow $0))))))`),
 ((DOTDOTDOT),
  [],
  `(((= :patrow -> patrow -> bool) DOTDOTDOT) int_DOTDOTDOT)`),
 ((PARatpat),
  [],
  `(((= :(pat -> atpat) -> (pat -> atpat) -> bool) PARatpat)
   (\(x0 :pat). (int_PARatpat $0)))`),
 ((RECORDatpat),
  [],
  `(((= :(patrow option -> atpat) -> (patrow option -> atpat) -> bool)
   RECORDatpat) (\(x0 :patrow option). (int_RECORDatpat
   (int_inj_patrow_option_atpat_pat_patrow $0))))`),
 ((EXCONatpat),
  [],
  `(((= :(excon long -> atpat) -> (excon long -> atpat) -> bool)
   EXCONatpat) (\(x0 :excon long). (int_EXCONatpat $0)))`),
 ((CONatpat),
  [],
  `(((= :(con long -> atpat) -> (con long -> atpat) -> bool) CONatpat)
   (\(x0 :con long). (int_CONatpat $0)))`),
 ((VARatpat),
  [],
  `(((= :(var -> atpat) -> (var -> atpat) -> bool) VARatpat)
   (\(x0 :var). (int_VARatpat $0)))`),
 ((SCONatpat),
  [],
  `(((= :(scon -> atpat) -> (scon -> atpat) -> bool) SCONatpat)
   (\(x0 :scon). (int_SCONatpat $0)))`),
 ((WILDCARDatpat),
  [],
  `(((= :atpat -> atpat -> bool) WILDCARDatpat) int_WILDCARDatpat)`),
 ((int_inv_patrow_option_atpat_pat_patrow),
  [],
  `((/\ (((= :patrow option -> patrow option -> bool)
   (int_inv_patrow_option_atpat_pat_patrow
   int_atpat_pat_patrow_NONE_patrow)) (NONE :patrow option)))
   ((! :(patrow -> bool) -> bool) (\(x1 :patrow).
   (((= :patrow option -> patrow option -> bool)
   (int_inv_patrow_option_atpat_pat_patrow
   (int_atpat_pat_patrow_SOME_patrow $0)))
   ((SOME :patrow -> patrow option) $0)))))`),
 ((int_inj_patrow_option_atpat_pat_patrow),
  [],
  `((/\
   (((= :patrow_option_atpat_pat_patrow ->
         patrow_option_atpat_pat_patrow -> bool)
   (int_inj_patrow_option_atpat_pat_patrow (NONE :patrow option)))
   int_atpat_pat_patrow_NONE_patrow)) ((! :(patrow -> bool) -> bool)
   (\(x0 :patrow).
   (((= :patrow_option_atpat_pat_patrow ->
         patrow_option_atpat_pat_patrow -> bool)
   (int_inj_patrow_option_atpat_pat_patrow
   ((SOME :patrow -> patrow option) $0)))
   (int_atpat_pat_patrow_SOME_patrow $0)))))`),
 ((LAYEREDpat),
  [],
  `(((= :(var -> pat -> pat) -> (var -> pat -> pat) -> bool)
   LAYEREDpat) (\(x0 :var). (\(x1 :pat). ((int_LAYEREDpat $1)
   $0))))`),
 ((EXCONpat),
  [],
  `(((= :(excon long -> atpat -> pat) ->
         (excon long -> atpat -> pat) -> bool) EXCONpat)
   (\(x0 :excon long). (\(x1 :atpat). ((int_EXCONpat $1) $0))))`),
 ((CONpat),
  [],
  `(((= :(con long -> atpat -> pat) -> (con long -> atpat -> pat) ->
         bool) CONpat) (\(x0 :con long). (\(x1 :atpat). ((int_CONpat
   $1) $0))))`),
 ((ATPATpat),
  [],
  `(((= :(atpat -> pat) -> (atpat -> pat) -> bool) ATPATpat)
   (\(x0 :atpat). (int_ATPATpat $0)))`),
 ((int_atpat_pat_patrow_SOME_patrow_DEF),
  [],
  `((! :(patrow -> bool) -> bool) (\(x1 :patrow).
   (((= :patrow_option_atpat_pat_patrow ->
         patrow_option_atpat_pat_patrow -> bool)
   (int_atpat_pat_patrow_SOME_patrow $0))
   (patrow_option_atpat_pat_patrow_abs
   (JOINT_int_atpat_pat_patrow_SOME_patrow (patrow_rep $0))))))`),
 ((int_atpat_pat_patrow_NONE_patrow_DEF),
  [],
  `(((= :patrow_option_atpat_pat_patrow ->
         patrow_option_atpat_pat_patrow -> bool)
   int_atpat_pat_patrow_NONE_patrow)
   (patrow_option_atpat_pat_patrow_abs
   JOINT_int_atpat_pat_patrow_NONE_patrow))`),
 ((int_PATROW_DEF),
  [],
  `((! :(label -> bool) -> bool) (\(x1 :label).
   ((! :(pat -> bool) -> bool) (\(x2 :pat).
   ((! :(patrow_option_atpat_pat_patrow -> bool) -> bool)
   (\(x3 :patrow_option_atpat_pat_patrow).
   (((= :patrow -> patrow -> bool) (((int_PATROW $2) $1) $0))
   (patrow_abs (((JOINT_int_PATROW $2) (pat_rep $1))
   (patrow_option_atpat_pat_patrow_rep $0))))))))))`),
 ((int_DOTDOTDOT_DEF),
  [],
  `(((= :patrow -> patrow -> bool) int_DOTDOTDOT) (patrow_abs
   JOINT_int_DOTDOTDOT))`),
 ((int_LAYEREDpat_DEF),
  [],
  `((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(pat -> bool) -> bool) (\(x2 :pat). (((= :pat -> pat -> bool)
   ((int_LAYEREDpat $1) $0)) (pat_abs ((JOINT_int_LAYEREDpat $1)
   (pat_rep $0))))))))`),
 ((int_EXCONpat_DEF),
  [],
  `((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :pat -> pat -> bool) ((int_EXCONpat $1) $0)) (pat_abs
   ((JOINT_int_EXCONpat $1) (atpat_rep $0))))))))`),
 ((int_CONpat_DEF),
  [],
  `((! :(con long -> bool) -> bool) (\(x1 :con long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :pat -> pat -> bool) ((int_CONpat $1) $0)) (pat_abs
   ((JOINT_int_CONpat $1) (atpat_rep $0))))))))`),
 ((int_ATPATpat_DEF),
  [],
  `((! :(atpat -> bool) -> bool) (\(x1 :atpat).
   (((= :pat -> pat -> bool) (int_ATPATpat $0)) (pat_abs
   (JOINT_int_ATPATpat (atpat_rep $0))))))`),
 ((int_PARatpat_DEF),
  [],
  `((! :(pat -> bool) -> bool) (\(x1 :pat).
   (((= :atpat -> atpat -> bool) (int_PARatpat $0)) (atpat_abs
   (JOINT_int_PARatpat (pat_rep $0))))))`),
 ((int_RECORDatpat_DEF),
  [],
  `((! :(patrow_option_atpat_pat_patrow -> bool) -> bool)
   (\(x1 :patrow_option_atpat_pat_patrow).
   (((= :atpat -> atpat -> bool) (int_RECORDatpat $0)) (atpat_abs
   (JOINT_int_RECORDatpat (patrow_option_atpat_pat_patrow_rep
   $0))))))`),
 ((int_EXCONatpat_DEF),
  [],
  `((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   (((= :atpat -> atpat -> bool) (int_EXCONatpat $0)) (atpat_abs
   (JOINT_int_EXCONatpat $0)))))`),
 ((int_CONatpat_DEF),
  [],
  `((! :(con long -> bool) -> bool) (\(x1 :con long).
   (((= :atpat -> atpat -> bool) (int_CONatpat $0)) (atpat_abs
   (JOINT_int_CONatpat $0)))))`),
 ((int_VARatpat_DEF),
  [],
  `((! :(var -> bool) -> bool) (\(x1 :var).
   (((= :atpat -> atpat -> bool) (int_VARatpat $0)) (atpat_abs
   (JOINT_int_VARatpat $0)))))`),
 ((int_SCONatpat_DEF),
  [],
  `((! :(scon -> bool) -> bool) (\(x1 :scon).
   (((= :atpat -> atpat -> bool) (int_SCONatpat $0)) (atpat_abs
   (JOINT_int_SCONatpat $0)))))`),
 ((int_WILDCARDatpat_DEF),
  [],
  `(((= :atpat -> atpat -> bool) int_WILDCARDatpat) (atpat_abs
   JOINT_int_WILDCARDatpat))`),
 ((atpat_REP_ABS),
  [],
  `((/\ ((! :(atpat -> bool) -> bool) (\(a :atpat).
   (((= :atpat -> atpat -> bool) (atpat_abs (atpat_rep $0))) $0))))
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(r :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   $0)) 1)) $0))
   (((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) (atpat_rep (atpat_abs $0))) $0)))))`),
 ((atpat_TY_DEF),
  [],
  `((? :((atpat ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow) ->
        bool) -> bool)
   (\(rep :atpat ->
           joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((TYPE_DEFINITION :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
                       bool) ->
                       (atpat ->
                       joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow) ->
                       bool)
   (\(x :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   $0)) 1))) $0)))`),
 ((pat_REP_ABS),
  [],
  `((/\ ((! :(pat -> bool) -> bool) (\(a :pat).
   (((= :pat -> pat -> bool) (pat_abs (pat_rep $0))) $0))))
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(r :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   $0)) 2)) $0))
   (((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) (pat_rep (pat_abs $0))) $0)))))`),
 ((pat_TY_DEF),
  [],
  `((? :((pat ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow) ->
        bool) -> bool)
   (\(rep :pat ->
           joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((TYPE_DEFINITION :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
                       bool) ->
                       (pat ->
                       joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow) ->
                       bool)
   (\(x :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   $0)) 2))) $0)))`),
 ((patrow_REP_ABS),
  [],
  `((/\ ((! :(patrow -> bool) -> bool) (\(a :patrow).
   (((= :patrow -> patrow -> bool) (patrow_abs (patrow_rep $0)))
   $0))))
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(r :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   $0)) 3)) $0))
   (((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) (patrow_rep (patrow_abs $0))) $0)))))`),
 ((patrow_TY_DEF),
  [],
  `((? :((patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow) ->
        bool) -> bool)
   (\(rep :patrow ->
           joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((TYPE_DEFINITION :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
                       bool) ->
                       (patrow ->
                       joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow) ->
                       bool)
   (\(x :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   $0)) 3))) $0)))`),
 ((patrow_option_atpat_pat_patrow_REP_ABS),
  [],
  `((/\ ((! :(patrow_option_atpat_pat_patrow -> bool) -> bool)
   (\(a :patrow_option_atpat_pat_patrow).
   (((= :patrow_option_atpat_pat_patrow ->
         patrow_option_atpat_pat_patrow -> bool)
   (patrow_option_atpat_pat_patrow_abs
   (patrow_option_atpat_pat_patrow_rep $0))) $0))))
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(r :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   $0)) 4)) $0))
   (((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) (patrow_option_atpat_pat_patrow_rep
   (patrow_option_atpat_pat_patrow_abs $0))) $0)))))`),
 ((patrow_option_atpat_pat_patrow_TY_DEF),
  [],
  `((? :((patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow) ->
        bool) -> bool)
   (\(rep :patrow_option_atpat_pat_patrow ->
           joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((TYPE_DEFINITION :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
                       bool) ->
                       (patrow_option_atpat_pat_patrow ->
                       joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow) ->
                       bool)
   (\(x :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   $0)) 4))) $0)))`),
 ((joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select_DEF),
  [],
  `((/\ (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   JOINT_int_WILDCARDatpat)) 1)) ((/\ ((! :(scon -> bool) -> bool)
   (\(s :scon). (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   (JOINT_int_SCONatpat $0))) 1)))) ((/\ ((! :(var -> bool) -> bool)
   (\(v' :var). (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   (JOINT_int_VARatpat $0))) 1)))) ((/\
   ((! :(con long -> bool) -> bool) (\(l :con long).
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   (JOINT_int_CONatpat $0))) 1)))) ((/\
   ((! :(excon long -> bool) -> bool) (\(l :excon long).
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   (JOINT_int_EXCONatpat $0))) 1)))) ((/\
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   (JOINT_int_RECORDatpat $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   $0)) 4)) 1) 0))))) ((/\
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   (JOINT_int_PARatpat $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   $0)) 2)) 1) 0))))) ((/\
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   (JOINT_int_ATPATpat $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   $0)) 1)) 2) 0))))) ((/\ ((! :(con long -> bool) -> bool)
   (\(l' :con long).
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   ((JOINT_int_CONpat $1) $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   $0)) 1)) 2) 0))))))) ((/\ ((! :(excon long -> bool) -> bool)
   (\(l' :excon long).
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   ((JOINT_int_EXCONpat $1) $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   $0)) 1)) 2) 0))))))) ((/\ ((! :(var -> bool) -> bool) (\(v' :var).
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   ((JOINT_int_LAYEREDpat $1) $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   $0)) 2)) 2) 0))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   JOINT_int_DOTDOTDOT)) 3)) ((/\ ((! :(label -> bool) -> bool)
   (\(l' :label).
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j1 :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j2 :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   (((JOINT_int_PATROW $2) $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   $1)) 2)) (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   $0)) 4))) 3) 0))))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   JOINT_int_atpat_pat_patrow_NONE_patrow)) 4))
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   (JOINT_int_atpat_pat_patrow_SOME_patrow $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_select
   $0)) 3)) 4) 0))))))))))))))))))`),
 ((JOINT_int_atpat_pat_patrow_SOME_patrow_DEF),
  [],
  `((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) (JOINT_int_atpat_pat_patrow_SOME_patrow $0))
   (ABS_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow
   (((Node :one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INR :excon long + var + one + label + one + one ->
          con long + excon long + var + one + label + one + one)
   ((INR :var + one + label + one + one ->
          excon long + var + one + label + one + one)
   ((INR :one + label + one + one -> var + one + label + one + one)
   ((INR :label + one + one -> one + label + one + one)
   ((INR :one + one -> label + one + one) ((INR :one -> one + one)
   one)))))))))))))))
   (((CONS :(one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list)
   (REP_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow $0))
   (NIL :(one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one) ltree
         list)))))))`),
 ((JOINT_int_atpat_pat_patrow_NONE_patrow_DEF),
  [],
  `(((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) JOINT_int_atpat_pat_patrow_NONE_patrow)
   (ABS_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow
   (((Node :one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INR :excon long + var + one + label + one + one ->
          con long + excon long + var + one + label + one + one)
   ((INR :var + one + label + one + one ->
          excon long + var + one + label + one + one)
   ((INR :one + label + one + one -> var + one + label + one + one)
   ((INR :label + one + one -> one + label + one + one)
   ((INR :one + one -> label + one + one) ((INL :one -> one + one)
   one)))))))))))))))
   (NIL :(one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one) ltree
         list))))`),
 ((JOINT_int_PATROW_DEF),
  [],
  `((! :(label -> bool) -> bool) (\(l' :label).
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j1 :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j2 :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) (((JOINT_int_PATROW $2) $1) $0))
   (ABS_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow
   (((Node :one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INR :excon long + var + one + label + one + one ->
          con long + excon long + var + one + label + one + one)
   ((INR :var + one + label + one + one ->
          excon long + var + one + label + one + one)
   ((INR :one + label + one + one -> var + one + label + one + one)
   ((INR :label + one + one -> one + label + one + one)
   ((INL :label -> label + one + one) $2))))))))))))))
   (((CONS :(one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list)
   (REP_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow $1))
   (((CONS :(one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list)
   (REP_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow $0))
   (NIL :(one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one) ltree
         list))))))))))))`),
 ((JOINT_int_DOTDOTDOT_DEF),
  [],
  `(((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) JOINT_int_DOTDOTDOT)
   (ABS_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow
   (((Node :one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INR :excon long + var + one + label + one + one ->
          con long + excon long + var + one + label + one + one)
   ((INR :var + one + label + one + one ->
          excon long + var + one + label + one + one)
   ((INR :one + label + one + one -> var + one + label + one + one)
   ((INL :one -> one + label + one + one) one)))))))))))))
   (NIL :(one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one) ltree
         list))))`),
 ((JOINT_int_LAYEREDpat_DEF),
  [],
  `((! :(var -> bool) -> bool) (\(v' :var).
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) ((JOINT_int_LAYEREDpat $1) $0))
   (ABS_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow
   (((Node :one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INR :excon long + var + one + label + one + one ->
          con long + excon long + var + one + label + one + one)
   ((INR :var + one + label + one + one ->
          excon long + var + one + label + one + one)
   ((INL :var -> var + one + label + one + one) $1))))))))))))
   (((CONS :(one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list)
   (REP_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow $0))
   (NIL :(one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one) ltree
         list)))))))))`),
 ((JOINT_int_EXCONpat_DEF),
  [],
  `((! :(excon long -> bool) -> bool) (\(l' :excon long).
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) ((JOINT_int_EXCONpat $1) $0))
   (ABS_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow
   (((Node :one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INR :excon long + var + one + label + one + one ->
          con long + excon long + var + one + label + one + one)
   ((INL :excon long -> excon long + var + one + label + one + one)
   $1)))))))))))
   (((CONS :(one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list)
   (REP_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow $0))
   (NIL :(one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one) ltree
         list)))))))))`),
 ((JOINT_int_CONpat_DEF),
  [],
  `((! :(con long -> bool) -> bool) (\(l' :con long).
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) ((JOINT_int_CONpat $1) $0))
   (ABS_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow
   (((Node :one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INL :con long ->
          con long + excon long + var + one + label + one + one)
   $1))))))))))
   (((CONS :(one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list)
   (REP_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow $0))
   (NIL :(one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one) ltree
         list)))))))))`),
 ((JOINT_int_ATPATpat_DEF),
  [],
  `((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) (JOINT_int_ATPATpat $0))
   (ABS_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow
   (((Node :one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INL :one ->
          one + con long + excon long + var + one + label + one + one)
   one)))))))))
   (((CONS :(one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list)
   (REP_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow $0))
   (NIL :(one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one) ltree
         list)))))))`),
 ((JOINT_int_PARatpat_DEF),
  [],
  `((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) (JOINT_int_PARatpat $0))
   (ABS_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow
   (((Node :one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INL :one ->
          one + one + con long + excon long + var + one + label +
          one + one) one))))))))
   (((CONS :(one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list)
   (REP_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow $0))
   (NIL :(one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one) ltree
         list)))))))`),
 ((JOINT_int_RECORDatpat_DEF),
  [],
  `((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) (JOINT_int_RECORDatpat $0))
   (ABS_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow
   (((Node :one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INL :one ->
          one + one + one + con long + excon long + var + one +
          label + one + one) one)))))))
   (((CONS :(one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list)
   (REP_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow $0))
   (NIL :(one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one) ltree
         list)))))))`),
 ((JOINT_int_EXCONatpat_DEF),
  [],
  `((! :(excon long -> bool) -> bool) (\(l :excon long).
   (((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) (JOINT_int_EXCONatpat $0))
   (ABS_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow
   (((Node :one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INL :excon long ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one) $0))))))
   (NIL :(one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one) ltree
         list))))))`),
 ((JOINT_int_CONatpat_DEF),
  [],
  `((! :(con long -> bool) -> bool) (\(l :con long).
   (((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) (JOINT_int_CONatpat $0))
   (ABS_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow
   (((Node :one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INL :con long ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one) $0)))))
   (NIL :(one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one) ltree
         list))))))`),
 ((JOINT_int_VARatpat_DEF),
  [],
  `((! :(var -> bool) -> bool) (\(v' :var).
   (((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) (JOINT_int_VARatpat $0))
   (ABS_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow
   (((Node :one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INL :var ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one) $0))))
   (NIL :(one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one) ltree
         list))))))`),
 ((JOINT_int_SCONatpat_DEF),
  [],
  `((! :(scon -> bool) -> bool) (\(s :scon).
   (((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) (JOINT_int_SCONatpat $0))
   (ABS_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow
   (((Node :one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INL :scon ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one) $0)))
   (NIL :(one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one) ltree
         list))))))`),
 ((JOINT_int_WILDCARDatpat_DEF),
  [],
  `(((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool) JOINT_int_WILDCARDatpat)
   (ABS_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow
   (((Node :one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree list ->
            (one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one) ltree)
   ((INL :one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one) one))
   (NIL :(one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one) ltree
         list))))`),
 ((joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_ISO_DEF),
  [],
  `((/\
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(a :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         bool)
   (ABS_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow
   (REP_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow $0)))
   $0))))
   ((! :((one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one)
         ltree -> bool) -> bool)
   (\(r :(one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one)
         ltree). (((= :bool -> bool -> bool)
   (((TRP :(one + scon + var + con long + excon long + one + one +
            one + con long + excon long + var + one + label + one +
            one ->
           (one + scon + var + con long + excon long + one + one +
           one + con long + excon long + var + one + label + one +
           one) ltree list -> bool) ->
           (one + scon + var + con long + excon long + one + one +
           one + con long + excon long + var + one + label + one +
           one) ltree -> bool)
   (\(v :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one).
   (\(tl :(one + scon + var + con long + excon long + one + one +
          one + con long + excon long + var + one + label + one + one)
          ltree list). ((\/ ((/\
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $1)
   ((INL :one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   one))) (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) 0))) ((\/ ((/\
   ((? :(scon -> bool) -> bool) (\(s :scon).
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $2)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INL :scon ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   $0)))))) (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) 0))) ((\/ ((/\
   ((? :(var -> bool) -> bool) (\(v :var).
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $2)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INL :var ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one) $0)))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) 0))) ((\/ ((/\
   ((? :(con long -> bool) -> bool) (\(l :con long).
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $2)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INL :con long ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one) $0))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) 0))) ((\/ ((/\
   ((? :(excon long -> bool) -> bool) (\(l :excon long).
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $2)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INL :excon long ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one) $0)))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $1)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INL :one ->
          one + one + one + con long + excon long + var + one +
          label + one + one) one)))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $1)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INL :one ->
          one + one + con long + excon long + var + one + label +
          one + one) one))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $1)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INL :one ->
          one + con long + excon long + var + one + label + one + one)
   one)))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(con long -> bool) -> bool) (\(l :con long).
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $2)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INL :con long ->
          con long + excon long + var + one + label + one + one)
   $0))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(excon long -> bool) -> bool) (\(l :excon long).
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $2)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INR :excon long + var + one + label + one + one ->
          con long + excon long + var + one + label + one + one)
   ((INL :excon long -> excon long + var + one + label + one + one)
   $0)))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(var -> bool) -> bool) (\(v :var).
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $2)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INR :excon long + var + one + label + one + one ->
          con long + excon long + var + one + label + one + one)
   ((INR :var + one + label + one + one ->
          excon long + var + one + label + one + one)
   ((INL :var -> var + one + label + one + one) $0)))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $1)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INR :excon long + var + one + label + one + one ->
          con long + excon long + var + one + label + one + one)
   ((INR :var + one + label + one + one ->
          excon long + var + one + label + one + one)
   ((INR :one + label + one + one -> var + one + label + one + one)
   ((INL :one -> one + label + one + one) one))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) 0))) ((\/ ((/\
   ((? :(label -> bool) -> bool) (\(l :label).
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $2)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INR :excon long + var + one + label + one + one ->
          con long + excon long + var + one + label + one + one)
   ((INR :var + one + label + one + one ->
          excon long + var + one + label + one + one)
   ((INR :one + label + one + one -> var + one + label + one + one)
   ((INR :label + one + one -> one + label + one + one)
   ((INL :label -> label + one + one) $0)))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $1)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INR :excon long + var + one + label + one + one ->
          con long + excon long + var + one + label + one + one)
   ((INR :var + one + label + one + one ->
          excon long + var + one + label + one + one)
   ((INR :one + label + one + one -> var + one + label + one + one)
   ((INR :label + one + one -> one + label + one + one)
   ((INR :one + one -> label + one + one) ((INL :one -> one + one)
   one)))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) 0))) ((/\
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $1)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INR :excon long + var + one + label + one + one ->
          con long + excon long + var + one + label + one + one)
   ((INR :var + one + label + one + one ->
          excon long + var + one + label + one + one)
   ((INR :one + label + one + one -> var + one + label + one + one)
   ((INR :label + one + one -> one + label + one + one)
   ((INR :one + one -> label + one + one) ((INR :one -> one + one)
   one)))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) (SUC 0))))))))))))))))))))
   $0))
   (((= :(one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one)
         ltree ->
         (one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one)
         ltree -> bool)
   (REP_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow
   (ABS_joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow $0)))
   $0)))))`),
 ((joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_TY_DEF),
  [],
  `((? :((joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         (one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one)
         ltree) -> bool) -> bool)
   (\(rep :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
           (one + scon + var + con long + excon long + one + one +
           one + con long + excon long + var + one + label + one +
           one) ltree).
   (((TYPE_DEFINITION :((one + scon + var + con long + excon long +
                        one + one + one + con long + excon long +
                        var + one + label + one + one) ltree ->
                       bool) ->
                       (joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
                       (one + scon + var + con long + excon long +
                       one + one + one + con long + excon long + var +
                       one + label + one + one) ltree) -> bool)
   ((TRP :(one + scon + var + con long + excon long + one + one +
           one + con long + excon long + var + one + label + one +
           one ->
          (one + scon + var + con long + excon long + one + one +
          one + con long + excon long + var + one + label + one + one)
          ltree list -> bool) ->
          (one + scon + var + con long + excon long + one + one +
          one + con long + excon long + var + one + label + one + one)
          ltree -> bool)
   (\(v :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one).
   (\(tl :(one + scon + var + con long + excon long + one + one +
          one + con long + excon long + var + one + label + one + one)
          ltree list). ((\/ ((/\
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $1)
   ((INL :one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   one))) (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) 0))) ((\/ ((/\
   ((? :(scon -> bool) -> bool) (\(s :scon).
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $2)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INL :scon ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   $0)))))) (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) 0))) ((\/ ((/\
   ((? :(var -> bool) -> bool) (\(v :var).
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $2)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INL :var ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one) $0)))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) 0))) ((\/ ((/\
   ((? :(con long -> bool) -> bool) (\(l :con long).
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $2)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INL :con long ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one) $0))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) 0))) ((\/ ((/\
   ((? :(excon long -> bool) -> bool) (\(l :excon long).
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $2)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INL :excon long ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one) $0)))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $1)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INL :one ->
          one + one + one + con long + excon long + var + one +
          label + one + one) one)))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $1)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INL :one ->
          one + one + con long + excon long + var + one + label +
          one + one) one))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $1)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INL :one ->
          one + con long + excon long + var + one + label + one + one)
   one)))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(con long -> bool) -> bool) (\(l :con long).
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $2)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INL :con long ->
          con long + excon long + var + one + label + one + one)
   $0))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(excon long -> bool) -> bool) (\(l :excon long).
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $2)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INR :excon long + var + one + label + one + one ->
          con long + excon long + var + one + label + one + one)
   ((INL :excon long -> excon long + var + one + label + one + one)
   $0)))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(var -> bool) -> bool) (\(v :var).
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $2)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INR :excon long + var + one + label + one + one ->
          con long + excon long + var + one + label + one + one)
   ((INR :var + one + label + one + one ->
          excon long + var + one + label + one + one)
   ((INL :var -> var + one + label + one + one) $0)))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $1)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INR :excon long + var + one + label + one + one ->
          con long + excon long + var + one + label + one + one)
   ((INR :var + one + label + one + one ->
          excon long + var + one + label + one + one)
   ((INR :one + label + one + one -> var + one + label + one + one)
   ((INL :one -> one + label + one + one) one))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) 0))) ((\/ ((/\
   ((? :(label -> bool) -> bool) (\(l :label).
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $2)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INR :excon long + var + one + label + one + one ->
          con long + excon long + var + one + label + one + one)
   ((INR :var + one + label + one + one ->
          excon long + var + one + label + one + one)
   ((INR :one + label + one + one -> var + one + label + one + one)
   ((INR :label + one + one -> one + label + one + one)
   ((INL :label -> label + one + one) $0)))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $1)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INR :excon long + var + one + label + one + one ->
          con long + excon long + var + one + label + one + one)
   ((INR :var + one + label + one + one ->
          excon long + var + one + label + one + one)
   ((INR :one + label + one + one -> var + one + label + one + one)
   ((INR :label + one + one -> one + label + one + one)
   ((INR :one + one -> label + one + one) ((INL :one -> one + one)
   one)))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) 0))) ((/\
   (((= :one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         one + scon + var + con long + excon long + one + one + one +
         con long + excon long + var + one + label + one + one ->
         bool) $1)
   ((INR :scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one ->
          one + scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          scon + var + con long + excon long + one + one + one +
          con long + excon long + var + one + label + one + one)
   ((INR :con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one ->
          var + con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :excon long + one + one + one + con long + excon long + var +
          one + label + one + one ->
          con long + excon long + one + one + one + con long +
          excon long + var + one + label + one + one)
   ((INR :one + one + one + con long + excon long + var + one +
          label + one + one ->
          excon long + one + one + one + con long + excon long + var +
          one + label + one + one)
   ((INR :one + one + con long + excon long + var + one + label +
          one + one ->
          one + one + one + con long + excon long + var + one +
          label + one + one)
   ((INR :one + con long + excon long + var + one + label + one +
          one ->
          one + one + con long + excon long + var + one + label +
          one + one)
   ((INR :con long + excon long + var + one + label + one + one ->
          one + con long + excon long + var + one + label + one + one)
   ((INR :excon long + var + one + label + one + one ->
          con long + excon long + var + one + label + one + one)
   ((INR :var + one + label + one + one ->
          excon long + var + one + label + one + one)
   ((INR :one + label + one + one -> var + one + label + one + one)
   ((INR :label + one + one -> one + label + one + one)
   ((INR :one + one -> label + one + one) ((INR :one -> one + one)
   one)))))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + scon + var + con long + excon long + one + one +
             one + con long + excon long + var + one + label + one +
             one) ltree list -> num) $0)) (SUC 0)))))))))))))))))))))
   $0)))`),
 ((int_exbind_SOME_exbind_arg_DEF),
  [],
  `((/\ ((! :(exbind -> bool) -> bool) (\(x1 :exbind).
   (((= :exbind -> exbind -> bool) (int_exbind_SOME_exbind_arg
   (int_exbind_SOME_exbind $0))) $0))))
   (((= :exbind -> exbind -> bool) (int_exbind_SOME_exbind_arg
   int_exbind_NONE_exbind)) ((@ :(exbind -> bool) -> exbind)
   (\(x :exbind). T))))`),
 ((int_EXBIND2_arg3_DEF),
  [],
  `((/\ ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(excon long -> bool) -> bool) (\(x2 :excon long).
   ((! :(exbind_option_exbind -> bool) -> bool)
   (\(x3 :exbind_option_exbind).
   (((= :exbind_option_exbind -> exbind_option_exbind -> bool)
   (int_EXBIND2_arg3 (((int_EXBIND2 $2) $1) $0))) $0))))))))
   ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(exbind_option_exbind -> bool) -> bool)
   (\(x2 :exbind_option_exbind).
   (((= :exbind_option_exbind -> exbind_option_exbind -> bool)
   (int_EXBIND2_arg3 ((int_EXBIND1 $1) $0)))
   ((@ :(exbind_option_exbind -> bool) -> exbind_option_exbind)
   (\(x :exbind_option_exbind). T))))))))`),
 ((int_EXBIND2_arg2_DEF),
  [],
  `((/\ ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(excon long -> bool) -> bool) (\(x2 :excon long).
   ((! :(exbind_option_exbind -> bool) -> bool)
   (\(x3 :exbind_option_exbind).
   (((= :excon long -> excon long -> bool) (int_EXBIND2_arg2
   (((int_EXBIND2 $2) $1) $0))) $1))))))))
   ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(exbind_option_exbind -> bool) -> bool)
   (\(x2 :exbind_option_exbind).
   (((= :excon long -> excon long -> bool) (int_EXBIND2_arg2
   ((int_EXBIND1 $1) $0))) ((@ :(excon long -> bool) -> excon long)
   (\(x :excon long). T))))))))`),
 ((int_EXBIND2_arg1_DEF),
  [],
  `((/\ ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(excon long -> bool) -> bool) (\(x2 :excon long).
   ((! :(exbind_option_exbind -> bool) -> bool)
   (\(x3 :exbind_option_exbind). (((= :excon -> excon -> bool)
   (int_EXBIND2_arg1 (((int_EXBIND2 $2) $1) $0))) $2))))))))
   ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(exbind_option_exbind -> bool) -> bool)
   (\(x2 :exbind_option_exbind). (((= :excon -> excon -> bool)
   (int_EXBIND2_arg1 ((int_EXBIND1 $1) $0)))
   ((@ :(excon -> bool) -> excon) (\(x :excon). T))))))))`),
 ((int_EXBIND1_arg2_DEF),
  [],
  `((/\ ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(exbind_option_exbind -> bool) -> bool)
   (\(x2 :exbind_option_exbind).
   (((= :exbind_option_exbind -> exbind_option_exbind -> bool)
   (int_EXBIND1_arg2 ((int_EXBIND1 $1) $0))) $0))))))
   ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(excon long -> bool) -> bool) (\(x2 :excon long).
   ((! :(exbind_option_exbind -> bool) -> bool)
   (\(x3 :exbind_option_exbind).
   (((= :exbind_option_exbind -> exbind_option_exbind -> bool)
   (int_EXBIND1_arg2 (((int_EXBIND2 $2) $1) $0)))
   ((@ :(exbind_option_exbind -> bool) -> exbind_option_exbind)
   (\(x :exbind_option_exbind). T))))))))))`),
 ((int_EXBIND1_arg1_DEF),
  [],
  `((/\ ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(exbind_option_exbind -> bool) -> bool)
   (\(x2 :exbind_option_exbind). (((= :excon -> excon -> bool)
   (int_EXBIND1_arg1 ((int_EXBIND1 $1) $0))) $1))))))
   ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(excon long -> bool) -> bool) (\(x2 :excon long).
   ((! :(exbind_option_exbind -> bool) -> bool)
   (\(x3 :exbind_option_exbind). (((= :excon -> excon -> bool)
   (int_EXBIND1_arg1 (((int_EXBIND2 $2) $1) $0)))
   ((@ :(excon -> bool) -> excon) (\(x :excon). T))))))))))`),
 ((dist_aux_ftn_exbind_DEF),
  [],
  `((/\ ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(exbind_option_exbind -> bool) -> bool)
   (\(x2 :exbind_option_exbind). (((= :num -> num -> bool)
   (dist_aux_ftn_exbind ((int_EXBIND1 $1) $0))) 0)))))) ((/\
   ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(excon long -> bool) -> bool) (\(x2 :excon long).
   ((! :(exbind_option_exbind -> bool) -> bool)
   (\(x3 :exbind_option_exbind). (((= :num -> num -> bool)
   (dist_aux_ftn_exbind (((int_EXBIND2 $2) $1) $0))) 1)))))))) ((/\
   (((= :num -> num -> bool) (dist_aux_ftn_exbind_option_exbind
   int_exbind_NONE_exbind)) 2)) ((! :(exbind -> bool) -> bool)
   (\(x1 :exbind). (((= :num -> num -> bool)
   (dist_aux_ftn_exbind_option_exbind (int_exbind_SOME_exbind $0)))
   3))))))`),
 ((EXBIND2),
  [],
  `(((= :(excon -> excon long -> exbind option -> exbind) ->
         (excon -> excon long -> exbind option -> exbind) -> bool)
   EXBIND2) (\(x0 :excon). (\(x1 :excon long). (\(x2 :exbind option).
   (((int_EXBIND2 $2) $1) (int_inj_exbind_option_exbind $0))))))`),
 ((EXBIND1),
  [],
  `(((= :(excon -> exbind option -> exbind) ->
         (excon -> exbind option -> exbind) -> bool) EXBIND1)
   (\(x0 :excon). (\(x1 :exbind option). ((int_EXBIND1 $1)
   (int_inj_exbind_option_exbind $0)))))`),
 ((int_inv_exbind_option_exbind),
  [],
  `((/\ (((= :exbind option -> exbind option -> bool)
   (int_inv_exbind_option_exbind int_exbind_NONE_exbind))
   (NONE :exbind option))) ((! :(exbind -> bool) -> bool)
   (\(x1 :exbind). (((= :exbind option -> exbind option -> bool)
   (int_inv_exbind_option_exbind (int_exbind_SOME_exbind $0)))
   ((SOME :exbind -> exbind option) $0)))))`),
 ((int_inj_exbind_option_exbind),
  [],
  `((/\ (((= :exbind_option_exbind -> exbind_option_exbind -> bool)
   (int_inj_exbind_option_exbind (NONE :exbind option)))
   int_exbind_NONE_exbind)) ((! :(exbind -> bool) -> bool)
   (\(x0 :exbind).
   (((= :exbind_option_exbind -> exbind_option_exbind -> bool)
   (int_inj_exbind_option_exbind ((SOME :exbind -> exbind option)
   $0))) (int_exbind_SOME_exbind $0)))))`),
 ((int_exbind_SOME_exbind_DEF),
  [],
  `((! :(exbind -> bool) -> bool) (\(x1 :exbind).
   (((= :exbind_option_exbind -> exbind_option_exbind -> bool)
   (int_exbind_SOME_exbind $0)) (exbind_option_exbind_abs
   (JOINT_int_exbind_SOME_exbind (exbind_rep $0))))))`),
 ((int_exbind_NONE_exbind_DEF),
  [],
  `(((= :exbind_option_exbind -> exbind_option_exbind -> bool)
   int_exbind_NONE_exbind) (exbind_option_exbind_abs
   JOINT_int_exbind_NONE_exbind))`),
 ((int_EXBIND2_DEF),
  [],
  `((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(excon long -> bool) -> bool) (\(x2 :excon long).
   ((! :(exbind_option_exbind -> bool) -> bool)
   (\(x3 :exbind_option_exbind). (((= :exbind -> exbind -> bool)
   (((int_EXBIND2 $2) $1) $0)) (exbind_abs (((JOINT_int_EXBIND2 $2)
   $1) (exbind_option_exbind_rep $0))))))))))`),
 ((int_EXBIND1_DEF),
  [],
  `((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(exbind_option_exbind -> bool) -> bool)
   (\(x2 :exbind_option_exbind). (((= :exbind -> exbind -> bool)
   ((int_EXBIND1 $1) $0)) (exbind_abs ((JOINT_int_EXBIND1 $1)
   (exbind_option_exbind_rep $0))))))))`),
 ((exbind_option_exbind_REP_ABS),
  [],
  `((/\ ((! :(exbind_option_exbind -> bool) -> bool)
   (\(a :exbind_option_exbind).
   (((= :exbind_option_exbind -> exbind_option_exbind -> bool)
   (exbind_option_exbind_abs (exbind_option_exbind_rep $0))) $0))))
   ((! :(joint_ty_exbind_exbind_option_exbind -> bool) -> bool)
   (\(r :joint_ty_exbind_exbind_option_exbind).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_exbind_exbind_option_exbind).
   (((= :num -> num -> bool)
   (joint_ty_exbind_exbind_option_exbind_select $0)) 2)) $0))
   (((= :joint_ty_exbind_exbind_option_exbind ->
         joint_ty_exbind_exbind_option_exbind -> bool)
   (exbind_option_exbind_rep (exbind_option_exbind_abs $0)))
   $0)))))`),
 ((exbind_option_exbind_TY_DEF),
  [],
  `((? :((exbind_option_exbind ->
         joint_ty_exbind_exbind_option_exbind) -> bool) -> bool)
   (\(rep :exbind_option_exbind ->
           joint_ty_exbind_exbind_option_exbind).
   (((TYPE_DEFINITION :(joint_ty_exbind_exbind_option_exbind ->
                       bool) ->
                       (exbind_option_exbind ->
                       joint_ty_exbind_exbind_option_exbind) -> bool)
   (\(x :joint_ty_exbind_exbind_option_exbind).
   (((= :num -> num -> bool)
   (joint_ty_exbind_exbind_option_exbind_select $0)) 2))) $0)))`),
 ((exbind_REP_ABS),
  [],
  `((/\ ((! :(exbind -> bool) -> bool) (\(a :exbind).
   (((= :exbind -> exbind -> bool) (exbind_abs (exbind_rep $0)))
   $0)))) ((! :(joint_ty_exbind_exbind_option_exbind -> bool) -> bool)
   (\(r :joint_ty_exbind_exbind_option_exbind).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_exbind_exbind_option_exbind).
   (((= :num -> num -> bool)
   (joint_ty_exbind_exbind_option_exbind_select $0)) 1)) $0))
   (((= :joint_ty_exbind_exbind_option_exbind ->
         joint_ty_exbind_exbind_option_exbind -> bool) (exbind_rep
   (exbind_abs $0))) $0)))))`),
 ((exbind_TY_DEF),
  [],
  `((? :((exbind -> joint_ty_exbind_exbind_option_exbind) -> bool) ->
        bool) (\(rep :exbind -> joint_ty_exbind_exbind_option_exbind).
   (((TYPE_DEFINITION :(joint_ty_exbind_exbind_option_exbind ->
                       bool) ->
                       (exbind ->
                       joint_ty_exbind_exbind_option_exbind) -> bool)
   (\(x :joint_ty_exbind_exbind_option_exbind).
   (((= :num -> num -> bool)
   (joint_ty_exbind_exbind_option_exbind_select $0)) 1))) $0)))`),
 ((joint_ty_exbind_exbind_option_exbind_select_DEF),
  [],
  `((/\ ((! :(excon -> bool) -> bool) (\(e' :excon).
   ((! :(joint_ty_exbind_exbind_option_exbind -> bool) -> bool)
   (\(j :joint_ty_exbind_exbind_option_exbind).
   (((= :num -> num -> bool)
   (joint_ty_exbind_exbind_option_exbind_select ((JOINT_int_EXBIND1
   $1) $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_exbind_exbind_option_exbind_select $0)) 2)) 1) 0)))))))
   ((/\ ((! :(excon -> bool) -> bool) (\(e' :excon).
   ((! :(excon long -> bool) -> bool) (\(l' :excon long).
   ((! :(joint_ty_exbind_exbind_option_exbind -> bool) -> bool)
   (\(j :joint_ty_exbind_exbind_option_exbind).
   (((= :num -> num -> bool)
   (joint_ty_exbind_exbind_option_exbind_select (((JOINT_int_EXBIND2
   $2) $1) $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_exbind_exbind_option_exbind_select $0)) 2)) 1) 0)))))))))
   ((/\ (((= :num -> num -> bool)
   (joint_ty_exbind_exbind_option_exbind_select
   JOINT_int_exbind_NONE_exbind)) 2))
   ((! :(joint_ty_exbind_exbind_option_exbind -> bool) -> bool)
   (\(j :joint_ty_exbind_exbind_option_exbind).
   (((= :num -> num -> bool)
   (joint_ty_exbind_exbind_option_exbind_select
   (JOINT_int_exbind_SOME_exbind $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_exbind_exbind_option_exbind_select $0)) 1)) 2)
   0)))))))`),
 ((JOINT_int_exbind_SOME_exbind_DEF),
  [],
  `((! :(joint_ty_exbind_exbind_option_exbind -> bool) -> bool)
   (\(j :joint_ty_exbind_exbind_option_exbind).
   (((= :joint_ty_exbind_exbind_option_exbind ->
         joint_ty_exbind_exbind_option_exbind -> bool)
   (JOINT_int_exbind_SOME_exbind $0))
   (ABS_joint_ty_exbind_exbind_option_exbind
   (((Node :excon + excon # excon long + one + one ->
            (excon + excon # excon long + one + one) ltree list ->
            (excon + excon # excon long + one + one) ltree)
   ((INR :excon # excon long + one + one ->
          excon + excon # excon long + one + one)
   ((INR :one + one -> excon # excon long + one + one)
   ((INR :one -> one + one) one))))
   (((CONS :(excon + excon # excon long + one + one) ltree ->
            (excon + excon # excon long + one + one) ltree list ->
            (excon + excon # excon long + one + one) ltree list)
   (REP_joint_ty_exbind_exbind_option_exbind $0))
   (NIL :(excon + excon # excon long + one + one) ltree list)))))))`),
 ((JOINT_int_exbind_NONE_exbind_DEF),
  [],
  `(((= :joint_ty_exbind_exbind_option_exbind ->
         joint_ty_exbind_exbind_option_exbind -> bool)
   JOINT_int_exbind_NONE_exbind)
   (ABS_joint_ty_exbind_exbind_option_exbind
   (((Node :excon + excon # excon long + one + one ->
            (excon + excon # excon long + one + one) ltree list ->
            (excon + excon # excon long + one + one) ltree)
   ((INR :excon # excon long + one + one ->
          excon + excon # excon long + one + one)
   ((INR :one + one -> excon # excon long + one + one)
   ((INL :one -> one + one) one))))
   (NIL :(excon + excon # excon long + one + one) ltree list))))`),
 ((JOINT_int_EXBIND2_DEF),
  [],
  `((! :(excon -> bool) -> bool) (\(e :excon).
   ((! :(excon long -> bool) -> bool) (\(l' :excon long).
   ((! :(joint_ty_exbind_exbind_option_exbind -> bool) -> bool)
   (\(j :joint_ty_exbind_exbind_option_exbind).
   (((= :joint_ty_exbind_exbind_option_exbind ->
         joint_ty_exbind_exbind_option_exbind -> bool)
   (((JOINT_int_EXBIND2 $2) $1) $0))
   (ABS_joint_ty_exbind_exbind_option_exbind
   (((Node :excon + excon # excon long + one + one ->
            (excon + excon # excon long + one + one) ltree list ->
            (excon + excon # excon long + one + one) ltree)
   ((INR :excon # excon long + one + one ->
          excon + excon # excon long + one + one)
   ((INL :excon # excon long -> excon # excon long + one + one)
   (((, :excon -> excon long -> excon # excon long) $2) $1))))
   (((CONS :(excon + excon # excon long + one + one) ltree ->
            (excon + excon # excon long + one + one) ltree list ->
            (excon + excon # excon long + one + one) ltree list)
   (REP_joint_ty_exbind_exbind_option_exbind $0))
   (NIL :(excon + excon # excon long + one + one) ltree
         list)))))))))))`),
 ((JOINT_int_EXBIND1_DEF),
  [],
  `((! :(excon -> bool) -> bool) (\(e :excon).
   ((! :(joint_ty_exbind_exbind_option_exbind -> bool) -> bool)
   (\(j :joint_ty_exbind_exbind_option_exbind).
   (((= :joint_ty_exbind_exbind_option_exbind ->
         joint_ty_exbind_exbind_option_exbind -> bool)
   ((JOINT_int_EXBIND1 $1) $0))
   (ABS_joint_ty_exbind_exbind_option_exbind
   (((Node :excon + excon # excon long + one + one ->
            (excon + excon # excon long + one + one) ltree list ->
            (excon + excon # excon long + one + one) ltree)
   ((INL :excon -> excon + excon # excon long + one + one) $1))
   (((CONS :(excon + excon # excon long + one + one) ltree ->
            (excon + excon # excon long + one + one) ltree list ->
            (excon + excon # excon long + one + one) ltree list)
   (REP_joint_ty_exbind_exbind_option_exbind $0))
   (NIL :(excon + excon # excon long + one + one) ltree
         list)))))))))`),
 ((joint_ty_exbind_exbind_option_exbind_ISO_DEF),
  [],
  `((/\ ((! :(joint_ty_exbind_exbind_option_exbind -> bool) -> bool)
   (\(a :joint_ty_exbind_exbind_option_exbind).
   (((= :joint_ty_exbind_exbind_option_exbind ->
         joint_ty_exbind_exbind_option_exbind -> bool)
   (ABS_joint_ty_exbind_exbind_option_exbind
   (REP_joint_ty_exbind_exbind_option_exbind $0))) $0))))
   ((! :((excon + excon # excon long + one + one) ltree -> bool) ->
        bool) (\(r :(excon + excon # excon long + one + one) ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(excon + excon # excon long + one + one ->
           (excon + excon # excon long + one + one) ltree list ->
           bool) -> (excon + excon # excon long + one + one) ltree ->
           bool) (\(v :excon + excon # excon long + one + one).
   (\(tl :(excon + excon # excon long + one + one) ltree list). ((\/
   ((/\ ((? :(excon -> bool) -> bool) (\(e :excon).
   (((= :excon + excon # excon long + one + one ->
         excon + excon # excon long + one + one -> bool) $2)
   ((INL :excon -> excon + excon # excon long + one + one) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(excon + excon # excon long + one + one) ltree list ->
             num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(excon -> bool) -> bool) (\(e :excon).
   ((? :(excon long -> bool) -> bool) (\(l :excon long).
   (((= :excon + excon # excon long + one + one ->
         excon + excon # excon long + one + one -> bool) $3)
   ((INR :excon # excon long + one + one ->
          excon + excon # excon long + one + one)
   ((INL :excon # excon long -> excon # excon long + one + one)
   (((, :excon -> excon long -> excon # excon long) $1) $0)))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(excon + excon # excon long + one + one) ltree list ->
             num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :excon + excon # excon long + one + one ->
         excon + excon # excon long + one + one -> bool) $1)
   ((INR :excon # excon long + one + one ->
          excon + excon # excon long + one + one)
   ((INR :one + one -> excon # excon long + one + one)
   ((INL :one -> one + one) one))))) (((= :num -> num -> bool)
   ((LENGTH :(excon + excon # excon long + one + one) ltree list ->
             num) $0)) 0))) ((/\
   (((= :excon + excon # excon long + one + one ->
         excon + excon # excon long + one + one -> bool) $1)
   ((INR :excon # excon long + one + one ->
          excon + excon # excon long + one + one)
   ((INR :one + one -> excon # excon long + one + one)
   ((INR :one -> one + one) one))))) (((= :num -> num -> bool)
   ((LENGTH :(excon + excon # excon long + one + one) ltree list ->
             num) $0)) (SUC 0))))))))) $0))
   (((= :(excon + excon # excon long + one + one) ltree ->
         (excon + excon # excon long + one + one) ltree -> bool)
   (REP_joint_ty_exbind_exbind_option_exbind
   (ABS_joint_ty_exbind_exbind_option_exbind $0))) $0)))))`),
 ((joint_ty_exbind_exbind_option_exbind_TY_DEF),
  [],
  `((? :((joint_ty_exbind_exbind_option_exbind ->
         (excon + excon # excon long + one + one) ltree) -> bool) ->
        bool)
   (\(rep :joint_ty_exbind_exbind_option_exbind ->
           (excon + excon # excon long + one + one) ltree).
   (((TYPE_DEFINITION :((excon + excon # excon long + one + one)
                        ltree -> bool) ->
                       (joint_ty_exbind_exbind_option_exbind ->
                       (excon + excon # excon long + one + one)
                       ltree) -> bool)
   ((TRP :(excon + excon # excon long + one + one ->
          (excon + excon # excon long + one + one) ltree list ->
          bool) -> (excon + excon # excon long + one + one) ltree ->
          bool) (\(v :excon + excon # excon long + one + one).
   (\(tl :(excon + excon # excon long + one + one) ltree list). ((\/
   ((/\ ((? :(excon -> bool) -> bool) (\(e :excon).
   (((= :excon + excon # excon long + one + one ->
         excon + excon # excon long + one + one -> bool) $2)
   ((INL :excon -> excon + excon # excon long + one + one) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(excon + excon # excon long + one + one) ltree list ->
             num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(excon -> bool) -> bool) (\(e :excon).
   ((? :(excon long -> bool) -> bool) (\(l :excon long).
   (((= :excon + excon # excon long + one + one ->
         excon + excon # excon long + one + one -> bool) $3)
   ((INR :excon # excon long + one + one ->
          excon + excon # excon long + one + one)
   ((INL :excon # excon long -> excon # excon long + one + one)
   (((, :excon -> excon long -> excon # excon long) $1) $0)))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(excon + excon # excon long + one + one) ltree list ->
             num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :excon + excon # excon long + one + one ->
         excon + excon # excon long + one + one -> bool) $1)
   ((INR :excon # excon long + one + one ->
          excon + excon # excon long + one + one)
   ((INR :one + one -> excon # excon long + one + one)
   ((INL :one -> one + one) one))))) (((= :num -> num -> bool)
   ((LENGTH :(excon + excon # excon long + one + one) ltree list ->
             num) $0)) 0))) ((/\
   (((= :excon + excon # excon long + one + one ->
         excon + excon # excon long + one + one -> bool) $1)
   ((INR :excon # excon long + one + one ->
          excon + excon # excon long + one + one)
   ((INR :one + one -> excon # excon long + one + one)
   ((INR :one -> one + one) one))))) (((= :num -> num -> bool)
   ((LENGTH :(excon + excon # excon long + one + one) ltree list ->
             num) $0)) (SUC 0)))))))))) $0)))`),
 ((less_label_DEF),
  [],
  `((! :(label -> bool) -> bool) (\(l1 :label).
   ((! :(label -> bool) -> bool) (\(l2 :label).
   (((= :bool -> bool -> bool) ((less_label $1) $0)) ((ltstring
   (LABEL_arg $1)) (LABEL_arg $0)))))))`),
 ((LABEL_arg_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) (LABEL_arg (LABEL $0))) $0)))`),
 ((LABEL_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :label -> label -> bool) (LABEL $0)) (ABS_label
   (((Node :string -> string ltree list -> string ltree) $0)
   (NIL :string ltree list))))))`),
 ((label_ISO_DEF),
  [],
  `((/\ ((! :(label -> bool) -> bool) (\(a :label).
   (((= :label -> label -> bool) (ABS_label (REP_label $0))) $0))))
   ((! :(string ltree -> bool) -> bool) (\(r :string ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(string -> string ltree list -> bool) -> string ltree ->
           bool) (\(v :string). (\(tl :string ltree list). ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) $2) $0))))
   (((= :num -> num -> bool) ((LENGTH :string ltree list -> num) $0))
   0))))) $0)) (((= :string ltree -> string ltree -> bool) (REP_label
   (ABS_label $0))) $0)))))`),
 ((label_TY_DEF),
  [],
  `((? :((label -> string ltree) -> bool) -> bool)
   (\(rep :label -> string ltree).
   (((TYPE_DEFINITION :(string ltree -> bool) ->
                       (label -> string ltree) -> bool)
   ((TRP :(string -> string ltree list -> bool) -> string ltree ->
          bool) (\(v :string). (\(tl :string ltree list). ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) $2) $0))))
   (((= :num -> num -> bool) ((LENGTH :string ltree list -> num) $0))
   0)))))) $0)))`),
 ((less_excon_DEF),
  [],
  `((! :(excon -> bool) -> bool) (\(l1 :excon).
   ((! :(excon -> bool) -> bool) (\(l2 :excon).
   (((= :bool -> bool -> bool) ((less_excon $1) $0)) ((ltstring
   (EXCON_arg $1)) (EXCON_arg $0)))))))`),
 ((EXCON_arg_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) (EXCON_arg (EXCON $0))) $0)))`),
 ((EXCON_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :excon -> excon -> bool) (EXCON $0)) (ABS_excon
   (((Node :string -> string ltree list -> string ltree) $0)
   (NIL :string ltree list))))))`),
 ((excon_ISO_DEF),
  [],
  `((/\ ((! :(excon -> bool) -> bool) (\(a :excon).
   (((= :excon -> excon -> bool) (ABS_excon (REP_excon $0))) $0))))
   ((! :(string ltree -> bool) -> bool) (\(r :string ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(string -> string ltree list -> bool) -> string ltree ->
           bool) (\(v :string). (\(tl :string ltree list). ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) $2) $0))))
   (((= :num -> num -> bool) ((LENGTH :string ltree list -> num) $0))
   0))))) $0)) (((= :string ltree -> string ltree -> bool) (REP_excon
   (ABS_excon $0))) $0)))))`),
 ((excon_TY_DEF),
  [],
  `((? :((excon -> string ltree) -> bool) -> bool)
   (\(rep :excon -> string ltree).
   (((TYPE_DEFINITION :(string ltree -> bool) ->
                       (excon -> string ltree) -> bool)
   ((TRP :(string -> string ltree list -> bool) -> string ltree ->
          bool) (\(v :string). (\(tl :string ltree list). ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) $2) $0))))
   (((= :num -> num -> bool) ((LENGTH :string ltree list -> num) $0))
   0)))))) $0)))`),
 ((SCSTR_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :scon -> scon -> bool) (SCSTR $0)) (ABS_scon
   (((Node :integer + string -> (integer + string) ltree list ->
            (integer + string) ltree)
   ((INR :string -> integer + string) $0))
   (NIL :(integer + string) ltree list))))))`),
 ((SCINT_DEF),
  [],
  `((! :(integer -> bool) -> bool) (\(i :integer).
   (((= :scon -> scon -> bool) (SCINT $0)) (ABS_scon
   (((Node :integer + string -> (integer + string) ltree list ->
            (integer + string) ltree)
   ((INL :integer -> integer + string) $0))
   (NIL :(integer + string) ltree list))))))`),
 ((scon_ISO_DEF),
  [],
  `((/\ ((! :(scon -> bool) -> bool) (\(a :scon).
   (((= :scon -> scon -> bool) (ABS_scon (REP_scon $0))) $0))))
   ((! :((integer + string) ltree -> bool) -> bool)
   (\(r :(integer + string) ltree). (((= :bool -> bool -> bool)
   (((TRP :(integer + string -> (integer + string) ltree list ->
           bool) -> (integer + string) ltree -> bool)
   (\(v :integer + string). (\(tl :(integer + string) ltree list).
   ((\/ ((/\ ((? :(integer -> bool) -> bool) (\(i :integer).
   (((= :integer + string -> integer + string -> bool) $2)
   ((INL :integer -> integer + string) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(integer + string) ltree list -> num) $0)) 0))) ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :integer + string -> integer + string -> bool) $2)
   ((INR :string -> integer + string) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(integer + string) ltree list -> num) $0)) 0)))))) $0))
   (((= :(integer + string) ltree -> (integer + string) ltree -> bool)
   (REP_scon (ABS_scon $0))) $0)))))`),
 ((scon_TY_DEF),
  [],
  `((? :((scon -> (integer + string) ltree) -> bool) -> bool)
   (\(rep :scon -> (integer + string) ltree).
   (((TYPE_DEFINITION :((integer + string) ltree -> bool) ->
                       (scon -> (integer + string) ltree) -> bool)
   ((TRP :(integer + string -> (integer + string) ltree list ->
          bool) -> (integer + string) ltree -> bool)
   (\(v :integer + string). (\(tl :(integer + string) ltree list).
   ((\/ ((/\ ((? :(integer -> bool) -> bool) (\(i :integer).
   (((= :integer + string -> integer + string -> bool) $2)
   ((INL :integer -> integer + string) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(integer + string) ltree list -> num) $0)) 0))) ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :integer + string -> integer + string -> bool) $2)
   ((INR :string -> integer + string) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(integer + string) ltree list -> num) $0)) 0)))))))
   $0)))`),
 ((CON_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :con -> con -> bool) (CON $0)) (ABS_con
   (((Node :string -> string ltree list -> string ltree) $0)
   (NIL :string ltree list))))))`),
 ((con_ISO_DEF),
  [],
  `((/\ ((! :(con -> bool) -> bool) (\(a :con).
   (((= :con -> con -> bool) (ABS_con (REP_con $0))) $0))))
   ((! :(string ltree -> bool) -> bool) (\(r :string ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(string -> string ltree list -> bool) -> string ltree ->
           bool) (\(v :string). (\(tl :string ltree list). ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) $2) $0))))
   (((= :num -> num -> bool) ((LENGTH :string ltree list -> num) $0))
   0))))) $0)) (((= :string ltree -> string ltree -> bool) (REP_con
   (ABS_con $0))) $0)))))`),
 ((con_TY_DEF),
  [],
  `((? :((con -> string ltree) -> bool) -> bool)
   (\(rep :con -> string ltree).
   (((TYPE_DEFINITION :(string ltree -> bool) ->
                       (con -> string ltree) -> bool)
   ((TRP :(string -> string ltree list -> bool) -> string ltree ->
          bool) (\(v :string). (\(tl :string ltree list). ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) $2) $0))))
   (((= :num -> num -> bool) ((LENGTH :string ltree list -> num) $0))
   0)))))) $0)))`),
 ((less_var_DEF),
  [],
  `((! :(var -> bool) -> bool) (\(l1 :var).
   ((! :(var -> bool) -> bool) (\(l2 :var).
   (((= :bool -> bool -> bool) ((less_var $1) $0)) ((ltstring (VAR_arg
   $1)) (VAR_arg $0)))))))`),
 ((VAR_arg_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) (VAR_arg (VAR $0))) $0)))`),
 ((VAR_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :var -> var -> bool) (VAR $0)) (ABS_var
   (((Node :string -> string ltree list -> string ltree) $0)
   (NIL :string ltree list))))))`),
 ((var_ISO_DEF),
  [],
  `((/\ ((! :(var -> bool) -> bool) (\(a :var).
   (((= :var -> var -> bool) (ABS_var (REP_var $0))) $0))))
   ((! :(string ltree -> bool) -> bool) (\(r :string ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(string -> string ltree list -> bool) -> string ltree ->
           bool) (\(v :string). (\(tl :string ltree list). ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) $2) $0))))
   (((= :num -> num -> bool) ((LENGTH :string ltree list -> num) $0))
   0))))) $0)) (((= :string ltree -> string ltree -> bool) (REP_var
   (ABS_var $0))) $0)))))`),
 ((var_TY_DEF),
  [],
  `((? :((var -> string ltree) -> bool) -> bool)
   (\(rep :var -> string ltree).
   (((TYPE_DEFINITION :(string ltree -> bool) ->
                       (var -> string ltree) -> bool)
   ((TRP :(string -> string ltree list -> bool) -> string ltree ->
          bool) (\(v :string). (\(tl :string ltree list). ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) $2) $0))))
   (((= :num -> num -> bool) ((LENGTH :string ltree list -> num) $0))
   0)))))) $0)))`),
 ((long_base_DEF),
  [],
  `((/\ ((! :('a -> bool) -> bool) (\(x :'a). (((= :'a -> 'a -> bool)
   ((long_base :'a long -> 'a) ((BASE :'a -> 'a long) $0))) $0))))
   ((! :('a long -> bool) -> bool) (\(long_x :'a long).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   (((= :'a -> 'a -> bool) ((long_base :'a long -> 'a)
   (((QUALIFIED :strid -> 'a long -> 'a long) $0) $1)))
   ((long_base :'a long -> 'a) $1)))))))`),
 ((QUALIFIED_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :('a long -> bool) -> bool) (\(l' :'a long).
   (((= :'a long -> 'a long -> bool)
   (((QUALIFIED :strid -> 'a long -> 'a long) $1) $0))
   ((ABS_long :('a + strid) ltree -> 'a long)
   (((Node :'a + strid -> ('a + strid) ltree list ->
            ('a + strid) ltree) ((INR :strid -> 'a + strid) $1))
   (((CONS :('a + strid) ltree -> ('a + strid) ltree list ->
            ('a + strid) ltree list)
   ((REP_long :'a long -> ('a + strid) ltree) $0))
   (NIL :('a + strid) ltree list)))))))))`),
 ((BASE_DEF),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a long -> 'a long -> bool) ((BASE :'a -> 'a long) $0))
   ((ABS_long :('a + strid) ltree -> 'a long)
   (((Node :'a + strid -> ('a + strid) ltree list ->
            ('a + strid) ltree) ((INL :'a -> 'a + strid) $0))
   (NIL :('a + strid) ltree list))))))`),
 ((long_ISO_DEF),
  [],
  `((/\ ((! :('a long -> bool) -> bool) (\(a :'a long).
   (((= :'a long -> 'a long -> bool)
   ((ABS_long :('a + strid) ltree -> 'a long)
   ((REP_long :'a long -> ('a + strid) ltree) $0))) $0))))
   ((! :(('a + strid) ltree -> bool) -> bool)
   (\(r :('a + strid) ltree). (((= :bool -> bool -> bool)
   (((TRP :('a + strid -> ('a + strid) ltree list -> bool) ->
           ('a + strid) ltree -> bool) (\(v :'a + strid).
   (\(tl :('a + strid) ltree list). ((\/ ((/\
   ((? :('a -> bool) -> bool) (\(x :'a).
   (((= :'a + strid -> 'a + strid -> bool) $2)
   ((INL :'a -> 'a + strid) $0))))) (((= :num -> num -> bool)
   ((LENGTH :('a + strid) ltree list -> num) $0)) 0))) ((/\
   ((? :(strid -> bool) -> bool) (\(s :strid).
   (((= :'a + strid -> 'a + strid -> bool) $2)
   ((INR :strid -> 'a + strid) $0))))) (((= :num -> num -> bool)
   ((LENGTH :('a + strid) ltree list -> num) $0)) (SUC 0))))))) $0))
   (((= :('a + strid) ltree -> ('a + strid) ltree -> bool)
   ((REP_long :'a long -> ('a + strid) ltree)
   ((ABS_long :('a + strid) ltree -> 'a long) $0))) $0)))))`),
 ((long_TY_DEF),
  [],
  `((? :(('a long -> ('a + strid) ltree) -> bool) -> bool)
   (\(rep :'a long -> ('a + strid) ltree).
   (((TYPE_DEFINITION :(('a + strid) ltree -> bool) ->
                       ('a long -> ('a + strid) ltree) -> bool)
   ((TRP :('a + strid -> ('a + strid) ltree list -> bool) ->
          ('a + strid) ltree -> bool) (\(v :'a + strid).
   (\(tl :('a + strid) ltree list). ((\/ ((/\
   ((? :('a -> bool) -> bool) (\(x :'a).
   (((= :'a + strid -> 'a + strid -> bool) $2)
   ((INL :'a -> 'a + strid) $0))))) (((= :num -> num -> bool)
   ((LENGTH :('a + strid) ltree list -> num) $0)) 0))) ((/\
   ((? :(strid -> bool) -> bool) (\(s :strid).
   (((= :'a + strid -> 'a + strid -> bool) $2)
   ((INR :strid -> 'a + strid) $0))))) (((= :num -> num -> bool)
   ((LENGTH :('a + strid) ltree list -> num) $0)) (SUC 0))))))))
   $0)))`),
 ((less_strid_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(l1 :strid).
   ((! :(strid -> bool) -> bool) (\(l2 :strid).
   (((= :bool -> bool -> bool) ((less_strid $1) $0)) ((ltstring
   (STRID_arg $1)) (STRID_arg $0)))))))`),
 ((STRID_arg_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) (STRID_arg (STRID $0))) $0)))`),
 ((STRID_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :strid -> strid -> bool) (STRID $0)) (ABS_strid
   (((Node :string -> string ltree list -> string ltree) $0)
   (NIL :string ltree list))))))`),
 ((strid_ISO_DEF),
  [],
  `((/\ ((! :(strid -> bool) -> bool) (\(a :strid).
   (((= :strid -> strid -> bool) (ABS_strid (REP_strid $0))) $0))))
   ((! :(string ltree -> bool) -> bool) (\(r :string ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(string -> string ltree list -> bool) -> string ltree ->
           bool) (\(v :string). (\(tl :string ltree list). ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) $2) $0))))
   (((= :num -> num -> bool) ((LENGTH :string ltree list -> num) $0))
   0))))) $0)) (((= :string ltree -> string ltree -> bool) (REP_strid
   (ABS_strid $0))) $0)))))`),
 ((strid_TY_DEF),
  [],
  `((? :((strid -> string ltree) -> bool) -> bool)
   (\(rep :strid -> string ltree).
   (((TYPE_DEFINITION :(string ltree -> bool) ->
                       (strid -> string ltree) -> bool)
   ((TRP :(string -> string ltree list -> bool) -> string ltree ->
          bool) (\(v :string). (\(tl :string ltree list). ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) $2) $0))))
   (((= :num -> num -> bool) ((LENGTH :string ltree list -> num) $0))
   0)))))) $0)))`)]
theorems =
[((exconenv_constructors_one_one),
  [],
  `((! :((excon # exname) list finmap -> bool) -> bool)
   (\(f' :(excon # exname) list finmap).
   ((! :((excon # exname) list finmap -> bool) -> bool)
   (\(f'' :(excon # exname) list finmap). (((= :bool -> bool -> bool)
   (((= :exconenv -> exconenv -> bool) (EXCONENV $1)) (EXCONENV $0)))
   (((= :(excon # exname) list finmap ->
         (excon # exname) list finmap -> bool) $1) $0))))))`),
 ((exconenv_cases_thm),
  [],
  `((! :(exconenv -> bool) -> bool) (\(e :exconenv).
   ((? :((excon # exname) list finmap -> bool) -> bool)
   (\(f' :(excon # exname) list finmap).
   (((= :exconenv -> exconenv -> bool) $1) (EXCONENV $0))))))`),
 ((exconenv_induction_thm),
  [],
  `((! :((exconenv -> bool) -> bool) -> bool) (\(P :exconenv -> bool).
   ((==> ((! :((excon # exname) list finmap -> bool) -> bool)
   (\(f' :(excon # exname) list finmap). ($1 (EXCONENV $0)))))
   ((! :(exconenv -> bool) -> bool) (\(e :exconenv). ($1 $0))))))`),
 ((exconenv_Axiom),
  [],
  `((! :(((excon # exname) list finmap -> 'a) -> bool) -> bool)
   (\(f :(excon # exname) list finmap -> 'a).
   ((?! :((exconenv -> 'a) -> bool) -> bool) (\(fn :exconenv -> 'a).
   ((! :((excon # exname) list finmap -> bool) -> bool)
   (\(f' :(excon # exname) list finmap). (((= :'a -> 'a -> bool) ($1
   (EXCONENV $0))) ($2 $0))))))))`),
 ((exnameset_Axiom),
  [],
  `((! :((exname set -> 'a) -> bool) -> bool) (\(f :exname set -> 'a).
   ((?! :((exnameset -> 'a) -> bool) -> bool) (\(fn :exnameset -> 'a).
   ((! :(exname set -> bool) -> bool) (\(s :exname set).
   (((= :'a -> 'a -> bool) ($1 (EXNAMESET $0))) ($2 $0))))))))`),
 ((exname_Axiom),
  [],
  `((! :((num -> 'a) -> bool) -> bool) (\(f :num -> 'a).
   ((?! :((exname -> 'a) -> bool) -> bool) (\(fn :exname -> 'a).
   ((! :(num -> bool) -> bool) (\(n :num). (((= :'a -> 'a -> bool) ($1
   (EXNAME $0))) ($2 $0))))))))`),
 ((basval_Axiom),
  [],
  `((! :('a -> bool) -> bool) (\(e0 :'a). ((! :('a -> bool) -> bool)
   (\(e1 :'a). ((! :('a -> bool) -> bool) (\(e2 :'a).
   ((! :('a -> bool) -> bool) (\(e3 :'a). ((! :('a -> bool) -> bool)
   (\(e4 :'a). ((! :('a -> bool) -> bool) (\(e5 :'a).
   ((! :('a -> bool) -> bool) (\(e6 :'a). ((! :('a -> bool) -> bool)
   (\(e7 :'a). ((! :('a -> bool) -> bool) (\(e8 :'a).
   ((! :('a -> bool) -> bool) (\(e9 :'a). ((! :('a -> bool) -> bool)
   (\(e10 :'a). ((! :('a -> bool) -> bool) (\(e11 :'a).
   ((! :('a -> bool) -> bool) (\(e12 :'a). ((! :('a -> bool) -> bool)
   (\(e13 :'a). ((! :('a -> bool) -> bool) (\(e14 :'a).
   ((! :('a -> bool) -> bool) (\(e15 :'a). ((! :('a -> bool) -> bool)
   (\(e16 :'a). ((! :('a -> bool) -> bool) (\(e17 :'a).
   ((?! :((basval -> 'a) -> bool) -> bool) (\(fn :basval -> 'a). ((/\
   (((= :'a -> 'a -> bool) ($0 Size)) $18)) ((/\
   (((= :'a -> 'a -> bool) ($0 Chr)) $17)) ((/\
   (((= :'a -> 'a -> bool) ($0 Ord)) $16)) ((/\
   (((= :'a -> 'a -> bool) ($0 Explode)) $15)) ((/\
   (((= :'a -> 'a -> bool) ($0 Implode)) $14)) ((/\
   (((= :'a -> 'a -> bool) ($0 Abs)) $13)) ((/\
   (((= :'a -> 'a -> bool) ($0 Div)) $12)) ((/\
   (((= :'a -> 'a -> bool) ($0 Mod)) $11)) ((/\
   (((= :'a -> 'a -> bool) ($0 Neg)) $10)) ((/\
   (((= :'a -> 'a -> bool) ($0 Times)) $9)) ((/\
   (((= :'a -> 'a -> bool) ($0 Plus)) $8)) ((/\
   (((= :'a -> 'a -> bool) ($0 Minus)) $7)) ((/\
   (((= :'a -> 'a -> bool) ($0 Eql)) $6)) ((/\ (((= :'a -> 'a -> bool)
   ($0 Noteql)) $5)) ((/\ (((= :'a -> 'a -> bool) ($0 Less)) $4)) ((/\
   (((= :'a -> 'a -> bool) ($0 Greater)) $3)) ((/\
   (((= :'a -> 'a -> bool) ($0 Lesseql)) $2)) (((= :'a -> 'a -> bool)
   ($0 Greatereql))
   $1))))))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((addr_cases_thm),
  [],
  `((! :(addr -> bool) -> bool) (\(a :addr).
   ((? :(num -> bool) -> bool) (\(n :num). (((= :addr -> addr -> bool)
   $1) (ADDR $0))))))`),
 ((addr_induction_thm),
  [],
  `((! :((addr -> bool) -> bool) -> bool) (\(P :addr -> bool). ((==>
   ((! :(num -> bool) -> bool) (\(n :num). ($1 (ADDR $0)))))
   ((! :(addr -> bool) -> bool) (\(a :addr). ($1 $0))))))`),
 ((addr_constructors_one_one),
  [],
  `((! :(num -> bool) -> bool) (\(n :num). ((! :(num -> bool) -> bool)
   (\(n' :num). (((= :bool -> bool -> bool)
   (((= :addr -> addr -> bool) (ADDR $1)) (ADDR $0)))
   (((= :num -> num -> bool) $1) $0))))))`),
 ((addr_Axiom),
  [],
  `((! :((num -> 'a) -> bool) -> bool) (\(f :num -> 'a).
   ((?! :((addr -> 'a) -> bool) -> bool) (\(fn :addr -> 'a).
   ((! :(num -> bool) -> bool) (\(n :num). (((= :'a -> 'a -> bool) ($1
   (ADDR $0))) ($2 $0))))))))`),
 ((sval_Axiom),
  [],
  `((! :((integer -> 'a) -> bool) -> bool) (\(f0 :integer -> 'a).
   ((! :((string -> 'a) -> bool) -> bool) (\(f1 :string -> 'a).
   ((?! :((sval -> 'a) -> bool) -> bool) (\(fn :sval -> 'a). ((/\
   ((! :(integer -> bool) -> bool) (\(i :integer).
   (((= :'a -> 'a -> bool) ($1 (SVINT $0))) ($3 $0)))))
   ((! :(string -> bool) -> bool) (\(s :string).
   (((= :'a -> 'a -> bool) ($1 (SVSTR $0))) ($2 $0)))))))))))`),
 ((gram_cases),
  [],
  `((/\ ((! :(atexp -> bool) -> bool) (\(x1 :atexp). ((\/
   ((? :(scon -> bool) -> bool) (\(y :scon).
   (((= :atexp -> atexp -> bool) $1) (SCONatexp $0))))) ((\/
   ((? :(var long -> bool) -> bool) (\(y :var long).
   (((= :atexp -> atexp -> bool) $1) (VARatexp $0))))) ((\/
   ((? :(con long -> bool) -> bool) (\(y :con long).
   (((= :atexp -> atexp -> bool) $1) (CONatexp $0))))) ((\/
   ((? :(excon long -> bool) -> bool) (\(y :excon long).
   (((= :atexp -> atexp -> bool) $1) (EXCONatexp $0))))) ((\/
   ((? :(dec -> bool) -> bool) (\(y :dec). ((? :(exp -> bool) -> bool)
   (\(y' :exp). (((= :atexp -> atexp -> bool) $2) ((LETatexp $1)
   $0))))))) ((\/ ((? :(exp -> bool) -> bool) (\(y :exp).
   (((= :atexp -> atexp -> bool) $1) (PARatexp $0)))))
   ((? :(exprow option -> bool) -> bool) (\(y :exprow option).
   (((= :atexp -> atexp -> bool) $1) (RECORDatexp $0))))))))))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x2 :dec). ((\/
   ((? :(valbind -> bool) -> bool) (\(y :valbind).
   (((= :dec -> dec -> bool) $1) (VALdec $0))))) ((\/
   ((? :(exbind -> bool) -> bool) (\(y :exbind).
   (((= :dec -> dec -> bool) $1) (EXCEPTdec $0))))) ((\/
   ((? :(dec -> bool) -> bool) (\(y :dec). ((? :(dec -> bool) -> bool)
   (\(y' :dec). (((= :dec -> dec -> bool) $2) ((LOCALdec $1) $0)))))))
   ((\/ ((? :(strid long nonemptylist -> bool) -> bool)
   (\(y :strid long nonemptylist). (((= :dec -> dec -> bool) $1)
   (OPENdec $0))))) ((\/ ((? :(dec -> bool) -> bool) (\(y :dec).
   ((? :(dec -> bool) -> bool) (\(y' :dec). (((= :dec -> dec -> bool)
   $2) ((SEQdec $1) $0))))))) (((= :dec -> dec -> bool) $0)
   EMPTYdec))))))))) ((/\ ((! :(exp -> bool) -> bool) (\(x3 :exp).
   ((\/ ((? :(atexp -> bool) -> bool) (\(y :atexp).
   (((= :exp -> exp -> bool) $1) (ATEXPexp $0))))) ((\/
   ((? :(exp -> bool) -> bool) (\(y :exp).
   ((? :(atexp -> bool) -> bool) (\(y' :atexp).
   (((= :exp -> exp -> bool) $2) ((APPexp $1) $0))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(y :exp).
   ((? :(match -> bool) -> bool) (\(y' :match).
   (((= :exp -> exp -> bool) $2) ((HANDLEexp $1) $0))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(y :exp). (((= :exp -> exp -> bool)
   $1) (RAISEexp $0))))) ((? :(match -> bool) -> bool) (\(y :match).
   (((= :exp -> exp -> bool) $1) (FNexp $0))))))))))) ((/\
   ((! :(exprow -> bool) -> bool) (\(x4 :exprow).
   ((? :(label -> bool) -> bool) (\(y :label).
   ((? :(exp -> bool) -> bool) (\(y'' :exp).
   ((? :(exprow option -> bool) -> bool) (\(y' :exprow option).
   (((= :exprow -> exprow -> bool) $3) (((EXPROW $2) $1) $0)))))))))))
   ((/\ ((! :(exprow option -> bool) -> bool) (\(x5 :exprow option).
   ((\/ (((= :exprow option -> exprow option -> bool) $0)
   (NONE :exprow option))) ((? :(exprow -> bool) -> bool)
   (\(y :exprow). (((= :exprow option -> exprow option -> bool) $1)
   ((SOME :exprow -> exprow option) $0)))))))) ((/\
   ((! :(match -> bool) -> bool) (\(x6 :match).
   ((? :(mrule -> bool) -> bool) (\(y :mrule).
   ((? :(match option -> bool) -> bool) (\(y' :match option).
   (((= :match -> match -> bool) $2) ((MATCH $1) $0))))))))) ((/\
   ((! :(match option -> bool) -> bool) (\(x7 :match option). ((\/
   (((= :match option -> match option -> bool) $0)
   (NONE :match option))) ((? :(match -> bool) -> bool) (\(y :match).
   (((= :match option -> match option -> bool) $1)
   ((SOME :match -> match option) $0)))))))) ((/\
   ((! :(mrule -> bool) -> bool) (\(x8 :mrule).
   ((? :(pat -> bool) -> bool) (\(y :pat). ((? :(exp -> bool) -> bool)
   (\(y' :exp). (((= :mrule -> mrule -> bool) $2) ((MRULE $1)
   $0))))))))) ((/\ ((! :(valbind -> bool) -> bool) (\(x9 :valbind).
   ((\/ ((? :(pat -> bool) -> bool) (\(y :pat).
   ((? :(exp -> bool) -> bool) (\(y'' :exp).
   ((? :(valbind option -> bool) -> bool) (\(y' :valbind option).
   (((= :valbind -> valbind -> bool) $3) (((PLAINvalbind $2) $1)
   $0))))))))) ((? :(valbind -> bool) -> bool) (\(y :valbind).
   (((= :valbind -> valbind -> bool) $1) (RECvalbind $0))))))))
   ((! :(valbind option -> bool) -> bool) (\(x10 :valbind option).
   ((\/ (((= :valbind option -> valbind option -> bool) $0)
   (NONE :valbind option))) ((? :(valbind -> bool) -> bool)
   (\(y :valbind). (((= :valbind option -> valbind option -> bool) $1)
   ((SOME :valbind -> valbind option) $0))))))))))))))))`),
 ((gram_one_one),
  [],
  `((/\ ((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   ((! :(scon -> bool) -> bool) (\(x1' :scon).
   (((= :bool -> bool -> bool) (((= :atexp -> atexp -> bool)
   (SCONatexp $1)) (SCONatexp $0))) (((= :scon -> scon -> bool) $1)
   $0))))))) ((/\ ((! :(var long -> bool) -> bool) (\(x1 :var long).
   ((! :(var long -> bool) -> bool) (\(x1' :var long).
   (((= :bool -> bool -> bool) (((= :atexp -> atexp -> bool) (VARatexp
   $1)) (VARatexp $0))) (((= :var long -> var long -> bool) $1)
   $0))))))) ((/\ ((! :(con long -> bool) -> bool) (\(x1 :con long).
   ((! :(con long -> bool) -> bool) (\(x1' :con long).
   (((= :bool -> bool -> bool) (((= :atexp -> atexp -> bool) (CONatexp
   $1)) (CONatexp $0))) (((= :con long -> con long -> bool) $1)
   $0))))))) ((/\ ((! :(excon long -> bool) -> bool)
   (\(x1 :excon long). ((! :(excon long -> bool) -> bool)
   (\(x1' :excon long). (((= :bool -> bool -> bool)
   (((= :atexp -> atexp -> bool) (EXCONatexp $1)) (EXCONatexp $0)))
   (((= :excon long -> excon long -> bool) $1) $0))))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(dec -> bool) -> bool) (\(x1' :dec).
   ((! :(exp -> bool) -> bool) (\(x2' :exp).
   (((= :bool -> bool -> bool) (((= :atexp -> atexp -> bool)
   ((LETatexp $3) $2)) ((LETatexp $1) $0))) ((/\
   (((= :dec -> dec -> bool) $3) $1)) (((= :exp -> exp -> bool) $2)
   $0)))))))))))) ((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(exp -> bool) -> bool) (\(x1' :exp).
   (((= :bool -> bool -> bool) (((= :atexp -> atexp -> bool) (PARatexp
   $1)) (PARatexp $0))) (((= :exp -> exp -> bool) $1) $0)))))))
   ((! :(exprow option -> bool) -> bool) (\(x1 :exprow option).
   ((! :(exprow option -> bool) -> bool) (\(x1' :exprow option).
   (((= :bool -> bool -> bool) (((= :atexp -> atexp -> bool)
   (RECORDatexp $1)) (RECORDatexp $0)))
   (((= :exprow option -> exprow option -> bool) $1) $0)))))))))))))
   ((/\ ((/\ ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   ((! :(valbind -> bool) -> bool) (\(x1' :valbind).
   (((= :bool -> bool -> bool) (((= :dec -> dec -> bool) (VALdec $1))
   (VALdec $0))) (((= :valbind -> valbind -> bool) $1) $0))))))) ((/\
   ((! :(exbind -> bool) -> bool) (\(x1 :exbind).
   ((! :(exbind -> bool) -> bool) (\(x1' :exbind).
   (((= :bool -> bool -> bool) (((= :dec -> dec -> bool) (EXCEPTdec
   $1)) (EXCEPTdec $0))) (((= :exbind -> exbind -> bool) $1) $0)))))))
   ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec).
   ((! :(dec -> bool) -> bool) (\(x1' :dec).
   ((! :(dec -> bool) -> bool) (\(x2' :dec).
   (((= :bool -> bool -> bool) (((= :dec -> dec -> bool) ((LOCALdec
   $3) $2)) ((LOCALdec $1) $0))) ((/\ (((= :dec -> dec -> bool) $3)
   $1)) (((= :dec -> dec -> bool) $2) $0)))))))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1' :strid long nonemptylist). (((= :bool -> bool -> bool)
   (((= :dec -> dec -> bool) (OPENdec $1)) (OPENdec $0)))
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   $1) $0))))))) ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec).
   ((! :(dec -> bool) -> bool) (\(x1' :dec).
   ((! :(dec -> bool) -> bool) (\(x2' :dec).
   (((= :bool -> bool -> bool) (((= :dec -> dec -> bool) ((SEQdec $3)
   $2)) ((SEQdec $1) $0))) ((/\ (((= :dec -> dec -> bool) $3) $1))
   (((= :dec -> dec -> bool) $2) $0)))))))))))))))) ((/\ ((/\
   ((! :(atexp -> bool) -> bool) (\(x1 :atexp).
   ((! :(atexp -> bool) -> bool) (\(x1' :atexp).
   (((= :bool -> bool -> bool) (((= :exp -> exp -> bool) (ATEXPexp
   $1)) (ATEXPexp $0))) (((= :atexp -> atexp -> bool) $1) $0)))))))
   ((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(atexp -> bool) -> bool) (\(x2 :atexp).
   ((! :(exp -> bool) -> bool) (\(x1' :exp).
   ((! :(atexp -> bool) -> bool) (\(x2' :atexp).
   (((= :bool -> bool -> bool) (((= :exp -> exp -> bool) ((APPexp $3)
   $2)) ((APPexp $1) $0))) ((/\ (((= :exp -> exp -> bool) $3) $1))
   (((= :atexp -> atexp -> bool) $2) $0)))))))))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(match -> bool) -> bool) (\(x2 :match).
   ((! :(exp -> bool) -> bool) (\(x1' :exp).
   ((! :(match -> bool) -> bool) (\(x2' :match).
   (((= :bool -> bool -> bool) (((= :exp -> exp -> bool) ((HANDLEexp
   $3) $2)) ((HANDLEexp $1) $0))) ((/\ (((= :exp -> exp -> bool) $3)
   $1)) (((= :match -> match -> bool) $2) $0)))))))))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(exp -> bool) -> bool) (\(x1' :exp).
   (((= :bool -> bool -> bool) (((= :exp -> exp -> bool) (RAISEexp
   $1)) (RAISEexp $0))) (((= :exp -> exp -> bool) $1) $0)))))))
   ((! :(match -> bool) -> bool) (\(x1 :match).
   ((! :(match -> bool) -> bool) (\(x1' :match).
   (((= :bool -> bool -> bool) (((= :exp -> exp -> bool) (FNexp $1))
   (FNexp $0))) (((= :match -> match -> bool) $1) $0))))))))))) ((/\
   ((! :(label -> bool) -> bool) (\(x1 :label).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(exprow option -> bool) -> bool) (\(x3 :exprow option).
   ((! :(label -> bool) -> bool) (\(x1' :label).
   ((! :(exp -> bool) -> bool) (\(x2' :exp).
   ((! :(exprow option -> bool) -> bool) (\(x3' :exprow option).
   (((= :bool -> bool -> bool) (((= :exprow -> exprow -> bool)
   (((EXPROW $5) $4) $3)) (((EXPROW $2) $1) $0))) ((/\
   (((= :label -> label -> bool) $5) $2)) ((/\
   (((= :exp -> exp -> bool) $4) $1))
   (((= :exprow option -> exprow option -> bool) $3)
   $0))))))))))))))))) ((/\ ((! :(exprow -> bool) -> bool)
   (\(x1 :exprow). ((! :(exprow -> bool) -> bool) (\(x1' :exprow).
   (((= :bool -> bool -> bool)
   (((= :exprow option -> exprow option -> bool)
   ((SOME :exprow -> exprow option) $1))
   ((SOME :exprow -> exprow option) $0)))
   (((= :exprow -> exprow -> bool) $1) $0))))))) ((/\
   ((! :(mrule -> bool) -> bool) (\(x1 :mrule).
   ((! :(match option -> bool) -> bool) (\(x2 :match option).
   ((! :(mrule -> bool) -> bool) (\(x1' :mrule).
   ((! :(match option -> bool) -> bool) (\(x2' :match option).
   (((= :bool -> bool -> bool) (((= :match -> match -> bool) ((MATCH
   $3) $2)) ((MATCH $1) $0))) ((/\ (((= :mrule -> mrule -> bool) $3)
   $1)) (((= :match option -> match option -> bool) $2) $0))))))))))))
   ((/\ ((! :(match -> bool) -> bool) (\(x1 :match).
   ((! :(match -> bool) -> bool) (\(x1' :match).
   (((= :bool -> bool -> bool)
   (((= :match option -> match option -> bool)
   ((SOME :match -> match option) $1)) ((SOME :match -> match option)
   $0))) (((= :match -> match -> bool) $1) $0))))))) ((/\
   ((! :(pat -> bool) -> bool) (\(x1 :pat).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(pat -> bool) -> bool) (\(x1' :pat).
   ((! :(exp -> bool) -> bool) (\(x2' :exp).
   (((= :bool -> bool -> bool) (((= :mrule -> mrule -> bool) ((MRULE
   $3) $2)) ((MRULE $1) $0))) ((/\ (((= :pat -> pat -> bool) $3) $1))
   (((= :exp -> exp -> bool) $2) $0)))))))))))) ((/\ ((/\
   ((! :(pat -> bool) -> bool) (\(x1 :pat).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(valbind option -> bool) -> bool) (\(x3 :valbind option).
   ((! :(pat -> bool) -> bool) (\(x1' :pat).
   ((! :(exp -> bool) -> bool) (\(x2' :exp).
   ((! :(valbind option -> bool) -> bool) (\(x3' :valbind option).
   (((= :bool -> bool -> bool) (((= :valbind -> valbind -> bool)
   (((PLAINvalbind $5) $4) $3)) (((PLAINvalbind $2) $1) $0))) ((/\
   (((= :pat -> pat -> bool) $5) $2)) ((/\ (((= :exp -> exp -> bool)
   $4) $1)) (((= :valbind option -> valbind option -> bool) $3)
   $0))))))))))))))))) ((! :(valbind -> bool) -> bool)
   (\(x1 :valbind). ((! :(valbind -> bool) -> bool) (\(x1' :valbind).
   (((= :bool -> bool -> bool) (((= :valbind -> valbind -> bool)
   (RECvalbind $1)) (RECvalbind $0)))
   (((= :valbind -> valbind -> bool) $1) $0))))))))
   ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   ((! :(valbind -> bool) -> bool) (\(x1' :valbind).
   (((= :bool -> bool -> bool)
   (((= :valbind option -> valbind option -> bool)
   ((SOME :valbind -> valbind option) $1))
   ((SOME :valbind -> valbind option) $0)))
   (((= :valbind -> valbind -> bool) $1) $0)))))))))))))))`),
 ((gram_distinct),
  [],
  `((/\ ((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   ((! :(var long -> bool) -> bool) (\(x1' :var long). (~
   (((= :atexp -> atexp -> bool) (SCONatexp $1)) (VARatexp $0))))))))
   ((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   ((! :(con long -> bool) -> bool) (\(x1' :con long). (~
   (((= :atexp -> atexp -> bool) (SCONatexp $1)) (CONatexp $0))))))))
   ((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   ((! :(excon long -> bool) -> bool) (\(x1' :excon long). (~
   (((= :atexp -> atexp -> bool) (SCONatexp $1)) (EXCONatexp
   $0)))))))) ((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   ((! :(dec -> bool) -> bool) (\(x1' :dec).
   ((! :(exp -> bool) -> bool) (\(x2' :exp). (~
   (((= :atexp -> atexp -> bool) (SCONatexp $2)) ((LETatexp $1)
   $0)))))))))) ((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   ((! :(exp -> bool) -> bool) (\(x1' :exp). (~
   (((= :atexp -> atexp -> bool) (SCONatexp $1)) (PARatexp $0))))))))
   ((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   ((! :(exprow option -> bool) -> bool) (\(x1' :exprow option). (~
   (((= :atexp -> atexp -> bool) (SCONatexp $1)) (RECORDatexp
   $0)))))))) ((/\ ((! :(var long -> bool) -> bool) (\(x1 :var long).
   ((! :(con long -> bool) -> bool) (\(x1' :con long). (~
   (((= :atexp -> atexp -> bool) (VARatexp $1)) (CONatexp $0))))))))
   ((/\ ((! :(var long -> bool) -> bool) (\(x1 :var long).
   ((! :(excon long -> bool) -> bool) (\(x1' :excon long). (~
   (((= :atexp -> atexp -> bool) (VARatexp $1)) (EXCONatexp $0))))))))
   ((/\ ((! :(var long -> bool) -> bool) (\(x1 :var long).
   ((! :(dec -> bool) -> bool) (\(x1' :dec).
   ((! :(exp -> bool) -> bool) (\(x2' :exp). (~
   (((= :atexp -> atexp -> bool) (VARatexp $2)) ((LETatexp $1)
   $0)))))))))) ((/\ ((! :(var long -> bool) -> bool)
   (\(x1 :var long). ((! :(exp -> bool) -> bool) (\(x1' :exp). (~
   (((= :atexp -> atexp -> bool) (VARatexp $1)) (PARatexp $0))))))))
   ((/\ ((! :(var long -> bool) -> bool) (\(x1 :var long).
   ((! :(exprow option -> bool) -> bool) (\(x1' :exprow option). (~
   (((= :atexp -> atexp -> bool) (VARatexp $1)) (RECORDatexp
   $0)))))))) ((/\ ((! :(con long -> bool) -> bool) (\(x1 :con long).
   ((! :(excon long -> bool) -> bool) (\(x1' :excon long). (~
   (((= :atexp -> atexp -> bool) (CONatexp $1)) (EXCONatexp $0))))))))
   ((/\ ((! :(con long -> bool) -> bool) (\(x1 :con long).
   ((! :(dec -> bool) -> bool) (\(x1' :dec).
   ((! :(exp -> bool) -> bool) (\(x2' :exp). (~
   (((= :atexp -> atexp -> bool) (CONatexp $2)) ((LETatexp $1)
   $0)))))))))) ((/\ ((! :(con long -> bool) -> bool)
   (\(x1 :con long). ((! :(exp -> bool) -> bool) (\(x1' :exp). (~
   (((= :atexp -> atexp -> bool) (CONatexp $1)) (PARatexp $0))))))))
   ((/\ ((! :(con long -> bool) -> bool) (\(x1 :con long).
   ((! :(exprow option -> bool) -> bool) (\(x1' :exprow option). (~
   (((= :atexp -> atexp -> bool) (CONatexp $1)) (RECORDatexp
   $0)))))))) ((/\ ((! :(excon long -> bool) -> bool)
   (\(x1 :excon long). ((! :(dec -> bool) -> bool) (\(x1' :dec).
   ((! :(exp -> bool) -> bool) (\(x2' :exp). (~
   (((= :atexp -> atexp -> bool) (EXCONatexp $2)) ((LETatexp $1)
   $0)))))))))) ((/\ ((! :(excon long -> bool) -> bool)
   (\(x1 :excon long). ((! :(exp -> bool) -> bool) (\(x1' :exp). (~
   (((= :atexp -> atexp -> bool) (EXCONatexp $1)) (PARatexp $0))))))))
   ((/\ ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   ((! :(exprow option -> bool) -> bool) (\(x1' :exprow option). (~
   (((= :atexp -> atexp -> bool) (EXCONatexp $1)) (RECORDatexp
   $0)))))))) ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(exp -> bool) -> bool) (\(x1' :exp). (~
   (((= :atexp -> atexp -> bool) ((LETatexp $2) $1)) (PARatexp
   $0)))))))))) ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(exprow option -> bool) -> bool) (\(x1' :exprow option). (~
   (((= :atexp -> atexp -> bool) ((LETatexp $2) $1)) (RECORDatexp
   $0)))))))))) ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(exprow option -> bool) -> bool) (\(x1' :exprow option). (~
   (((= :atexp -> atexp -> bool) (PARatexp $1)) (RECORDatexp
   $0)))))))))))))))))))))))))))) ((/\ ((/\
   ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   ((! :(exbind -> bool) -> bool) (\(x1' :exbind). (~
   (((= :dec -> dec -> bool) (VALdec $1)) (EXCEPTdec $0)))))))) ((/\
   ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   ((! :(dec -> bool) -> bool) (\(x1' :dec).
   ((! :(dec -> bool) -> bool) (\(x2' :dec). (~
   (((= :dec -> dec -> bool) (VALdec $2)) ((LOCALdec $1) $0))))))))))
   ((/\ ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1' :strid long nonemptylist). (~ (((= :dec -> dec -> bool)
   (VALdec $1)) (OPENdec $0)))))))) ((/\
   ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   ((! :(dec -> bool) -> bool) (\(x1' :dec).
   ((! :(dec -> bool) -> bool) (\(x2' :dec). (~
   (((= :dec -> dec -> bool) (VALdec $2)) ((SEQdec $1) $0))))))))))
   ((/\ ((! :(valbind -> bool) -> bool) (\(x1 :valbind). (~
   (((= :dec -> dec -> bool) (VALdec $0)) EMPTYdec))))) ((/\
   ((! :(exbind -> bool) -> bool) (\(x1 :exbind).
   ((! :(dec -> bool) -> bool) (\(x1' :dec).
   ((! :(dec -> bool) -> bool) (\(x2' :dec). (~
   (((= :dec -> dec -> bool) (EXCEPTdec $2)) ((LOCALdec $1)
   $0)))))))))) ((/\ ((! :(exbind -> bool) -> bool) (\(x1 :exbind).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1' :strid long nonemptylist). (~ (((= :dec -> dec -> bool)
   (EXCEPTdec $1)) (OPENdec $0)))))))) ((/\
   ((! :(exbind -> bool) -> bool) (\(x1 :exbind).
   ((! :(dec -> bool) -> bool) (\(x1' :dec).
   ((! :(dec -> bool) -> bool) (\(x2' :dec). (~
   (((= :dec -> dec -> bool) (EXCEPTdec $2)) ((SEQdec $1) $0))))))))))
   ((/\ ((! :(exbind -> bool) -> bool) (\(x1 :exbind). (~
   (((= :dec -> dec -> bool) (EXCEPTdec $0)) EMPTYdec))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1' :strid long nonemptylist). (~ (((= :dec -> dec -> bool)
   ((LOCALdec $2) $1)) (OPENdec $0)))))))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec).
   ((! :(dec -> bool) -> bool) (\(x1' :dec).
   ((! :(dec -> bool) -> bool) (\(x2' :dec). (~
   (((= :dec -> dec -> bool) ((LOCALdec $3) $2)) ((SEQdec $1)
   $0)))))))))))) ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec). (~
   (((= :dec -> dec -> bool) ((LOCALdec $1) $0)) EMPTYdec))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). ((! :(dec -> bool) -> bool)
   (\(x1' :dec). ((! :(dec -> bool) -> bool) (\(x2' :dec). (~
   (((= :dec -> dec -> bool) (OPENdec $2)) ((SEQdec $1) $0))))))))))
   ((/\ ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (~ (((= :dec -> dec -> bool)
   (OPENdec $0)) EMPTYdec))))) ((! :(dec -> bool) -> bool)
   (\(x1 :dec). ((! :(dec -> bool) -> bool) (\(x2 :dec). (~
   (((= :dec -> dec -> bool) ((SEQdec $1) $0))
   EMPTYdec))))))))))))))))))))) ((/\ ((/\
   ((! :(atexp -> bool) -> bool) (\(x1 :atexp).
   ((! :(exp -> bool) -> bool) (\(x1' :exp).
   ((! :(atexp -> bool) -> bool) (\(x2' :atexp). (~
   (((= :exp -> exp -> bool) (ATEXPexp $2)) ((APPexp $1) $0))))))))))
   ((/\ ((! :(atexp -> bool) -> bool) (\(x1 :atexp).
   ((! :(exp -> bool) -> bool) (\(x1' :exp).
   ((! :(match -> bool) -> bool) (\(x2' :match). (~
   (((= :exp -> exp -> bool) (ATEXPexp $2)) ((HANDLEexp $1)
   $0)))))))))) ((/\ ((! :(atexp -> bool) -> bool) (\(x1 :atexp).
   ((! :(exp -> bool) -> bool) (\(x1' :exp). (~
   (((= :exp -> exp -> bool) (ATEXPexp $1)) (RAISEexp $0)))))))) ((/\
   ((! :(atexp -> bool) -> bool) (\(x1 :atexp).
   ((! :(match -> bool) -> bool) (\(x1' :match). (~
   (((= :exp -> exp -> bool) (ATEXPexp $1)) (FNexp $0)))))))) ((/\
   ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(atexp -> bool) -> bool) (\(x2 :atexp).
   ((! :(exp -> bool) -> bool) (\(x1' :exp).
   ((! :(match -> bool) -> bool) (\(x2' :match). (~
   (((= :exp -> exp -> bool) ((APPexp $3) $2)) ((HANDLEexp $1)
   $0)))))))))))) ((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(atexp -> bool) -> bool) (\(x2 :atexp).
   ((! :(exp -> bool) -> bool) (\(x1' :exp). (~
   (((= :exp -> exp -> bool) ((APPexp $2) $1)) (RAISEexp $0))))))))))
   ((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(atexp -> bool) -> bool) (\(x2 :atexp).
   ((! :(match -> bool) -> bool) (\(x1' :match). (~
   (((= :exp -> exp -> bool) ((APPexp $2) $1)) (FNexp $0))))))))))
   ((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(match -> bool) -> bool) (\(x2 :match).
   ((! :(exp -> bool) -> bool) (\(x1' :exp). (~
   (((= :exp -> exp -> bool) ((HANDLEexp $2) $1)) (RAISEexp
   $0)))))))))) ((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(match -> bool) -> bool) (\(x2 :match).
   ((! :(match -> bool) -> bool) (\(x1' :match). (~
   (((= :exp -> exp -> bool) ((HANDLEexp $2) $1)) (FNexp $0))))))))))
   ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(match -> bool) -> bool) (\(x1' :match). (~
   (((= :exp -> exp -> bool) (RAISEexp $1)) (FNexp $0)))))))))))))))))
   ((/\ ((! :(exprow -> bool) -> bool) (\(x1' :exprow). (~
   (((= :exprow option -> exprow option -> bool)
   (NONE :exprow option)) ((SOME :exprow -> exprow option) $0))))))
   ((/\ ((! :(match -> bool) -> bool) (\(x1' :match). (~
   (((= :match option -> match option -> bool) (NONE :match option))
   ((SOME :match -> match option) $0)))))) ((/\
   ((! :(pat -> bool) -> bool) (\(x1 :pat).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(valbind option -> bool) -> bool) (\(x3 :valbind option).
   ((! :(valbind -> bool) -> bool) (\(x1' :valbind). (~
   (((= :valbind -> valbind -> bool) (((PLAINvalbind $3) $2) $1))
   (RECvalbind $0)))))))))))) ((! :(valbind -> bool) -> bool)
   (\(x1' :valbind). (~
   (((= :valbind option -> valbind option -> bool)
   (NONE :valbind option)) ((SOME :valbind -> valbind option)
   $0)))))))))))`),
 ((gram_unique),
  [],
  `((! :((scon -> 'a) -> bool) -> bool)
   (\(SCONatexp_case :scon -> 'a).
   ((! :((var long -> 'a) -> bool) -> bool)
   (\(VARatexp_case :var long -> 'a).
   ((! :((con long -> 'a) -> bool) -> bool)
   (\(CONatexp_case :con long -> 'a).
   ((! :((excon long -> 'a) -> bool) -> bool)
   (\(EXCONatexp_case :excon long -> 'a).
   ((! :(('b -> 'c -> dec -> exp -> 'a) -> bool) -> bool)
   (\(LETatexp_case :'b -> 'c -> dec -> exp -> 'a).
   ((! :(('c -> exp -> 'a) -> bool) -> bool)
   (\(PARatexp_case :'c -> exp -> 'a).
   ((! :(('e -> exprow option -> 'a) -> bool) -> bool)
   (\(RECORDatexp_case :'e -> exprow option -> 'a).
   ((! :(('i -> valbind -> 'b) -> bool) -> bool)
   (\(VALdec_case :'i -> valbind -> 'b).
   ((! :((exbind -> 'b) -> bool) -> bool)
   (\(EXCEPTdec_case :exbind -> 'b).
   ((! :(('b -> 'b -> dec -> dec -> 'b) -> bool) -> bool)
   (\(LOCALdec_case :'b -> 'b -> dec -> dec -> 'b).
   ((! :((strid long nonemptylist -> 'b) -> bool) -> bool)
   (\(OPENdec_case :strid long nonemptylist -> 'b).
   ((! :(('b -> 'b -> dec -> dec -> 'b) -> bool) -> bool)
   (\(SEQdec_case :'b -> 'b -> dec -> dec -> 'b).
   ((! :('b -> bool) -> bool) (\(EMPTYdec_case :'b).
   ((! :(('a -> atexp -> 'c) -> bool) -> bool)
   (\(ATEXPexp_case :'a -> atexp -> 'c).
   ((! :(('c -> 'a -> exp -> atexp -> 'c) -> bool) -> bool)
   (\(APPexp_case :'c -> 'a -> exp -> atexp -> 'c).
   ((! :(('c -> 'f -> exp -> match -> 'c) -> bool) -> bool)
   (\(HANDLEexp_case :'c -> 'f -> exp -> match -> 'c).
   ((! :(('c -> exp -> 'c) -> bool) -> bool)
   (\(RAISEexp_case :'c -> exp -> 'c).
   ((! :(('f -> match -> 'c) -> bool) -> bool)
   (\(FNexp_case :'f -> match -> 'c).
   ((! :(('c -> 'e -> label -> exp -> exprow option -> 'd) -> bool) ->
        bool)
   (\(EXPROW_case :'c -> 'e -> label -> exp -> exprow option -> 'd).
   ((! :('e -> bool) -> bool)
   (\(atexp_dec_exp_exprow_match_mrule_valbind_NONE_exprow_case :'e).
   ((! :(('d -> exprow -> 'e) -> bool) -> bool)
   (\(atexp_dec_exp_exprow_match_mrule_valbind_SOME_exprow_case :'d ->
                                                                 exprow ->
                                                                 'e).
   ((! :(('h -> 'g -> mrule -> match option -> 'f) -> bool) -> bool)
   (\(MATCH_case :'h -> 'g -> mrule -> match option -> 'f).
   ((! :('g -> bool) -> bool)
   (\(atexp_dec_exp_exprow_match_mrule_valbind_NONE_match_case :'g).
   ((! :(('f -> match -> 'g) -> bool) -> bool)
   (\(atexp_dec_exp_exprow_match_mrule_valbind_SOME_match_case :'f ->
                                                                match ->
                                                                'g).
   ((! :(('c -> pat -> exp -> 'h) -> bool) -> bool)
   (\(MRULE_case :'c -> pat -> exp -> 'h).
   ((! :(('c -> 'j -> pat -> exp -> valbind option -> 'i) -> bool) ->
        bool)
   (\(PLAINvalbind_case :'c -> 'j -> pat -> exp -> valbind option ->
                         'i).
   ((! :(('i -> valbind -> 'i) -> bool) -> bool)
   (\(RECvalbind_case :'i -> valbind -> 'i).
   ((! :('j -> bool) -> bool)
   (\(atexp_dec_exp_exprow_match_mrule_valbind_NONE_valbind_case :'j).
   ((! :(('i -> valbind -> 'j) -> bool) -> bool)
   (\(atexp_dec_exp_exprow_match_mrule_valbind_SOME_valbind_case :'i ->
                                                                  valbind ->
                                                                  'j).
   ((! :((atexp -> 'a) -> bool) -> bool) (\(fn1 :atexp -> 'a).
   ((! :((dec -> 'b) -> bool) -> bool) (\(fn2 :dec -> 'b).
   ((! :((exp -> 'c) -> bool) -> bool) (\(fn3 :exp -> 'c).
   ((! :((exprow -> 'd) -> bool) -> bool) (\(fn4 :exprow -> 'd).
   ((! :((exprow option -> 'e) -> bool) -> bool)
   (\(fn5 :exprow option -> 'e). ((! :((match -> 'f) -> bool) -> bool)
   (\(fn6 :match -> 'f). ((! :((match option -> 'g) -> bool) -> bool)
   (\(fn7 :match option -> 'g). ((! :((mrule -> 'h) -> bool) -> bool)
   (\(fn8 :mrule -> 'h). ((! :((valbind -> 'i) -> bool) -> bool)
   (\(fn9 :valbind -> 'i).
   ((! :((valbind option -> 'j) -> bool) -> bool)
   (\(fn10 :valbind option -> 'j).
   ((! :((atexp -> 'a) -> bool) -> bool) (\(fn1' :atexp -> 'a).
   ((! :((dec -> 'b) -> bool) -> bool) (\(fn2' :dec -> 'b).
   ((! :((exp -> 'c) -> bool) -> bool) (\(fn3' :exp -> 'c).
   ((! :((exprow -> 'd) -> bool) -> bool) (\(fn4' :exprow -> 'd).
   ((! :((exprow option -> 'e) -> bool) -> bool)
   (\(fn5' :exprow option -> 'e).
   ((! :((match -> 'f) -> bool) -> bool) (\(fn6' :match -> 'f).
   ((! :((match option -> 'g) -> bool) -> bool)
   (\(fn7' :match option -> 'g). ((! :((mrule -> 'h) -> bool) -> bool)
   (\(fn8' :mrule -> 'h). ((! :((valbind -> 'i) -> bool) -> bool)
   (\(fn9' :valbind -> 'i).
   ((! :((valbind option -> 'j) -> bool) -> bool)
   (\(fn10' :valbind option -> 'j). ((==> ((/\
   ((! :(scon -> bool) -> bool) (\(y :scon). (((= :'a -> 'a -> bool)
   ($20 (SCONatexp $0))) ($49 $0))))) ((/\
   ((! :(var long -> bool) -> bool) (\(y :var long).
   (((= :'a -> 'a -> bool) ($20 (VARatexp $0))) ($48 $0))))) ((/\
   ((! :(con long -> bool) -> bool) (\(y :con long).
   (((= :'a -> 'a -> bool) ($20 (CONatexp $0))) ($47 $0))))) ((/\
   ((! :(excon long -> bool) -> bool) (\(y :excon long).
   (((= :'a -> 'a -> bool) ($20 (EXCONatexp $0))) ($46 $0))))) ((/\
   ((! :(dec -> bool) -> bool) (\(y :dec). ((! :(exp -> bool) -> bool)
   (\(y''''''''''' :exp). (((= :'a -> 'a -> bool) ($21 ((LETatexp $1)
   $0))) (((($46 ($20 $1)) ($19 $0)) $1) $0))))))) ((/\
   ((! :(exp -> bool) -> bool) (\(y :exp). (((= :'a -> 'a -> bool)
   ($20 (PARatexp $0))) (($44 ($18 $0)) $0))))) ((/\
   ((! :(exprow option -> bool) -> bool) (\(y :exprow option).
   (((= :'a -> 'a -> bool) ($20 (RECORDatexp $0))) (($43 ($16 $0))
   $0))))) ((/\ ((! :(valbind -> bool) -> bool) (\(y :valbind).
   (((= :'b -> 'b -> bool) ($19 (VALdec $0))) (($42 ($12 $0)) $0)))))
   ((/\ ((! :(exbind -> bool) -> bool) (\(y :exbind).
   (((= :'b -> 'b -> bool) ($19 (EXCEPTdec $0))) ($41 $0))))) ((/\
   ((! :(dec -> bool) -> bool) (\(y :dec). ((! :(dec -> bool) -> bool)
   (\(y'''''''''' :dec). (((= :'b -> 'b -> bool) ($20 ((LOCALdec $1)
   $0))) (((($41 ($20 $1)) ($20 $0)) $1) $0))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(y :strid long nonemptylist). (((= :'b -> 'b -> bool) ($19
   (OPENdec $0))) ($39 $0))))) ((/\ ((! :(dec -> bool) -> bool)
   (\(y :dec). ((! :(dec -> bool) -> bool) (\(y''''''''' :dec).
   (((= :'b -> 'b -> bool) ($20 ((SEQdec $1) $0))) (((($39 ($20 $1))
   ($20 $0)) $1) $0))))))) ((/\ (((= :'b -> 'b -> bool) ($18
   EMPTYdec)) $36)) ((/\ ((! :(atexp -> bool) -> bool) (\(y :atexp).
   (((= :'c -> 'c -> bool) ($18 (ATEXPexp $0))) (($36 ($20 $0))
   $0))))) ((/\ ((! :(exp -> bool) -> bool) (\(y :exp).
   ((! :(atexp -> bool) -> bool) (\(y'''''''' :atexp).
   (((= :'c -> 'c -> bool) ($19 ((APPexp $1) $0))) (((($36 ($19 $1))
   ($21 $0)) $1) $0))))))) ((/\ ((! :(exp -> bool) -> bool)
   (\(y :exp). ((! :(match -> bool) -> bool) (\(y''''''' :match).
   (((= :'c -> 'c -> bool) ($19 ((HANDLEexp $1) $0))) (((($35 ($19
   $1)) ($16 $0)) $1) $0))))))) ((/\ ((! :(exp -> bool) -> bool)
   (\(y :exp). (((= :'c -> 'c -> bool) ($18 (RAISEexp $0))) (($33 ($18
   $0)) $0))))) ((/\ ((! :(match -> bool) -> bool) (\(y :match).
   (((= :'c -> 'c -> bool) ($18 (FNexp $0))) (($32 ($15 $0)) $0)))))
   ((/\ ((! :(label -> bool) -> bool) (\(y :label).
   ((! :(exp -> bool) -> bool) (\(y'''''' :exp).
   ((! :(exprow option -> bool) -> bool) (\(y''''' :exprow option).
   (((= :'d -> 'd -> bool) ($19 (((EXPROW $2) $1) $0))) ((((($33 ($20
   $1)) ($18 $0)) $2) $1) $0))))))))) ((/\ (((= :'e -> 'e -> bool)
   ($15 (NONE :exprow option))) $29)) ((/\
   ((! :(exprow -> bool) -> bool) (\(y :exprow).
   (((= :'e -> 'e -> bool) ($16 ((SOME :exprow -> exprow option) $0)))
   (($29 ($17 $0)) $0))))) ((/\ ((! :(mrule -> bool) -> bool)
   (\(y :mrule). ((! :(match option -> bool) -> bool)
   (\(y'''' :match option). (((= :'f -> 'f -> bool) ($16 ((MATCH $1)
   $0))) (((($29 ($14 $1)) ($15 $0)) $1) $0))))))) ((/\
   (((= :'g -> 'g -> bool) ($13 (NONE :match option))) $26)) ((/\
   ((! :(match -> bool) -> bool) (\(y :match). (((= :'g -> 'g -> bool)
   ($14 ((SOME :match -> match option) $0))) (($26 ($15 $0)) $0)))))
   ((/\ ((! :(pat -> bool) -> bool) (\(y :pat).
   ((! :(exp -> bool) -> bool) (\(y''' :exp). (((= :'h -> 'h -> bool)
   ($14 ((MRULE $1) $0))) ((($26 ($19 $0)) $1) $0))))))) ((/\
   ((! :(pat -> bool) -> bool) (\(y :pat). ((! :(exp -> bool) -> bool)
   (\(y'' :exp). ((! :(valbind option -> bool) -> bool)
   (\(y' :valbind option). (((= :'i -> 'i -> bool) ($14
   (((PLAINvalbind $2) $1) $0))) ((((($26 ($20 $1)) ($13 $0)) $2) $1)
   $0))))))))) ((/\ ((! :(valbind -> bool) -> bool) (\(y :valbind).
   (((= :'i -> 'i -> bool) ($12 (RECvalbind $0))) (($23 ($12 $0))
   $0))))) ((/\ (((= :'j -> 'j -> bool) ($10 (NONE :valbind option)))
   $21)) ((! :(valbind -> bool) -> bool) (\(y :valbind).
   (((= :'j -> 'j -> bool) ($11 ((SOME :valbind -> valbind option)
   $0))) (($21 ($12 $0)) $0))))))))))))))))))))))))))))))))) ((==>
   ((/\ ((! :(scon -> bool) -> bool) (\(y :scon).
   (((= :'a -> 'a -> bool) ($10 (SCONatexp $0))) ($49 $0))))) ((/\
   ((! :(var long -> bool) -> bool) (\(y :var long).
   (((= :'a -> 'a -> bool) ($10 (VARatexp $0))) ($48 $0))))) ((/\
   ((! :(con long -> bool) -> bool) (\(y :con long).
   (((= :'a -> 'a -> bool) ($10 (CONatexp $0))) ($47 $0))))) ((/\
   ((! :(excon long -> bool) -> bool) (\(y :excon long).
   (((= :'a -> 'a -> bool) ($10 (EXCONatexp $0))) ($46 $0))))) ((/\
   ((! :(dec -> bool) -> bool) (\(y :dec). ((! :(exp -> bool) -> bool)
   (\(y''''''''''' :exp). (((= :'a -> 'a -> bool) ($11 ((LETatexp $1)
   $0))) (((($46 ($10 $1)) ($9 $0)) $1) $0))))))) ((/\
   ((! :(exp -> bool) -> bool) (\(y :exp). (((= :'a -> 'a -> bool)
   ($10 (PARatexp $0))) (($44 ($8 $0)) $0))))) ((/\
   ((! :(exprow option -> bool) -> bool) (\(y :exprow option).
   (((= :'a -> 'a -> bool) ($10 (RECORDatexp $0))) (($43 ($6 $0))
   $0))))) ((/\ ((! :(valbind -> bool) -> bool) (\(y :valbind).
   (((= :'b -> 'b -> bool) ($9 (VALdec $0))) (($42 ($2 $0)) $0)))))
   ((/\ ((! :(exbind -> bool) -> bool) (\(y :exbind).
   (((= :'b -> 'b -> bool) ($9 (EXCEPTdec $0))) ($41 $0))))) ((/\
   ((! :(dec -> bool) -> bool) (\(y :dec). ((! :(dec -> bool) -> bool)
   (\(y'''''''''' :dec). (((= :'b -> 'b -> bool) ($10 ((LOCALdec $1)
   $0))) (((($41 ($10 $1)) ($10 $0)) $1) $0))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(y :strid long nonemptylist). (((= :'b -> 'b -> bool) ($9
   (OPENdec $0))) ($39 $0))))) ((/\ ((! :(dec -> bool) -> bool)
   (\(y :dec). ((! :(dec -> bool) -> bool) (\(y''''''''' :dec).
   (((= :'b -> 'b -> bool) ($10 ((SEQdec $1) $0))) (((($39 ($10 $1))
   ($10 $0)) $1) $0))))))) ((/\ (((= :'b -> 'b -> bool) ($8 EMPTYdec))
   $36)) ((/\ ((! :(atexp -> bool) -> bool) (\(y :atexp).
   (((= :'c -> 'c -> bool) ($8 (ATEXPexp $0))) (($36 ($10 $0)) $0)))))
   ((/\ ((! :(exp -> bool) -> bool) (\(y :exp).
   ((! :(atexp -> bool) -> bool) (\(y'''''''' :atexp).
   (((= :'c -> 'c -> bool) ($9 ((APPexp $1) $0))) (((($36 ($9 $1))
   ($11 $0)) $1) $0))))))) ((/\ ((! :(exp -> bool) -> bool)
   (\(y :exp). ((! :(match -> bool) -> bool) (\(y''''''' :match).
   (((= :'c -> 'c -> bool) ($9 ((HANDLEexp $1) $0))) (((($35 ($9 $1))
   ($6 $0)) $1) $0))))))) ((/\ ((! :(exp -> bool) -> bool) (\(y :exp).
   (((= :'c -> 'c -> bool) ($8 (RAISEexp $0))) (($33 ($8 $0)) $0)))))
   ((/\ ((! :(match -> bool) -> bool) (\(y :match).
   (((= :'c -> 'c -> bool) ($8 (FNexp $0))) (($32 ($5 $0)) $0)))))
   ((/\ ((! :(label -> bool) -> bool) (\(y :label).
   ((! :(exp -> bool) -> bool) (\(y'''''' :exp).
   ((! :(exprow option -> bool) -> bool) (\(y''''' :exprow option).
   (((= :'d -> 'd -> bool) ($9 (((EXPROW $2) $1) $0))) ((((($33 ($10
   $1)) ($8 $0)) $2) $1) $0))))))))) ((/\ (((= :'e -> 'e -> bool) ($5
   (NONE :exprow option))) $29)) ((/\ ((! :(exprow -> bool) -> bool)
   (\(y :exprow). (((= :'e -> 'e -> bool) ($6
   ((SOME :exprow -> exprow option) $0))) (($29 ($7 $0)) $0))))) ((/\
   ((! :(mrule -> bool) -> bool) (\(y :mrule).
   ((! :(match option -> bool) -> bool) (\(y'''' :match option).
   (((= :'f -> 'f -> bool) ($6 ((MATCH $1) $0))) (((($29 ($4 $1)) ($5
   $0)) $1) $0))))))) ((/\ (((= :'g -> 'g -> bool) ($3
   (NONE :match option))) $26)) ((/\ ((! :(match -> bool) -> bool)
   (\(y :match). (((= :'g -> 'g -> bool) ($4
   ((SOME :match -> match option) $0))) (($26 ($5 $0)) $0))))) ((/\
   ((! :(pat -> bool) -> bool) (\(y :pat). ((! :(exp -> bool) -> bool)
   (\(y''' :exp). (((= :'h -> 'h -> bool) ($4 ((MRULE $1) $0))) ((($26
   ($9 $0)) $1) $0))))))) ((/\ ((! :(pat -> bool) -> bool) (\(y :pat).
   ((! :(exp -> bool) -> bool) (\(y'' :exp).
   ((! :(valbind option -> bool) -> bool) (\(y' :valbind option).
   (((= :'i -> 'i -> bool) ($4 (((PLAINvalbind $2) $1) $0))) ((((($26
   ($10 $1)) ($3 $0)) $2) $1) $0))))))))) ((/\
   ((! :(valbind -> bool) -> bool) (\(y :valbind).
   (((= :'i -> 'i -> bool) ($2 (RECvalbind $0))) (($23 ($2 $0))
   $0))))) ((/\ (((= :'j -> 'j -> bool) ($0 (NONE :valbind option)))
   $21)) ((! :(valbind -> bool) -> bool) (\(y :valbind).
   (((= :'j -> 'j -> bool) ($1 ((SOME :valbind -> valbind option)
   $0))) (($21 ($2 $0)) $0))))))))))))))))))))))))))))))))) ((/\
   (((= :(atexp -> 'a) -> (atexp -> 'a) -> bool) $19) $9)) ((/\
   (((= :(dec -> 'b) -> (dec -> 'b) -> bool) $18) $8)) ((/\
   (((= :(exp -> 'c) -> (exp -> 'c) -> bool) $17) $7)) ((/\
   (((= :(exprow -> 'd) -> (exprow -> 'd) -> bool) $16) $6)) ((/\
   (((= :(exprow option -> 'e) -> (exprow option -> 'e) -> bool) $15)
   $5)) ((/\ (((= :(match -> 'f) -> (match -> 'f) -> bool) $14) $4))
   ((/\ (((= :(match option -> 'g) -> (match option -> 'g) -> bool)
   $13) $3)) ((/\ (((= :(mrule -> 'h) -> (mrule -> 'h) -> bool) $12)
   $2)) ((/\ (((= :(valbind -> 'i) -> (valbind -> 'i) -> bool) $11)
   $1))
   (((= :(valbind option -> 'j) -> (valbind option -> 'j) -> bool)
   $10)
   $0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((gram_induct),
  [],
  `((! :((atexp -> bool) -> bool) -> bool)
   (\(atexp_Prop :atexp -> bool).
   ((! :((dec -> bool) -> bool) -> bool) (\(dec_Prop :dec -> bool).
   ((! :((exp -> bool) -> bool) -> bool) (\(exp_Prop :exp -> bool).
   ((! :((exprow -> bool) -> bool) -> bool)
   (\(exprow_Prop :exprow -> bool).
   ((! :((exprow option -> bool) -> bool) -> bool)
   (\(exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_Prop :exprow
                                                                   option ->
                                                                   bool).
   ((! :((match -> bool) -> bool) -> bool)
   (\(match_Prop :match -> bool).
   ((! :((match option -> bool) -> bool) -> bool)
   (\(match_option_atexp_dec_exp_exprow_match_mrule_valbind_Prop :match
                                                                  option ->
                                                                  bool).
   ((! :((mrule -> bool) -> bool) -> bool)
   (\(mrule_Prop :mrule -> bool).
   ((! :((valbind -> bool) -> bool) -> bool)
   (\(valbind_Prop :valbind -> bool).
   ((! :((valbind option -> bool) -> bool) -> bool)
   (\(valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_Prop :valbind
                                                                    option ->
                                                                    bool).
   ((==> ((/\ ((! :(scon -> bool) -> bool) (\(y :scon). ($10
   (SCONatexp $0))))) ((/\ ((! :(var long -> bool) -> bool)
   (\(y :var long). ($10 (VARatexp $0))))) ((/\
   ((! :(con long -> bool) -> bool) (\(y :con long). ($10 (CONatexp
   $0))))) ((/\ ((! :(excon long -> bool) -> bool) (\(y :excon long).
   ($10 (EXCONatexp $0))))) ((/\ ((! :(dec -> bool) -> bool)
   (\(y :dec). ((! :(exp -> bool) -> bool) (\(y''''''''''' :exp).
   ((==> ($10 $1)) ((==> ($9 $0)) ($11 ((LETatexp $1) $0))))))))) ((/\
   ((! :(exp -> bool) -> bool) (\(y :exp). ((==> ($8 $0)) ($10
   (PARatexp $0)))))) ((/\ ((! :(exprow option -> bool) -> bool)
   (\(y :exprow option). ((==> ($6 $0)) ($10 (RECORDatexp $0))))))
   ((/\ ((! :(valbind -> bool) -> bool) (\(y :valbind). ((==> ($2 $0))
   ($9 (VALdec $0)))))) ((/\ ((! :(exbind -> bool) -> bool)
   (\(y :exbind). ($9 (EXCEPTdec $0))))) ((/\
   ((! :(dec -> bool) -> bool) (\(y :dec). ((! :(dec -> bool) -> bool)
   (\(y'''''''''' :dec). ((==> ($10 $1)) ((==> ($10 $0)) ($10
   ((LOCALdec $1) $0))))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(y :strid long nonemptylist). ($9 (OPENdec $0))))) ((/\
   ((! :(dec -> bool) -> bool) (\(y :dec). ((! :(dec -> bool) -> bool)
   (\(y''''''''' :dec). ((==> ($10 $1)) ((==> ($10 $0)) ($10 ((SEQdec
   $1) $0))))))))) ((/\ ($8 EMPTYdec)) ((/\
   ((! :(atexp -> bool) -> bool) (\(y :atexp). ((==> ($10 $0)) ($8
   (ATEXPexp $0)))))) ((/\ ((! :(exp -> bool) -> bool) (\(y :exp).
   ((! :(atexp -> bool) -> bool) (\(y'''''''' :atexp). ((==> ($9 $1))
   ((==> ($11 $0)) ($9 ((APPexp $1) $0))))))))) ((/\
   ((! :(exp -> bool) -> bool) (\(y :exp).
   ((! :(match -> bool) -> bool) (\(y''''''' :match). ((==> ($9 $1))
   ((==> ($6 $0)) ($9 ((HANDLEexp $1) $0))))))))) ((/\
   ((! :(exp -> bool) -> bool) (\(y :exp). ((==> ($8 $0)) ($8
   (RAISEexp $0)))))) ((/\ ((! :(match -> bool) -> bool) (\(y :match).
   ((==> ($5 $0)) ($8 (FNexp $0)))))) ((/\
   ((! :(label -> bool) -> bool) (\(y :label).
   ((! :(exp -> bool) -> bool) (\(y'''''' :exp).
   ((! :(exprow option -> bool) -> bool) (\(y''''' :exprow option).
   ((==> ($10 $1)) ((==> ($8 $0)) ($9 (((EXPROW $2) $1) $0)))))))))))
   ((/\ ($5 (NONE :exprow option))) ((/\
   ((! :(exprow -> bool) -> bool) (\(y :exprow). ((==> ($7 $0)) ($6
   ((SOME :exprow -> exprow option) $0)))))) ((/\
   ((! :(mrule -> bool) -> bool) (\(y :mrule).
   ((! :(match option -> bool) -> bool) (\(y'''' :match option). ((==>
   ($4 $1)) ((==> ($5 $0)) ($6 ((MATCH $1) $0))))))))) ((/\ ($3
   (NONE :match option))) ((/\ ((! :(match -> bool) -> bool)
   (\(y :match). ((==> ($5 $0)) ($4 ((SOME :match -> match option)
   $0)))))) ((/\ ((! :(pat -> bool) -> bool) (\(y :pat).
   ((! :(exp -> bool) -> bool) (\(y''' :exp). ((==> ($9 $0)) ($4
   ((MRULE $1) $0)))))))) ((/\ ((! :(pat -> bool) -> bool) (\(y :pat).
   ((! :(exp -> bool) -> bool) (\(y'' :exp).
   ((! :(valbind option -> bool) -> bool) (\(y' :valbind option).
   ((==> ($10 $1)) ((==> ($3 $0)) ($4 (((PLAINvalbind $2) $1)
   $0))))))))))) ((/\ ((! :(valbind -> bool) -> bool) (\(y :valbind).
   ((==> ($2 $0)) ($2 (RECvalbind $0)))))) ((/\ ($0
   (NONE :valbind option))) ((! :(valbind -> bool) -> bool)
   (\(y :valbind). ((==> ($2 $0)) ($1
   ((SOME :valbind -> valbind option)
   $0)))))))))))))))))))))))))))))))))) ((/\
   ((! :(atexp -> bool) -> bool) (\(x1 :atexp). ($10 $0)))) ((/\
   ((! :(dec -> bool) -> bool) (\(x2 :dec). ($9 $0)))) ((/\
   ((! :(exp -> bool) -> bool) (\(x3 :exp). ($8 $0)))) ((/\
   ((! :(exprow -> bool) -> bool) (\(x4 :exprow). ($7 $0)))) ((/\
   ((! :(exprow option -> bool) -> bool) (\(x5 :exprow option). ($6
   $0)))) ((/\ ((! :(match -> bool) -> bool) (\(x6 :match). ($5 $0))))
   ((/\ ((! :(match option -> bool) -> bool) (\(x7 :match option). ($4
   $0)))) ((/\ ((! :(mrule -> bool) -> bool) (\(x8 :mrule). ($3 $0))))
   ((/\ ((! :(valbind -> bool) -> bool) (\(x9 :valbind). ($2 $0))))
   ((! :(valbind option -> bool) -> bool) (\(x10 :valbind option). ($1
   $0)))))))))))))))))))))))))))))))))`),
 ((gram_existence),
  [],
  `((! :((scon -> 'a) -> bool) -> bool)
   (\(SCONatexp_case :scon -> 'a).
   ((! :((var long -> 'a) -> bool) -> bool)
   (\(VARatexp_case :var long -> 'a).
   ((! :((con long -> 'a) -> bool) -> bool)
   (\(CONatexp_case :con long -> 'a).
   ((! :((excon long -> 'a) -> bool) -> bool)
   (\(EXCONatexp_case :excon long -> 'a).
   ((! :(('b -> 'c -> dec -> exp -> 'a) -> bool) -> bool)
   (\(LETatexp_case :'b -> 'c -> dec -> exp -> 'a).
   ((! :(('c -> exp -> 'a) -> bool) -> bool)
   (\(PARatexp_case :'c -> exp -> 'a).
   ((! :(('e -> exprow option -> 'a) -> bool) -> bool)
   (\(RECORDatexp_case :'e -> exprow option -> 'a).
   ((! :(('i -> valbind -> 'b) -> bool) -> bool)
   (\(VALdec_case :'i -> valbind -> 'b).
   ((! :((exbind -> 'b) -> bool) -> bool)
   (\(EXCEPTdec_case :exbind -> 'b).
   ((! :(('b -> 'b -> dec -> dec -> 'b) -> bool) -> bool)
   (\(LOCALdec_case :'b -> 'b -> dec -> dec -> 'b).
   ((! :((strid long nonemptylist -> 'b) -> bool) -> bool)
   (\(OPENdec_case :strid long nonemptylist -> 'b).
   ((! :(('b -> 'b -> dec -> dec -> 'b) -> bool) -> bool)
   (\(SEQdec_case :'b -> 'b -> dec -> dec -> 'b).
   ((! :('b -> bool) -> bool) (\(EMPTYdec_case :'b).
   ((! :(('a -> atexp -> 'c) -> bool) -> bool)
   (\(ATEXPexp_case :'a -> atexp -> 'c).
   ((! :(('c -> 'a -> exp -> atexp -> 'c) -> bool) -> bool)
   (\(APPexp_case :'c -> 'a -> exp -> atexp -> 'c).
   ((! :(('c -> 'f -> exp -> match -> 'c) -> bool) -> bool)
   (\(HANDLEexp_case :'c -> 'f -> exp -> match -> 'c).
   ((! :(('c -> exp -> 'c) -> bool) -> bool)
   (\(RAISEexp_case :'c -> exp -> 'c).
   ((! :(('f -> match -> 'c) -> bool) -> bool)
   (\(FNexp_case :'f -> match -> 'c).
   ((! :(('c -> 'e -> label -> exp -> exprow option -> 'd) -> bool) ->
        bool)
   (\(EXPROW_case :'c -> 'e -> label -> exp -> exprow option -> 'd).
   ((! :('e -> bool) -> bool)
   (\(atexp_dec_exp_exprow_match_mrule_valbind_NONE_exprow_case :'e).
   ((! :(('d -> exprow -> 'e) -> bool) -> bool)
   (\(atexp_dec_exp_exprow_match_mrule_valbind_SOME_exprow_case :'d ->
                                                                 exprow ->
                                                                 'e).
   ((! :(('h -> 'g -> mrule -> match option -> 'f) -> bool) -> bool)
   (\(MATCH_case :'h -> 'g -> mrule -> match option -> 'f).
   ((! :('g -> bool) -> bool)
   (\(atexp_dec_exp_exprow_match_mrule_valbind_NONE_match_case :'g).
   ((! :(('f -> match -> 'g) -> bool) -> bool)
   (\(atexp_dec_exp_exprow_match_mrule_valbind_SOME_match_case :'f ->
                                                                match ->
                                                                'g).
   ((! :(('c -> pat -> exp -> 'h) -> bool) -> bool)
   (\(MRULE_case :'c -> pat -> exp -> 'h).
   ((! :(('c -> 'j -> pat -> exp -> valbind option -> 'i) -> bool) ->
        bool)
   (\(PLAINvalbind_case :'c -> 'j -> pat -> exp -> valbind option ->
                         'i).
   ((! :(('i -> valbind -> 'i) -> bool) -> bool)
   (\(RECvalbind_case :'i -> valbind -> 'i).
   ((! :('j -> bool) -> bool)
   (\(atexp_dec_exp_exprow_match_mrule_valbind_NONE_valbind_case :'j).
   ((! :(('i -> valbind -> 'j) -> bool) -> bool)
   (\(atexp_dec_exp_exprow_match_mrule_valbind_SOME_valbind_case :'i ->
                                                                  valbind ->
                                                                  'j).
   ((? :((atexp -> 'a) -> bool) -> bool) (\(y :atexp -> 'a).
   ((? :((dec -> 'b) -> bool) -> bool) (\(y''''''''' :dec -> 'b).
   ((? :((exp -> 'c) -> bool) -> bool) (\(y'''''''' :exp -> 'c).
   ((? :((exprow -> 'd) -> bool) -> bool) (\(y''''''' :exprow -> 'd).
   ((? :((exprow option -> 'e) -> bool) -> bool)
   (\(y'''''' :exprow option -> 'e).
   ((? :((match -> 'f) -> bool) -> bool) (\(y''''' :match -> 'f).
   ((? :((match option -> 'g) -> bool) -> bool)
   (\(y'''' :match option -> 'g).
   ((? :((mrule -> 'h) -> bool) -> bool) (\(y''' :mrule -> 'h).
   ((? :((valbind -> 'i) -> bool) -> bool) (\(y'' :valbind -> 'i).
   ((? :((valbind option -> 'j) -> bool) -> bool)
   (\(y' :valbind option -> 'j). ((/\ ((! :(scon -> bool) -> bool)
   (\(x1 :scon). (((= :'a -> 'a -> bool) ($10 (SCONatexp $0))) ($39
   $0))))) ((/\ ((! :(var long -> bool) -> bool) (\(x1 :var long).
   (((= :'a -> 'a -> bool) ($10 (VARatexp $0))) ($38 $0))))) ((/\
   ((! :(con long -> bool) -> bool) (\(x1 :con long).
   (((= :'a -> 'a -> bool) ($10 (CONatexp $0))) ($37 $0))))) ((/\
   ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   (((= :'a -> 'a -> bool) ($10 (EXCONatexp $0))) ($36 $0))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(exp -> bool) -> bool) (\(x2 :exp). (((= :'a -> 'a -> bool)
   ($11 ((LETatexp $1) $0))) (((($36 ($10 $1)) ($9 $0)) $1) $0)))))))
   ((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   (((= :'a -> 'a -> bool) ($10 (PARatexp $0))) (($34 ($8 $0)) $0)))))
   ((/\ ((! :(exprow option -> bool) -> bool) (\(x1 :exprow option).
   (((= :'a -> 'a -> bool) ($10 (RECORDatexp $0))) (($33 ($6 $0))
   $0))))) ((/\ ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :'b -> 'b -> bool) ($9 (VALdec $0))) (($32 ($2 $0)) $0)))))
   ((/\ ((! :(exbind -> bool) -> bool) (\(x1 :exbind).
   (((= :'b -> 'b -> bool) ($9 (EXCEPTdec $0))) ($31 $0))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x2 :dec). (((= :'b -> 'b -> bool)
   ($10 ((LOCALdec $1) $0))) (((($31 ($10 $1)) ($10 $0)) $1) $0)))))))
   ((/\ ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :'b -> 'b -> bool) ($9
   (OPENdec $0))) ($29 $0))))) ((/\ ((! :(dec -> bool) -> bool)
   (\(x1 :dec). ((! :(dec -> bool) -> bool) (\(x2 :dec).
   (((= :'b -> 'b -> bool) ($10 ((SEQdec $1) $0))) (((($29 ($10 $1))
   ($10 $0)) $1) $0))))))) ((/\ (((= :'b -> 'b -> bool) ($8 EMPTYdec))
   $26)) ((/\ ((! :(atexp -> bool) -> bool) (\(x1 :atexp).
   (((= :'c -> 'c -> bool) ($8 (ATEXPexp $0))) (($26 ($10 $0)) $0)))))
   ((/\ ((! :(exp -> bool) -> bool) (\(x1 :exp).
   ((! :(atexp -> bool) -> bool) (\(x2 :atexp).
   (((= :'c -> 'c -> bool) ($9 ((APPexp $1) $0))) (((($26 ($9 $1))
   ($11 $0)) $1) $0))))))) ((/\ ((! :(exp -> bool) -> bool)
   (\(x1 :exp). ((! :(match -> bool) -> bool) (\(x2 :match).
   (((= :'c -> 'c -> bool) ($9 ((HANDLEexp $1) $0))) (((($25 ($9 $1))
   ($6 $0)) $1) $0))))))) ((/\ ((! :(exp -> bool) -> bool)
   (\(x1 :exp). (((= :'c -> 'c -> bool) ($8 (RAISEexp $0))) (($23 ($8
   $0)) $0))))) ((/\ ((! :(match -> bool) -> bool) (\(x1 :match).
   (((= :'c -> 'c -> bool) ($8 (FNexp $0))) (($22 ($5 $0)) $0)))))
   ((/\ ((! :(label -> bool) -> bool) (\(x1 :label).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(exprow option -> bool) -> bool) (\(x3 :exprow option).
   (((= :'d -> 'd -> bool) ($9 (((EXPROW $2) $1) $0))) ((((($23 ($10
   $1)) ($8 $0)) $2) $1) $0))))))))) ((/\ (((= :'e -> 'e -> bool) ($5
   (NONE :exprow option))) $19)) ((/\ ((! :(exprow -> bool) -> bool)
   (\(x1 :exprow). (((= :'e -> 'e -> bool) ($6
   ((SOME :exprow -> exprow option) $0))) (($19 ($7 $0)) $0))))) ((/\
   ((! :(mrule -> bool) -> bool) (\(x1 :mrule).
   ((! :(match option -> bool) -> bool) (\(x2 :match option).
   (((= :'f -> 'f -> bool) ($6 ((MATCH $1) $0))) (((($19 ($4 $1)) ($5
   $0)) $1) $0))))))) ((/\ (((= :'g -> 'g -> bool) ($3
   (NONE :match option))) $16)) ((/\ ((! :(match -> bool) -> bool)
   (\(x1 :match). (((= :'g -> 'g -> bool) ($4
   ((SOME :match -> match option) $0))) (($16 ($5 $0)) $0))))) ((/\
   ((! :(pat -> bool) -> bool) (\(x1 :pat).
   ((! :(exp -> bool) -> bool) (\(x2 :exp). (((= :'h -> 'h -> bool)
   ($4 ((MRULE $1) $0))) ((($16 ($9 $0)) $1) $0))))))) ((/\
   ((! :(pat -> bool) -> bool) (\(x1 :pat).
   ((! :(exp -> bool) -> bool) (\(x2 :exp).
   ((! :(valbind option -> bool) -> bool) (\(x3 :valbind option).
   (((= :'i -> 'i -> bool) ($4 (((PLAINvalbind $2) $1) $0))) ((((($16
   ($10 $1)) ($3 $0)) $2) $1) $0))))))))) ((/\
   ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :'i -> 'i -> bool) ($2 (RECvalbind $0))) (($13 ($2 $0))
   $0))))) ((/\ (((= :'j -> 'j -> bool) ($0 (NONE :valbind option)))
   $11)) ((! :(valbind -> bool) -> bool) (\(x1 :valbind).
   (((= :'j -> 'j -> bool) ($1 ((SOME :valbind -> valbind option)
   $0))) (($11 ($2 $0))
   $0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind_Axiom),
  [],
  `((! :((scon -> 'a) -> bool) -> bool) (\(f0 :scon -> 'a).
   ((! :((var long -> 'a) -> bool) -> bool) (\(f1 :var long -> 'a).
   ((! :((con long -> 'a) -> bool) -> bool) (\(f2 :con long -> 'a).
   ((! :((excon long -> 'a) -> bool) -> bool)
   (\(f3 :excon long -> 'a).
   ((! :(('a -> 'a ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f4 :'a -> 'a ->
          joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
          joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
          'a).
   ((! :(('a ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f5 :'a ->
          joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
          'a).
   ((! :(('a ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f6 :'a ->
          joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
          'a).
   ((! :(('a ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f7 :'a ->
          joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
          'a). ((! :((exbind -> 'a) -> bool) -> bool)
   (\(f8 :exbind -> 'a).
   ((! :(('a -> 'a ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f9 :'a -> 'a ->
          joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
          joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
          'a). ((! :((strid long nonemptylist -> 'a) -> bool) -> bool)
   (\(f10 :strid long nonemptylist -> 'a).
   ((! :(('a -> 'a ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f11 :'a -> 'a ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           'a). ((! :('a -> bool) -> bool) (\(e0 :'a).
   ((! :(('a ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f12 :'a ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           'a).
   ((! :(('a -> 'a ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f13 :'a -> 'a ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           'a).
   ((! :(('a -> 'a ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f14 :'a -> 'a ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           'a).
   ((! :(('a ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f15 :'a ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           'a).
   ((! :(('a ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f16 :'a ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           'a).
   ((! :(('a -> 'a -> label ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f17 :'a -> 'a -> label ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           'a). ((! :('a -> bool) -> bool) (\(e1 :'a).
   ((! :(('a ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f18 :'a ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           'a).
   ((! :(('a -> 'a ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f19 :'a -> 'a ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           'a). ((! :('a -> bool) -> bool) (\(e2 :'a).
   ((! :(('a ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f20 :'a ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           'a).
   ((! :(('a -> pat ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f21 :'a -> pat ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           'a).
   ((! :(('a -> 'a -> pat ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f22 :'a -> 'a -> pat ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           'a).
   ((! :(('a ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f23 :'a ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           'a). ((! :('a -> bool) -> bool) (\(e3 :'a).
   ((! :(('a ->
         joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
         'a) -> bool) -> bool)
   (\(f24 :'a ->
           joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
           'a).
   ((?! :((joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
          'a) -> bool) -> bool)
   (\(fn :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
          'a). ((/\ ((! :(scon -> bool) -> bool) (\(s :scon).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_SCONatexp $0))) ($30 $0)))))
   ((/\ ((! :(var long -> bool) -> bool) (\(l :var long).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_VARatexp $0))) ($29 $0)))))
   ((/\ ((! :(con long -> bool) -> bool) (\(l :con long).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_CONatexp $0))) ($28 $0)))))
   ((/\ ((! :(excon long -> bool) -> bool) (\(l :excon long).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_EXCONatexp $0))) ($27
   $0))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_LETatexp $1) $0))) (((($27
   ($2 $1)) ($2 $0)) $1) $0))))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_PARatexp $0))) (($25 ($1
   $0)) $0))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_RECORDatexp $0))) (($24 ($1
   $0)) $0))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_VALdec $0))) (($23 ($1 $0))
   $0))))) ((/\ ((! :(exbind -> bool) -> bool) (\(e :exbind).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_EXCEPTdec $0))) ($22 $0)))))
   ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_LOCALdec $1) $0))) (((($22
   ($2 $1)) ($2 $0)) $1) $0))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist). (((= :'a -> 'a -> bool) ($1
   (JOINT_int_OPENdec $0))) ($20 $0))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_SEQdec $1) $0))) (((($20
   ($2 $1)) ($2 $0)) $1) $0))))))) ((/\ (((= :'a -> 'a -> bool) ($0
   JOINT_int_EMPTYdec)) $17)) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_ATEXPexp $0))) (($17 ($1
   $0)) $0))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_APPexp $1) $0))) (((($17
   ($2 $1)) ($2 $0)) $1) $0))))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_HANDLEexp $1) $0))) (((($16
   ($2 $1)) ($2 $0)) $1) $0))))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_RAISEexp $0))) (($14 ($1
   $0)) $0))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_FNexp $0))) (($13 ($1 $0))
   $0))))) ((/\ ((! :(label -> bool) -> bool) (\(l' :label).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($3 (((JOINT_int_EXPROW $2) $1) $0)))
   ((((($14 ($3 $1)) ($3 $0)) $2) $1) $0))))))))) ((/\
   (((= :'a -> 'a -> bool) ($0
   JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_exprow))
   $10)) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($1
   (JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_exprow
   $0))) (($10 ($1 $0)) $0))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_MATCH $1) $0))) (((($10 ($2
   $1)) ($2 $0)) $1) $0))))))) ((/\ (((= :'a -> 'a -> bool) ($0
   JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_match))
   $7)) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($1
   (JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_match
   $0))) (($7 ($1 $0)) $0))))) ((/\ ((! :(pat -> bool) -> bool)
   (\(p :pat).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_MRULE $1) $0))) ((($7 ($2
   $0)) $1) $0))))))) ((/\ ((! :(pat -> bool) -> bool) (\(p :pat).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j1 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j2 :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($3 (((JOINT_int_PLAINvalbind $2) $1) $0)))
   ((((($7 ($3 $1)) ($3 $0)) $2) $1) $0))))))))) ((/\
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_RECvalbind $0))) (($4 ($1
   $0)) $0))))) ((/\ (((= :'a -> 'a -> bool) ($0
   JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_NONE_valbind))
   $2))
   ((! :(joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind ->
        bool) -> bool)
   (\(j :joint_ty_atexp_dec_exp_exprow_exprow_option_atexp_dec_exp_exprow_match_mrule_valbind_match_match_option_atexp_dec_exp_exprow_match_mrule_valbind_mrule_valbind_valbind_option_atexp_dec_exp_exprow_match_mrule_valbind).
   (((= :'a -> 'a -> bool) ($1
   (JOINT_int_atexp_dec_exp_exprow_match_mrule_valbind_SOME_valbind
   $0))) (($2 ($1 $0))
   $0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((pat_cases),
  [],
  `((/\ ((! :(atpat -> bool) -> bool) (\(x1 :atpat). ((\/
   (((= :atpat -> atpat -> bool) $0) WILDCARDatpat)) ((\/
   ((? :(scon -> bool) -> bool) (\(y :scon).
   (((= :atpat -> atpat -> bool) $1) (SCONatpat $0))))) ((\/
   ((? :(var -> bool) -> bool) (\(y :var).
   (((= :atpat -> atpat -> bool) $1) (VARatpat $0))))) ((\/
   ((? :(con long -> bool) -> bool) (\(y :con long).
   (((= :atpat -> atpat -> bool) $1) (CONatpat $0))))) ((\/
   ((? :(excon long -> bool) -> bool) (\(y :excon long).
   (((= :atpat -> atpat -> bool) $1) (EXCONatpat $0))))) ((\/
   ((? :(patrow option -> bool) -> bool) (\(y :patrow option).
   (((= :atpat -> atpat -> bool) $1) (RECORDatpat $0)))))
   ((? :(pat -> bool) -> bool) (\(y :pat).
   (((= :atpat -> atpat -> bool) $1) (PARatpat $0))))))))))))) ((/\
   ((! :(pat -> bool) -> bool) (\(x2 :pat). ((\/
   ((? :(atpat -> bool) -> bool) (\(y :atpat).
   (((= :pat -> pat -> bool) $1) (ATPATpat $0))))) ((\/
   ((? :(con long -> bool) -> bool) (\(y :con long).
   ((? :(atpat -> bool) -> bool) (\(y' :atpat).
   (((= :pat -> pat -> bool) $2) ((CONpat $1) $0))))))) ((\/
   ((? :(excon long -> bool) -> bool) (\(y :excon long).
   ((? :(atpat -> bool) -> bool) (\(y' :atpat).
   (((= :pat -> pat -> bool) $2) ((EXCONpat $1) $0)))))))
   ((? :(var -> bool) -> bool) (\(y :var). ((? :(pat -> bool) -> bool)
   (\(y' :pat). (((= :pat -> pat -> bool) $2) ((LAYEREDpat $1)
   $0)))))))))))) ((/\ ((! :(patrow -> bool) -> bool) (\(x3 :patrow).
   ((\/ (((= :patrow -> patrow -> bool) $0) DOTDOTDOT))
   ((? :(label -> bool) -> bool) (\(y :label).
   ((? :(pat -> bool) -> bool) (\(y'' :pat).
   ((? :(patrow option -> bool) -> bool) (\(y' :patrow option).
   (((= :patrow -> patrow -> bool) $3) (((PATROW $2) $1)
   $0)))))))))))) ((! :(patrow option -> bool) -> bool)
   (\(x4 :patrow option). ((\/
   (((= :patrow option -> patrow option -> bool) $0)
   (NONE :patrow option))) ((? :(patrow -> bool) -> bool)
   (\(y :patrow). (((= :patrow option -> patrow option -> bool) $1)
   ((SOME :patrow -> patrow option) $0))))))))))`),
 ((pat_one_one),
  [],
  `((/\ ((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   ((! :(scon -> bool) -> bool) (\(x1' :scon).
   (((= :bool -> bool -> bool) (((= :atpat -> atpat -> bool)
   (SCONatpat $1)) (SCONatpat $0))) (((= :scon -> scon -> bool) $1)
   $0))))))) ((/\ ((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(var -> bool) -> bool) (\(x1' :var).
   (((= :bool -> bool -> bool) (((= :atpat -> atpat -> bool) (VARatpat
   $1)) (VARatpat $0))) (((= :var -> var -> bool) $1) $0))))))) ((/\
   ((! :(con long -> bool) -> bool) (\(x1 :con long).
   ((! :(con long -> bool) -> bool) (\(x1' :con long).
   (((= :bool -> bool -> bool) (((= :atpat -> atpat -> bool) (CONatpat
   $1)) (CONatpat $0))) (((= :con long -> con long -> bool) $1)
   $0))))))) ((/\ ((! :(excon long -> bool) -> bool)
   (\(x1 :excon long). ((! :(excon long -> bool) -> bool)
   (\(x1' :excon long). (((= :bool -> bool -> bool)
   (((= :atpat -> atpat -> bool) (EXCONatpat $1)) (EXCONatpat $0)))
   (((= :excon long -> excon long -> bool) $1) $0))))))) ((/\
   ((! :(patrow option -> bool) -> bool) (\(x1 :patrow option).
   ((! :(patrow option -> bool) -> bool) (\(x1' :patrow option).
   (((= :bool -> bool -> bool) (((= :atpat -> atpat -> bool)
   (RECORDatpat $1)) (RECORDatpat $0)))
   (((= :patrow option -> patrow option -> bool) $1) $0)))))))
   ((! :(pat -> bool) -> bool) (\(x1 :pat).
   ((! :(pat -> bool) -> bool) (\(x1' :pat).
   (((= :bool -> bool -> bool) (((= :atpat -> atpat -> bool) (PARatpat
   $1)) (PARatpat $0))) (((= :pat -> pat -> bool) $1) $0))))))))))))
   ((/\ ((/\ ((! :(atpat -> bool) -> bool) (\(x1 :atpat).
   ((! :(atpat -> bool) -> bool) (\(x1' :atpat).
   (((= :bool -> bool -> bool) (((= :pat -> pat -> bool) (ATPATpat
   $1)) (ATPATpat $0))) (((= :atpat -> atpat -> bool) $1) $0)))))))
   ((/\ ((! :(con long -> bool) -> bool) (\(x1 :con long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   ((! :(con long -> bool) -> bool) (\(x1' :con long).
   ((! :(atpat -> bool) -> bool) (\(x2' :atpat).
   (((= :bool -> bool -> bool) (((= :pat -> pat -> bool) ((CONpat $3)
   $2)) ((CONpat $1) $0))) ((/\ (((= :con long -> con long -> bool)
   $3) $1)) (((= :atpat -> atpat -> bool) $2) $0)))))))))))) ((/\
   ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   ((! :(excon long -> bool) -> bool) (\(x1' :excon long).
   ((! :(atpat -> bool) -> bool) (\(x2' :atpat).
   (((= :bool -> bool -> bool) (((= :pat -> pat -> bool) ((EXCONpat
   $3) $2)) ((EXCONpat $1) $0))) ((/\
   (((= :excon long -> excon long -> bool) $3) $1))
   (((= :atpat -> atpat -> bool) $2) $0))))))))))))
   ((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(pat -> bool) -> bool) (\(x2 :pat).
   ((! :(var -> bool) -> bool) (\(x1' :var).
   ((! :(pat -> bool) -> bool) (\(x2' :pat).
   (((= :bool -> bool -> bool) (((= :pat -> pat -> bool) ((LAYEREDpat
   $3) $2)) ((LAYEREDpat $1) $0))) ((/\ (((= :var -> var -> bool) $3)
   $1)) (((= :pat -> pat -> bool) $2) $0))))))))))))))) ((/\
   ((! :(label -> bool) -> bool) (\(x1 :label).
   ((! :(pat -> bool) -> bool) (\(x2 :pat).
   ((! :(patrow option -> bool) -> bool) (\(x3 :patrow option).
   ((! :(label -> bool) -> bool) (\(x1' :label).
   ((! :(pat -> bool) -> bool) (\(x2' :pat).
   ((! :(patrow option -> bool) -> bool) (\(x3' :patrow option).
   (((= :bool -> bool -> bool) (((= :patrow -> patrow -> bool)
   (((PATROW $5) $4) $3)) (((PATROW $2) $1) $0))) ((/\
   (((= :label -> label -> bool) $5) $2)) ((/\
   (((= :pat -> pat -> bool) $4) $1))
   (((= :patrow option -> patrow option -> bool) $3)
   $0))))))))))))))))) ((! :(patrow -> bool) -> bool) (\(x1 :patrow).
   ((! :(patrow -> bool) -> bool) (\(x1' :patrow).
   (((= :bool -> bool -> bool)
   (((= :patrow option -> patrow option -> bool)
   ((SOME :patrow -> patrow option) $1))
   ((SOME :patrow -> patrow option) $0)))
   (((= :patrow -> patrow -> bool) $1) $0)))))))))`),
 ((pat_distinct),
  [],
  `((/\ ((/\ ((! :(scon -> bool) -> bool) (\(x1' :scon). (~
   (((= :atpat -> atpat -> bool) WILDCARDatpat) (SCONatpat $0))))))
   ((/\ ((! :(var -> bool) -> bool) (\(x1' :var). (~
   (((= :atpat -> atpat -> bool) WILDCARDatpat) (VARatpat $0))))))
   ((/\ ((! :(con long -> bool) -> bool) (\(x1' :con long). (~
   (((= :atpat -> atpat -> bool) WILDCARDatpat) (CONatpat $0))))))
   ((/\ ((! :(excon long -> bool) -> bool) (\(x1' :excon long). (~
   (((= :atpat -> atpat -> bool) WILDCARDatpat) (EXCONatpat $0))))))
   ((/\ ((! :(patrow option -> bool) -> bool) (\(x1' :patrow option).
   (~ (((= :atpat -> atpat -> bool) WILDCARDatpat) (RECORDatpat
   $0)))))) ((/\ ((! :(pat -> bool) -> bool) (\(x1' :pat). (~
   (((= :atpat -> atpat -> bool) WILDCARDatpat) (PARatpat $0))))))
   ((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   ((! :(var -> bool) -> bool) (\(x1' :var). (~
   (((= :atpat -> atpat -> bool) (SCONatpat $1)) (VARatpat $0))))))))
   ((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   ((! :(con long -> bool) -> bool) (\(x1' :con long). (~
   (((= :atpat -> atpat -> bool) (SCONatpat $1)) (CONatpat $0))))))))
   ((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   ((! :(excon long -> bool) -> bool) (\(x1' :excon long). (~
   (((= :atpat -> atpat -> bool) (SCONatpat $1)) (EXCONatpat
   $0)))))))) ((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   ((! :(patrow option -> bool) -> bool) (\(x1' :patrow option). (~
   (((= :atpat -> atpat -> bool) (SCONatpat $1)) (RECORDatpat
   $0)))))))) ((/\ ((! :(scon -> bool) -> bool) (\(x1 :scon).
   ((! :(pat -> bool) -> bool) (\(x1' :pat). (~
   (((= :atpat -> atpat -> bool) (SCONatpat $1)) (PARatpat $0))))))))
   ((/\ ((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(con long -> bool) -> bool) (\(x1' :con long). (~
   (((= :atpat -> atpat -> bool) (VARatpat $1)) (CONatpat $0))))))))
   ((/\ ((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(excon long -> bool) -> bool) (\(x1' :excon long). (~
   (((= :atpat -> atpat -> bool) (VARatpat $1)) (EXCONatpat $0))))))))
   ((/\ ((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(patrow option -> bool) -> bool) (\(x1' :patrow option). (~
   (((= :atpat -> atpat -> bool) (VARatpat $1)) (RECORDatpat
   $0)))))))) ((/\ ((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(pat -> bool) -> bool) (\(x1' :pat). (~
   (((= :atpat -> atpat -> bool) (VARatpat $1)) (PARatpat $0))))))))
   ((/\ ((! :(con long -> bool) -> bool) (\(x1 :con long).
   ((! :(excon long -> bool) -> bool) (\(x1' :excon long). (~
   (((= :atpat -> atpat -> bool) (CONatpat $1)) (EXCONatpat $0))))))))
   ((/\ ((! :(con long -> bool) -> bool) (\(x1 :con long).
   ((! :(patrow option -> bool) -> bool) (\(x1' :patrow option). (~
   (((= :atpat -> atpat -> bool) (CONatpat $1)) (RECORDatpat
   $0)))))))) ((/\ ((! :(con long -> bool) -> bool) (\(x1 :con long).
   ((! :(pat -> bool) -> bool) (\(x1' :pat). (~
   (((= :atpat -> atpat -> bool) (CONatpat $1)) (PARatpat $0))))))))
   ((/\ ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   ((! :(patrow option -> bool) -> bool) (\(x1' :patrow option). (~
   (((= :atpat -> atpat -> bool) (EXCONatpat $1)) (RECORDatpat
   $0)))))))) ((/\ ((! :(excon long -> bool) -> bool)
   (\(x1 :excon long). ((! :(pat -> bool) -> bool) (\(x1' :pat). (~
   (((= :atpat -> atpat -> bool) (EXCONatpat $1)) (PARatpat $0))))))))
   ((! :(patrow option -> bool) -> bool) (\(x1 :patrow option).
   ((! :(pat -> bool) -> bool) (\(x1' :pat). (~
   (((= :atpat -> atpat -> bool) (RECORDatpat $1)) (PARatpat
   $0)))))))))))))))))))))))))))) ((/\ ((/\
   ((! :(atpat -> bool) -> bool) (\(x1 :atpat).
   ((! :(con long -> bool) -> bool) (\(x1' :con long).
   ((! :(atpat -> bool) -> bool) (\(x2' :atpat). (~
   (((= :pat -> pat -> bool) (ATPATpat $2)) ((CONpat $1) $0))))))))))
   ((/\ ((! :(atpat -> bool) -> bool) (\(x1 :atpat).
   ((! :(excon long -> bool) -> bool) (\(x1' :excon long).
   ((! :(atpat -> bool) -> bool) (\(x2' :atpat). (~
   (((= :pat -> pat -> bool) (ATPATpat $2)) ((EXCONpat $1)
   $0)))))))))) ((/\ ((! :(atpat -> bool) -> bool) (\(x1 :atpat).
   ((! :(var -> bool) -> bool) (\(x1' :var).
   ((! :(pat -> bool) -> bool) (\(x2' :pat). (~
   (((= :pat -> pat -> bool) (ATPATpat $2)) ((LAYEREDpat $1)
   $0)))))))))) ((/\ ((! :(con long -> bool) -> bool)
   (\(x1 :con long). ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   ((! :(excon long -> bool) -> bool) (\(x1' :excon long).
   ((! :(atpat -> bool) -> bool) (\(x2' :atpat). (~
   (((= :pat -> pat -> bool) ((CONpat $3) $2)) ((EXCONpat $1)
   $0)))))))))))) ((/\ ((! :(con long -> bool) -> bool)
   (\(x1 :con long). ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   ((! :(var -> bool) -> bool) (\(x1' :var).
   ((! :(pat -> bool) -> bool) (\(x2' :pat). (~
   (((= :pat -> pat -> bool) ((CONpat $3) $2)) ((LAYEREDpat $1)
   $0)))))))))))) ((! :(excon long -> bool) -> bool)
   (\(x1 :excon long). ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   ((! :(var -> bool) -> bool) (\(x1' :var).
   ((! :(pat -> bool) -> bool) (\(x2' :pat). (~
   (((= :pat -> pat -> bool) ((EXCONpat $3) $2)) ((LAYEREDpat $1)
   $0))))))))))))))))) ((/\ ((! :(label -> bool) -> bool)
   (\(x1' :label). ((! :(pat -> bool) -> bool) (\(x2' :pat).
   ((! :(patrow option -> bool) -> bool) (\(x3' :patrow option). (~
   (((= :patrow -> patrow -> bool) DOTDOTDOT) (((PATROW $2) $1)
   $0)))))))))) ((! :(patrow -> bool) -> bool) (\(x1' :patrow). (~
   (((= :patrow option -> patrow option -> bool)
   (NONE :patrow option)) ((SOME :patrow -> patrow option)
   $0))))))))`),
 ((pat_unique),
  [],
  `((! :('a -> bool) -> bool) (\(WILDCARDatpat_case :'a).
   ((! :((scon -> 'a) -> bool) -> bool)
   (\(SCONatpat_case :scon -> 'a). ((! :((var -> 'a) -> bool) -> bool)
   (\(VARatpat_case :var -> 'a).
   ((! :((con long -> 'a) -> bool) -> bool)
   (\(CONatpat_case :con long -> 'a).
   ((! :((excon long -> 'a) -> bool) -> bool)
   (\(EXCONatpat_case :excon long -> 'a).
   ((! :(('d -> patrow option -> 'a) -> bool) -> bool)
   (\(RECORDatpat_case :'d -> patrow option -> 'a).
   ((! :(('b -> pat -> 'a) -> bool) -> bool)
   (\(PARatpat_case :'b -> pat -> 'a).
   ((! :(('a -> atpat -> 'b) -> bool) -> bool)
   (\(ATPATpat_case :'a -> atpat -> 'b).
   ((! :(('a -> con long -> atpat -> 'b) -> bool) -> bool)
   (\(CONpat_case :'a -> con long -> atpat -> 'b).
   ((! :(('a -> excon long -> atpat -> 'b) -> bool) -> bool)
   (\(EXCONpat_case :'a -> excon long -> atpat -> 'b).
   ((! :(('b -> var -> pat -> 'b) -> bool) -> bool)
   (\(LAYEREDpat_case :'b -> var -> pat -> 'b).
   ((! :('c -> bool) -> bool) (\(DOTDOTDOT_case :'c).
   ((! :(('b -> 'd -> label -> pat -> patrow option -> 'c) -> bool) ->
        bool)
   (\(PATROW_case :'b -> 'd -> label -> pat -> patrow option -> 'c).
   ((! :('d -> bool) -> bool)
   (\(atpat_pat_patrow_NONE_patrow_case :'d).
   ((! :(('c -> patrow -> 'd) -> bool) -> bool)
   (\(atpat_pat_patrow_SOME_patrow_case :'c -> patrow -> 'd).
   ((! :((atpat -> 'a) -> bool) -> bool) (\(fn1 :atpat -> 'a).
   ((! :((pat -> 'b) -> bool) -> bool) (\(fn2 :pat -> 'b).
   ((! :((patrow -> 'c) -> bool) -> bool) (\(fn3 :patrow -> 'c).
   ((! :((patrow option -> 'd) -> bool) -> bool)
   (\(fn4 :patrow option -> 'd). ((! :((atpat -> 'a) -> bool) -> bool)
   (\(fn1' :atpat -> 'a). ((! :((pat -> 'b) -> bool) -> bool)
   (\(fn2' :pat -> 'b). ((! :((patrow -> 'c) -> bool) -> bool)
   (\(fn3' :patrow -> 'c).
   ((! :((patrow option -> 'd) -> bool) -> bool)
   (\(fn4' :patrow option -> 'd). ((==> ((/\ (((= :'a -> 'a -> bool)
   ($7 WILDCARDatpat)) $22)) ((/\ ((! :(scon -> bool) -> bool)
   (\(y :scon). (((= :'a -> 'a -> bool) ($8 (SCONatpat $0))) ($22
   $0))))) ((/\ ((! :(var -> bool) -> bool) (\(y :var).
   (((= :'a -> 'a -> bool) ($8 (VARatpat $0))) ($21 $0))))) ((/\
   ((! :(con long -> bool) -> bool) (\(y :con long).
   (((= :'a -> 'a -> bool) ($8 (CONatpat $0))) ($20 $0))))) ((/\
   ((! :(excon long -> bool) -> bool) (\(y :excon long).
   (((= :'a -> 'a -> bool) ($8 (EXCONatpat $0))) ($19 $0))))) ((/\
   ((! :(patrow option -> bool) -> bool) (\(y :patrow option).
   (((= :'a -> 'a -> bool) ($8 (RECORDatpat $0))) (($18 ($5 $0))
   $0))))) ((/\ ((! :(pat -> bool) -> bool) (\(y :pat).
   (((= :'a -> 'a -> bool) ($8 (PARatpat $0))) (($17 ($7 $0)) $0)))))
   ((/\ ((! :(atpat -> bool) -> bool) (\(y :atpat).
   (((= :'b -> 'b -> bool) ($7 (ATPATpat $0))) (($16 ($8 $0)) $0)))))
   ((/\ ((! :(con long -> bool) -> bool) (\(y :con long).
   ((! :(atpat -> bool) -> bool) (\(y''''' :atpat).
   (((= :'b -> 'b -> bool) ($8 ((CONpat $1) $0))) ((($16 ($9 $0)) $1)
   $0))))))) ((/\ ((! :(excon long -> bool) -> bool)
   (\(y :excon long). ((! :(atpat -> bool) -> bool) (\(y'''' :atpat).
   (((= :'b -> 'b -> bool) ($8 ((EXCONpat $1) $0))) ((($15 ($9 $0))
   $1) $0))))))) ((/\ ((! :(var -> bool) -> bool) (\(y :var).
   ((! :(pat -> bool) -> bool) (\(y''' :pat). (((= :'b -> 'b -> bool)
   ($8 ((LAYEREDpat $1) $0))) ((($14 ($8 $0)) $1) $0))))))) ((/\
   (((= :'c -> 'c -> bool) ($5 DOTDOTDOT)) $11)) ((/\
   ((! :(label -> bool) -> bool) (\(y :label).
   ((! :(pat -> bool) -> bool) (\(y'' :pat).
   ((! :(patrow option -> bool) -> bool) (\(y' :patrow option).
   (((= :'c -> 'c -> bool) ($8 (((PATROW $2) $1) $0))) ((((($13 ($9
   $1)) ($7 $0)) $2) $1) $0))))))))) ((/\ (((= :'d -> 'd -> bool) ($4
   (NONE :patrow option))) $9)) ((! :(patrow -> bool) -> bool)
   (\(y :patrow). (((= :'d -> 'd -> bool) ($5
   ((SOME :patrow -> patrow option) $0))) (($9 ($6 $0))
   $0))))))))))))))))))) ((==> ((/\ (((= :'a -> 'a -> bool) ($3
   WILDCARDatpat)) $22)) ((/\ ((! :(scon -> bool) -> bool)
   (\(y :scon). (((= :'a -> 'a -> bool) ($4 (SCONatpat $0))) ($22
   $0))))) ((/\ ((! :(var -> bool) -> bool) (\(y :var).
   (((= :'a -> 'a -> bool) ($4 (VARatpat $0))) ($21 $0))))) ((/\
   ((! :(con long -> bool) -> bool) (\(y :con long).
   (((= :'a -> 'a -> bool) ($4 (CONatpat $0))) ($20 $0))))) ((/\
   ((! :(excon long -> bool) -> bool) (\(y :excon long).
   (((= :'a -> 'a -> bool) ($4 (EXCONatpat $0))) ($19 $0))))) ((/\
   ((! :(patrow option -> bool) -> bool) (\(y :patrow option).
   (((= :'a -> 'a -> bool) ($4 (RECORDatpat $0))) (($18 ($1 $0))
   $0))))) ((/\ ((! :(pat -> bool) -> bool) (\(y :pat).
   (((= :'a -> 'a -> bool) ($4 (PARatpat $0))) (($17 ($3 $0)) $0)))))
   ((/\ ((! :(atpat -> bool) -> bool) (\(y :atpat).
   (((= :'b -> 'b -> bool) ($3 (ATPATpat $0))) (($16 ($4 $0)) $0)))))
   ((/\ ((! :(con long -> bool) -> bool) (\(y :con long).
   ((! :(atpat -> bool) -> bool) (\(y''''' :atpat).
   (((= :'b -> 'b -> bool) ($4 ((CONpat $1) $0))) ((($16 ($5 $0)) $1)
   $0))))))) ((/\ ((! :(excon long -> bool) -> bool)
   (\(y :excon long). ((! :(atpat -> bool) -> bool) (\(y'''' :atpat).
   (((= :'b -> 'b -> bool) ($4 ((EXCONpat $1) $0))) ((($15 ($5 $0))
   $1) $0))))))) ((/\ ((! :(var -> bool) -> bool) (\(y :var).
   ((! :(pat -> bool) -> bool) (\(y''' :pat). (((= :'b -> 'b -> bool)
   ($4 ((LAYEREDpat $1) $0))) ((($14 ($4 $0)) $1) $0))))))) ((/\
   (((= :'c -> 'c -> bool) ($1 DOTDOTDOT)) $11)) ((/\
   ((! :(label -> bool) -> bool) (\(y :label).
   ((! :(pat -> bool) -> bool) (\(y'' :pat).
   ((! :(patrow option -> bool) -> bool) (\(y' :patrow option).
   (((= :'c -> 'c -> bool) ($4 (((PATROW $2) $1) $0))) ((((($13 ($5
   $1)) ($3 $0)) $2) $1) $0))))))))) ((/\ (((= :'d -> 'd -> bool) ($0
   (NONE :patrow option))) $9)) ((! :(patrow -> bool) -> bool)
   (\(y :patrow). (((= :'d -> 'd -> bool) ($1
   ((SOME :patrow -> patrow option) $0))) (($9 ($2 $0))
   $0))))))))))))))))))) ((/\
   (((= :(atpat -> 'a) -> (atpat -> 'a) -> bool) $7) $3)) ((/\
   (((= :(pat -> 'b) -> (pat -> 'b) -> bool) $6) $2)) ((/\
   (((= :(patrow -> 'c) -> (patrow -> 'c) -> bool) $5) $1))
   (((= :(patrow option -> 'd) -> (patrow option -> 'd) -> bool) $4)
   $0))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((pat_induct),
  [],
  `((! :((atpat -> bool) -> bool) -> bool)
   (\(atpat_Prop :atpat -> bool).
   ((! :((pat -> bool) -> bool) -> bool) (\(pat_Prop :pat -> bool).
   ((! :((patrow -> bool) -> bool) -> bool)
   (\(patrow_Prop :patrow -> bool).
   ((! :((patrow option -> bool) -> bool) -> bool)
   (\(patrow_option_atpat_pat_patrow_Prop :patrow option -> bool).
   ((==> ((/\ ($3 WILDCARDatpat)) ((/\ ((! :(scon -> bool) -> bool)
   (\(y :scon). ($4 (SCONatpat $0))))) ((/\
   ((! :(var -> bool) -> bool) (\(y :var). ($4 (VARatpat $0))))) ((/\
   ((! :(con long -> bool) -> bool) (\(y :con long). ($4 (CONatpat
   $0))))) ((/\ ((! :(excon long -> bool) -> bool) (\(y :excon long).
   ($4 (EXCONatpat $0))))) ((/\ ((! :(patrow option -> bool) -> bool)
   (\(y :patrow option). ((==> ($1 $0)) ($4 (RECORDatpat $0)))))) ((/\
   ((! :(pat -> bool) -> bool) (\(y :pat). ((==> ($3 $0)) ($4
   (PARatpat $0)))))) ((/\ ((! :(atpat -> bool) -> bool) (\(y :atpat).
   ((==> ($4 $0)) ($3 (ATPATpat $0)))))) ((/\
   ((! :(con long -> bool) -> bool) (\(y :con long).
   ((! :(atpat -> bool) -> bool) (\(y''''' :atpat). ((==> ($5 $0)) ($4
   ((CONpat $1) $0)))))))) ((/\ ((! :(excon long -> bool) -> bool)
   (\(y :excon long). ((! :(atpat -> bool) -> bool) (\(y'''' :atpat).
   ((==> ($5 $0)) ($4 ((EXCONpat $1) $0)))))))) ((/\
   ((! :(var -> bool) -> bool) (\(y :var). ((! :(pat -> bool) -> bool)
   (\(y''' :pat). ((==> ($4 $0)) ($4 ((LAYEREDpat $1) $0)))))))) ((/\
   ($1 DOTDOTDOT)) ((/\ ((! :(label -> bool) -> bool) (\(y :label).
   ((! :(pat -> bool) -> bool) (\(y'' :pat).
   ((! :(patrow option -> bool) -> bool) (\(y' :patrow option). ((==>
   ($5 $1)) ((==> ($3 $0)) ($4 (((PATROW $2) $1) $0))))))))))) ((/\
   ($0 (NONE :patrow option))) ((! :(patrow -> bool) -> bool)
   (\(y :patrow). ((==> ($2 $0)) ($1 ((SOME :patrow -> patrow option)
   $0)))))))))))))))))))) ((/\ ((! :(atpat -> bool) -> bool)
   (\(x1 :atpat). ($4 $0)))) ((/\ ((! :(pat -> bool) -> bool)
   (\(x2 :pat). ($3 $0)))) ((/\ ((! :(patrow -> bool) -> bool)
   (\(x3 :patrow). ($2 $0)))) ((! :(patrow option -> bool) -> bool)
   (\(x4 :patrow option). ($1 $0)))))))))))))))`),
 ((pat_existence),
  [],
  `((! :('a -> bool) -> bool) (\(WILDCARDatpat_case :'a).
   ((! :((scon -> 'a) -> bool) -> bool)
   (\(SCONatpat_case :scon -> 'a). ((! :((var -> 'a) -> bool) -> bool)
   (\(VARatpat_case :var -> 'a).
   ((! :((con long -> 'a) -> bool) -> bool)
   (\(CONatpat_case :con long -> 'a).
   ((! :((excon long -> 'a) -> bool) -> bool)
   (\(EXCONatpat_case :excon long -> 'a).
   ((! :(('d -> patrow option -> 'a) -> bool) -> bool)
   (\(RECORDatpat_case :'d -> patrow option -> 'a).
   ((! :(('b -> pat -> 'a) -> bool) -> bool)
   (\(PARatpat_case :'b -> pat -> 'a).
   ((! :(('a -> atpat -> 'b) -> bool) -> bool)
   (\(ATPATpat_case :'a -> atpat -> 'b).
   ((! :(('a -> con long -> atpat -> 'b) -> bool) -> bool)
   (\(CONpat_case :'a -> con long -> atpat -> 'b).
   ((! :(('a -> excon long -> atpat -> 'b) -> bool) -> bool)
   (\(EXCONpat_case :'a -> excon long -> atpat -> 'b).
   ((! :(('b -> var -> pat -> 'b) -> bool) -> bool)
   (\(LAYEREDpat_case :'b -> var -> pat -> 'b).
   ((! :('c -> bool) -> bool) (\(DOTDOTDOT_case :'c).
   ((! :(('b -> 'd -> label -> pat -> patrow option -> 'c) -> bool) ->
        bool)
   (\(PATROW_case :'b -> 'd -> label -> pat -> patrow option -> 'c).
   ((! :('d -> bool) -> bool)
   (\(atpat_pat_patrow_NONE_patrow_case :'d).
   ((! :(('c -> patrow -> 'd) -> bool) -> bool)
   (\(atpat_pat_patrow_SOME_patrow_case :'c -> patrow -> 'd).
   ((? :((atpat -> 'a) -> bool) -> bool) (\(y :atpat -> 'a).
   ((? :((pat -> 'b) -> bool) -> bool) (\(y''' :pat -> 'b).
   ((? :((patrow -> 'c) -> bool) -> bool) (\(y'' :patrow -> 'c).
   ((? :((patrow option -> 'd) -> bool) -> bool)
   (\(y' :patrow option -> 'd). ((/\ (((= :'a -> 'a -> bool) ($3
   WILDCARDatpat)) $18)) ((/\ ((! :(scon -> bool) -> bool)
   (\(x1 :scon). (((= :'a -> 'a -> bool) ($4 (SCONatpat $0))) ($18
   $0))))) ((/\ ((! :(var -> bool) -> bool) (\(x1 :var).
   (((= :'a -> 'a -> bool) ($4 (VARatpat $0))) ($17 $0))))) ((/\
   ((! :(con long -> bool) -> bool) (\(x1 :con long).
   (((= :'a -> 'a -> bool) ($4 (CONatpat $0))) ($16 $0))))) ((/\
   ((! :(excon long -> bool) -> bool) (\(x1 :excon long).
   (((= :'a -> 'a -> bool) ($4 (EXCONatpat $0))) ($15 $0))))) ((/\
   ((! :(patrow option -> bool) -> bool) (\(x1 :patrow option).
   (((= :'a -> 'a -> bool) ($4 (RECORDatpat $0))) (($14 ($1 $0))
   $0))))) ((/\ ((! :(pat -> bool) -> bool) (\(x1 :pat).
   (((= :'a -> 'a -> bool) ($4 (PARatpat $0))) (($13 ($3 $0)) $0)))))
   ((/\ ((! :(atpat -> bool) -> bool) (\(x1 :atpat).
   (((= :'b -> 'b -> bool) ($3 (ATPATpat $0))) (($12 ($4 $0)) $0)))))
   ((/\ ((! :(con long -> bool) -> bool) (\(x1 :con long).
   ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :'b -> 'b -> bool) ($4 ((CONpat $1) $0))) ((($12 ($5 $0)) $1)
   $0))))))) ((/\ ((! :(excon long -> bool) -> bool)
   (\(x1 :excon long). ((! :(atpat -> bool) -> bool) (\(x2 :atpat).
   (((= :'b -> 'b -> bool) ($4 ((EXCONpat $1) $0))) ((($11 ($5 $0))
   $1) $0))))))) ((/\ ((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(pat -> bool) -> bool) (\(x2 :pat). (((= :'b -> 'b -> bool)
   ($4 ((LAYEREDpat $1) $0))) ((($10 ($4 $0)) $1) $0))))))) ((/\
   (((= :'c -> 'c -> bool) ($1 DOTDOTDOT)) $7)) ((/\
   ((! :(label -> bool) -> bool) (\(x1 :label).
   ((! :(pat -> bool) -> bool) (\(x2 :pat).
   ((! :(patrow option -> bool) -> bool) (\(x3 :patrow option).
   (((= :'c -> 'c -> bool) ($4 (((PATROW $2) $1) $0))) ((((($9 ($5
   $1)) ($3 $0)) $2) $1) $0))))))))) ((/\ (((= :'d -> 'd -> bool) ($0
   (NONE :patrow option))) $5)) ((! :(patrow -> bool) -> bool)
   (\(x1 :patrow). (((= :'d -> 'd -> bool) ($1
   ((SOME :patrow -> patrow option) $0))) (($5 ($2 $0))
   $0))))))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow_Axiom),
  [],
  `((! :('a -> bool) -> bool) (\(e0 :'a).
   ((! :((scon -> 'a) -> bool) -> bool) (\(f0 :scon -> 'a).
   ((! :((var -> 'a) -> bool) -> bool) (\(f1 :var -> 'a).
   ((! :((con long -> 'a) -> bool) -> bool) (\(f2 :con long -> 'a).
   ((! :((excon long -> 'a) -> bool) -> bool)
   (\(f3 :excon long -> 'a).
   ((! :(('a ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         'a) -> bool) -> bool)
   (\(f4 :'a ->
          joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
          'a).
   ((! :(('a ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         'a) -> bool) -> bool)
   (\(f5 :'a ->
          joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
          'a).
   ((! :(('a ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         'a) -> bool) -> bool)
   (\(f6 :'a ->
          joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
          'a).
   ((! :(('a -> con long ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         'a) -> bool) -> bool)
   (\(f7 :'a -> con long ->
          joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
          'a).
   ((! :(('a -> excon long ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         'a) -> bool) -> bool)
   (\(f8 :'a -> excon long ->
          joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
          'a).
   ((! :(('a -> var ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         'a) -> bool) -> bool)
   (\(f9 :'a -> var ->
          joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
          'a). ((! :('a -> bool) -> bool) (\(e1 :'a).
   ((! :(('a -> 'a -> label ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         'a) -> bool) -> bool)
   (\(f10 :'a -> 'a -> label ->
           joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
           joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
           'a). ((! :('a -> bool) -> bool) (\(e2 :'a).
   ((! :(('a ->
         joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
         'a) -> bool) -> bool)
   (\(f11 :'a ->
           joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
           'a).
   ((?! :((joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
          'a) -> bool) -> bool)
   (\(fn :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
          'a). ((/\ (((= :'a -> 'a -> bool) ($0
   JOINT_int_WILDCARDatpat)) $15)) ((/\ ((! :(scon -> bool) -> bool)
   (\(s :scon). (((= :'a -> 'a -> bool) ($1 (JOINT_int_SCONatpat $0)))
   ($15 $0))))) ((/\ ((! :(var -> bool) -> bool) (\(v' :var).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_VARatpat $0))) ($14 $0)))))
   ((/\ ((! :(con long -> bool) -> bool) (\(l :con long).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_CONatpat $0))) ($13 $0)))))
   ((/\ ((! :(excon long -> bool) -> bool) (\(l :excon long).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_EXCONatpat $0))) ($12
   $0))))) ((/\
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_RECORDatpat $0))) (($11 ($1
   $0)) $0))))) ((/\
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_PARatpat $0))) (($10 ($1
   $0)) $0))))) ((/\
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_ATPATpat $0))) (($9 ($1 $0))
   $0))))) ((/\ ((! :(con long -> bool) -> bool) (\(l' :con long).
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_CONpat $1) $0))) ((($9 ($2
   $0)) $1) $0))))))) ((/\ ((! :(excon long -> bool) -> bool)
   (\(l' :excon long).
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_EXCONpat $1) $0))) ((($8
   ($2 $0)) $1) $0))))))) ((/\ ((! :(var -> bool) -> bool)
   (\(v' :var).
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_LAYEREDpat $1) $0))) ((($7
   ($2 $0)) $1) $0))))))) ((/\ (((= :'a -> 'a -> bool) ($0
   JOINT_int_DOTDOTDOT)) $4)) ((/\ ((! :(label -> bool) -> bool)
   (\(l' :label).
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j1 :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j2 :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :'a -> 'a -> bool) ($3 (((JOINT_int_PATROW $2) $1) $0)))
   ((((($6 ($3 $1)) ($3 $0)) $2) $1) $0))))))))) ((/\
   (((= :'a -> 'a -> bool) ($0
   JOINT_int_atpat_pat_patrow_NONE_patrow)) $2))
   ((! :(joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow ->
        bool) -> bool)
   (\(j :joint_ty_atpat_pat_patrow_patrow_option_atpat_pat_patrow).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_atpat_pat_patrow_SOME_patrow
   $0))) (($2 ($1 $0))
   $0))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((exbind_cases),
  [],
  `((/\ ((! :(exbind -> bool) -> bool) (\(x1 :exbind). ((\/
   ((? :(excon -> bool) -> bool) (\(y :excon).
   ((? :(exbind option -> bool) -> bool) (\(y' :exbind option).
   (((= :exbind -> exbind -> bool) $2) ((EXBIND1 $1) $0)))))))
   ((? :(excon -> bool) -> bool) (\(y :excon).
   ((? :(excon long -> bool) -> bool) (\(y'' :excon long).
   ((? :(exbind option -> bool) -> bool) (\(y' :exbind option).
   (((= :exbind -> exbind -> bool) $3) (((EXBIND2 $2) $1)
   $0)))))))))))) ((! :(exbind option -> bool) -> bool)
   (\(x2 :exbind option). ((\/
   (((= :exbind option -> exbind option -> bool) $0)
   (NONE :exbind option))) ((? :(exbind -> bool) -> bool)
   (\(y :exbind). (((= :exbind option -> exbind option -> bool) $1)
   ((SOME :exbind -> exbind option) $0))))))))`),
 ((exbind_one_one),
  [],
  `((/\ ((/\ ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(exbind option -> bool) -> bool) (\(x2 :exbind option).
   ((! :(excon -> bool) -> bool) (\(x1' :excon).
   ((! :(exbind option -> bool) -> bool) (\(x2' :exbind option).
   (((= :bool -> bool -> bool) (((= :exbind -> exbind -> bool)
   ((EXBIND1 $3) $2)) ((EXBIND1 $1) $0))) ((/\
   (((= :excon -> excon -> bool) $3) $1))
   (((= :exbind option -> exbind option -> bool) $2) $0))))))))))))
   ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(excon long -> bool) -> bool) (\(x2 :excon long).
   ((! :(exbind option -> bool) -> bool) (\(x3 :exbind option).
   ((! :(excon -> bool) -> bool) (\(x1' :excon).
   ((! :(excon long -> bool) -> bool) (\(x2' :excon long).
   ((! :(exbind option -> bool) -> bool) (\(x3' :exbind option).
   (((= :bool -> bool -> bool) (((= :exbind -> exbind -> bool)
   (((EXBIND2 $5) $4) $3)) (((EXBIND2 $2) $1) $0))) ((/\
   (((= :excon -> excon -> bool) $5) $2)) ((/\
   (((= :excon long -> excon long -> bool) $4) $1))
   (((= :exbind option -> exbind option -> bool) $3)
   $0)))))))))))))))))) ((! :(exbind -> bool) -> bool) (\(x1 :exbind).
   ((! :(exbind -> bool) -> bool) (\(x1' :exbind).
   (((= :bool -> bool -> bool)
   (((= :exbind option -> exbind option -> bool)
   ((SOME :exbind -> exbind option) $1))
   ((SOME :exbind -> exbind option) $0)))
   (((= :exbind -> exbind -> bool) $1) $0)))))))`),
 ((exbind_distinct),
  [],
  `((/\ ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(exbind option -> bool) -> bool) (\(x2 :exbind option).
   ((! :(excon -> bool) -> bool) (\(x1' :excon).
   ((! :(excon long -> bool) -> bool) (\(x2' :excon long).
   ((! :(exbind option -> bool) -> bool) (\(x3' :exbind option). (~
   (((= :exbind -> exbind -> bool) ((EXBIND1 $4) $3)) (((EXBIND2 $2)
   $1) $0)))))))))))))) ((! :(exbind -> bool) -> bool)
   (\(x1' :exbind). (~ (((= :exbind option -> exbind option -> bool)
   (NONE :exbind option)) ((SOME :exbind -> exbind option) $0))))))`),
 ((exbind_unique),
  [],
  `((! :(('b -> excon -> exbind option -> 'a) -> bool) -> bool)
   (\(EXBIND1_case :'b -> excon -> exbind option -> 'a).
   ((! :(('b -> excon -> excon long -> exbind option -> 'a) ->
        bool) -> bool)
   (\(EXBIND2_case :'b -> excon -> excon long -> exbind option -> 'a).
   ((! :('b -> bool) -> bool) (\(exbind_NONE_exbind_case :'b).
   ((! :(('a -> exbind -> 'b) -> bool) -> bool)
   (\(exbind_SOME_exbind_case :'a -> exbind -> 'b).
   ((! :((exbind -> 'a) -> bool) -> bool) (\(fn1 :exbind -> 'a).
   ((! :((exbind option -> 'b) -> bool) -> bool)
   (\(fn2 :exbind option -> 'b).
   ((! :((exbind -> 'a) -> bool) -> bool) (\(fn1' :exbind -> 'a).
   ((! :((exbind option -> 'b) -> bool) -> bool)
   (\(fn2' :exbind option -> 'b). ((==> ((/\
   ((! :(excon -> bool) -> bool) (\(y :excon).
   ((! :(exbind option -> bool) -> bool) (\(y''' :exbind option).
   (((= :'a -> 'a -> bool) ($5 ((EXBIND1 $1) $0))) ((($9 ($4 $0)) $1)
   $0))))))) ((/\ ((! :(excon -> bool) -> bool) (\(y :excon).
   ((! :(excon long -> bool) -> bool) (\(y'' :excon long).
   ((! :(exbind option -> bool) -> bool) (\(y' :exbind option).
   (((= :'a -> 'a -> bool) ($6 (((EXBIND2 $2) $1) $0))) (((($9 ($5
   $0)) $2) $1) $0))))))))) ((/\ (((= :'b -> 'b -> bool) ($2
   (NONE :exbind option))) $5)) ((! :(exbind -> bool) -> bool)
   (\(y :exbind). (((= :'b -> 'b -> bool) ($3
   ((SOME :exbind -> exbind option) $0))) (($5 ($4 $0)) $0))))))))
   ((==> ((/\ ((! :(excon -> bool) -> bool) (\(y :excon).
   ((! :(exbind option -> bool) -> bool) (\(y''' :exbind option).
   (((= :'a -> 'a -> bool) ($3 ((EXBIND1 $1) $0))) ((($9 ($2 $0)) $1)
   $0))))))) ((/\ ((! :(excon -> bool) -> bool) (\(y :excon).
   ((! :(excon long -> bool) -> bool) (\(y'' :excon long).
   ((! :(exbind option -> bool) -> bool) (\(y' :exbind option).
   (((= :'a -> 'a -> bool) ($4 (((EXBIND2 $2) $1) $0))) (((($9 ($3
   $0)) $2) $1) $0))))))))) ((/\ (((= :'b -> 'b -> bool) ($0
   (NONE :exbind option))) $5)) ((! :(exbind -> bool) -> bool)
   (\(y :exbind). (((= :'b -> 'b -> bool) ($1
   ((SOME :exbind -> exbind option) $0))) (($5 ($2 $0)) $0))))))))
   ((/\ (((= :(exbind -> 'a) -> (exbind -> 'a) -> bool) $3) $1))
   (((= :(exbind option -> 'b) -> (exbind option -> 'b) -> bool) $2)
   $0))))))))))))))))))))`),
 ((exbind_induct),
  [],
  `((! :((exbind -> bool) -> bool) -> bool)
   (\(exbind_Prop :exbind -> bool).
   ((! :((exbind option -> bool) -> bool) -> bool)
   (\(exbind_option_exbind_Prop :exbind option -> bool). ((==> ((/\
   ((! :(excon -> bool) -> bool) (\(y :excon).
   ((! :(exbind option -> bool) -> bool) (\(y''' :exbind option).
   ((==> ($2 $0)) ($3 ((EXBIND1 $1) $0)))))))) ((/\
   ((! :(excon -> bool) -> bool) (\(y :excon).
   ((! :(excon long -> bool) -> bool) (\(y'' :excon long).
   ((! :(exbind option -> bool) -> bool) (\(y' :exbind option). ((==>
   ($3 $0)) ($4 (((EXBIND2 $2) $1) $0)))))))))) ((/\ ($0
   (NONE :exbind option))) ((! :(exbind -> bool) -> bool)
   (\(y :exbind). ((==> ($2 $0)) ($1 ((SOME :exbind -> exbind option)
   $0))))))))) ((/\ ((! :(exbind -> bool) -> bool) (\(x1 :exbind). ($2
   $0)))) ((! :(exbind option -> bool) -> bool) (\(x2 :exbind option).
   ($1 $0)))))))))`),
 ((exbind_existence),
  [],
  `((! :(('b -> excon -> exbind option -> 'a) -> bool) -> bool)
   (\(EXBIND1_case :'b -> excon -> exbind option -> 'a).
   ((! :(('b -> excon -> excon long -> exbind option -> 'a) ->
        bool) -> bool)
   (\(EXBIND2_case :'b -> excon -> excon long -> exbind option -> 'a).
   ((! :('b -> bool) -> bool) (\(exbind_NONE_exbind_case :'b).
   ((! :(('a -> exbind -> 'b) -> bool) -> bool)
   (\(exbind_SOME_exbind_case :'a -> exbind -> 'b).
   ((? :((exbind -> 'a) -> bool) -> bool) (\(y :exbind -> 'a).
   ((? :((exbind option -> 'b) -> bool) -> bool)
   (\(y' :exbind option -> 'b). ((/\ ((! :(excon -> bool) -> bool)
   (\(x1 :excon). ((! :(exbind option -> bool) -> bool)
   (\(x2 :exbind option). (((= :'a -> 'a -> bool) ($3 ((EXBIND1 $1)
   $0))) ((($7 ($2 $0)) $1) $0))))))) ((/\
   ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(excon long -> bool) -> bool) (\(x2 :excon long).
   ((! :(exbind option -> bool) -> bool) (\(x3 :exbind option).
   (((= :'a -> 'a -> bool) ($4 (((EXBIND2 $2) $1) $0))) (((($7 ($3
   $0)) $2) $1) $0))))))))) ((/\ (((= :'b -> 'b -> bool) ($0
   (NONE :exbind option))) $3)) ((! :(exbind -> bool) -> bool)
   (\(x1 :exbind). (((= :'b -> 'b -> bool) ($1
   ((SOME :exbind -> exbind option) $0))) (($3 ($2 $0))
   $0)))))))))))))))))))`),
 ((joint_ty_exbind_exbind_option_exbind_Axiom),
  [],
  `((! :(('a -> excon -> joint_ty_exbind_exbind_option_exbind ->
         'a) -> bool) -> bool)
   (\(f0 :'a -> excon -> joint_ty_exbind_exbind_option_exbind -> 'a).
   ((! :(('a -> excon -> excon long ->
         joint_ty_exbind_exbind_option_exbind -> 'a) -> bool) -> bool)
   (\(f1 :'a -> excon -> excon long ->
          joint_ty_exbind_exbind_option_exbind -> 'a).
   ((! :('a -> bool) -> bool) (\(e :'a).
   ((! :(('a -> joint_ty_exbind_exbind_option_exbind -> 'a) ->
        bool) -> bool)
   (\(f2 :'a -> joint_ty_exbind_exbind_option_exbind -> 'a).
   ((?! :((joint_ty_exbind_exbind_option_exbind -> 'a) -> bool) ->
         bool) (\(fn :joint_ty_exbind_exbind_option_exbind -> 'a).
   ((/\ ((! :(excon -> bool) -> bool) (\(e' :excon).
   ((! :(joint_ty_exbind_exbind_option_exbind -> bool) -> bool)
   (\(j :joint_ty_exbind_exbind_option_exbind).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_EXBIND1 $1) $0))) ((($6 ($2
   $0)) $1) $0))))))) ((/\ ((! :(excon -> bool) -> bool)
   (\(e' :excon). ((! :(excon long -> bool) -> bool)
   (\(l' :excon long).
   ((! :(joint_ty_exbind_exbind_option_exbind -> bool) -> bool)
   (\(j :joint_ty_exbind_exbind_option_exbind).
   (((= :'a -> 'a -> bool) ($3 (((JOINT_int_EXBIND2 $2) $1) $0)))
   (((($6 ($3 $0)) $2) $1) $0))))))))) ((/\ (((= :'a -> 'a -> bool)
   ($0 JOINT_int_exbind_NONE_exbind)) $2))
   ((! :(joint_ty_exbind_exbind_option_exbind -> bool) -> bool)
   (\(j :joint_ty_exbind_exbind_option_exbind).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_exbind_SOME_exbind $0)))
   (($2 ($1 $0)) $0)))))))))))))))))`),
 ((label_constructors_one_one),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   ((! :(string -> bool) -> bool) (\(s' :string).
   (((= :bool -> bool -> bool) (((= :label -> label -> bool) (LABEL
   $1)) (LABEL $0))) (((= :string -> string -> bool) $1) $0))))))`),
 ((label_cases_thm),
  [],
  `((! :(label -> bool) -> bool) (\(l :label).
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :label -> label -> bool) $1) (LABEL $0))))))`),
 ((label_induction_thm),
  [],
  `((! :((label -> bool) -> bool) -> bool) (\(P :label -> bool). ((==>
   ((! :(string -> bool) -> bool) (\(s :string). ($1 (LABEL $0)))))
   ((! :(label -> bool) -> bool) (\(l :label). ($1 $0))))))`),
 ((label_Axiom),
  [],
  `((! :((string -> 'a) -> bool) -> bool) (\(f :string -> 'a).
   ((?! :((label -> 'a) -> bool) -> bool) (\(fn :label -> 'a).
   ((! :(string -> bool) -> bool) (\(s :string).
   (((= :'a -> 'a -> bool) ($1 (LABEL $0))) ($2 $0))))))))`),
 ((excon_constructors_one_one),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   ((! :(string -> bool) -> bool) (\(s' :string).
   (((= :bool -> bool -> bool) (((= :excon -> excon -> bool) (EXCON
   $1)) (EXCON $0))) (((= :string -> string -> bool) $1) $0))))))`),
 ((excon_cases_thm),
  [],
  `((! :(excon -> bool) -> bool) (\(e :excon).
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :excon -> excon -> bool) $1) (EXCON $0))))))`),
 ((excon_induction_thm),
  [],
  `((! :((excon -> bool) -> bool) -> bool) (\(P :excon -> bool). ((==>
   ((! :(string -> bool) -> bool) (\(s :string). ($1 (EXCON $0)))))
   ((! :(excon -> bool) -> bool) (\(e :excon). ($1 $0))))))`),
 ((excon_Axiom),
  [],
  `((! :((string -> 'a) -> bool) -> bool) (\(f :string -> 'a).
   ((?! :((excon -> 'a) -> bool) -> bool) (\(fn :excon -> 'a).
   ((! :(string -> bool) -> bool) (\(s :string).
   (((= :'a -> 'a -> bool) ($1 (EXCON $0))) ($2 $0))))))))`),
 ((scon_constructors_distinct),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   ((! :(integer -> bool) -> bool) (\(i :integer). (~
   (((= :scon -> scon -> bool) (SCINT $0)) (SCSTR $1)))))))`),
 ((scon_constructors_one_one),
  [],
  `((/\ ((! :(integer -> bool) -> bool) (\(i :integer).
   ((! :(integer -> bool) -> bool) (\(i' :integer).
   (((= :bool -> bool -> bool) (((= :scon -> scon -> bool) (SCINT $1))
   (SCINT $0))) (((= :integer -> integer -> bool) $1) $0)))))))
   ((! :(string -> bool) -> bool) (\(s :string).
   ((! :(string -> bool) -> bool) (\(s' :string).
   (((= :bool -> bool -> bool) (((= :scon -> scon -> bool) (SCSTR $1))
   (SCSTR $0))) (((= :string -> string -> bool) $1) $0)))))))`),
 ((scon_cases_thm),
  [],
  `((! :(scon -> bool) -> bool) (\(s :scon). ((\/
   ((? :(integer -> bool) -> bool) (\(i :integer).
   (((= :scon -> scon -> bool) $1) (SCINT $0)))))
   ((? :(string -> bool) -> bool) (\(s' :string).
   (((= :scon -> scon -> bool) $1) (SCSTR $0)))))))`),
 ((scon_induction_thm),
  [],
  `((! :((scon -> bool) -> bool) -> bool) (\(P :scon -> bool). ((==>
   ((/\ ((! :(integer -> bool) -> bool) (\(i :integer). ($1 (SCINT
   $0))))) ((! :(string -> bool) -> bool) (\(s :string). ($1 (SCSTR
   $0)))))) ((! :(scon -> bool) -> bool) (\(s :scon). ($1 $0))))))`),
 ((scon_Axiom),
  [],
  `((! :((integer -> 'a) -> bool) -> bool) (\(f0 :integer -> 'a).
   ((! :((string -> 'a) -> bool) -> bool) (\(f1 :string -> 'a).
   ((?! :((scon -> 'a) -> bool) -> bool) (\(fn :scon -> 'a). ((/\
   ((! :(integer -> bool) -> bool) (\(i :integer).
   (((= :'a -> 'a -> bool) ($1 (SCINT $0))) ($3 $0)))))
   ((! :(string -> bool) -> bool) (\(s :string).
   (((= :'a -> 'a -> bool) ($1 (SCSTR $0))) ($2 $0)))))))))))`),
 ((con_constructors_one_one),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   ((! :(string -> bool) -> bool) (\(s' :string).
   (((= :bool -> bool -> bool) (((= :con -> con -> bool) (CON $1))
   (CON $0))) (((= :string -> string -> bool) $1) $0))))))`),
 ((con_cases_thm),
  [],
  `((! :(con -> bool) -> bool) (\(c :con).
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :con -> con -> bool) $1) (CON $0))))))`),
 ((con_induction_thm),
  [],
  `((! :((con -> bool) -> bool) -> bool) (\(P :con -> bool). ((==>
   ((! :(string -> bool) -> bool) (\(s :string). ($1 (CON $0)))))
   ((! :(con -> bool) -> bool) (\(c :con). ($1 $0))))))`),
 ((con_Axiom),
  [],
  `((! :((string -> 'a) -> bool) -> bool) (\(f :string -> 'a).
   ((?! :((con -> 'a) -> bool) -> bool) (\(fn :con -> 'a).
   ((! :(string -> bool) -> bool) (\(s :string).
   (((= :'a -> 'a -> bool) ($1 (CON $0))) ($2 $0))))))))`),
 ((var_constructors_one_one),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   ((! :(string -> bool) -> bool) (\(s' :string).
   (((= :bool -> bool -> bool) (((= :var -> var -> bool) (VAR $1))
   (VAR $0))) (((= :string -> string -> bool) $1) $0))))))`),
 ((var_cases_thm),
  [],
  `((! :(var -> bool) -> bool) (\(v :var).
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :var -> var -> bool) $1) (VAR $0))))))`),
 ((var_induction_thm),
  [],
  `((! :((var -> bool) -> bool) -> bool) (\(P :var -> bool). ((==>
   ((! :(string -> bool) -> bool) (\(s :string). ($1 (VAR $0)))))
   ((! :(var -> bool) -> bool) (\(v :var). ($1 $0))))))`),
 ((var_Axiom),
  [],
  `((! :((string -> 'a) -> bool) -> bool) (\(f :string -> 'a).
   ((?! :((var -> 'a) -> bool) -> bool) (\(fn :var -> 'a).
   ((! :(string -> bool) -> bool) (\(s :string).
   (((= :'a -> 'a -> bool) ($1 (VAR $0))) ($2 $0))))))))`),
 ((long_constructors_distinct),
  [],
  `((! :('a long -> bool) -> bool) (\(l' :'a long).
   ((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :('a -> bool) -> bool) (\(x :'a). (~
   (((= :'a long -> 'a long -> bool) ((BASE :'a -> 'a long) $0))
   (((QUALIFIED :strid -> 'a long -> 'a long) $1) $2)))))))))`),
 ((long_constructors_one_one),
  [],
  `((/\ ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a -> bool) -> bool) (\(x' :'a). (((= :bool -> bool -> bool)
   (((= :'a long -> 'a long -> bool) ((BASE :'a -> 'a long) $1))
   ((BASE :'a -> 'a long) $0))) (((= :'a -> 'a -> bool) $1) $0)))))))
   ((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :('a long -> bool) -> bool) (\(l' :'a long).
   ((! :(strid -> bool) -> bool) (\(s' :strid).
   ((! :('a long -> bool) -> bool) (\(l'' :'a long).
   (((= :bool -> bool -> bool) (((= :'a long -> 'a long -> bool)
   (((QUALIFIED :strid -> 'a long -> 'a long) $3) $2))
   (((QUALIFIED :strid -> 'a long -> 'a long) $1) $0))) ((/\
   (((= :strid -> strid -> bool) $3) $1))
   (((= :'a long -> 'a long -> bool) $2) $0))))))))))))`),
 ((long_cases_thm),
  [],
  `((! :('a long -> bool) -> bool) (\(l :'a long). ((\/
   ((? :('a -> bool) -> bool) (\(x :'a).
   (((= :'a long -> 'a long -> bool) $1) ((BASE :'a -> 'a long)
   $0))))) ((? :('a long -> bool) -> bool) (\(l' :'a long).
   ((? :(strid -> bool) -> bool) (\(s :strid).
   (((= :'a long -> 'a long -> bool) $2)
   (((QUALIFIED :strid -> 'a long -> 'a long) $0) $1)))))))))`),
 ((long_induction_thm),
  [],
  `((! :(('a long -> bool) -> bool) -> bool) (\(P :'a long -> bool).
   ((==> ((/\ ((! :('a -> bool) -> bool) (\(x :'a). ($1
   ((BASE :'a -> 'a long) $0))))) ((! :('a long -> bool) -> bool)
   (\(l' :'a long). ((==> ($1 $0)) ((! :(strid -> bool) -> bool)
   (\(s :strid). ($2 (((QUALIFIED :strid -> 'a long -> 'a long) $0)
   $1))))))))) ((! :('a long -> bool) -> bool) (\(l :'a long). ($1
   $0))))))`),
 ((long_Axiom),
  [],
  `((! :(('a -> 'a1) -> bool) -> bool) (\(f0 :'a -> 'a1).
   ((! :(('a1 -> strid -> 'a long -> 'a1) -> bool) -> bool)
   (\(f1 :'a1 -> strid -> 'a long -> 'a1).
   ((?! :(('a long -> 'a1) -> bool) -> bool) (\(fn :'a long -> 'a1).
   ((/\ ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a1 -> 'a1 -> bool) ($1 ((BASE :'a -> 'a long) $0))) ($3
   $0))))) ((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :('a long -> bool) -> bool) (\(l' :'a long).
   (((= :'a1 -> 'a1 -> bool) ($2
   (((QUALIFIED :strid -> 'a long -> 'a long) $1) $0))) ((($3 ($2 $0))
   $1) $0)))))))))))))`),
 ((strid_constructors_one_one),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   ((! :(string -> bool) -> bool) (\(s' :string).
   (((= :bool -> bool -> bool) (((= :strid -> strid -> bool) (STRID
   $1)) (STRID $0))) (((= :string -> string -> bool) $1) $0))))))`),
 ((strid_cases_thm),
  [],
  `((! :(strid -> bool) -> bool) (\(s :strid).
   ((? :(string -> bool) -> bool) (\(s' :string).
   (((= :strid -> strid -> bool) $1) (STRID $0))))))`),
 ((strid_induction_thm),
  [],
  `((! :((strid -> bool) -> bool) -> bool) (\(P :strid -> bool). ((==>
   ((! :(string -> bool) -> bool) (\(s :string). ($1 (STRID $0)))))
   ((! :(strid -> bool) -> bool) (\(s :strid). ($1 $0))))))`),
 ((strid_Axiom),
  [],
  `((! :((string -> 'a) -> bool) -> bool) (\(f :string -> 'a).
   ((?! :((strid -> 'a) -> bool) -> bool) (\(fn :strid -> 'a).
   ((! :(string -> bool) -> bool) (\(s :string).
   (((= :'a -> 'a -> bool) ($1 (STRID $0))) ($2 $0))))))))`)]
