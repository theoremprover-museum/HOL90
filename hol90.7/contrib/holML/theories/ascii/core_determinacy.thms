thid = (core_determinacy, 784900569, 644746)
axioms = []
definitions =
[((eval_valbind_match_DEF),
  [],
  `((! :(valbind -> bool) -> bool) (\(val :valbind).
   ((! :(state -> bool) -> bool) (\(sta :state).
   ((! :(env -> bool) -> bool) (\(env :env).
   ((! :(state -> bool) -> bool) (\(sta' :state).
   ((! :(varenv_pack -> bool) -> bool) (\(var :varenv_pack).
   (((= :bool -> bool -> bool) (((((eval_valbind_match $4) $3) $2) $1)
   $0)) ((\/ ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv). ((/\
   (((= :valbind -> valbind -> bool) $7) (((PLAINvalbind $2) $1)
   (NONE :valbind option)))) ((/\
   (((= :varenv_pack -> varenv_pack -> bool) $3) (VARENVvep $0)))
   ((? :(val -> bool) -> bool) (\(v :val).
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_exp $3)
   $8) $7) $0) (VALvp $1))) ((((((eval_pat $4) $0) $7) $1) $6)
   (VARENVvef $2)))))))))))))))) ((\/ ((? :(pat -> bool) -> bool)
   (\(pat :pat). ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :valbind -> valbind -> bool) $7) (((PLAINvalbind $2) $1)
   (NONE :valbind option)))) ((/\
   (((= :varenv_pack -> varenv_pack -> bool) $3) (PACKvep $0)))
   (((((eval_exp $1) $6) $5) $4) (PACKvp $0))))))))))) ((\/
   ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(valbind -> bool) -> bool) (\(valbind :valbind).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv).
   ((? :(varenv -> bool) -> bool) (\(VE' :varenv). ((/\
   (((= :valbind -> valbind -> bool) $9) (((PLAINvalbind $4) $3)
   ((SOME :valbind -> valbind option) $2)))) ((/\
   (((= :varenv_pack -> varenv_pack -> bool) $5) (VARENVvep
   ((add_varenv $1) $0)))) ((? :(val -> bool) -> bool) (\(v :val).
   ((? :(state -> bool) -> bool) (\(s2 :state).
   ((? :(state -> bool) -> bool) (\(s3 :state). ((/\ (((((eval_exp $6)
   $11) $10) $1) (VALvp $2))) ((/\ ((((((eval_pat $7) $1) $10) $2) $0)
   (VARENVvef $4))) (((((eval_valbind $5) $0) $10) $9) (VARENVvep
   $3))))))))))))))))))))))) ((\/ ((? :(pat -> bool) -> bool)
   (\(pat :pat). ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(valbind -> bool) -> bool) (\(valbind :valbind).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :valbind -> valbind -> bool) $8) (((PLAINvalbind $3) $2)
   ((SOME :valbind -> valbind option) $1)))) ((/\
   (((= :varenv_pack -> varenv_pack -> bool) $4) (PACKvep $0)))
   (((((eval_exp $2) $7) $6) $5) (PACKvp $0))))))))))))) ((\/
   ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(valbind -> bool) -> bool) (\(valbind :valbind).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :valbind -> valbind -> bool) $8) (((PLAINvalbind $3) $2)
   ((SOME :valbind -> valbind option) $1)))) ((/\
   (((= :varenv_pack -> varenv_pack -> bool) $4) (PACKvep $0)))
   ((? :(val -> bool) -> bool) (\(v :val).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv).
   ((? :(state -> bool) -> bool) (\(s2 :state).
   ((? :(state -> bool) -> bool) (\(s3 :state). ((/\ (((((eval_exp $6)
   $11) $10) $1) (VALvp $3))) ((/\ ((((((eval_pat $7) $1) $10) $3) $0)
   (VARENVvef $2))) (((((eval_valbind $5) $0) $10) $9) (PACKvep
   $4))))))))))))))))))))))) ((\/ ((? :(pat -> bool) -> bool)
   (\(pat :pat). ((? :(exp -> bool) -> bool) (\(exp :exp). ((/\
   (((= :valbind -> valbind -> bool) $6) (((PLAINvalbind $1) $0)
   (NONE :valbind option)))) ((/\
   (((= :varenv_pack -> varenv_pack -> bool) $2) (PACKvep (PACK
   (NAMEexval (EXNAME 8)))))) ((? :(val -> bool) -> bool) (\(v :val).
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_exp $2)
   $7) $6) $0) (VALvp $1))) ((((((eval_pat $3) $0) $6) $1) $5)
   FAILvef))))))))))))) ((\/ ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(valbind -> bool) -> bool) (\(valbind :valbind). ((/\
   (((= :valbind -> valbind -> bool) $7) (((PLAINvalbind $2) $1)
   ((SOME :valbind -> valbind option) $0)))) ((/\
   (((= :varenv_pack -> varenv_pack -> bool) $3) (PACKvep (PACK
   (NAMEexval (EXNAME 8)))))) ((? :(val -> bool) -> bool) (\(v :val).
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_exp $3)
   $8) $7) $0) (VALvp $1))) ((((((eval_pat $4) $0) $7) $1) $6)
   FAILvef))))))))))))))) ((\/ ((? :(valbind -> bool) -> bool)
   (\(valbind :valbind). ((? :(varenv -> bool) -> bool)
   (\(VE :varenv). ((/\ (((= :valbind -> valbind -> bool) $6)
   (RECvalbind $1))) ((/\ (((= :varenv_pack -> varenv_pack -> bool)
   $2) (VARENVvep (rec_varenv $0)))) (((((eval_valbind $1) $5) $4) $3)
   (VARENVvep $0))))))))) ((? :(valbind -> bool) -> bool)
   (\(valbind :valbind). ((? :(pack -> bool) -> bool) (\(p :pack).
   ((/\ (((= :valbind -> valbind -> bool) $6) (RECvalbind $1))) ((/\
   (((= :varenv_pack -> varenv_pack -> bool) $2) (PACKvep $0)))
   (((((eval_valbind $1) $5) $4) $3) (PACKvep
   $0)))))))))))))))))))))))))))`),
 ((eval_dec_match_DEF),
  [],
  `((! :(dec -> bool) -> bool) (\(dec :dec).
   ((! :(state -> bool) -> bool) (\(sta :state).
   ((! :(env -> bool) -> bool) (\(env :env).
   ((! :(state -> bool) -> bool) (\(sta' :state).
   ((! :(env_pack -> bool) -> bool) (\(env' :env_pack).
   (((= :bool -> bool -> bool) (((((eval_dec_match $4) $3) $2) $1)
   $0)) ((\/ ((? :(valbind -> bool) -> bool) (\(valbind :valbind).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv). ((/\
   (((= :dec -> dec -> bool) $6) (VALdec $1))) ((/\
   (((= :env_pack -> env_pack -> bool) $2) (ENVep (((ENV empty_strenv)
   $0) empty_exconenv)))) (((((eval_valbind $1) $5) $4) $3) (VARENVvep
   $0))))))))) ((\/ ((? :(valbind -> bool) -> bool)
   (\(valbind :valbind). ((? :(pack -> bool) -> bool) (\(p :pack).
   ((/\ (((= :dec -> dec -> bool) $6) (VALdec $1))) ((/\
   (((= :env_pack -> env_pack -> bool) $2) (PACKep $0)))
   (((((eval_valbind $1) $5) $4) $3) (PACKvep $0))))))))) ((\/
   ((? :(exbind -> bool) -> bool) (\(exbind :exbind).
   ((? :(exconenv -> bool) -> bool) (\(EE :exconenv). ((/\
   (((= :dec -> dec -> bool) $6) (EXCEPTdec $1))) ((/\
   (((= :env_pack -> env_pack -> bool) $2) (ENVep (((ENV empty_strenv)
   empty_varenv) $0)))) (((((eval_exbind $1) $5) $4) $3) (EXCONENVeep
   $0))))))))) ((\/ ((? :(exbind -> bool) -> bool) (\(exbind :exbind).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :dec -> dec -> bool) $6) (EXCEPTdec $1))) ((/\
   (((= :env_pack -> env_pack -> bool) $2) (PACKep $0)))
   (((((eval_exbind $1) $5) $4) $3) (PACKeep $0))))))))) ((\/
   ((? :(dec -> bool) -> bool) (\(dec1 :dec).
   ((? :(dec -> bool) -> bool) (\(dec2 :dec).
   ((? :(env -> bool) -> bool) (\(E2 :env). ((/\
   (((= :dec -> dec -> bool) $7) ((LOCALdec $2) $1))) ((/\
   (((= :env_pack -> env_pack -> bool) $3) (ENVep $0)))
   ((? :(env -> bool) -> bool) (\(E1 :env).
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_dec $4)
   $8) $7) $0) (ENVep $1))) (((((eval_dec $3) $0) ((add_env $7) $1))
   $6) (ENVep $2)))))))))))))))) ((\/ ((? :(dec -> bool) -> bool)
   (\(dec1 :dec). ((? :(dec -> bool) -> bool) (\(dec2 :dec).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :dec -> dec -> bool) $7) ((LOCALdec $2) $1))) ((/\
   (((= :env_pack -> env_pack -> bool) $3) (PACKep $0))) (((((eval_dec
   $2) $6) $5) $4) (PACKep $0))))))))))) ((\/
   ((? :(dec -> bool) -> bool) (\(dec1 :dec).
   ((? :(dec -> bool) -> bool) (\(dec2 :dec).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :dec -> dec -> bool) $7) ((LOCALdec $2) $1))) ((/\
   (((= :env_pack -> env_pack -> bool) $3) (PACKep $0)))
   ((? :(env -> bool) -> bool) (\(E1 :env).
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_dec $4)
   $8) $7) $0) (ENVep $1))) (((((eval_dec $3) $0) ((add_env $7) $1))
   $6) (PACKep $2)))))))))))))))) ((\/
   ((? :(strid long nonemptylist -> bool) -> bool)
   (\(longstrid_1_n :strid long nonemptylist).
   ((? :(env nonemptylist -> bool) -> bool)
   (\(E_1_n :env nonemptylist). ((/\ (((= :dec -> dec -> bool) $6)
   (OPENdec $1))) ((/\ (((= :state -> state -> bool) $5) $3)) ((/\
   (((= :env_pack -> env_pack -> bool) $2) (ENVep
   (add_nonemptylist_env $0))))
   (((= :env lift nonemptylist -> env lift nonemptylist -> bool)
   (((nonempty_MAP :(strid long -> env lift) ->
                    strid long nonemptylist -> env lift nonemptylist)
   (lookuplongstrid_env $4)) $1))
   (((nonempty_MAP :(env -> env lift) -> env nonemptylist ->
                    env lift nonemptylist) (lift :env -> env lift))
   $0)))))))))) ((\/ ((/\ (((= :dec -> dec -> bool) $4) EMPTYdec))
   ((/\ (((= :state -> state -> bool) $3) $1))
   (((= :env_pack -> env_pack -> bool) $0) (ENVep (((ENV empty_strenv)
   empty_varenv) empty_exconenv)))))) ((\/ ((? :(dec -> bool) -> bool)
   (\(dec1 :dec). ((? :(dec -> bool) -> bool) (\(dec2 :dec).
   ((? :(env -> bool) -> bool) (\(E1 :env).
   ((? :(env -> bool) -> bool) (\(E2 :env). ((/\
   (((= :dec -> dec -> bool) $8) ((SEQdec $3) $2))) ((/\
   (((= :env_pack -> env_pack -> bool) $4) (ENVep ((add_env $1) $0))))
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_dec $4)
   $8) $7) $0) (ENVep $2))) (((((eval_dec $3) $0) ((add_env $7) $2))
   $6) (ENVep $1)))))))))))))))) ((\/ ((? :(dec -> bool) -> bool)
   (\(dec1 :dec). ((? :(dec -> bool) -> bool) (\(dec2 :dec).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :dec -> dec -> bool) $7) ((SEQdec $2) $1))) ((/\
   (((= :env_pack -> env_pack -> bool) $3) (PACKep $0))) (((((eval_dec
   $2) $6) $5) $4) (PACKep $0))))))))))) ((? :(dec -> bool) -> bool)
   (\(dec1 :dec). ((? :(dec -> bool) -> bool) (\(dec2 :dec).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :dec -> dec -> bool) $7) ((SEQdec $2) $1))) ((/\
   (((= :env_pack -> env_pack -> bool) $3) (PACKep $0)))
   ((? :(env -> bool) -> bool) (\(E1 :env).
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_dec $4)
   $8) $7) $0) (ENVep $1))) (((((eval_dec $3) $0) ((add_env $7) $1))
   $6) (PACKep $2)))))))))))))))))))))))))))))))))))))`),
 ((eval_mrule_match_DEF),
  [],
  `((! :(mrule -> bool) -> bool) (\(mru :mrule).
   ((! :(state -> bool) -> bool) (\(sta :state).
   ((! :(env -> bool) -> bool) (\(env :env).
   ((! :(val -> bool) -> bool) (\(val :val).
   ((! :(state -> bool) -> bool) (\(sta' :state).
   ((! :(val_pack_fail -> bool) -> bool) (\(val' :val_pack_fail).
   (((= :bool -> bool -> bool) ((((((eval_mrule_match $5) $4) $3) $2)
   $1) $0)) ((\/ ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(val -> bool) -> bool) (\(v' :val). ((/\
   (((= :mrule -> mrule -> bool) $8) ((MRULE $2) $1))) ((/\
   (((= :val_pack_fail -> val_pack_fail -> bool) $3) (VALvpf $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv). ((/\ ((((((eval_pat
   $4) $9) $8) $7) $1) (VARENVvef $0))) (((((eval_exp $3) $1)
   ((add_env $8) (((ENV empty_strenv) $0) empty_exconenv))) $6) (VALvp
   $2)))))))))))))))) ((\/ ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :mrule -> mrule -> bool) $8) ((MRULE $2) $1))) ((/\
   (((= :val_pack_fail -> val_pack_fail -> bool) $3) (PACKvpf $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv). ((/\ ((((((eval_pat
   $4) $9) $8) $7) $1) (VARENVvef $0))) (((((eval_exp $3) $1)
   ((add_env $8) (((ENV empty_strenv) $0) empty_exconenv))) $6)
   (PACKvp $2)))))))))))))))) ((? :(pat -> bool) -> bool)
   (\(pat :pat). ((? :(exp -> bool) -> bool) (\(exp :exp). ((/\
   (((= :mrule -> mrule -> bool) $7) ((MRULE $1) $0))) ((/\
   (((= :val_pack_fail -> val_pack_fail -> bool) $2) FAILvpf))
   ((((((eval_pat $1) $6) $5) $4) $3) FAILvef))))))))))))))))))))))`),
 ((eval_match_match_DEF),
  [],
  `((! :(match -> bool) -> bool) (\(mat :match).
   ((! :(state -> bool) -> bool) (\(sta :state).
   ((! :(env -> bool) -> bool) (\(env :env).
   ((! :(val -> bool) -> bool) (\(val :val).
   ((! :(state -> bool) -> bool) (\(sta' :state).
   ((! :(val_pack_fail -> bool) -> bool) (\(val' :val_pack_fail).
   (((= :bool -> bool -> bool) ((((((eval_match_match $5) $4) $3) $2)
   $1) $0)) ((\/ ((? :(mrule -> bool) -> bool) (\(mrule :mrule).
   ((? :(match option -> bool) -> bool) (\(match_op :match option).
   ((? :(val -> bool) -> bool) (\(v' :val). ((/\
   (((= :match -> match -> bool) $8) ((MATCH $2) $1))) ((/\
   (((= :val_pack_fail -> val_pack_fail -> bool) $3) (VALvpf $0)))
   ((((((eval_mrule $2) $7) $6) $5) $4) (VALvpf $0))))))))))) ((\/
   ((? :(mrule -> bool) -> bool) (\(mrule :mrule).
   ((? :(match option -> bool) -> bool) (\(match_op :match option).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :match -> match -> bool) $8) ((MATCH $2) $1))) ((/\
   (((= :val_pack_fail -> val_pack_fail -> bool) $3) (PACKvpf $0)))
   ((((((eval_mrule $2) $7) $6) $5) $4) (PACKvpf $0))))))))))) ((\/
   ((? :(mrule -> bool) -> bool) (\(mrule :mrule). ((/\
   (((= :match -> match -> bool) $6) ((MATCH $0)
   (NONE :match option)))) ((/\
   (((= :val_pack_fail -> val_pack_fail -> bool) $1) FAILvpf))
   ((((((eval_mrule $0) $5) $4) $3) $2) FAILvpf))))))
   ((? :(mrule -> bool) -> bool) (\(mrule :mrule).
   ((? :(match -> bool) -> bool) (\(match :match). ((/\
   (((= :match -> match -> bool) $7) ((MATCH $1)
   ((SOME :match -> match option) $0)))) ((? :(state -> bool) -> bool)
   (\(s' :state). ((/\ ((((((eval_mrule $2) $7) $6) $5) $0) FAILvpf))
   ((((((eval_match $1) $0) $6) $5) $4) $3)))))))))))))))))))))))))`),
 ((eval_exp_match_DEF),
  [],
  `((! :(exp -> bool) -> bool) (\(exp' :exp).
   ((! :(state -> bool) -> bool) (\(sta :state).
   ((! :(env -> bool) -> bool) (\(env :env).
   ((! :(state -> bool) -> bool) (\(sta' :state).
   ((! :(val_pack -> bool) -> bool) (\(val :val_pack).
   (((= :bool -> bool -> bool) (((((eval_exp_match $4) $3) $2) $1)
   $0)) ((\/ ((? :(atexp -> bool) -> bool) (\(atexp :atexp). ((/\
   (((= :exp -> exp -> bool) $5) (ATEXPexp $0))) (((((eval_atexp $0)
   $4) $3) $2) $1))))) ((\/ ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(con -> bool) -> bool) (\(c :con). ((? :(val -> bool) -> bool)
   (\(v :val). ((/\ (((= :exp -> exp -> bool) $8) ((APPexp $3) $2)))
   ((/\ (((= :val_pack -> val_pack -> bool) $4) (VALvp ((APPCONval $1)
   $0)))) ((? :(state -> bool) -> bool) (\(s' :state). ((/\
   (((((eval_exp $4) $8) $7) $0) (VALvp (CONval $2)))) ((/\ (~
   (((= :con -> con -> bool) $2) (CON "ref")))) (((((eval_atexp $3)
   $0) $7) $6) (VALvp $1))))))))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $7) ((APPexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0))) (((((eval_exp
   $2) $6) $5) $4) (PACKvp $0))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $7) ((APPexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(con -> bool) -> bool) (\(c :con). ((/\ (((((eval_exp $4) $8)
   $7) $1) (VALvp (CONval $0)))) ((/\ (~ (((= :con -> con -> bool) $0)
   (CON "ref")))) (((((eval_atexp $3) $1) $7) $6) (PACKvp
   $2))))))))))))))))) ((\/ ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(exname -> bool) -> bool) (\(en :exname).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\
   (((= :exp -> exp -> bool) $8) ((APPexp $3) $2))) ((/\
   (((= :val_pack -> val_pack -> bool) $4) (VALvp (EXVALval
   ((NAMEVALexval $1) $0))))) ((? :(state -> bool) -> bool)
   (\(s' :state). ((/\ (((((eval_exp $4) $8) $7) $0) (VALvp (EXVALval
   (NAMEexval $2))))) (((((eval_atexp $3) $0) $7) $6) (VALvp
   $1)))))))))))))))) ((\/ ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $7) ((APPexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(exname -> bool) -> bool) (\(en :exname). ((/\ (((((eval_exp
   $4) $8) $7) $1) (VALvp (EXVALval (NAMEexval $0))))) (((((eval_atexp
   $3) $1) $7) $6) (PACKvp $2)))))))))))))))) ((\/
   ((? :(state -> bool) -> bool) (\(s'' :state).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(addr -> bool) -> bool) (\(a :addr).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\
   (((= :exp -> exp -> bool) $9) ((APPexp $3) $2))) ((/\
   (((= :state -> state -> bool) $6) (((insert_into_state_mem $4) $1)
   $0))) ((/\ (((= :val_pack -> val_pack -> bool) $5) (VALvp (ADDRval
   $1)))) ((? :(state -> bool) -> bool) (\(s' :state). ((/\
   (((((eval_exp $4) $9) $8) $0) (VALvp (CONval (CON "ref"))))) ((/\
   (((((eval_atexp $3) $0) $8) $5) (VALvp $1)))
   (((= :addr -> addr -> bool) $2) (new_addr $5))))))))))))))))))))
   ((\/ ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $7) ((APPexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_exp $3)
   $7) $6) $0) (VALvp (CONval (CON "ref"))))) (((((eval_atexp $2) $0)
   $6) $5) (PACKvp $1)))))))))))))) ((\/ ((? :(state -> bool) -> bool)
   (\(s'' :state). ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(addr -> bool) -> bool) (\(a :addr).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\
   (((= :exp -> exp -> bool) $9) ((APPexp $3) $2))) ((/\
   (((= :state -> state -> bool) $6) (((insert_into_state_mem $4) $1)
   $0))) ((/\ (((= :val_pack -> val_pack -> bool) $5) (VALvp
   (RECORDval empty_record)))) ((? :(state -> bool) -> bool)
   (\(s' :state). ((/\ (((((eval_exp $4) $9) $8) $0) (VALvp ASSGval)))
   (((((eval_atexp $3) $0) $8) $5) (VALvp (RECORDval
   (((insert_into_record (((insert_into_record empty_record) (LABEL
   "1")) (ADDRval $2))) (LABEL "2")) $1))))))))))))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $7) ((APPexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_exp $3)
   $7) $6) $0) (VALvp ASSGval))) (((((eval_atexp $2) $0) $6) $5)
   (PACKvp $1)))))))))))))) ((\/ ((? :(exp -> bool) -> bool)
   (\(exp :exp). ((? :(atexp -> bool) -> bool) (\(atexp :atexp). ((/\
   (((= :exp -> exp -> bool) $6) ((APPexp $1) $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(basval -> bool) -> bool) (\(b :basval).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\ (((((eval_exp $4) $8)
   $7) $2) (VALvp (BASval $1)))) ((/\ (((((eval_atexp $3) $2) $7) $6)
   (VALvp $0))) (((= :val_pack -> val_pack -> bool) ((apply $1) $0))
   $5))))))))))))))) ((\/ ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $7) ((APPexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(basval -> bool) -> bool) (\(b :basval). ((/\ (((((eval_exp
   $4) $8) $7) $1) (VALvp (BASval $0)))) (((((eval_atexp $3) $1) $7)
   $6) (PACKvp $2)))))))))))))))) ((\/ ((? :(exp -> bool) -> bool)
   (\(exp :exp). ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(val -> bool) -> bool) (\(v' :val). ((/\
   (((= :exp -> exp -> bool) $7) ((APPexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (VALvp $0)))
   ((? :(state -> bool) -> bool) (\(s2 :state).
   ((? :(state -> bool) -> bool) (\(s3 :state).
   ((? :(match -> bool) -> bool) (\(match :match).
   ((? :(env -> bool) -> bool) (\(E' :env).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\ (((((eval_exp $8) $12)
   $11) $5) (VALvp (CLOSUREval (((CLOSURE $3) $2) $1))))) ((/\
   (((((eval_atexp $7) $5) $11) $4) (VALvp $0))) ((((((eval_match $3)
   $4) ((add_env $2) (((ENV empty_strenv) (rec_varenv $1))
   empty_exconenv))) $0) $10) (VALvpf $6))))))))))))))))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $7) ((APPexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0)))
   ((? :(state -> bool) -> bool) (\(s2 :state).
   ((? :(match -> bool) -> bool) (\(match :match).
   ((? :(env -> bool) -> bool) (\(E' :env).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv). ((/\ (((((eval_exp
   $6) $10) $9) $3) (VALvp (CLOSUREval (((CLOSURE $2) $1) $0)))))
   (((((eval_atexp $5) $3) $9) $8) (PACKvp $4)))))))))))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $7) ((APPexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0)))
   ((? :(state -> bool) -> bool) (\(s2 :state).
   ((? :(state -> bool) -> bool) (\(s3 :state).
   ((? :(match -> bool) -> bool) (\(match :match).
   ((? :(env -> bool) -> bool) (\(E' :env).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\ (((((eval_exp $8) $12)
   $11) $5) (VALvp (CLOSUREval (((CLOSURE $3) $2) $1))))) ((/\
   (((((eval_atexp $7) $5) $11) $4) (VALvp $0))) ((((((eval_match $3)
   $4) ((add_env $2) (((ENV empty_strenv) (rec_varenv $1))
   empty_exconenv))) $0) $10) (PACKvpf $6)))))))))))))))))))))))))
   ((\/ ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp). ((/\
   (((= :exp -> exp -> bool) $6) ((APPexp $1) $0))) ((/\
   (((= :val_pack -> val_pack -> bool) $2) (PACKvp (PACK (NAMEexval
   (EXNAME 7)))))) ((? :(state -> bool) -> bool) (\(s2 :state).
   ((? :(state -> bool) -> bool) (\(s3 :state).
   ((? :(match -> bool) -> bool) (\(match :match).
   ((? :(env -> bool) -> bool) (\(E' :env).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\ (((((eval_exp $7) $11)
   $10) $5) (VALvp (CLOSUREval (((CLOSURE $3) $2) $1))))) ((/\
   (((((eval_atexp $6) $5) $10) $4) (VALvp $0))) ((((((eval_match $3)
   $4) ((add_env $2) (((ENV empty_strenv) (rec_varenv $1))
   empty_exconenv))) $0) $9) FAILvpf)))))))))))))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(match -> bool) -> bool) (\(match :match).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\
   (((= :exp -> exp -> bool) $7) ((HANDLEexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (VALvp $0))) (((((eval_exp
   $2) $6) $5) $4) (VALvp $0))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(match -> bool) -> bool) (\(match :match).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\
   (((= :exp -> exp -> bool) $7) ((HANDLEexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (VALvp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(exval -> bool) -> bool) (\(e :exval). ((/\ (((((eval_exp $4)
   $8) $7) $1) (PACKvp (PACK $0)))) ((((((eval_match $3) $1) $7)
   (EXVALval $0)) $6) (VALvpf $2)))))))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(match -> bool) -> bool) (\(match :match).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $7) ((HANDLEexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(exval -> bool) -> bool) (\(e :exval). ((/\ (((((eval_exp $4)
   $8) $7) $1) (PACKvp (PACK $0)))) ((((((eval_match $3) $1) $7)
   (EXVALval $0)) $6) (PACKvpf $2)))))))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(match -> bool) -> bool) (\(match :match).
   ((? :(exval -> bool) -> bool) (\(e :exval). ((/\
   (((= :exp -> exp -> bool) $7) ((HANDLEexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp (PACK $0))))
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_exp $3)
   $7) $6) $0) (PACKvp (PACK $1)))) ((((((eval_match $2) $0) $6)
   (EXVALval $1)) $5) FAILvpf))))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(exval -> bool) -> bool) (\(e :exval). ((/\
   (((= :exp -> exp -> bool) $6) (RAISEexp $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $2) (PACKvp (PACK $0))))
   (((((eval_exp $1) $5) $4) $3) (VALvp (EXVALval $0)))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $6) (RAISEexp $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $2) (PACKvp $0))) (((((eval_exp
   $1) $5) $4) $3) (PACKvp $0))))))))) ((? :(match -> bool) -> bool)
   (\(match :match). ((/\ (((= :exp -> exp -> bool) $5) (FNexp $0)))
   ((/\ (((= :state -> state -> bool) $4) $2))
   (((= :val_pack -> val_pack -> bool) $1) (VALvp (CLOSUREval
   (((CLOSURE $0) $3)
   empty_varenv)))))))))))))))))))))))))))))))))))))))))`),
 ((eval_exprow_match_DEF),
  [],
  `((! :(exprow -> bool) -> bool) (\(exp' :exprow).
   ((! :(state -> bool) -> bool) (\(sta :state).
   ((! :(env -> bool) -> bool) (\(env :env).
   ((! :(state -> bool) -> bool) (\(sta' :state).
   ((! :(record_pack -> bool) -> bool) (\(rec :record_pack).
   (((= :bool -> bool -> bool) (((((eval_exprow_match $4) $3) $2) $1)
   $0)) ((\/ ((? :(label -> bool) -> bool) (\(lab :label).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\
   (((= :exprow -> exprow -> bool) $7) (((EXPROW $2) $1)
   (NONE :exprow option)))) ((/\
   (((= :record_pack -> record_pack -> bool) $3) (RECORDrp
   (((insert_into_record empty_record) $2) $0)))) (((((eval_exp $1)
   $6) $5) $4) (VALvp $0))))))))))) ((\/ ((? :(label -> bool) -> bool)
   (\(lab :label). ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(exprow option -> bool) -> bool) (\(exprow_op :exprow option).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exprow -> exprow -> bool) $8) (((EXPROW $3) $2) $1))) ((/\
   (((= :record_pack -> record_pack -> bool) $4) (PACKrp $0)))
   (((((eval_exp $2) $7) $6) $5) (PACKvp $0))))))))))))) ((\/
   ((? :(label -> bool) -> bool) (\(lab :label).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(exprow -> bool) -> bool) (\(exprow :exprow).
   ((? :(val -> bool) -> bool) (\(v :val).
   ((? :(record -> bool) -> bool) (\(r :record). ((/\
   (((= :exprow -> exprow -> bool) $9) (((EXPROW $4) $3)
   ((SOME :exprow -> exprow option) $2)))) ((/\
   (((= :record_pack -> record_pack -> bool) $5) (RECORDrp
   ((add_record (((insert_into_record empty_record) $4) $1)) $0))))
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_exp $4)
   $9) $8) $0) (VALvp $2))) (((((eval_exprow $3) $0) $8) $7) (RECORDrp
   $1)))))))))))))))))) ((? :(label -> bool) -> bool) (\(lab :label).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(exprow -> bool) -> bool) (\(exprow :exprow).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exprow -> exprow -> bool) $8) (((EXPROW $3) $2)
   ((SOME :exprow -> exprow option) $1)))) ((/\
   (((= :record_pack -> record_pack -> bool) $4) (PACKrp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\ (((((eval_exp $4) $9)
   $8) $1) (VALvp $0))) (((((eval_exprow $3) $1) $8) $7) (PACKrp
   $2)))))))))))))))))))))))))))))))`),
 ((eval_atexp_match_DEF),
  [],
  `((! :(atexp -> bool) -> bool) (\(ate :atexp).
   ((! :(state -> bool) -> bool) (\(sta :state).
   ((! :(env -> bool) -> bool) (\(env :env).
   ((! :(state -> bool) -> bool) (\(sta' :state).
   ((! :(val_pack -> bool) -> bool) (\(val :val_pack).
   (((= :bool -> bool -> bool) (((((eval_atexp_match $4) $3) $2) $1)
   $0)) ((\/ ((? :(scon -> bool) -> bool) (\(scon :scon). ((/\
   (((= :atexp -> atexp -> bool) $5) (SCONatexp $0))) ((/\
   (((= :state -> state -> bool) $4) $2))
   (((= :val_pack -> val_pack -> bool) $1) (VALvp (SVALval (value_of
   $0))))))))) ((\/ ((? :(var long -> bool) -> bool)
   (\(longvar :var long). ((? :(val -> bool) -> bool) (\(v :val). ((/\
   (((= :atexp -> atexp -> bool) $6) (VARatexp $1))) ((/\
   (((= :state -> state -> bool) $5) $3)) ((/\
   (((= :val_pack -> val_pack -> bool) $2) (VALvp $0)))
   (((= :val lift -> val lift -> bool) ((lookuplongvar_env $4) $1))
   ((lift :val -> val lift) $0)))))))))) ((\/
   ((? :(con long -> bool) -> bool) (\(longcon :con long).
   ((? :(con -> bool) -> bool) (\(con :con). ((/\
   (((= :atexp -> atexp -> bool) $6) (CONatexp $1))) ((/\
   (((= :state -> state -> bool) $5) $3)) ((/\
   (((= :val_pack -> val_pack -> bool) $2) (VALvp (CONval $0))))
   (((= :con -> con -> bool) ((long_base :con long -> con) $1))
   $0))))))))) ((\/ ((? :(exname -> bool) -> bool) (\(en :exname).
   ((? :(excon long -> bool) -> bool) (\(longexcon :excon long). ((/\
   (((= :atexp -> atexp -> bool) $6) (EXCONatexp $0))) ((/\
   (((= :state -> state -> bool) $5) $3)) ((/\
   (((= :val_pack -> val_pack -> bool) $2) (VALvp (EXVALval (NAMEexval
   $1))))) (((= :exname lift -> exname lift -> bool)
   ((lookuplongexcon_env $4) $0)) ((lift :exname -> exname lift)
   $1)))))))))) ((\/ ((/\ (((= :atexp -> atexp -> bool) $4)
   (RECORDatexp (NONE :exprow option)))) ((/\
   (((= :state -> state -> bool) $3) $1))
   (((= :val_pack -> val_pack -> bool) $0) (VALvp (RECORDval
   empty_record)))))) ((\/ ((? :(exprow -> bool) -> bool)
   (\(exprow :exprow). ((? :(record -> bool) -> bool) (\(r :record).
   ((/\ (((= :atexp -> atexp -> bool) $6) (RECORDatexp
   ((SOME :exprow -> exprow option) $1)))) ((/\
   (((= :val_pack -> val_pack -> bool) $2) (VALvp (RECORDval
   ((add_record empty_record) $0))))) (((((eval_exprow $1) $5) $4) $3)
   (RECORDrp $0))))))))) ((\/ ((? :(exprow -> bool) -> bool)
   (\(exprow :exprow). ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :atexp -> atexp -> bool) $6) (RECORDatexp
   ((SOME :exprow -> exprow option) $1)))) ((/\
   (((= :val_pack -> val_pack -> bool) $2) (PACKvp $0)))
   (((((eval_exprow $1) $5) $4) $3) (PACKrp $0))))))))) ((\/
   ((? :(dec -> bool) -> bool) (\(dec :dec).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\
   (((= :atexp -> atexp -> bool) $7) ((LETatexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (VALvp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(env -> bool) -> bool) (\(E' :env). ((/\ (((((eval_dec $4) $8)
   $7) $1) (ENVep $0))) (((((eval_exp $3) $1) ((add_env $7) $0)) $6)
   (VALvp $2)))))))))))))))) ((\/ ((? :(dec -> bool) -> bool)
   (\(dec :dec). ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :atexp -> atexp -> bool) $7) ((LETatexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0))) (((((eval_dec
   $2) $6) $5) $4) (PACKep $0))))))))))) ((\/
   ((? :(dec -> bool) -> bool) (\(dec :dec).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :atexp -> atexp -> bool) $7) ((LETatexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(env -> bool) -> bool) (\(E' :env). ((/\ (((((eval_dec $4) $8)
   $7) $1) (ENVep $0))) (((((eval_exp $3) $1) ((add_env $7) $0)) $6)
   (PACKvp $2)))))))))))))))) ((? :(exp -> bool) -> bool)
   (\(exp :exp). ((/\ (((= :atexp -> atexp -> bool) $5) (PARatexp
   $0))) (((((eval_exp $0) $4) $3) $2) $1)))))))))))))))))))))))))`),
 ((eval_pat_match_DEF),
  [],
  `((! :(pat -> bool) -> bool) (\(pat' :pat).
   ((! :(state -> bool) -> bool) (\(sta :state).
   ((! :(env -> bool) -> bool) (\(env :env).
   ((! :(val -> bool) -> bool) (\(val :val).
   ((! :(state -> bool) -> bool) (\(sta' :state).
   ((! :(varenv_fail -> bool) -> bool) (\(var' :varenv_fail).
   (((= :bool -> bool -> bool) ((((((eval_pat_match $5) $4) $3) $2)
   $1) $0)) ((\/ ((? :(atpat -> bool) -> bool) (\(atpat :atpat). ((/\
   (((= :pat -> pat -> bool) $6) (ATPATpat $0))) ((((((eval_atpat $0)
   $5) $4) $3) $2) $1))))) ((\/ ((? :(con long -> bool) -> bool)
   (\(longcon :con long). ((? :(atpat -> bool) -> bool)
   (\(atpat :atpat). ((/\ (((= :pat -> pat -> bool) $7) ((CONpat $1)
   $0))) ((? :(con -> bool) -> bool) (\(con :con).
   ((? :(val -> bool) -> bool) (\(v' :val). ((/\
   (((= :con -> con -> bool) ((long_base :con long -> con) $3)) $1))
   ((/\ (~ (((= :con -> con -> bool) $1) (CON "ref")))) ((/\
   (((= :val -> val -> bool) $6) ((APPCONval $1) $0)))
   ((((((eval_atpat $2) $8) $7) $0) $5) $4)))))))))))))) ((\/
   ((? :(con long -> bool) -> bool) (\(longcon :con long).
   ((? :(atpat -> bool) -> bool) (\(atpat :atpat). ((/\
   (((= :pat -> pat -> bool) $7) ((CONpat $1) $0))) ((/\
   (((= :state -> state -> bool) $6) $3)) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $2) FAILvef))
   ((? :(con -> bool) -> bool) (\(con :con). ((/\
   (((= :con -> con -> bool) ((long_base :con long -> con) $2)) $0))
   ((/\ (~ (((= :con -> con -> bool) $0) (CON "ref"))))
   ((! :(val -> bool) -> bool) (\(v' :val). (~
   (((= :val -> val -> bool) $6) ((APPCONval $1) $0)))))))))))))))))
   ((\/ ((? :(excon long -> bool) -> bool) (\(longexcon :excon long).
   ((? :(atpat -> bool) -> bool) (\(atpat :atpat). ((/\
   (((= :pat -> pat -> bool) $7) ((EXCONpat $1) $0)))
   ((? :(val -> bool) -> bool) (\(v' :val).
   ((? :(exname -> bool) -> bool) (\(en :exname). ((/\
   (((= :exname lift -> exname lift -> bool) ((lookuplongexcon_env $7)
   $3)) ((lift :exname -> exname lift) $0))) ((/\
   (((= :val -> val -> bool) $6) (EXVALval ((NAMEVALexval $0) $1))))
   ((((((eval_atpat $2) $8) $7) $1) $5) $4))))))))))))) ((\/
   ((? :(excon long -> bool) -> bool) (\(longexcon :excon long).
   ((? :(atpat -> bool) -> bool) (\(atpat :atpat). ((/\
   (((= :pat -> pat -> bool) $7) ((EXCONpat $1) $0))) ((/\
   (((= :state -> state -> bool) $6) $3)) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $2) FAILvef))
   ((? :(exname -> bool) -> bool) (\(en :exname). ((/\
   (((= :exname lift -> exname lift -> bool) ((lookuplongexcon_env $6)
   $2)) ((lift :exname -> exname lift) $0)))
   ((! :(val -> bool) -> bool) (\(v' :val). (~
   (((= :val -> val -> bool) $6) (EXVALval ((NAMEVALexval $1)
   $0))))))))))))))))) ((\/ ((? :(addr -> bool) -> bool) (\(a :addr).
   ((? :(atpat -> bool) -> bool) (\(atpat :atpat). ((/\
   (((= :pat -> pat -> bool) $7) ((CONpat ((BASE :con -> con long)
   (CON "ref"))) $0))) ((/\ (((= :state -> state -> bool) $6) $3))
   ((/\ (((= :val -> val -> bool) $4) (ADDRval $1)))
   ((? :(val -> bool) -> bool) (\(v :val). ((/\
   (((= :val lift -> val lift -> bool) ((lookupaddr_state $4) $2))
   ((lift :val -> val lift) $0))) ((((((eval_atpat $1) $4) $6) $0) $4)
   $3)))))))))))) ((\/ ((? :(var -> bool) -> bool) (\(var :var).
   ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv). ((/\
   (((= :pat -> pat -> bool) $8) ((LAYEREDpat $2) $1))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $3) (VARENVvef
   ((add_varenv (((insert_into_varenv empty_varenv) $2) $5)) $0))))
   ((((((eval_pat $1) $7) $6) $5) $4) (VARENVvef $0)))))))))))
   ((? :(var -> bool) -> bool) (\(var :var).
   ((? :(pat -> bool) -> bool) (\(pat :pat). ((/\
   (((= :pat -> pat -> bool) $7) ((LAYEREDpat $1) $0))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $2) FAILvef))
   ((((((eval_pat $0) $6) $5) $4) $3)
   FAILvef)))))))))))))))))))))))))))`),
 ((eval_patrow_match_DEF),
  [],
  `((! :(patrow -> bool) -> bool) (\(pat' :patrow).
   ((! :(state -> bool) -> bool) (\(sta :state).
   ((! :(env -> bool) -> bool) (\(env :env).
   ((! :(record -> bool) -> bool) (\(rec :record).
   ((! :(state -> bool) -> bool) (\(sta' :state).
   ((! :(varenv_fail -> bool) -> bool) (\(var :varenv_fail).
   (((= :bool -> bool -> bool) ((((((eval_patrow_match $5) $4) $3) $2)
   $1) $0)) ((\/ ((/\ (((= :patrow -> patrow -> bool) $5) DOTDOTDOT))
   ((/\ (((= :state -> state -> bool) $4) $1))
   (((= :varenv_fail -> varenv_fail -> bool) $0) (VARENVvef
   empty_varenv))))) ((\/ ((? :(label -> bool) -> bool)
   (\(lab :label). ((? :(pat -> bool) -> bool) (\(pat :pat). ((/\
   (((= :patrow -> patrow -> bool) $7) (((PATROW $1) $0)
   (NONE :patrow option)))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $2) FAILvef))
   ((((((eval_pat $0) $6) $5) ((lower :val lift -> val) ((lookup_label
   $4) $1))) $3) FAILvef)))))))) ((\/ ((? :(label -> bool) -> bool)
   (\(lab :label). ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(patrow -> bool) -> bool) (\(patrow :patrow). ((/\
   (((= :patrow -> patrow -> bool) $8) (((PATROW $2) $1)
   ((SOME :patrow -> patrow option) $0)))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $3) FAILvef))
   ((((((eval_pat $1) $7) $6) ((lower :val lift -> val) ((lookup_label
   $5) $2))) $4) FAILvef)))))))))) ((\/ ((? :(label -> bool) -> bool)
   (\(lab :label). ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv). ((/\
   (((= :patrow -> patrow -> bool) $8) (((PATROW $2) $1)
   (NONE :patrow option)))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $3) (VARENVvef $0)))
   ((((((eval_pat $1) $7) $6) ((lower :val lift -> val) ((lookup_label
   $5) $2))) $4) (VARENVvef $0))))))))))) ((\/
   ((? :(label -> bool) -> bool) (\(lab :label).
   ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(patrow -> bool) -> bool) (\(patrow :patrow).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv).
   ((? :(varenv -> bool) -> bool) (\(VE' :varenv). ((/\
   (((= :patrow -> patrow -> bool) $10) (((PATROW $4) $3)
   ((SOME :patrow -> patrow option) $2)))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $5) (VARENVvef
   ((add_varenv $1) $0)))) ((? :(state -> bool) -> bool)
   (\(s' :state). ((/\ ((((((eval_pat $4) $10) $9)
   ((lower :val lift -> val) ((lookup_label $8) $5))) $0) (VARENVvef
   $2))) ((((((eval_patrow $3) $0) $9) $8) $7) (VARENVvef
   $1)))))))))))))))))) ((? :(label -> bool) -> bool) (\(lab :label).
   ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(patrow -> bool) -> bool) (\(patrow :patrow). ((/\
   (((= :patrow -> patrow -> bool) $8) (((PATROW $2) $1)
   ((SOME :patrow -> patrow option) $0)))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $3) FAILvef))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv). ((/\ ((((((eval_pat
   $3) $9) $8) ((lower :val lift -> val) ((lookup_label $7) $4))) $1)
   (VARENVvef $0))) ((((((eval_patrow $2) $1) $8) $7) $6)
   FAILvef))))))))))))))))))))))))))))))))`),
 ((eval_atpat_match_DEF),
  [],
  `((! :(atpat -> bool) -> bool) (\(atp :atpat).
   ((! :(state -> bool) -> bool) (\(sta :state).
   ((! :(env -> bool) -> bool) (\(env :env).
   ((! :(val -> bool) -> bool) (\(val :val).
   ((! :(state -> bool) -> bool) (\(sta' :state).
   ((! :(varenv_fail -> bool) -> bool) (\(var' :varenv_fail).
   (((= :bool -> bool -> bool) ((((((eval_atpat_match $5) $4) $3) $2)
   $1) $0)) ((\/ ((/\ (((= :atpat -> atpat -> bool) $5)
   WILDCARDatpat)) ((/\ (((= :state -> state -> bool) $4) $1))
   (((= :varenv_fail -> varenv_fail -> bool) $0) (VARENVvef
   empty_varenv))))) ((\/ ((? :(scon -> bool) -> bool) (\(scon :scon).
   ((/\ (((= :atpat -> atpat -> bool) $6) (SCONatpat $0))) ((/\
   (((= :state -> state -> bool) $5) $2)) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $1) (VARENVvef
   empty_varenv))) (((= :val -> val -> bool) $3) (SVALval (value_of
   $0))))))))) ((\/ ((? :(scon -> bool) -> bool) (\(scon :scon). ((/\
   (((= :atpat -> atpat -> bool) $6) (SCONatpat $0))) ((/\
   (((= :state -> state -> bool) $5) $2)) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $1) FAILvef)) (~
   (((= :val -> val -> bool) $3) (SVALval (value_of $0)))))))))) ((\/
   ((? :(var -> bool) -> bool) (\(var :var). ((/\
   (((= :atpat -> atpat -> bool) $6) (VARatpat $0))) ((/\
   (((= :state -> state -> bool) $5) $2))
   (((= :varenv_fail -> varenv_fail -> bool) $1) (VARENVvef
   (((insert_into_varenv empty_varenv) $0) $3)))))))) ((\/
   ((? :(con long -> bool) -> bool) (\(longcon :con long). ((/\
   (((= :atpat -> atpat -> bool) $6) (CONatpat $0))) ((/\
   (((= :state -> state -> bool) $5) $2)) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $1) (VARENVvef
   empty_varenv))) (((= :val -> val -> bool) $3) (CONval
   ((long_base :con long -> con) $0))))))))) ((\/
   ((? :(con long -> bool) -> bool) (\(longcon :con long). ((/\
   (((= :atpat -> atpat -> bool) $6) (CONatpat $0))) ((/\
   (((= :state -> state -> bool) $5) $2)) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $1) FAILvef)) (~
   (((= :val -> val -> bool) $3) (CONval ((long_base :con long -> con)
   $0)))))))))) ((\/ ((? :(excon long -> bool) -> bool)
   (\(longexcon :excon long). ((? :(exname -> bool) -> bool)
   (\(en :exname). ((/\ (((= :atpat -> atpat -> bool) $7) (EXCONatpat
   $1))) ((/\ (((= :state -> state -> bool) $6) $3)) ((/\
   (((= :val -> val -> bool) $4) (EXVALval (NAMEexval $0)))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $2) (VARENVvef
   empty_varenv))) (((= :exname lift -> exname lift -> bool)
   ((lookuplongexcon_env $5) $1)) ((lift :exname -> exname lift)
   $0))))))))))) ((\/ ((? :(excon long -> bool) -> bool)
   (\(longexcon :excon long). ((? :(exname -> bool) -> bool)
   (\(en :exname). ((/\ (((= :atpat -> atpat -> bool) $7) (EXCONatpat
   $1))) ((/\ (((= :state -> state -> bool) $6) $3)) ((/\
   (((= :val -> val -> bool) $4) (EXVALval (NAMEexval $0)))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $2) FAILvef))
   ((? :(exname -> bool) -> bool) (\(en' :exname). ((/\
   (((= :exname lift -> exname lift -> bool) ((lookuplongexcon_env $6)
   $2)) ((lift :exname -> exname lift) $0))) (~
   (((= :exname -> exname -> bool) $1) $0)))))))))))))) ((\/ ((/\
   (((= :atpat -> atpat -> bool) $5) (RECORDatpat
   (NONE :patrow option)))) ((/\ (((= :state -> state -> bool) $4)
   $1)) ((/\ (((= :varenv_fail -> varenv_fail -> bool) $0) (VARENVvef
   empty_varenv))) (((= :val -> val -> bool) $2) (RECORDval
   empty_record)))))) ((\/ ((? :(varenv -> bool) -> bool)
   (\(VE :varenv). ((? :(patrow -> bool) -> bool) (\(patrow :patrow).
   ((/\ (((= :atpat -> atpat -> bool) $7) (RECORDatpat
   ((SOME :patrow -> patrow option) $0)))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $2) (VARENVvef
   ((add_varenv empty_varenv) $1)))) ((? :(record -> bool) -> bool)
   (\(r :record). ((/\ (((= :val -> val -> bool) $5) (RECORDval
   ((add_record empty_record) $0)))) ((((((eval_patrow $1) $7) $6) $0)
   $4) (VARENVvef $2)))))))))))) ((\/ ((? :(patrow -> bool) -> bool)
   (\(patrow :patrow). ((/\ (((= :atpat -> atpat -> bool) $6)
   (RECORDatpat ((SOME :patrow -> patrow option) $0)))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $1) FAILvef))
   ((? :(record -> bool) -> bool) (\(r :record). ((/\
   (((= :val -> val -> bool) $4) (RECORDval ((add_record empty_record)
   $0)))) ((((((eval_patrow $1) $6) $5) $0) $3) FAILvef)))))))))
   ((? :(pat -> bool) -> bool) (\(pat :pat). ((/\
   (((= :atpat -> atpat -> bool) $6) (PARatpat $0))) ((((((eval_pat
   $0) $5) $4) $3) $2) $1))))))))))))))))))))))))))))`),
 ((eval_exbind_match_DEF),
  [],
  `((! :(exbind -> bool) -> bool) (\(exb :exbind).
   ((! :(state -> bool) -> bool) (\(sta :state).
   ((! :(env -> bool) -> bool) (\(env :env).
   ((! :(state -> bool) -> bool) (\(sta' :state).
   ((! :(exconenv_pack -> bool) -> bool) (\(exc :exconenv_pack).
   (((= :bool -> bool -> bool) (((((eval_exbind_match $4) $3) $2) $1)
   $0)) ((\/ ((? :(excon -> bool) -> bool) (\(excon :excon).
   ((? :(exname -> bool) -> bool) (\(en :exname). ((/\
   (((= :exbind -> exbind -> bool) $6) ((EXBIND1 $1)
   (NONE :exbind option)))) ((/\
   (((= :exconenv_pack -> exconenv_pack -> bool) $2) (EXCONENVeep
   (((insert_into_exconenv empty_exconenv) $1) $0)))) ((/\
   (((= :exname -> exname -> bool) $0) (new_exname (STATE_arg2 $5))))
   (((= :state -> state -> bool) $3) ((add_exname $0) $5))))))))))
   ((\/ ((? :(excon -> bool) -> bool) (\(excon :excon).
   ((? :(exbind -> bool) -> bool) (\(eb :exbind).
   ((? :(exname -> bool) -> bool) (\(en :exname).
   ((? :(exconenv -> bool) -> bool) (\(EE :exconenv). ((/\
   (((= :exbind -> exbind -> bool) $8) ((EXBIND1 $3)
   ((SOME :exbind -> exbind option) $2)))) ((/\
   (((= :exconenv_pack -> exconenv_pack -> bool) $4) (EXCONENVeep
   ((add_exconenv (((insert_into_exconenv empty_exconenv) $3) $1))
   $0)))) ((? :(state -> bool) -> bool) (\(s' :state). ((/\
   (((= :exname -> exname -> bool) $2) (new_exname (STATE_arg2 $8))))
   ((/\ (((= :state -> state -> bool) $0) ((add_exname $2) $8)))
   (((((eval_exbind $3) $0) $7) $6) (EXCONENVeep $1)))))))))))))))))
   ((\/ ((? :(excon -> bool) -> bool) (\(excon :excon).
   ((? :(exbind -> bool) -> bool) (\(eb :exbind).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exbind -> exbind -> bool) $7) ((EXBIND1 $2)
   ((SOME :exbind -> exbind option) $1)))) ((/\
   (((= :exconenv_pack -> exconenv_pack -> bool) $3) (PACKeep $0)))
   ((? :(exname -> bool) -> bool) (\(en :exname).
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\
   (((= :exname -> exname -> bool) $1) (new_exname (STATE_arg2 $8))))
   ((/\ (((= :state -> state -> bool) $0) ((add_exname $1) $8)))
   (((((eval_exbind $3) $0) $7) $6) (PACKeep $2))))))))))))))))) ((\/
   ((? :(excon -> bool) -> bool) (\(excon :excon).
   ((? :(excon long -> bool) -> bool) (\(longexcon :excon long).
   ((? :(exname -> bool) -> bool) (\(en :exname). ((/\
   (((= :exbind -> exbind -> bool) $7) (((EXBIND2 $2) $1)
   (NONE :exbind option)))) ((/\ (((= :state -> state -> bool) $6)
   $4)) ((/\ (((= :exconenv_pack -> exconenv_pack -> bool) $3)
   (EXCONENVeep (((insert_into_exconenv empty_exconenv) $2) $0))))
   (((= :exname lift -> exname lift -> bool) ((lookuplongexcon_env $5)
   $1)) ((lift :exname -> exname lift) $0)))))))))))) ((\/
   ((? :(excon -> bool) -> bool) (\(excon :excon).
   ((? :(excon long -> bool) -> bool) (\(longexcon :excon long).
   ((? :(exbind -> bool) -> bool) (\(eb :exbind).
   ((? :(exname -> bool) -> bool) (\(en :exname).
   ((? :(exconenv -> bool) -> bool) (\(EE :exconenv). ((/\
   (((= :exbind -> exbind -> bool) $9) (((EXBIND2 $4) $3)
   ((SOME :exbind -> exbind option) $2)))) ((/\
   (((= :exconenv_pack -> exconenv_pack -> bool) $5) (EXCONENVeep
   ((add_exconenv (((insert_into_exconenv empty_exconenv) $4) $1))
   $0)))) ((/\ (((= :exname lift -> exname lift -> bool)
   ((lookuplongexcon_env $7) $3)) ((lift :exname -> exname lift) $1)))
   (((((eval_exbind $2) $8) $7) $6) (EXCONENVeep $0))))))))))))))))
   ((? :(excon -> bool) -> bool) (\(excon :excon).
   ((? :(excon long -> bool) -> bool) (\(longexcon :excon long).
   ((? :(exbind -> bool) -> bool) (\(eb :exbind).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exbind -> exbind -> bool) $8) (((EXBIND2 $3) $2)
   ((SOME :exbind -> exbind option) $1)))) ((/\
   (((= :exconenv_pack -> exconenv_pack -> bool) $4) (PACKeep $0)))
   ((? :(exname -> bool) -> bool) (\(en :exname). ((/\
   (((= :exname lift -> exname lift -> bool) ((lookuplongexcon_env $7)
   $3)) ((lift :exname -> exname lift) $0))) (((((eval_exbind $2) $8)
   $7) $6) (PACKeep $1)))))))))))))))))))))))))))))))`)]
theorems =
[((eval_valbind_det),
  [],
  `((! :(valbind -> bool) -> bool) (\(vb :valbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(e :env).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(varenv_pack -> bool) -> bool) (\(vep :varenv_pack).
   ((! :(state -> bool) -> bool) (\(s2' :state).
   ((! :(varenv_pack -> bool) -> bool) (\(vep' :varenv_pack). ((==>
   ((/\ (((((eval_valbind $6) $5) $4) $3) $2)) (((((eval_valbind $6)
   $5) $4) $1) $0))) ((/\ (((= :state -> state -> bool) $3) $1))
   (((= :varenv_pack -> varenv_pack -> bool) $2)
   $0)))))))))))))))))`),
 ((eval_dec_det),
  [],
  `((! :(dec -> bool) -> bool) (\(d :dec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(e :env).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(env_pack -> bool) -> bool) (\(ep :env_pack).
   ((! :(state -> bool) -> bool) (\(s2' :state).
   ((! :(env_pack -> bool) -> bool) (\(ep' :env_pack). ((==> ((/\
   (((((eval_dec $6) $5) $4) $3) $2)) (((((eval_dec $6) $5) $4) $1)
   $0))) ((/\ (((= :state -> state -> bool) $3) $1))
   (((= :env_pack -> env_pack -> bool) $2) $0)))))))))))))))))`),
 ((eval_mrule_det),
  [],
  `((! :(mrule -> bool) -> bool) (\(mr :mrule).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(v :env). ((! :(val -> bool) -> bool)
   (\(e :val). ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(val_pack_fail -> bool) -> bool) (\(vpf :val_pack_fail).
   ((! :(state -> bool) -> bool) (\(s2' :state).
   ((! :(val_pack_fail -> bool) -> bool) (\(vpf' :val_pack_fail).
   ((==> ((/\ ((((((eval_mrule $7) $6) $5) $4) $3) $2))
   ((((((eval_mrule $7) $6) $5) $4) $1) $0))) ((/\
   (((= :state -> state -> bool) $3) $1))
   (((= :val_pack_fail -> val_pack_fail -> bool) $2)
   $0)))))))))))))))))))`),
 ((eval_match_det),
  [],
  `((! :(match -> bool) -> bool) (\(m :match).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(v :env). ((! :(val -> bool) -> bool)
   (\(e :val). ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(val_pack_fail -> bool) -> bool) (\(vpf :val_pack_fail).
   ((! :(state -> bool) -> bool) (\(s2' :state).
   ((! :(val_pack_fail -> bool) -> bool) (\(vpf' :val_pack_fail).
   ((==> ((/\ ((((((eval_match $7) $6) $5) $4) $3) $2))
   ((((((eval_match $7) $6) $5) $4) $1) $0))) ((/\
   (((= :state -> state -> bool) $3) $1))
   (((= :val_pack_fail -> val_pack_fail -> bool) $2)
   $0)))))))))))))))))))`),
 ((eval_exp_det),
  [],
  `((! :(exp -> bool) -> bool) (\(ex :exp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(e :env).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(val_pack -> bool) -> bool) (\(vp :val_pack).
   ((! :(state -> bool) -> bool) (\(s2' :state).
   ((! :(val_pack -> bool) -> bool) (\(vp' :val_pack). ((==> ((/\
   (((((eval_exp $6) $5) $4) $3) $2)) (((((eval_exp $6) $5) $4) $1)
   $0))) ((/\ (((= :state -> state -> bool) $3) $1))
   (((= :val_pack -> val_pack -> bool) $2) $0)))))))))))))))))`),
 ((eval_exprow_det),
  [],
  `((! :(exprow -> bool) -> bool) (\(er :exprow).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(e :env).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(record_pack -> bool) -> bool) (\(rp :record_pack).
   ((! :(state -> bool) -> bool) (\(s2' :state).
   ((! :(record_pack -> bool) -> bool) (\(rp' :record_pack). ((==>
   ((/\ (((((eval_exprow $6) $5) $4) $3) $2)) (((((eval_exprow $6) $5)
   $4) $1) $0))) ((/\ (((= :state -> state -> bool) $3) $1))
   (((= :record_pack -> record_pack -> bool) $2)
   $0)))))))))))))))))`),
 ((eval_atexp_det),
  [],
  `((! :(atexp -> bool) -> bool) (\(ae :atexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(e :env).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(val_pack -> bool) -> bool) (\(vp :val_pack).
   ((! :(state -> bool) -> bool) (\(s2' :state).
   ((! :(val_pack -> bool) -> bool) (\(vp' :val_pack). ((==> ((/\
   (((((eval_atexp $6) $5) $4) $3) $2)) (((((eval_atexp $6) $5) $4)
   $1) $0))) ((/\ (((= :state -> state -> bool) $3) $1))
   (((= :val_pack -> val_pack -> bool) $2) $0)))))))))))))))))`),
 ((eval_valbind_match_thm),
  [],
  `((! :(valbind -> bool) -> bool) (\(vb :valbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(e :env).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(varenv_pack -> bool) -> bool) (\(vep :varenv_pack). ((==>
   (((((eval_valbind $4) $3) $2) $1) $0)) ((\/
   ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv). ((/\
   (((= :valbind -> valbind -> bool) $7) (((PLAINvalbind $2) $1)
   (NONE :valbind option)))) ((/\
   (((= :varenv_pack -> varenv_pack -> bool) $3) (VARENVvep $0)))
   ((? :(val -> bool) -> bool) (\(v :val).
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_exp $3)
   $8) $7) $0) (VALvp $1))) ((((((eval_pat $4) $0) $7) $1) $6)
   (VARENVvef $2)))))))))))))))) ((\/ ((? :(pat -> bool) -> bool)
   (\(pat :pat). ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :valbind -> valbind -> bool) $7) (((PLAINvalbind $2) $1)
   (NONE :valbind option)))) ((/\
   (((= :varenv_pack -> varenv_pack -> bool) $3) (PACKvep $0)))
   (((((eval_exp $1) $6) $5) $4) (PACKvp $0))))))))))) ((\/
   ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(valbind -> bool) -> bool) (\(valbind :valbind).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv).
   ((? :(varenv -> bool) -> bool) (\(VE' :varenv). ((/\
   (((= :valbind -> valbind -> bool) $9) (((PLAINvalbind $4) $3)
   ((SOME :valbind -> valbind option) $2)))) ((/\
   (((= :varenv_pack -> varenv_pack -> bool) $5) (VARENVvep
   ((add_varenv $1) $0)))) ((? :(val -> bool) -> bool) (\(v :val).
   ((? :(state -> bool) -> bool) (\(s2' :state).
   ((? :(state -> bool) -> bool) (\(s3 :state). ((/\ (((((eval_exp $6)
   $11) $10) $1) (VALvp $2))) ((/\ ((((((eval_pat $7) $1) $10) $2) $0)
   (VARENVvef $4))) (((((eval_valbind $5) $0) $10) $9) (VARENVvep
   $3))))))))))))))))))))))) ((\/ ((? :(pat -> bool) -> bool)
   (\(pat :pat). ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(valbind -> bool) -> bool) (\(valbind :valbind).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :valbind -> valbind -> bool) $8) (((PLAINvalbind $3) $2)
   ((SOME :valbind -> valbind option) $1)))) ((/\
   (((= :varenv_pack -> varenv_pack -> bool) $4) (PACKvep $0)))
   (((((eval_exp $2) $7) $6) $5) (PACKvp $0))))))))))))) ((\/
   ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(valbind -> bool) -> bool) (\(valbind :valbind).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :valbind -> valbind -> bool) $8) (((PLAINvalbind $3) $2)
   ((SOME :valbind -> valbind option) $1)))) ((/\
   (((= :varenv_pack -> varenv_pack -> bool) $4) (PACKvep $0)))
   ((? :(val -> bool) -> bool) (\(v :val).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv).
   ((? :(state -> bool) -> bool) (\(s2' :state).
   ((? :(state -> bool) -> bool) (\(s3 :state). ((/\ (((((eval_exp $6)
   $11) $10) $1) (VALvp $3))) ((/\ ((((((eval_pat $7) $1) $10) $3) $0)
   (VARENVvef $2))) (((((eval_valbind $5) $0) $10) $9) (PACKvep
   $4))))))))))))))))))))))) ((\/ ((? :(pat -> bool) -> bool)
   (\(pat :pat). ((? :(exp -> bool) -> bool) (\(exp :exp). ((/\
   (((= :valbind -> valbind -> bool) $6) (((PLAINvalbind $1) $0)
   (NONE :valbind option)))) ((/\
   (((= :varenv_pack -> varenv_pack -> bool) $2) (PACKvep (PACK
   (NAMEexval (EXNAME 8)))))) ((? :(val -> bool) -> bool) (\(v :val).
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_exp $2)
   $7) $6) $0) (VALvp $1))) ((((((eval_pat $3) $0) $6) $1) $5)
   FAILvef))))))))))))) ((\/ ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(valbind -> bool) -> bool) (\(valbind :valbind). ((/\
   (((= :valbind -> valbind -> bool) $7) (((PLAINvalbind $2) $1)
   ((SOME :valbind -> valbind option) $0)))) ((/\
   (((= :varenv_pack -> varenv_pack -> bool) $3) (PACKvep (PACK
   (NAMEexval (EXNAME 8)))))) ((? :(val -> bool) -> bool) (\(v :val).
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_exp $3)
   $8) $7) $0) (VALvp $1))) ((((((eval_pat $4) $0) $7) $1) $6)
   FAILvef))))))))))))))) ((\/ ((? :(valbind -> bool) -> bool)
   (\(valbind :valbind). ((? :(varenv -> bool) -> bool)
   (\(VE :varenv). ((/\ (((= :valbind -> valbind -> bool) $6)
   (RECvalbind $1))) ((/\ (((= :varenv_pack -> varenv_pack -> bool)
   $2) (VARENVvep (rec_varenv $0)))) (((((eval_valbind $1) $5) $4) $3)
   (VARENVvep $0))))))))) ((? :(valbind -> bool) -> bool)
   (\(valbind :valbind). ((? :(pack -> bool) -> bool) (\(p :pack).
   ((/\ (((= :valbind -> valbind -> bool) $6) (RECvalbind $1))) ((/\
   (((= :varenv_pack -> varenv_pack -> bool) $2) (PACKvep $0)))
   (((((eval_valbind $1) $5) $4) $3) (PACKvep
   $0)))))))))))))))))))))))))))`),
 ((eval_dec_match_thm),
  [],
  `((! :(dec -> bool) -> bool) (\(d :dec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(e :env).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(env_pack -> bool) -> bool) (\(ep :env_pack). ((==>
   (((((eval_dec $4) $3) $2) $1) $0)) ((\/
   ((? :(valbind -> bool) -> bool) (\(valbind :valbind).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv). ((/\
   (((= :dec -> dec -> bool) $6) (VALdec $1))) ((/\
   (((= :env_pack -> env_pack -> bool) $2) (ENVep (((ENV empty_strenv)
   $0) empty_exconenv)))) (((((eval_valbind $1) $5) $4) $3) (VARENVvep
   $0))))))))) ((\/ ((? :(valbind -> bool) -> bool)
   (\(valbind :valbind). ((? :(pack -> bool) -> bool) (\(p :pack).
   ((/\ (((= :dec -> dec -> bool) $6) (VALdec $1))) ((/\
   (((= :env_pack -> env_pack -> bool) $2) (PACKep $0)))
   (((((eval_valbind $1) $5) $4) $3) (PACKvep $0))))))))) ((\/
   ((? :(exbind -> bool) -> bool) (\(exbind :exbind).
   ((? :(exconenv -> bool) -> bool) (\(EE :exconenv). ((/\
   (((= :dec -> dec -> bool) $6) (EXCEPTdec $1))) ((/\
   (((= :env_pack -> env_pack -> bool) $2) (ENVep (((ENV empty_strenv)
   empty_varenv) $0)))) (((((eval_exbind $1) $5) $4) $3) (EXCONENVeep
   $0))))))))) ((\/ ((? :(exbind -> bool) -> bool) (\(exbind :exbind).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :dec -> dec -> bool) $6) (EXCEPTdec $1))) ((/\
   (((= :env_pack -> env_pack -> bool) $2) (PACKep $0)))
   (((((eval_exbind $1) $5) $4) $3) (PACKeep $0))))))))) ((\/
   ((? :(dec -> bool) -> bool) (\(dec1 :dec).
   ((? :(dec -> bool) -> bool) (\(dec2 :dec).
   ((? :(env -> bool) -> bool) (\(E2 :env). ((/\
   (((= :dec -> dec -> bool) $7) ((LOCALdec $2) $1))) ((/\
   (((= :env_pack -> env_pack -> bool) $3) (ENVep $0)))
   ((? :(env -> bool) -> bool) (\(E1 :env).
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_dec $4)
   $8) $7) $0) (ENVep $1))) (((((eval_dec $3) $0) ((add_env $7) $1))
   $6) (ENVep $2)))))))))))))))) ((\/ ((? :(dec -> bool) -> bool)
   (\(dec1 :dec). ((? :(dec -> bool) -> bool) (\(dec2 :dec).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :dec -> dec -> bool) $7) ((LOCALdec $2) $1))) ((/\
   (((= :env_pack -> env_pack -> bool) $3) (PACKep $0))) (((((eval_dec
   $2) $6) $5) $4) (PACKep $0))))))))))) ((\/
   ((? :(dec -> bool) -> bool) (\(dec1 :dec).
   ((? :(dec -> bool) -> bool) (\(dec2 :dec).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :dec -> dec -> bool) $7) ((LOCALdec $2) $1))) ((/\
   (((= :env_pack -> env_pack -> bool) $3) (PACKep $0)))
   ((? :(env -> bool) -> bool) (\(E1 :env).
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_dec $4)
   $8) $7) $0) (ENVep $1))) (((((eval_dec $3) $0) ((add_env $7) $1))
   $6) (PACKep $2)))))))))))))))) ((\/
   ((? :(strid long nonemptylist -> bool) -> bool)
   (\(longstrid_1_n :strid long nonemptylist).
   ((? :(env nonemptylist -> bool) -> bool)
   (\(E_1_n :env nonemptylist). ((/\ (((= :dec -> dec -> bool) $6)
   (OPENdec $1))) ((/\ (((= :state -> state -> bool) $5) $3)) ((/\
   (((= :env_pack -> env_pack -> bool) $2) (ENVep
   (add_nonemptylist_env $0))))
   (((= :env lift nonemptylist -> env lift nonemptylist -> bool)
   (((nonempty_MAP :(strid long -> env lift) ->
                    strid long nonemptylist -> env lift nonemptylist)
   (lookuplongstrid_env $4)) $1))
   (((nonempty_MAP :(env -> env lift) -> env nonemptylist ->
                    env lift nonemptylist) (lift :env -> env lift))
   $0)))))))))) ((\/ ((/\ (((= :dec -> dec -> bool) $4) EMPTYdec))
   ((/\ (((= :state -> state -> bool) $3) $1))
   (((= :env_pack -> env_pack -> bool) $0) (ENVep (((ENV empty_strenv)
   empty_varenv) empty_exconenv)))))) ((\/ ((? :(dec -> bool) -> bool)
   (\(dec1 :dec). ((? :(dec -> bool) -> bool) (\(dec2 :dec).
   ((? :(env -> bool) -> bool) (\(E1 :env).
   ((? :(env -> bool) -> bool) (\(E2 :env). ((/\
   (((= :dec -> dec -> bool) $8) ((SEQdec $3) $2))) ((/\
   (((= :env_pack -> env_pack -> bool) $4) (ENVep ((add_env $1) $0))))
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_dec $4)
   $8) $7) $0) (ENVep $2))) (((((eval_dec $3) $0) ((add_env $7) $2))
   $6) (ENVep $1)))))))))))))))) ((\/ ((? :(dec -> bool) -> bool)
   (\(dec1 :dec). ((? :(dec -> bool) -> bool) (\(dec2 :dec).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :dec -> dec -> bool) $7) ((SEQdec $2) $1))) ((/\
   (((= :env_pack -> env_pack -> bool) $3) (PACKep $0))) (((((eval_dec
   $2) $6) $5) $4) (PACKep $0))))))))))) ((? :(dec -> bool) -> bool)
   (\(dec1 :dec). ((? :(dec -> bool) -> bool) (\(dec2 :dec).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :dec -> dec -> bool) $7) ((SEQdec $2) $1))) ((/\
   (((= :env_pack -> env_pack -> bool) $3) (PACKep $0)))
   ((? :(env -> bool) -> bool) (\(E1 :env).
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_dec $4)
   $8) $7) $0) (ENVep $1))) (((((eval_dec $3) $0) ((add_env $7) $1))
   $6) (PACKep $2)))))))))))))))))))))))))))))))))))))`),
 ((eval_mrule_match_thm),
  [],
  `((! :(mrule -> bool) -> bool) (\(mr :mrule).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(v :env). ((! :(val -> bool) -> bool)
   (\(e :val). ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(val_pack_fail -> bool) -> bool) (\(vpf :val_pack_fail). ((==>
   ((((((eval_mrule $5) $4) $3) $2) $1) $0)) ((\/
   ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(val -> bool) -> bool) (\(v' :val). ((/\
   (((= :mrule -> mrule -> bool) $8) ((MRULE $2) $1))) ((/\
   (((= :val_pack_fail -> val_pack_fail -> bool) $3) (VALvpf $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv). ((/\ ((((((eval_pat
   $4) $9) $8) $7) $1) (VARENVvef $0))) (((((eval_exp $3) $1)
   ((add_env $8) (((ENV empty_strenv) $0) empty_exconenv))) $6) (VALvp
   $2)))))))))))))))) ((\/ ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :mrule -> mrule -> bool) $8) ((MRULE $2) $1))) ((/\
   (((= :val_pack_fail -> val_pack_fail -> bool) $3) (PACKvpf $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv). ((/\ ((((((eval_pat
   $4) $9) $8) $7) $1) (VARENVvef $0))) (((((eval_exp $3) $1)
   ((add_env $8) (((ENV empty_strenv) $0) empty_exconenv))) $6)
   (PACKvp $2)))))))))))))))) ((? :(pat -> bool) -> bool)
   (\(pat :pat). ((? :(exp -> bool) -> bool) (\(exp :exp). ((/\
   (((= :mrule -> mrule -> bool) $7) ((MRULE $1) $0))) ((/\
   (((= :val_pack_fail -> val_pack_fail -> bool) $2) FAILvpf))
   ((((((eval_pat $1) $6) $5) $4) $3) FAILvef))))))))))))))))))))))`),
 ((eval_match_match_thm),
  [],
  `((! :(match -> bool) -> bool) (\(m :match).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(v :env). ((! :(val -> bool) -> bool)
   (\(e :val). ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(val_pack_fail -> bool) -> bool) (\(vpf :val_pack_fail). ((==>
   ((((((eval_match $5) $4) $3) $2) $1) $0)) ((\/
   ((? :(mrule -> bool) -> bool) (\(mrule :mrule).
   ((? :(match option -> bool) -> bool) (\(match_op :match option).
   ((? :(val -> bool) -> bool) (\(v' :val). ((/\
   (((= :match -> match -> bool) $8) ((MATCH $2) $1))) ((/\
   (((= :val_pack_fail -> val_pack_fail -> bool) $3) (VALvpf $0)))
   ((((((eval_mrule $2) $7) $6) $5) $4) (VALvpf $0))))))))))) ((\/
   ((? :(mrule -> bool) -> bool) (\(mrule :mrule).
   ((? :(match option -> bool) -> bool) (\(match_op :match option).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :match -> match -> bool) $8) ((MATCH $2) $1))) ((/\
   (((= :val_pack_fail -> val_pack_fail -> bool) $3) (PACKvpf $0)))
   ((((((eval_mrule $2) $7) $6) $5) $4) (PACKvpf $0))))))))))) ((\/
   ((? :(mrule -> bool) -> bool) (\(mrule :mrule). ((/\
   (((= :match -> match -> bool) $6) ((MATCH $0)
   (NONE :match option)))) ((/\
   (((= :val_pack_fail -> val_pack_fail -> bool) $1) FAILvpf))
   ((((((eval_mrule $0) $5) $4) $3) $2) FAILvpf))))))
   ((? :(mrule -> bool) -> bool) (\(mrule :mrule).
   ((? :(match -> bool) -> bool) (\(match :match). ((/\
   (((= :match -> match -> bool) $7) ((MATCH $1)
   ((SOME :match -> match option) $0)))) ((? :(state -> bool) -> bool)
   (\(s' :state). ((/\ ((((((eval_mrule $2) $7) $6) $5) $0) FAILvpf))
   ((((((eval_match $1) $0) $6) $5) $4) $3)))))))))))))))))))))))))`),
 ((eval_exp_match_thm),
  [],
  `((! :(exp -> bool) -> bool) (\(ex :exp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(e :env).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(val_pack -> bool) -> bool) (\(vp :val_pack). ((==>
   (((((eval_exp $4) $3) $2) $1) $0)) ((\/
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp). ((/\
   (((= :exp -> exp -> bool) $5) (ATEXPexp $0))) (((((eval_atexp $0)
   $4) $3) $2) $1))))) ((\/ ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(con -> bool) -> bool) (\(c :con). ((? :(val -> bool) -> bool)
   (\(v :val). ((/\ (((= :exp -> exp -> bool) $8) ((APPexp $3) $2)))
   ((/\ (((= :val_pack -> val_pack -> bool) $4) (VALvp ((APPCONval $1)
   $0)))) ((? :(state -> bool) -> bool) (\(s' :state). ((/\
   (((((eval_exp $4) $8) $7) $0) (VALvp (CONval $2)))) ((/\ (~
   (((= :con -> con -> bool) $2) (CON "ref")))) (((((eval_atexp $3)
   $0) $7) $6) (VALvp $1))))))))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $7) ((APPexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0))) (((((eval_exp
   $2) $6) $5) $4) (PACKvp $0))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $7) ((APPexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(con -> bool) -> bool) (\(c :con). ((/\ (((((eval_exp $4) $8)
   $7) $1) (VALvp (CONval $0)))) ((/\ (~ (((= :con -> con -> bool) $0)
   (CON "ref")))) (((((eval_atexp $3) $1) $7) $6) (PACKvp
   $2))))))))))))))))) ((\/ ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(exname -> bool) -> bool) (\(en :exname).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\
   (((= :exp -> exp -> bool) $8) ((APPexp $3) $2))) ((/\
   (((= :val_pack -> val_pack -> bool) $4) (VALvp (EXVALval
   ((NAMEVALexval $1) $0))))) ((? :(state -> bool) -> bool)
   (\(s' :state). ((/\ (((((eval_exp $4) $8) $7) $0) (VALvp (EXVALval
   (NAMEexval $2))))) (((((eval_atexp $3) $0) $7) $6) (VALvp
   $1)))))))))))))))) ((\/ ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $7) ((APPexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(exname -> bool) -> bool) (\(en :exname). ((/\ (((((eval_exp
   $4) $8) $7) $1) (VALvp (EXVALval (NAMEexval $0))))) (((((eval_atexp
   $3) $1) $7) $6) (PACKvp $2)))))))))))))))) ((\/
   ((? :(state -> bool) -> bool) (\(s'' :state).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(addr -> bool) -> bool) (\(a :addr).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\
   (((= :exp -> exp -> bool) $9) ((APPexp $3) $2))) ((/\
   (((= :state -> state -> bool) $6) (((insert_into_state_mem $4) $1)
   $0))) ((/\ (((= :val_pack -> val_pack -> bool) $5) (VALvp (ADDRval
   $1)))) ((? :(state -> bool) -> bool) (\(s' :state). ((/\
   (((((eval_exp $4) $9) $8) $0) (VALvp (CONval (CON "ref"))))) ((/\
   (((((eval_atexp $3) $0) $8) $5) (VALvp $1)))
   (((= :addr -> addr -> bool) $2) (new_addr $5))))))))))))))))))))
   ((\/ ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $7) ((APPexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_exp $3)
   $7) $6) $0) (VALvp (CONval (CON "ref"))))) (((((eval_atexp $2) $0)
   $6) $5) (PACKvp $1)))))))))))))) ((\/ ((? :(state -> bool) -> bool)
   (\(s'' :state). ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(addr -> bool) -> bool) (\(a :addr).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\
   (((= :exp -> exp -> bool) $9) ((APPexp $3) $2))) ((/\
   (((= :state -> state -> bool) $6) (((insert_into_state_mem $4) $1)
   $0))) ((/\ (((= :val_pack -> val_pack -> bool) $5) (VALvp
   (RECORDval empty_record)))) ((? :(state -> bool) -> bool)
   (\(s' :state). ((/\ (((((eval_exp $4) $9) $8) $0) (VALvp ASSGval)))
   (((((eval_atexp $3) $0) $8) $5) (VALvp (RECORDval
   (((insert_into_record (((insert_into_record empty_record) (LABEL
   "1")) (ADDRval $2))) (LABEL "2")) $1))))))))))))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $7) ((APPexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_exp $3)
   $7) $6) $0) (VALvp ASSGval))) (((((eval_atexp $2) $0) $6) $5)
   (PACKvp $1)))))))))))))) ((\/ ((? :(exp -> bool) -> bool)
   (\(exp :exp). ((? :(atexp -> bool) -> bool) (\(atexp :atexp). ((/\
   (((= :exp -> exp -> bool) $6) ((APPexp $1) $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(basval -> bool) -> bool) (\(b :basval).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\ (((((eval_exp $4) $8)
   $7) $2) (VALvp (BASval $1)))) ((/\ (((((eval_atexp $3) $2) $7) $6)
   (VALvp $0))) (((= :val_pack -> val_pack -> bool) ((apply $1) $0))
   $5))))))))))))))) ((\/ ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $7) ((APPexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(basval -> bool) -> bool) (\(b :basval). ((/\ (((((eval_exp
   $4) $8) $7) $1) (VALvp (BASval $0)))) (((((eval_atexp $3) $1) $7)
   $6) (PACKvp $2)))))))))))))))) ((\/ ((? :(exp -> bool) -> bool)
   (\(exp :exp). ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(val -> bool) -> bool) (\(v' :val). ((/\
   (((= :exp -> exp -> bool) $7) ((APPexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (VALvp $0)))
   ((? :(state -> bool) -> bool) (\(s2' :state).
   ((? :(state -> bool) -> bool) (\(s3 :state).
   ((? :(match -> bool) -> bool) (\(match :match).
   ((? :(env -> bool) -> bool) (\(E' :env).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\ (((((eval_exp $8) $12)
   $11) $5) (VALvp (CLOSUREval (((CLOSURE $3) $2) $1))))) ((/\
   (((((eval_atexp $7) $5) $11) $4) (VALvp $0))) ((((((eval_match $3)
   $4) ((add_env $2) (((ENV empty_strenv) (rec_varenv $1))
   empty_exconenv))) $0) $10) (VALvpf $6))))))))))))))))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $7) ((APPexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0)))
   ((? :(state -> bool) -> bool) (\(s2' :state).
   ((? :(match -> bool) -> bool) (\(match :match).
   ((? :(env -> bool) -> bool) (\(E' :env).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv). ((/\ (((((eval_exp
   $6) $10) $9) $3) (VALvp (CLOSUREval (((CLOSURE $2) $1) $0)))))
   (((((eval_atexp $5) $3) $9) $8) (PACKvp $4)))))))))))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $7) ((APPexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0)))
   ((? :(state -> bool) -> bool) (\(s2' :state).
   ((? :(state -> bool) -> bool) (\(s3 :state).
   ((? :(match -> bool) -> bool) (\(match :match).
   ((? :(env -> bool) -> bool) (\(E' :env).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\ (((((eval_exp $8) $12)
   $11) $5) (VALvp (CLOSUREval (((CLOSURE $3) $2) $1))))) ((/\
   (((((eval_atexp $7) $5) $11) $4) (VALvp $0))) ((((((eval_match $3)
   $4) ((add_env $2) (((ENV empty_strenv) (rec_varenv $1))
   empty_exconenv))) $0) $10) (PACKvpf $6)))))))))))))))))))))))))
   ((\/ ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(atexp -> bool) -> bool) (\(atexp :atexp). ((/\
   (((= :exp -> exp -> bool) $6) ((APPexp $1) $0))) ((/\
   (((= :val_pack -> val_pack -> bool) $2) (PACKvp (PACK (NAMEexval
   (EXNAME 7)))))) ((? :(state -> bool) -> bool) (\(s2' :state).
   ((? :(state -> bool) -> bool) (\(s3 :state).
   ((? :(match -> bool) -> bool) (\(match :match).
   ((? :(env -> bool) -> bool) (\(E' :env).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\ (((((eval_exp $7) $11)
   $10) $5) (VALvp (CLOSUREval (((CLOSURE $3) $2) $1))))) ((/\
   (((((eval_atexp $6) $5) $10) $4) (VALvp $0))) ((((((eval_match $3)
   $4) ((add_env $2) (((ENV empty_strenv) (rec_varenv $1))
   empty_exconenv))) $0) $9) FAILvpf)))))))))))))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(match -> bool) -> bool) (\(match :match).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\
   (((= :exp -> exp -> bool) $7) ((HANDLEexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (VALvp $0))) (((((eval_exp
   $2) $6) $5) $4) (VALvp $0))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(match -> bool) -> bool) (\(match :match).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\
   (((= :exp -> exp -> bool) $7) ((HANDLEexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (VALvp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(exval -> bool) -> bool) (\(e' :exval). ((/\ (((((eval_exp $4)
   $8) $7) $1) (PACKvp (PACK $0)))) ((((((eval_match $3) $1) $7)
   (EXVALval $0)) $6) (VALvpf $2)))))))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(match -> bool) -> bool) (\(match :match).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $7) ((HANDLEexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(exval -> bool) -> bool) (\(e' :exval). ((/\ (((((eval_exp $4)
   $8) $7) $1) (PACKvp (PACK $0)))) ((((((eval_match $3) $1) $7)
   (EXVALval $0)) $6) (PACKvpf $2)))))))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(match -> bool) -> bool) (\(match :match).
   ((? :(exval -> bool) -> bool) (\(e' :exval). ((/\
   (((= :exp -> exp -> bool) $7) ((HANDLEexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp (PACK $0))))
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_exp $3)
   $7) $6) $0) (PACKvp (PACK $1)))) ((((((eval_match $2) $0) $6)
   (EXVALval $1)) $5) FAILvpf))))))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(exval -> bool) -> bool) (\(e' :exval). ((/\
   (((= :exp -> exp -> bool) $6) (RAISEexp $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $2) (PACKvp (PACK $0))))
   (((((eval_exp $1) $5) $4) $3) (VALvp (EXVALval $0)))))))))) ((\/
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exp -> exp -> bool) $6) (RAISEexp $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $2) (PACKvp $0))) (((((eval_exp
   $1) $5) $4) $3) (PACKvp $0))))))))) ((? :(match -> bool) -> bool)
   (\(match :match). ((/\ (((= :exp -> exp -> bool) $5) (FNexp $0)))
   ((/\ (((= :state -> state -> bool) $4) $2))
   (((= :val_pack -> val_pack -> bool) $1) (VALvp (CLOSUREval
   (((CLOSURE $0) $3)
   empty_varenv)))))))))))))))))))))))))))))))))))))))))`),
 ((eval_exprow_match_thm),
  [],
  `((! :(exprow -> bool) -> bool) (\(er :exprow).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(e :env).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(record_pack -> bool) -> bool) (\(rp :record_pack). ((==>
   (((((eval_exprow $4) $3) $2) $1) $0)) ((\/
   ((? :(label -> bool) -> bool) (\(lab :label).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\
   (((= :exprow -> exprow -> bool) $7) (((EXPROW $2) $1)
   (NONE :exprow option)))) ((/\
   (((= :record_pack -> record_pack -> bool) $3) (RECORDrp
   (((insert_into_record empty_record) $2) $0)))) (((((eval_exp $1)
   $6) $5) $4) (VALvp $0))))))))))) ((\/ ((? :(label -> bool) -> bool)
   (\(lab :label). ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(exprow option -> bool) -> bool) (\(exprow_op :exprow option).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exprow -> exprow -> bool) $8) (((EXPROW $3) $2) $1))) ((/\
   (((= :record_pack -> record_pack -> bool) $4) (PACKrp $0)))
   (((((eval_exp $2) $7) $6) $5) (PACKvp $0))))))))))))) ((\/
   ((? :(label -> bool) -> bool) (\(lab :label).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(exprow -> bool) -> bool) (\(exprow :exprow).
   ((? :(val -> bool) -> bool) (\(v :val).
   ((? :(record -> bool) -> bool) (\(r :record). ((/\
   (((= :exprow -> exprow -> bool) $9) (((EXPROW $4) $3)
   ((SOME :exprow -> exprow option) $2)))) ((/\
   (((= :record_pack -> record_pack -> bool) $5) (RECORDrp
   ((add_record (((insert_into_record empty_record) $4) $1)) $0))))
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\ (((((eval_exp $4)
   $9) $8) $0) (VALvp $2))) (((((eval_exprow $3) $0) $8) $7) (RECORDrp
   $1)))))))))))))))))) ((? :(label -> bool) -> bool) (\(lab :label).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(exprow -> bool) -> bool) (\(exprow :exprow).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exprow -> exprow -> bool) $8) (((EXPROW $3) $2)
   ((SOME :exprow -> exprow option) $1)))) ((/\
   (((= :record_pack -> record_pack -> bool) $4) (PACKrp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\ (((((eval_exp $4) $9)
   $8) $1) (VALvp $0))) (((((eval_exprow $3) $1) $8) $7) (PACKrp
   $2)))))))))))))))))))))))))))))))`),
 ((eval_atexp_match_thm),
  [],
  `((! :(atexp -> bool) -> bool) (\(ae :atexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(e :env).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(val_pack -> bool) -> bool) (\(vp :val_pack). ((==>
   (((((eval_atexp $4) $3) $2) $1) $0)) ((\/
   ((? :(scon -> bool) -> bool) (\(scon :scon). ((/\
   (((= :atexp -> atexp -> bool) $5) (SCONatexp $0))) ((/\
   (((= :state -> state -> bool) $4) $2))
   (((= :val_pack -> val_pack -> bool) $1) (VALvp (SVALval (value_of
   $0))))))))) ((\/ ((? :(var long -> bool) -> bool)
   (\(longvar :var long). ((? :(val -> bool) -> bool) (\(v :val). ((/\
   (((= :atexp -> atexp -> bool) $6) (VARatexp $1))) ((/\
   (((= :state -> state -> bool) $5) $3)) ((/\
   (((= :val_pack -> val_pack -> bool) $2) (VALvp $0)))
   (((= :val lift -> val lift -> bool) ((lookuplongvar_env $4) $1))
   ((lift :val -> val lift) $0)))))))))) ((\/
   ((? :(con long -> bool) -> bool) (\(longcon :con long).
   ((? :(con -> bool) -> bool) (\(con :con). ((/\
   (((= :atexp -> atexp -> bool) $6) (CONatexp $1))) ((/\
   (((= :state -> state -> bool) $5) $3)) ((/\
   (((= :val_pack -> val_pack -> bool) $2) (VALvp (CONval $0))))
   (((= :con -> con -> bool) ((long_base :con long -> con) $1))
   $0))))))))) ((\/ ((? :(exname -> bool) -> bool) (\(en :exname).
   ((? :(excon long -> bool) -> bool) (\(longexcon :excon long). ((/\
   (((= :atexp -> atexp -> bool) $6) (EXCONatexp $0))) ((/\
   (((= :state -> state -> bool) $5) $3)) ((/\
   (((= :val_pack -> val_pack -> bool) $2) (VALvp (EXVALval (NAMEexval
   $1))))) (((= :exname lift -> exname lift -> bool)
   ((lookuplongexcon_env $4) $0)) ((lift :exname -> exname lift)
   $1)))))))))) ((\/ ((/\ (((= :atexp -> atexp -> bool) $4)
   (RECORDatexp (NONE :exprow option)))) ((/\
   (((= :state -> state -> bool) $3) $1))
   (((= :val_pack -> val_pack -> bool) $0) (VALvp (RECORDval
   empty_record)))))) ((\/ ((? :(exprow -> bool) -> bool)
   (\(exprow :exprow). ((? :(record -> bool) -> bool) (\(r :record).
   ((/\ (((= :atexp -> atexp -> bool) $6) (RECORDatexp
   ((SOME :exprow -> exprow option) $1)))) ((/\
   (((= :val_pack -> val_pack -> bool) $2) (VALvp (RECORDval
   ((add_record empty_record) $0))))) (((((eval_exprow $1) $5) $4) $3)
   (RECORDrp $0))))))))) ((\/ ((? :(exprow -> bool) -> bool)
   (\(exprow :exprow). ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :atexp -> atexp -> bool) $6) (RECORDatexp
   ((SOME :exprow -> exprow option) $1)))) ((/\
   (((= :val_pack -> val_pack -> bool) $2) (PACKvp $0)))
   (((((eval_exprow $1) $5) $4) $3) (PACKrp $0))))))))) ((\/
   ((? :(dec -> bool) -> bool) (\(dec :dec).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(val -> bool) -> bool) (\(v :val). ((/\
   (((= :atexp -> atexp -> bool) $7) ((LETatexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (VALvp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(env -> bool) -> bool) (\(E' :env). ((/\ (((((eval_dec $4) $8)
   $7) $1) (ENVep $0))) (((((eval_exp $3) $1) ((add_env $7) $0)) $6)
   (VALvp $2)))))))))))))))) ((\/ ((? :(dec -> bool) -> bool)
   (\(dec :dec). ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :atexp -> atexp -> bool) $7) ((LETatexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0))) (((((eval_dec
   $2) $6) $5) $4) (PACKep $0))))))))))) ((\/
   ((? :(dec -> bool) -> bool) (\(dec :dec).
   ((? :(exp -> bool) -> bool) (\(exp :exp).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :atexp -> atexp -> bool) $7) ((LETatexp $2) $1))) ((/\
   (((= :val_pack -> val_pack -> bool) $3) (PACKvp $0)))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(env -> bool) -> bool) (\(E' :env). ((/\ (((((eval_dec $4) $8)
   $7) $1) (ENVep $0))) (((((eval_exp $3) $1) ((add_env $7) $0)) $6)
   (PACKvp $2)))))))))))))))) ((? :(exp -> bool) -> bool)
   (\(exp :exp). ((/\ (((= :atexp -> atexp -> bool) $5) (PARatexp
   $0))) (((((eval_exp $0) $4) $3) $2) $1)))))))))))))))))))))))))`),
 ((eval_patrow_det),
  [],
  `((! :(patrow -> bool) -> bool) (\(pr :patrow).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(record -> bool) -> bool) (\(r :record).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(varenv_fail -> bool) -> bool) (\(vef :varenv_fail).
   ((! :(state -> bool) -> bool) (\(s2' :state).
   ((! :(varenv_fail -> bool) -> bool) (\(vef' :varenv_fail). ((==>
   ((/\ ((((((eval_patrow $7) $6) $5) $4) $3) $2)) ((((((eval_patrow
   $7) $6) $5) $4) $1) $0))) ((/\ (((= :state -> state -> bool) $3)
   $1)) (((= :varenv_fail -> varenv_fail -> bool) $2)
   $0)))))))))))))))))))`),
 ((eval_pat_det),
  [],
  `((! :(pat -> bool) -> bool) (\(p :pat).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(E :env). ((! :(val -> bool) -> bool)
   (\(v :val). ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(varenv_fail -> bool) -> bool) (\(vef :varenv_fail).
   ((! :(state -> bool) -> bool) (\(s2' :state).
   ((! :(varenv_fail -> bool) -> bool) (\(vef' :varenv_fail). ((==>
   ((/\ ((((((eval_pat $7) $6) $5) $4) $3) $2)) ((((((eval_pat $7) $6)
   $5) $4) $1) $0))) ((/\ (((= :state -> state -> bool) $3) $1))
   (((= :varenv_fail -> varenv_fail -> bool) $2)
   $0)))))))))))))))))))`),
 ((eval_atpat_det),
  [],
  `((! :(atpat -> bool) -> bool) (\(ap :atpat).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(E :env). ((! :(val -> bool) -> bool)
   (\(v :val). ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(varenv_fail -> bool) -> bool) (\(vef :varenv_fail).
   ((! :(state -> bool) -> bool) (\(s2' :state).
   ((! :(varenv_fail -> bool) -> bool) (\(vef' :varenv_fail). ((==>
   ((/\ ((((((eval_atpat $7) $6) $5) $4) $3) $2)) ((((((eval_atpat $7)
   $6) $5) $4) $1) $0))) ((/\ (((= :state -> state -> bool) $3) $1))
   (((= :varenv_fail -> varenv_fail -> bool) $2)
   $0)))))))))))))))))))`),
 ((eval_patrow_match_thm),
  [],
  `((! :(patrow -> bool) -> bool) (\(pr :patrow).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(e :env).
   ((! :(record -> bool) -> bool) (\(r :record).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(varenv_fail -> bool) -> bool) (\(vef :varenv_fail). ((==>
   ((((((eval_patrow $5) $4) $3) $2) $1) $0)) ((\/ ((/\
   (((= :patrow -> patrow -> bool) $5) DOTDOTDOT)) ((/\
   (((= :state -> state -> bool) $4) $1))
   (((= :varenv_fail -> varenv_fail -> bool) $0) (VARENVvef
   empty_varenv))))) ((\/ ((? :(label -> bool) -> bool)
   (\(lab :label). ((? :(pat -> bool) -> bool) (\(pat :pat). ((/\
   (((= :patrow -> patrow -> bool) $7) (((PATROW $1) $0)
   (NONE :patrow option)))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $2) FAILvef))
   ((((((eval_pat $0) $6) $5) ((lower :val lift -> val) ((lookup_label
   $4) $1))) $3) FAILvef)))))))) ((\/ ((? :(label -> bool) -> bool)
   (\(lab :label). ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(patrow -> bool) -> bool) (\(patrow :patrow). ((/\
   (((= :patrow -> patrow -> bool) $8) (((PATROW $2) $1)
   ((SOME :patrow -> patrow option) $0)))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $3) FAILvef))
   ((((((eval_pat $1) $7) $6) ((lower :val lift -> val) ((lookup_label
   $5) $2))) $4) FAILvef)))))))))) ((\/ ((? :(label -> bool) -> bool)
   (\(lab :label). ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv). ((/\
   (((= :patrow -> patrow -> bool) $8) (((PATROW $2) $1)
   (NONE :patrow option)))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $3) (VARENVvef $0)))
   ((((((eval_pat $1) $7) $6) ((lower :val lift -> val) ((lookup_label
   $5) $2))) $4) (VARENVvef $0))))))))))) ((\/
   ((? :(label -> bool) -> bool) (\(lab :label).
   ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(patrow -> bool) -> bool) (\(patrow :patrow).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv).
   ((? :(varenv -> bool) -> bool) (\(VE' :varenv). ((/\
   (((= :patrow -> patrow -> bool) $10) (((PATROW $4) $3)
   ((SOME :patrow -> patrow option) $2)))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $5) (VARENVvef
   ((add_varenv $1) $0)))) ((? :(state -> bool) -> bool)
   (\(s' :state). ((/\ ((((((eval_pat $4) $10) $9)
   ((lower :val lift -> val) ((lookup_label $8) $5))) $0) (VARENVvef
   $2))) ((((((eval_patrow $3) $0) $9) $8) $7) (VARENVvef
   $1)))))))))))))))))) ((? :(label -> bool) -> bool) (\(lab :label).
   ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(patrow -> bool) -> bool) (\(patrow :patrow). ((/\
   (((= :patrow -> patrow -> bool) $8) (((PATROW $2) $1)
   ((SOME :patrow -> patrow option) $0)))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $3) FAILvef))
   ((? :(state -> bool) -> bool) (\(s' :state).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv). ((/\ ((((((eval_pat
   $3) $9) $8) ((lower :val lift -> val) ((lookup_label $7) $4))) $1)
   (VARENVvef $0))) ((((((eval_patrow $2) $1) $8) $7) $6)
   FAILvef))))))))))))))))))))))))))))))))`),
 ((eval_pat_match_thm),
  [],
  `((! :(pat -> bool) -> bool) (\(p :pat).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(e :env). ((! :(val -> bool) -> bool)
   (\(v :val). ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(varenv_fail -> bool) -> bool) (\(vef :varenv_fail). ((==>
   ((((((eval_pat $5) $4) $3) $2) $1) $0)) ((\/
   ((? :(atpat -> bool) -> bool) (\(atpat :atpat). ((/\
   (((= :pat -> pat -> bool) $6) (ATPATpat $0))) ((((((eval_atpat $0)
   $5) $4) $3) $2) $1))))) ((\/ ((? :(con long -> bool) -> bool)
   (\(longcon :con long). ((? :(atpat -> bool) -> bool)
   (\(atpat :atpat). ((/\ (((= :pat -> pat -> bool) $7) ((CONpat $1)
   $0))) ((? :(con -> bool) -> bool) (\(con :con).
   ((? :(val -> bool) -> bool) (\(v' :val). ((/\
   (((= :con -> con -> bool) ((long_base :con long -> con) $3)) $1))
   ((/\ (~ (((= :con -> con -> bool) $1) (CON "ref")))) ((/\
   (((= :val -> val -> bool) $6) ((APPCONval $1) $0)))
   ((((((eval_atpat $2) $8) $7) $0) $5) $4)))))))))))))) ((\/
   ((? :(con long -> bool) -> bool) (\(longcon :con long).
   ((? :(atpat -> bool) -> bool) (\(atpat :atpat). ((/\
   (((= :pat -> pat -> bool) $7) ((CONpat $1) $0))) ((/\
   (((= :state -> state -> bool) $6) $3)) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $2) FAILvef))
   ((? :(con -> bool) -> bool) (\(con :con). ((/\
   (((= :con -> con -> bool) ((long_base :con long -> con) $2)) $0))
   ((/\ (~ (((= :con -> con -> bool) $0) (CON "ref"))))
   ((! :(val -> bool) -> bool) (\(v' :val). (~
   (((= :val -> val -> bool) $6) ((APPCONval $1) $0)))))))))))))))))
   ((\/ ((? :(excon long -> bool) -> bool) (\(longexcon :excon long).
   ((? :(atpat -> bool) -> bool) (\(atpat :atpat). ((/\
   (((= :pat -> pat -> bool) $7) ((EXCONpat $1) $0)))
   ((? :(val -> bool) -> bool) (\(v' :val).
   ((? :(exname -> bool) -> bool) (\(en :exname). ((/\
   (((= :exname lift -> exname lift -> bool) ((lookuplongexcon_env $7)
   $3)) ((lift :exname -> exname lift) $0))) ((/\
   (((= :val -> val -> bool) $6) (EXVALval ((NAMEVALexval $0) $1))))
   ((((((eval_atpat $2) $8) $7) $1) $5) $4))))))))))))) ((\/
   ((? :(excon long -> bool) -> bool) (\(longexcon :excon long).
   ((? :(atpat -> bool) -> bool) (\(atpat :atpat). ((/\
   (((= :pat -> pat -> bool) $7) ((EXCONpat $1) $0))) ((/\
   (((= :state -> state -> bool) $6) $3)) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $2) FAILvef))
   ((? :(exname -> bool) -> bool) (\(en :exname). ((/\
   (((= :exname lift -> exname lift -> bool) ((lookuplongexcon_env $6)
   $2)) ((lift :exname -> exname lift) $0)))
   ((! :(val -> bool) -> bool) (\(v' :val). (~
   (((= :val -> val -> bool) $6) (EXVALval ((NAMEVALexval $1)
   $0))))))))))))))))) ((\/ ((? :(addr -> bool) -> bool) (\(a :addr).
   ((? :(atpat -> bool) -> bool) (\(atpat :atpat). ((/\
   (((= :pat -> pat -> bool) $7) ((CONpat ((BASE :con -> con long)
   (CON "ref"))) $0))) ((/\ (((= :state -> state -> bool) $6) $3))
   ((/\ (((= :val -> val -> bool) $4) (ADDRval $1)))
   ((? :(val -> bool) -> bool) (\(v :val). ((/\
   (((= :val lift -> val lift -> bool) ((lookupaddr_state $4) $2))
   ((lift :val -> val lift) $0))) ((((((eval_atpat $1) $4) $6) $0) $4)
   $3)))))))))))) ((\/ ((? :(var -> bool) -> bool) (\(var :var).
   ((? :(pat -> bool) -> bool) (\(pat :pat).
   ((? :(varenv -> bool) -> bool) (\(VE :varenv). ((/\
   (((= :pat -> pat -> bool) $8) ((LAYEREDpat $2) $1))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $3) (VARENVvef
   ((add_varenv (((insert_into_varenv empty_varenv) $2) $5)) $0))))
   ((((((eval_pat $1) $7) $6) $5) $4) (VARENVvef $0)))))))))))
   ((? :(var -> bool) -> bool) (\(var :var).
   ((? :(pat -> bool) -> bool) (\(pat :pat). ((/\
   (((= :pat -> pat -> bool) $7) ((LAYEREDpat $1) $0))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $2) FAILvef))
   ((((((eval_pat $0) $6) $5) $4) $3)
   FAILvef)))))))))))))))))))))))))))`),
 ((eval_atpat_match_thm),
  [],
  `((! :(atpat -> bool) -> bool) (\(ap :atpat).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(e :env). ((! :(val -> bool) -> bool)
   (\(v :val). ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(varenv_fail -> bool) -> bool) (\(vef :varenv_fail). ((==>
   ((((((eval_atpat $5) $4) $3) $2) $1) $0)) ((\/ ((/\
   (((= :atpat -> atpat -> bool) $5) WILDCARDatpat)) ((/\
   (((= :state -> state -> bool) $4) $1))
   (((= :varenv_fail -> varenv_fail -> bool) $0) (VARENVvef
   empty_varenv))))) ((\/ ((? :(scon -> bool) -> bool) (\(scon :scon).
   ((/\ (((= :atpat -> atpat -> bool) $6) (SCONatpat $0))) ((/\
   (((= :state -> state -> bool) $5) $2)) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $1) (VARENVvef
   empty_varenv))) (((= :val -> val -> bool) $3) (SVALval (value_of
   $0))))))))) ((\/ ((? :(scon -> bool) -> bool) (\(scon :scon). ((/\
   (((= :atpat -> atpat -> bool) $6) (SCONatpat $0))) ((/\
   (((= :state -> state -> bool) $5) $2)) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $1) FAILvef)) (~
   (((= :val -> val -> bool) $3) (SVALval (value_of $0)))))))))) ((\/
   ((? :(var -> bool) -> bool) (\(var :var). ((/\
   (((= :atpat -> atpat -> bool) $6) (VARatpat $0))) ((/\
   (((= :state -> state -> bool) $5) $2))
   (((= :varenv_fail -> varenv_fail -> bool) $1) (VARENVvef
   (((insert_into_varenv empty_varenv) $0) $3)))))))) ((\/
   ((? :(con long -> bool) -> bool) (\(longcon :con long). ((/\
   (((= :atpat -> atpat -> bool) $6) (CONatpat $0))) ((/\
   (((= :state -> state -> bool) $5) $2)) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $1) (VARENVvef
   empty_varenv))) (((= :val -> val -> bool) $3) (CONval
   ((long_base :con long -> con) $0))))))))) ((\/
   ((? :(con long -> bool) -> bool) (\(longcon :con long). ((/\
   (((= :atpat -> atpat -> bool) $6) (CONatpat $0))) ((/\
   (((= :state -> state -> bool) $5) $2)) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $1) FAILvef)) (~
   (((= :val -> val -> bool) $3) (CONval ((long_base :con long -> con)
   $0)))))))))) ((\/ ((? :(excon long -> bool) -> bool)
   (\(longexcon :excon long). ((? :(exname -> bool) -> bool)
   (\(en :exname). ((/\ (((= :atpat -> atpat -> bool) $7) (EXCONatpat
   $1))) ((/\ (((= :state -> state -> bool) $6) $3)) ((/\
   (((= :val -> val -> bool) $4) (EXVALval (NAMEexval $0)))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $2) (VARENVvef
   empty_varenv))) (((= :exname lift -> exname lift -> bool)
   ((lookuplongexcon_env $5) $1)) ((lift :exname -> exname lift)
   $0))))))))))) ((\/ ((? :(excon long -> bool) -> bool)
   (\(longexcon :excon long). ((? :(exname -> bool) -> bool)
   (\(en :exname). ((/\ (((= :atpat -> atpat -> bool) $7) (EXCONatpat
   $1))) ((/\ (((= :state -> state -> bool) $6) $3)) ((/\
   (((= :val -> val -> bool) $4) (EXVALval (NAMEexval $0)))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $2) FAILvef))
   ((? :(exname -> bool) -> bool) (\(en' :exname). ((/\
   (((= :exname lift -> exname lift -> bool) ((lookuplongexcon_env $6)
   $2)) ((lift :exname -> exname lift) $0))) (~
   (((= :exname -> exname -> bool) $1) $0)))))))))))))) ((\/ ((/\
   (((= :atpat -> atpat -> bool) $5) (RECORDatpat
   (NONE :patrow option)))) ((/\ (((= :state -> state -> bool) $4)
   $1)) ((/\ (((= :varenv_fail -> varenv_fail -> bool) $0) (VARENVvef
   empty_varenv))) (((= :val -> val -> bool) $2) (RECORDval
   empty_record)))))) ((\/ ((? :(varenv -> bool) -> bool)
   (\(VE :varenv). ((? :(patrow -> bool) -> bool) (\(patrow :patrow).
   ((/\ (((= :atpat -> atpat -> bool) $7) (RECORDatpat
   ((SOME :patrow -> patrow option) $0)))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $2) (VARENVvef
   ((add_varenv empty_varenv) $1)))) ((? :(record -> bool) -> bool)
   (\(r :record). ((/\ (((= :val -> val -> bool) $5) (RECORDval
   ((add_record empty_record) $0)))) ((((((eval_patrow $1) $7) $6) $0)
   $4) (VARENVvef $2)))))))))))) ((\/ ((? :(patrow -> bool) -> bool)
   (\(patrow :patrow). ((/\ (((= :atpat -> atpat -> bool) $6)
   (RECORDatpat ((SOME :patrow -> patrow option) $0)))) ((/\
   (((= :varenv_fail -> varenv_fail -> bool) $1) FAILvef))
   ((? :(record -> bool) -> bool) (\(r :record). ((/\
   (((= :val -> val -> bool) $4) (RECORDval ((add_record empty_record)
   $0)))) ((((((eval_patrow $1) $6) $5) $0) $3) FAILvef)))))))))
   ((? :(pat -> bool) -> bool) (\(pat :pat). ((/\
   (((= :atpat -> atpat -> bool) $6) (PARatpat $0))) ((((((eval_pat
   $0) $5) $4) $3) $2) $1))))))))))))))))))))))))))))`),
 ((eval_exbind_det),
  [],
  `((! :(exbind -> bool) -> bool) (\(eb :exbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(exconenv_pack -> bool) -> bool) (\(EEp :exconenv_pack).
   ((! :(state -> bool) -> bool) (\(s2' :state).
   ((! :(exconenv_pack -> bool) -> bool) (\(EEp' :exconenv_pack).
   ((==> ((/\ (((((eval_exbind $6) $5) $4) $3) $2)) (((((eval_exbind
   $6) $5) $4) $1) $0))) ((/\ (((= :state -> state -> bool) $3) $1))
   (((= :exconenv_pack -> exconenv_pack -> bool) $2)
   $0)))))))))))))))))`),
 ((eval_exbind_match_thm),
  [],
  `((! :(exbind -> bool) -> bool) (\(eb :exbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(env -> bool) -> bool) (\(e :env).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(exconenv_pack -> bool) -> bool) (\(eep :exconenv_pack). ((==>
   (((((eval_exbind $4) $3) $2) $1) $0)) ((\/
   ((? :(excon -> bool) -> bool) (\(excon :excon).
   ((? :(exname -> bool) -> bool) (\(en :exname). ((/\
   (((= :exbind -> exbind -> bool) $6) ((EXBIND1 $1)
   (NONE :exbind option)))) ((/\
   (((= :exconenv_pack -> exconenv_pack -> bool) $2) (EXCONENVeep
   (((insert_into_exconenv empty_exconenv) $1) $0)))) ((/\
   (((= :exname -> exname -> bool) $0) (new_exname (STATE_arg2 $5))))
   (((= :state -> state -> bool) $3) ((add_exname $0) $5))))))))))
   ((\/ ((? :(excon -> bool) -> bool) (\(excon :excon).
   ((? :(exbind -> bool) -> bool) (\(eb' :exbind).
   ((? :(exname -> bool) -> bool) (\(en :exname).
   ((? :(exconenv -> bool) -> bool) (\(EE :exconenv). ((/\
   (((= :exbind -> exbind -> bool) $8) ((EXBIND1 $3)
   ((SOME :exbind -> exbind option) $2)))) ((/\
   (((= :exconenv_pack -> exconenv_pack -> bool) $4) (EXCONENVeep
   ((add_exconenv (((insert_into_exconenv empty_exconenv) $3) $1))
   $0)))) ((? :(state -> bool) -> bool) (\(s' :state). ((/\
   (((= :exname -> exname -> bool) $2) (new_exname (STATE_arg2 $8))))
   ((/\ (((= :state -> state -> bool) $0) ((add_exname $2) $8)))
   (((((eval_exbind $3) $0) $7) $6) (EXCONENVeep $1)))))))))))))))))
   ((\/ ((? :(excon -> bool) -> bool) (\(excon :excon).
   ((? :(exbind -> bool) -> bool) (\(eb' :exbind).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exbind -> exbind -> bool) $7) ((EXBIND1 $2)
   ((SOME :exbind -> exbind option) $1)))) ((/\
   (((= :exconenv_pack -> exconenv_pack -> bool) $3) (PACKeep $0)))
   ((? :(exname -> bool) -> bool) (\(en :exname).
   ((? :(state -> bool) -> bool) (\(s' :state). ((/\
   (((= :exname -> exname -> bool) $1) (new_exname (STATE_arg2 $8))))
   ((/\ (((= :state -> state -> bool) $0) ((add_exname $1) $8)))
   (((((eval_exbind $3) $0) $7) $6) (PACKeep $2))))))))))))))))) ((\/
   ((? :(excon -> bool) -> bool) (\(excon :excon).
   ((? :(excon long -> bool) -> bool) (\(longexcon :excon long).
   ((? :(exname -> bool) -> bool) (\(en :exname). ((/\
   (((= :exbind -> exbind -> bool) $7) (((EXBIND2 $2) $1)
   (NONE :exbind option)))) ((/\ (((= :state -> state -> bool) $6)
   $4)) ((/\ (((= :exconenv_pack -> exconenv_pack -> bool) $3)
   (EXCONENVeep (((insert_into_exconenv empty_exconenv) $2) $0))))
   (((= :exname lift -> exname lift -> bool) ((lookuplongexcon_env $5)
   $1)) ((lift :exname -> exname lift) $0)))))))))))) ((\/
   ((? :(excon -> bool) -> bool) (\(excon :excon).
   ((? :(excon long -> bool) -> bool) (\(longexcon :excon long).
   ((? :(exbind -> bool) -> bool) (\(eb' :exbind).
   ((? :(exname -> bool) -> bool) (\(en :exname).
   ((? :(exconenv -> bool) -> bool) (\(EE :exconenv). ((/\
   (((= :exbind -> exbind -> bool) $9) (((EXBIND2 $4) $3)
   ((SOME :exbind -> exbind option) $2)))) ((/\
   (((= :exconenv_pack -> exconenv_pack -> bool) $5) (EXCONENVeep
   ((add_exconenv (((insert_into_exconenv empty_exconenv) $4) $1))
   $0)))) ((/\ (((= :exname lift -> exname lift -> bool)
   ((lookuplongexcon_env $7) $3)) ((lift :exname -> exname lift) $1)))
   (((((eval_exbind $2) $8) $7) $6) (EXCONENVeep $0))))))))))))))))
   ((? :(excon -> bool) -> bool) (\(excon :excon).
   ((? :(excon long -> bool) -> bool) (\(longexcon :excon long).
   ((? :(exbind -> bool) -> bool) (\(eb' :exbind).
   ((? :(pack -> bool) -> bool) (\(p :pack). ((/\
   (((= :exbind -> exbind -> bool) $8) (((EXBIND2 $3) $2)
   ((SOME :exbind -> exbind option) $1)))) ((/\
   (((= :exconenv_pack -> exconenv_pack -> bool) $4) (PACKeep $0)))
   ((? :(exname -> bool) -> bool) (\(en :exname). ((/\
   (((= :exname lift -> exname lift -> bool) ((lookuplongexcon_env $7)
   $3)) ((lift :exname -> exname lift) $0))) (((((eval_exbind $2) $8)
   $7) $6) (PACKeep $1)))))))))))))))))))))))))))))))`)]
