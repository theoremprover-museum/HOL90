head	1.1;
branch	1.1.1;
access;
symbols
	HOL97:1.1.1.1.0.6
	bpHOL97:1.1.1.1
	hol90_9_alpha:1.1.1.1
	hol90_pre8_for_multiple_compilers:1.1.1.1.0.4
	hol90_pre8_after_donalds_separate_compilation_changes:1.1.1.1
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.10.16.13.34.40;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.34.40;	author rjb;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@\DOC do

\TYPE {$do : (* -> void)}

\SYNOPSIS
Evaluates an expression for its side-effects.

\DESCRIBE
The function {do} evaluates its argument (presumably for its side-effects)
and returns the value {(): void}.

\FAILURE
Fails iff the evaluation of its argument fails.

\EXAMPLE
The following shows how an assignment can be evaluated for its
side-effects:
{
   #letref x = 1;;
   x = 1 : int

   #x := x + 1;;
   2 : int

   #do (x := x + 1);;
   () : void

   #x := x + 1;;
   4 : int
}
\COMMENTS
The use of {do} as if it were a normal ML function should not be confused with
its role as a syntactic construct in a while loop. For example, following on
from the above example, consider the following:
{
   #while x > 0 do do (x := x - 1);;
   () : void

   #x;;
   0 : int
}
\noindent In the above, the first {do} is part of the {while} loop, whereas the
second is function-like.

\ENDDOC
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
