thid = (bool, 934216325, 202297)
axioms =
[((INFINITY_AX),
  [],
  `((? :((ind -> ind) -> bool) -> bool) (\(f :ind -> ind). ((/\
   ((ONE_ONE :(ind -> ind) -> bool) $0)) (~
   ((ONTO :(ind -> ind) -> bool) $0)))))`),
 ((SELECT_AX),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(P :'a -> bool).
   ((! :('a -> bool) -> bool) (\(x :'a). ((==> ($1 $0)) ($1
   ((@ :('a -> bool) -> 'a) $1)))))))`),
 ((ETA_AX),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(t :'a -> 'b).
   (((= :('a -> 'b) -> ('a -> 'b) -> bool) (\(x :'a). ($1 $0)))
   $0)))`),
 ((IMP_ANTISYM_AX),
  [],
  `((! :(bool -> bool) -> bool) (\(t1 :bool).
   ((! :(bool -> bool) -> bool) (\(t2 :bool). ((==> ((==> $1) $0))
   ((==> ((==> $0) $1)) (((= :bool -> bool -> bool) $1) $0)))))))`),
 ((BOOL_CASES_AX),
  [],
  `((! :(bool -> bool) -> bool) (\(t :bool). ((\/
   (((= :bool -> bool -> bool) $0) T)) (((= :bool -> bool -> bool) $0)
   F))))`)]
definitions =
[((TYPE_DEFINITION),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(P :'a -> bool).
   ((! :(('b -> 'a) -> bool) -> bool) (\(rep :'b -> 'a).
   (((= :bool -> bool -> bool)
   (((TYPE_DEFINITION :('a -> bool) -> ('b -> 'a) -> bool) $1) $0))
   ((/\ ((! :('b -> bool) -> bool) (\(x' :'b).
   ((! :('b -> bool) -> bool) (\(x'' :'b). ((==>
   (((= :'a -> 'a -> bool) ($2 $1)) ($2 $0))) (((= :'b -> 'b -> bool)
   $1) $0))))))) ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :bool -> bool -> bool) ($2 $0)) ((? :('b -> bool) -> bool)
   (\(x' :'b). (((= :'a -> 'a -> bool) $1) ($2 $0)))))))))))))`),
 ((ONTO_DEF),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   (((= :bool -> bool -> bool) ((ONTO :('a -> 'b) -> bool) $0))
   ((! :('b -> bool) -> bool) (\(y :'b). ((? :('a -> bool) -> bool)
   (\(x :'a). (((= :'b -> 'b -> bool) $1) ($2 $0)))))))))`),
 ((ONE_ONE_DEF),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   (((= :bool -> bool -> bool) ((ONE_ONE :('a -> 'b) -> bool) $0))
   ((! :('a -> bool) -> bool) (\(x1 :'a). ((! :('a -> bool) -> bool)
   (\(x2 :'a). ((==> (((= :'b -> 'b -> bool) ($2 $1)) ($2 $0)))
   (((= :'a -> 'a -> bool) $1) $0)))))))))`),
 ((COND_DEF),
  [],
  `(((= :(bool -> 'a -> 'a -> 'a) -> (bool -> 'a -> 'a -> 'a) -> bool)
   (COND :bool -> 'a -> 'a -> 'a)) (\(t :bool). (\(t1 :'a).
   (\(t2 :'a). ((@ :('a -> bool) -> 'a) (\(x :'a). ((/\ ((==>
   (((= :bool -> bool -> bool) $3) T)) (((= :'a -> 'a -> bool) $0)
   $2))) ((==> (((= :bool -> bool -> bool) $3) F))
   (((= :'a -> 'a -> bool) $0) $1)))))))))`),
 ((LET_DEF),
  [],
  `(((= :(('a -> 'b) -> 'a -> 'b) -> (('a -> 'b) -> 'a -> 'b) -> bool)
   (LET :('a -> 'b) -> 'a -> 'b)) (\(f :'a -> 'b). (\(x :'a). ($1
   $0))))`),
 ((EXISTS_UNIQUE_DEF),
  [],
  `(((= :(('a -> bool) -> bool) -> (('a -> bool) -> bool) -> bool)
   (?! :('a -> bool) -> bool)) (\(P :'a -> bool). ((/\
   ((? :('a -> bool) -> bool) $0)) ((! :('a -> bool) -> bool)
   (\(x :'a). ((! :('a -> bool) -> bool) (\(y :'a). ((==> ((/\ ($2
   $1)) ($2 $0))) (((= :'a -> 'a -> bool) $1) $0)))))))))`),
 ((NOT_DEF),
  [],
  `(((= :(bool -> bool) -> (bool -> bool) -> bool) ~) (\(t :bool).
   ((==> $0) F)))`),
 ((F_DEF),
  [],
  `(((= :bool -> bool -> bool) F) ((! :(bool -> bool) -> bool)
   (\(t :bool). $0)))`),
 ((OR_DEF),
  [],
  `(((= :(bool -> bool -> bool) -> (bool -> bool -> bool) -> bool) \/)
   (\(t1 :bool). (\(t2 :bool). ((! :(bool -> bool) -> bool)
   (\(t :bool). ((==> ((==> $2) $0)) ((==> ((==> $1) $0)) $0)))))))`),
 ((AND_DEF),
  [],
  `(((= :(bool -> bool -> bool) -> (bool -> bool -> bool) -> bool) /\)
   (\(t1 :bool). (\(t2 :bool). ((! :(bool -> bool) -> bool)
   (\(t :bool). ((==> ((==> $2) ((==> $1) $0))) $0))))))`),
 ((FORALL_DEF),
  [],
  `(((= :(('a -> bool) -> bool) -> (('a -> bool) -> bool) -> bool)
   (! :('a -> bool) -> bool)) (\(P :'a -> bool).
   (((= :('a -> bool) -> ('a -> bool) -> bool) $0) (\(x :'a). T))))`),
 ((TRUTH),
  [],
  `(((= :bool -> bool -> bool) T)
   (((= :(bool -> bool) -> (bool -> bool) -> bool) (\(x :bool). $0))
   (\(x :bool). $0)))`),
 ((EXISTS_DEF),
  [],
  `(((= :(('a -> bool) -> bool) -> (('a -> bool) -> bool) -> bool)
   (? :('a -> bool) -> bool)) (\(P :'a -> bool). ($0
   ((@ :('a -> bool) -> 'a) $0))))`)]
theorems = []
