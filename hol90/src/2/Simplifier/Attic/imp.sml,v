head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	96.02.08.00.45.22;	author drs1004;	state dead;
branches;
next	1.1;

1.1
date	96.01.04.14.06.23;	author drs1004;	state Exp;
branches;
next	;


desc
@@


1.2
log
@New theory mechanism, code reorganisation and other enhancements by Don Syme.
@
text
@(* =====================================================================
 * Proper versions of things relying on dest_imp
 * =====================================================================*)

signature Imp_sig = 
sig
    val dest_imp : Term.term -> (Term.term * Term.term)
    val strip_imp : Term.term -> (Term.term list * Term.term)
    val is_imp : Term.term -> bool
    val UNDISCH : Thm.thm -> Thm.thm
    val UNDISCH_ALL : Thm.thm -> Thm.thm
    val IMP_CANON : Thm.thm -> Thm.thm list

end;

structure Imp : Imp_sig =
struct
    open Core;
    open Pterms;

   val ERR = Exception.ERR "Imp";

      fun dest_imp tm = if is_neg tm then ERR("dest_imp","") else Pterms.dest_imp tm;
      fun strip_imp tm = 
          let val (l,r) = dest_imp tm 
              val (t,e) = strip_imp r
          in (l::t,e)
          end
          handle _ => ([],tm);
      val is_imp = can dest_imp
      fun UNDISCH th = MP th (ASSUME(#1(dest_imp(concl th))))

      fun UNDISCH_ALL th =
         if (is_imp (concl th))
         then  UNDISCH_ALL (UNDISCH th)
         else th;

(* new version of IMP_CANON which doesn't pull apart negations. *)
local
 open Rterms;
in
fun IMP_CANON th =
   let val w = concl th
   in
      if (is_conj w)
      then ((IMP_CANON (CONJUNCT1 th))@@(IMP_CANON (CONJUNCT2 th)))
      else if (is_imp w)
      then let val {ant,...} = dest_imp w 
           in
           if (is_conj ant)
           then let val {conj1,conj2} = dest_conj ant
                in
                IMP_CANON (DISCH conj1
                             (DISCH conj2 (MP th (CONJ (ASSUME conj1) 
                                                       (ASSUME conj2)))))
                end
           else if (is_disj ant)
                then let val {disj1,disj2} = dest_disj ant
                     in
                     ((IMP_CANON (DISCH disj1 
                                        (MP th (DISJ1 (ASSUME disj1)
                                                      disj2)))) @@
                      (IMP_CANON (DISCH disj2
                                        (MP th (DISJ2 disj1
                                                      (ASSUME disj2))))))
                     end
                else if (is_exists ant)
                     then let val {Bvar,Body} = dest_exists ant 
                              val bv' = variant (thm_free_vars th) Bvar
                              val body' = subst [{redex = Bvar, residue=bv'}]
                                                Body
                          in
                          IMP_CANON(DISCH body'(MP th(EXISTS(ant, bv')
                                                            (ASSUME body'))))
                          end
                      else map (DISCH ant) (IMP_CANON (UNDISCH th))
           end
      else if (is_forall w)
      then IMP_CANON (SPEC_ALL th)
      else [th]
   end;

end;

end;


@


1.1
log
@Added simplifier components, added drule files, added MK_ABS_CONV, better error messages
@
text
@@
