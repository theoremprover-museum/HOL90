head	1.2;
access;
symbols
	HOL97:1.2.2.1.0.2
	bpHOL97:1.2.2.1
	hol90_9_alpha:1.2.2.1
	hol90_pre8_for_multiple_compilers:1.2.0.2
	hol90_pre8_after_donalds_separate_compilation_changes:1.2
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.2
date	95.10.31.15.14.13;	author drs1004;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	95.10.16.13.30.46;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.30.46;	author rjb;	state Exp;
branches;
next	;

1.2.2.1
date	96.08.23.09.24.56;	author rjb;	state Exp;
branches
	1.2.2.1.2.1;
next	;

1.2.2.1.2.1
date	97.06.11.18.27.24;	author kxs;	state Exp;
branches;
next	1.2.2.1.2.2;

1.2.2.1.2.2
date	97.07.11.19.53.08;	author kxs;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Changes by DRS for separate compilation using NJSML 108.5/CM
@
text
@(* ===================================================================== *)
(* FILE          : compat.sml                                            *)
(* DESCRIPTION   : Routines that provide compatibility with hol88.       *)
(*                                                                       *)
(* AUTHOR        : Konrad Slind, University of Calgary                   *)
(* DATE          : September 15, 1991                                    *)
(* ===================================================================== *)


structure Compat : Compat_sig =
struct

open Core; (* open up all of the HOL 0/1 Core - could be replaced by more *)
           (* explicit opens to avoid endless recompilation of libraries  *)
           (* during system development                                   *)

fun COMPAT_ERR{function,message} = 
       HOL_ERR{origin_structure = "Compat",
               origin_function = function,
               message = message};

val setify = Lib.mk_set;
val find = Lib.first;
val match = Psyntax.match_term;
val prove_thm = Tactical.store_thm;
val string_of_int = Lib.int_to_string
val int_of_string = Lib.string_to_int;
val save = exportML;

fun assoc i alist = 
   case (Lib.assoc1 i alist)
     of NONE => raise COMPAT_ERR{function = "assoc",
                                 message = ""}
      | (SOME x) => x;
fun rev_assoc i alist = 
   case (Lib.assoc2 i alist)
     of NONE => raise COMPAT_ERR{function = "rev_assoc",
                                 message = ""}
      | (SOME x) => x;


val inst_type = Psyntax.type_subst;

val frees = rev o Term.free_vars;
val freesl = rev o Term.free_varsl;
val tyvars = rev o Term.type_vars_in_term
fun tyvarsl tm_list = itlist (union o tyvars) tm_list [];

fun GEN_ALL th = 
   Lib.itlist Drule.GEN 
              (Lib.set_diff (frees(Thm.concl th)) 
                            (freesl(Thm.hyp th)))
              th;

fun new_axiom(s,tm) = new_open_axiom(s,gen_all tm);

val conjuncts = Dsyntax.strip_conj
val disjuncts = Dsyntax.strip_disj


local
val num_Axiom = theorem "prim_rec" "num_Axiom"
in
fun new_prim_rec_definition (name,tm) =
   Psyntax.new_recursive_definition Prefix num_Axiom name tm

fun new_infix_prim_rec_definition(name,tm,prec) =
   Psyntax.new_recursive_definition (Infix prec) num_Axiom name tm
end;


val PROVE = Tactical.prove;
val prove_thm = Tactical.store_thm
val flat = Lib.flatten
val forall = Lib.all;


(* I really bungled this one! hol88 ancestry has different type than
 * hol90 ancestry. Plus, they return different answers: hol88 includes 
 * current theory, hol90 doesn't.
 ***)
fun ancestry() = Theory.current_theory()::Theory.ancestry"-";

val last = snd o Lib.front_n_back
val butlast = fst o Lib.front_n_back;

fun W f x = f x x;
fun CB f g x = g(f x);
val KI = K I;  (* Dual of K; K and KI are analogs of fst and snd *)
infix 4 oo;
val op oo = fn (f,(g,h)) => fn x => f(g x, h x);
fun Co (f,g) x y = f (g y) x;    (* permutation-composition                *)

fun replicate x =
   let fun repl 0 = []
         | repl n = x::repl (n-1)
   in repl
   end;

fun GEN_REWRITE_RULE F thlist1 thlist2 =
    Rewrite.GEN_REWRITE_RULE F 
        (Rewrite.add_rewrites Rewrite.empty_rewrites thlist1) thlist2;

fun GEN_REWRITE_TAC F thlist1 thlist2 =
    Rewrite.GEN_REWRITE_TAC F 
        (Rewrite.add_rewrites Rewrite.empty_rewrites thlist1) thlist2;

fun variant L tm =
   if is_var tm
   then Term.variant L tm
   else if is_const tm
        then Term.variant L (mk_var (dest_const tm))
        else raise COMPAT_ERR{function = "variant", 
                              message = "not a variable or a constant"};
end; (* Compat *)
@


1.2.2.1
log
@Made save function ML-independent.
@
text
@d28 1
a28 1
val save = save_hol;
@


1.2.2.1.2.1
log
@Changes to accomodate move to SML/NJ 109.26.
@
text
@d12 5
d18 1
a18 1
 Exception.HOL_ERR{origin_structure = "Compat",
d28 1
a28 1
fun save s = (Portable.exportML s; true) handle e => (print_HOL_ERR e; false);
d84 2
a85 2
val last = Lib.last
fun butlast L = fst (Lib.front_last L);
d89 1
a89 1
fun KI x y = K I x y;  (* Dual of K; K and KI are analogs of fst and snd *)
@


1.2.2.1.2.2
log
@CM upgrade.
@
text
@a11 9

  type thm      = CoreHol.Thm.thm
  type term     = CoreHol.Term.term
  type hol_type = CoreHol.Type.hol_type
  type tactic   = Abbrev.tactic
  type conv     = Abbrev.conv

open CoreHol;

d23 1
a23 2
fun save s = (Portable.exportML s; true) handle e 
              => (Exception.print_HOL_ERR e; false);
d42 1
a42 1
fun tyvarsl tm_list = Lib.itlist (Lib.union o tyvars) tm_list [];
d50 1
a50 1
fun new_axiom(s,tm) = Theory.new_open_axiom(s,Dsyntax.gen_all tm);
d56 2
a57 1
local val num_Axiom = Theory.theorem "prim_rec" "num_Axiom"
d60 1
a60 1
   Psyntax.new_recursive_definition Term.Prefix num_Axiom name tm
d63 1
a63 1
   Psyntax.new_recursive_definition (Term.Infix prec) num_Axiom name tm
d73 1
a73 2
(*---------------------------------------------------------------------------
 * I really bungled this one! hol88 ancestry has different type than
d76 1
a76 1
 *---------------------------------------------------------------------------*)
d80 1
a80 1
fun butlast L = Lib.fst (Lib.front_last L);
d82 1
a82 1
val W = Lib.W;
d84 1
a84 1
fun KI x y = Lib.K Lib.I x y; 
d104 1
a104 1
   if Term.is_var tm
d106 2
a107 2
   else if Term.is_const tm
        then Term.variant L (Term.mk_var (Term.dest_const tm))
@


1.1
log
@Initial revision
@
text
@d12 5
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
