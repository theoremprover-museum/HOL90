head	1.3;
access;
symbols
	HOL97:1.3.0.4
	bpHOL97:1.3
	hol90_9_alpha:1.3
	hol90_pre8_for_multiple_compilers:1.3.0.2
	hol90_pre8_after_donalds_separate_compilation_changes:1.2
	hol90_8_after_merging_Konrad_Elsa:1.2
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.3
date	95.11.15.13.24.11;	author rjb;	state Exp;
branches;
next	1.2;

1.2
date	95.10.17.17.06.40;	author drs1004;	state Exp;
branches;
next	1.1;

1.1
date	95.10.16.13.29.50;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.29.50;	author rjb;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The HOL90 sources have been changed to allow for the use of different
Standard ML compilers (possibly simultaneously).

 * Many files in "src/0" changed to make them more portable across different
   ML compilers. Various additions have been made to the Portable structure
   and files changed to access identifiers in the Portable structure rather
   than from the global environment. Worthy of special note are:

   - The pointer equality used in "src/0/term.sml" has been made into a
     function in the Portable structure.

   - The ML-Lex and ML-Yacc files for the various parsers have been changed
     to access the Portable structure. Both the source files and the SML
     produced from them have been changed but I have not verified that the
     source files would reproduce the new SML versions if ML-Lex and ML-Yacc
     were to be rerun on them. The changes involve some hacks that exploit the
     way ML-Lex and ML-Yacc work. See the sources for details.

R.J.Boulton, 15th November 1995.
@
text
@signature Key_sig =
    sig
	type object
	eqtype key
	val key_of : object -> key
    end;

functor CACHE((* structure Lib : Lib_sig *)
	      structure Key : Key_sig) = 
struct
type object = Key.object;
type key = Key.key;

val the_cache = ref ([]: object list);
fun add_object_to_cache ob = the_cache := ob::(!the_cache);
fun same_key k ob = (Key.key_of ob = k)
fun get_object_from_cache k = Lib.first (same_key k) (!the_cache);

local
fun rem_once _ [] L = L
  | rem_once p (a::rst) L = 
      if (p a) 
      then L@@rst 
      else rem_once p rst (a::L)
in
fun delete_object_from_cache k = the_cache := rem_once (same_key k) 
                                                       (!the_cache) []
end;

fun delete_cache() = the_cache := [];

fun objects_in_cache() =
    Lib.rev_itlist (Lib.curry (op ::) o Key.key_of) (!the_cache) [];

val is_object_in_cache = Lib.can get_object_from_cache

end; (* CACHE *)
@


1.2
log
@Keeping you up to date:

I'm about to do a checkin of elsa's modifications to the hol90.7
sources to create her hol90.pre8.  To recap what I've done:
	- I checked out hol90 (in /usr/groups/hol/drs1004/hol90)
		cvs co hol90
	  (Well, to be honest, I only checked out those
	  parts of hol90 I knew I'd be changing, e.g. not the
	  Manual, and only parts of the library.  Checking out the
	  entire source takes a while, mainly due to the enormous number
	  of help files.  The limiting factor is files/second, which
         runs at around 5 when CVS is working on nfs over a network, not
         KB/second, which you might at first think it would be).

	- By doing a recursive diff between Elsa's source and the
	hol90.7 source I found all the changes Elsa had made to
	source files.  I copied relevant files from Elsa's source
	into my checked out version.  The only new files were
		- the sml_system files in src/0
		- some make scripts in src/.
	Changed files were in:
		src/{0,1,2,3}
		library/arith/src/thm_convs.sml
		library/list/src/list_conv1.sml
		library/num/src/num_lib.sml
		library/prog_logic/src/halts_logic.sml
		library/prog_logic/src/translation.sml
		library/prog_logic/theories/src/mk_halts.sml
		library/real/theories/src/Make
		library/real/theories/src/equiv.sml
		library/real/theories/src/seq.sml
		library/reduce/src/arithconv.sml
		library/string/src/string_conv.sml
		library/unity/theories/src/aux_definitions.sml
		library/word/theories/src/*

	- I will now commit these changes, with this email as the log message.
		cvs commit

	- Tomorrow I will get this version compiling
	with NJSML 108 (I will probably add
	the files to enable the NJSML compilation manager to make
	this easier), then check those changes in.  I think it's
	good to get things in a working state.
@
text
@d6 1
a6 1
    end
@


1.1
log
@Initial revision
@
text
@d1 9
a9 3
functor CACHE(type object
              eqtype key
              val key_of : object -> key) = 
d11 2
a12 2
type object = object;
type key = key;
d16 2
a17 2
fun same_key k ob = (key_of ob = k)
fun get_object_from_cache k = first (same_key k) (!the_cache);
d32 2
a33 1
fun objects_in_cache() = rev_itlist (curry (op ::) o key_of) (!the_cache) [];
d35 1
a35 1
val is_object_in_cache = can get_object_from_cache
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
