head	1.1;
branch	1.1.1;
access;
symbols
	HOL97:1.1.1.1.0.6
	bpHOL97:1.1.1.1
	hol90_9_alpha:1.1.1.1
	hol90_pre8_for_multiple_compilers:1.1.1.1.0.4
	hol90_pre8_after_donalds_separate_compilation_changes:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.10.16.13.31.40;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.31.40;	author rjb;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@\DOC IN_CONV

\TYPE {IN_CONV : conv -> conv}

\SYNOPSIS
Decision procedure for membership in finite sets.

\LIBRARY pred_sets

\DESCRIBE 
The function {IN_CONV} is a parameterized conversion for proving or disproving
membership assertions of the general form:
{
   "t IN {{t1,...,tn}}"
}
\noindent where {{{t1,...,tn}}} is a set of type {ty->bool} and {t} is a value
of the base type {ty}.  The first argument to {IN_CONV} is expected to be a
conversion that decides equality between values of the base type {ty}.  Given
an equation {"e1 = e2"}, where {e1} and {e2} are terms of type {ty}, this
conversion should return the theorem {|- (e1 = e2) = T} or the theorem
{|- (e1 = e2) = F}, as appropriate.

Given such a conversion, the function {IN_CONV} returns a conversion that
maps a term of the form {"t IN {{t1,...,tn}}"} to the theorem
{
   |- t IN {{t1,...,tn}} = T
}

\noindent if {t} is alpha-equivalent to any {ti}, or if the supplied conversion
proves {|- (t = ti) = T} for any {ti}. If the supplied conversion proves
{|- (t = ti) = F} for every {ti}, then the result is the theorem
{
   |- t IN {{t1,...,tn}} = F 
} 
\noindent In all other cases, {IN_CONV} will fail.

\EXAMPLE
In the following example, the conversion {num_EQ_CONV} is supplied as a
parameter and used to test equality of the candidate element {1} with the
actual elements of the given set.
{
   #IN_CONV num_EQ_CONV "2 IN {{0,SUC 1,3}}";;
   |- 2 IN {{0,SUC 1,3}} = T
}
\noindent The result is {T} because {num_EQ_CONV} is able to prove that {2} is
equal to {SUC 1}. An example of a negative result is:
{
   #IN_CONV num_EQ_CONV "1 IN {{0,2,3}}";;
   |- 1 IN {{0,2,3}} = F
}
\noindent Finally the behaviour of the supplied conversion is irrelevant when
the value to be tested for membership is alpha-equivalent to an actual element:
{
   #IN_CONV NO_CONV "1 IN {{3,2,1}}";;
   |- 1 IN {{3,2,1}} = T
}
\noindent The conversion {NO_CONV} always fails, but {IN_CONV} is nontheless
able in this case to prove the required result.

\FAILURE
{IN_CONV conv} fails if applied to a term that is not of the form {"t IN
{{t1,...,tn}}"}.  A call {IN_CONV conv "t IN {{t1,...,tn}}"} fails unless the
term {t} is alpha-equivalent to some {ti}, or {conv "t = ti"} returns
{|- (t = ti) = T} for some {ti}, or {conv "t = ti"} returns
{|- (t = ti) = F} for every {ti}.

\ENDDOC

@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
