head	1.1;
branch	1.1.1;
access;
symbols
	HOL97:1.1.1.1.0.6
	bpHOL97:1.1.1.1
	hol90_9_alpha:1.1.1.1
	hol90_pre8_for_multiple_compilers:1.1.1.1.0.4
	hol90_pre8_after_donalds_separate_compilation_changes:1.1.1.1
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.10.16.13.34.12;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.34.12;	author rjb;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@\DOC POP_ASSUM

\TYPE {POP_ASSUM : (thm_tactic -> tactic)}

\SYNOPSIS
Applies tactic generated from the first element of a goal's assumption list.

\KEYWORDS
theorem-tactic, assumption.

\DESCRIBE
When applied to a theorem-tactic and a goal, {POP_ASSUM} applies
the theorem-tactic to the {ASSUME}d first element of the assumption list,
and applies the resulting tactic to the goal without the first
assumption in its assumption list:
{
    POP_ASSUM f ({{A1;...;An}} ?- t) = f (A1 |- A1) ({{A2;...;An}} ?- t)
}
\FAILURE
Fails if the assumption list of the goal is empty, or the theorem-tactic
fails when applied to the popped assumption, or if the resulting tactic
fails when applied to the goal (with depleted assumption list).

\COMMENTS
It is possible simply to use the theorem {ASSUME A1} as required rather than
use {POP_ASSUM}; this will also maintain {A1} in the assumption list,
which is generally useful. In addition, this approach can equally well be
applied to assumptions other than the first.

There are admittedly times when {POP_ASSUM} is convenient, but it is most
unwise to use it if there is more than one assumption in the assumption
list, since this introduces a dependency on the ordering, which is vulnerable
to changes in the HOL system.

Another point to consider is that if the relevant assumption has been obtained
by {DISCH_TAC}, it is often cleaner to use {DISCH_THEN} with a theorem-tactic.
For example, instead of:
{
   DISCH_TAC THEN POP_ASSUM (\th. SUBST1_TAC (SYM th))
}
\noindent one might use
{
   DISCH_THEN (SUBST1_TAC o SYM)
}
\EXAMPLE
The goal:
{
   {{4 = SUC x}} ?- x = 3
}
\noindent can be solved by:
{
   POP_ASSUM (\th. REWRITE_TAC[REWRITE_RULE[num_CONV "4"; INV_SUC_EQ] th]))
}
\USES
Making more delicate use of an assumption than rewriting or resolution
using it.

\SEEALSO
ASSUM_LIST, EVERY_ASSUM, IMP_RES_TAC, POP_ASSUM_LIST, REWRITE_TAC.

\ENDDOC
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
