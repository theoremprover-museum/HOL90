thid = (parallel, 784032834, 16094)
axioms = []
definitions =
[((PAR),
  [],
  `((! :(process -> bool) -> bool) (\(P :process).
   ((! :(process -> bool) -> bool) (\(Q :process). ((/\
   (((= :string set -> string set -> bool) (ALPHA ((PAR $1) $0)))
   (((UNION :string set -> string set -> string set) (ALPHA $1))
   (ALPHA $0)))) (((= :string list set -> string list set -> bool)
   (TRACES ((PAR $1) $0)))
   ((GSPEC :(string list -> string list # bool) -> string list set)
   (\(s :string list).
   (((, :string list -> bool -> string list # bool) $0) ((/\
   (((IN :string list -> string list set -> bool) $0)
   ((STAR :string set -> string list set)
   (((UNION :string set -> string set -> string set) (ALPHA $2))
   (ALPHA $1))))) ((/\ (((IN :string list -> string list set -> bool)
   (((RESTRICT :string list -> string set -> string list) $0) (ALPHA
   $2))) (TRACES $2))) (((IN :string list -> string list set -> bool)
   (((RESTRICT :string list -> string set -> string list) $0) (ALPHA
   $1))) (TRACES $1)))))))))))))`)]
theorems =
[((TRACES_PAR),
  [],
  `((! :(process -> bool) -> bool) (\(Q :process).
   ((! :(process -> bool) -> bool) (\(P :process).
   (((= :string list set -> string list set -> bool) (TRACES ((PAR $0)
   $1)))
   ((GSPEC :(string list -> string list # bool) -> string list set)
   (\(s :string list).
   (((, :string list -> bool -> string list # bool) $0) ((/\
   (((IN :string list -> string list set -> bool) $0)
   ((STAR :string set -> string list set)
   (((UNION :string set -> string set -> string set) (ALPHA $1))
   (ALPHA $2))))) ((/\ (((IN :string list -> string list set -> bool)
   (((RESTRICT :string list -> string set -> string list) $0) (ALPHA
   $1))) (TRACES $1))) (((IN :string list -> string list set -> bool)
   (((RESTRICT :string list -> string set -> string list) $0) (ALPHA
   $2))) (TRACES $2))))))))))))`),
 ((ALPHA_PAR),
  [],
  `((! :(process -> bool) -> bool) (\(Q :process).
   ((! :(process -> bool) -> bool) (\(P :process).
   (((= :string set -> string set -> bool) (ALPHA ((PAR $0) $1)))
   (((UNION :string set -> string set -> string set) (ALPHA $0))
   (ALPHA $1)))))))`),
 ((IS_PROCESS_PAR),
  [],
  `((! :(process -> bool) -> bool) (\(P :process).
   ((! :(process -> bool) -> bool) (\(Q :process). (IS_PROCESS
   (((, :string set -> string list set ->
         string set # string list set)
   (((UNION :string set -> string set -> string set) (ALPHA $1))
   (ALPHA $0)))
   ((GSPEC :(string list -> string list # bool) -> string list set)
   (\(s :string list).
   (((, :string list -> bool -> string list # bool) $0) ((/\
   (((IN :string list -> string list set -> bool) $0)
   ((STAR :string set -> string list set)
   (((UNION :string set -> string set -> string set) (ALPHA $2))
   (ALPHA $1))))) ((/\ (((IN :string list -> string list set -> bool)
   (((RESTRICT :string list -> string set -> string list) $0) (ALPHA
   $2))) (TRACES $2))) (((IN :string list -> string list set -> bool)
   (((RESTRICT :string list -> string set -> string list) $0) (ALPHA
   $1))) (TRACES $1)))))))))))))`)]
