head	1.2;
access;
symbols
	HOL97:1.2.2.2.0.2
	bpHOL97:1.2.2.2
	hol90_9_alpha:1.2.2.2
	hol90_pre8_for_multiple_compilers:1.2.0.2
	hol90_pre8_after_donalds_separate_compilation_changes:1.2
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.2
date	95.10.31.15.07.47;	author drs1004;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	95.10.16.13.30.22;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.30.22;	author rjb;	state Exp;
branches
	1.1.1.1.2.1;
next	;

1.1.1.1.2.1
date	95.10.18.10.09.36;	author drs1004;	state Exp;
branches;
next	;

1.2.2.1
date	96.06.25.15.47.59;	author rjb;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	96.08.23.15.47.57;	author rjb;	state Exp;
branches
	1.2.2.2.2.1;
next	;

1.2.2.2.2.1
date	97.06.11.17.53.59;	author kxs;	state Exp;
branches;
next	1.2.2.2.2.2;

1.2.2.2.2.2
date	97.07.11.15.33.35;	author kxs;	state Exp;
branches;
next	1.2.2.2.2.3;

1.2.2.2.2.3
date	97.10.05.21.11.28;	author kxs;	state Exp;
branches;
next	;


desc
@@


1.2
log
@First phase of hol90.8 development.  hol90 now compiles using NJSML-CM
108.5, with separate compilation of libraries.  System dependencies
have been isolated in the makefiles and "portable.sml".

This involved a large number of enhancments to the source files,
most of which are documented in the 7.changes file (or will be shortly).
See also the correpsonding email corrspondence between RJB, KLS, TFM,
JRH and DRS that happened during this development.
@
text
@structure Goalstack : Goalstack_sig = 
struct
structure Thm = Thm;
open Lib;
open Exception;
open Abbrev;

fun GSTK_ERR{func,mesg} =
     HOL_ERR{origin_structure = "Goalstack",
             origin_function = func,
             message = mesg}


fun add_string_cr s = say (s^"\n")
fun cr_add_string_cr s = say ("\n"^s^"\n")


(* Backward proofs, with no idea of undo *)
structure Bwd
 : sig
      type gstk
      val expand : gstk -> tactic -> gstk
      val expandf : gstk -> tactic -> gstk
      val extract_thm : gstk -> Thm.thm
      val initial_goal : gstk -> goal
      val is_initial : gstk -> bool
      val new_goal : goal -> gstk
      val std_pp_goal : Portable.PrettyPrint.ppstream -> goal -> unit
      val pp_goal : Portable.PrettyPrint.ppstream -> goal -> unit
      val set_goal_pp : (Portable.PrettyPrint.ppstream -> goal -> unit)
                        -> (Portable.PrettyPrint.ppstream -> goal -> unit)
      val pp_gstk : Portable.PrettyPrint.ppstream -> gstk -> unit
      val rotate : gstk -> int -> gstk
      val top_goal : gstk -> goal
      val top_goals : gstk -> goal list
      val depth :gstk -> int
   end =
struct

fun BWD_ERR{func,mesg} =
    HOL_ERR{origin_structure = "Bwd",
            origin_function = func,
            message = mesg}

(* GOALSTACKS *)
(* A goalstack is a stack of (goal list, validation_function) records. Each 
 * goal in the goal list is a (term list, term) pair. The validation 
 * function is a function from a list of theorems to a theorem. It must be 
 * that the number of goals in the goal list is equal to the number of 
 * formal parameters in the validation function. Unfortunately, the type
 * system of ML is not strong enough to check that.
 ***************************************************************************)

type tac_result = {goals : goal list,
                   validation : Thm.thm list -> Thm.thm}

datatype proposition = POSED of goal
                     | PROVED of Thm.thm;

datatype gstk = GSTK of {prop: proposition,
                         stack : tac_result list}

fun depth(GSTK{stack,...}) = length stack;

fun is_initial(GSTK{prop = POSED g, stack = []}) = true
  | is_initial _ = false;

fun top_goals(GSTK{prop = POSED g, stack = []}) = [g]
  | top_goals(GSTK{prop = POSED _, stack = {goals,...}::_}) = goals
  | top_goals(GSTK{prop = PROVED _, ...}) = raise BWD_ERR{func = "top_goals", 
                                                          mesg = "no goals"};

val top_goal = hd o top_goals;

fun new_goal (g as (asl,w)) = 
   let val bool = Type.mk_type{Tyop = "bool", Args = []}
       fun is_bool tm = (Term.type_of tm = bool)
   in if (all is_bool (w::asl))
      then GSTK{prop = POSED g, stack = []}
      else raise BWD_ERR{func = "set_goal",
                         mesg = "not a proposition; new goal not added"}
   end;

fun initial_goal(GSTK{prop = POSED g,...}) = g
  | initial_goal(GSTK{prop = PROVED th,...}) = Thm.dest_thm th;


fun rotate(GSTK{prop = PROVED _, ...}) _ = 
        raise BWD_ERR{func = "rotate", mesg = "goal has already been proved"}
  | rotate(GSTK{prop, stack}) n = 
      if (n<0)
      then raise BWD_ERR{func="rotate", mesg="negative rotations not allowed"}
      else 
      case stack
      of [] => raise BWD_ERR{func = "rotate",mesg = "No goals to rotate"}
       | ({goals,validation}::rst) =>
          if (n > length goals)
          then raise BWD_ERR{func = "rotate",
                        mesg = "More rotations than goals -- no rotation done"}
          else GSTK{prop = prop,
                    stack = {goals = funpow n rotl goals,
                             validation=validation o funpow n rotr}
                            :: rst};


local
fun imp_err s = raise BWD_ERR{func = "expandf",
                              mesg = "implementation error: "^s}
fun return(GSTK{stack = {goals = [],validation}::rst, prop}) = 
    let val th = validation []
    in case rst 
       of [] => GSTK{prop = PROVED th, stack = []}
       | ({goals = _::rst_o_goals, validation}::rst') =>
           ( cr_add_string_cr "Goal proved.";
             add_string_cr (Thm.thm_to_string th);
             return(GSTK{prop = prop,
                         stack = {goals = rst_o_goals,
                                  validation=fn thl => validation(th::thl)}
                                 :: rst'}))
       | _ => imp_err (quote "return")
    end
  | return gstk = gstk
in
fun expandf(GSTK{prop = PROVED _, ...}) _ = 
           raise BWD_ERR{func = "expandf", mesg="goal has already been proved"}
  | expandf(GSTK{prop as POSED g, stack}) tac =
     let val (glist,vf) = tac (case stack of   []    => g 
                                           | (tr::_) => hd (#goals tr))
         val dpth = length stack
         val gs = return(GSTK{prop = prop,
                              stack = {goals = glist, validation = vf}
                                      :: stack})
     in case gs
        of GSTK{prop = PROVED _, stack} => ()
         | GSTK{prop, stack as {goals, ...}::_} =>
             let val dpth' = length stack
             in if (dpth' > dpth)
                then if (dpth+1 = dpth') 
                     then add_string_cr(case (length goals)
                                        of 0 => imp_err "1"
                                         | 1 => "1 subgoal:"
                                         | n => (int_to_string n)^" subgoals:")
                     else imp_err "2"
                else cr_add_string_cr "Remaining subgoals:"
             end
         | _ => imp_err "3"
         ; 
         gs
     end
end;

fun expand gs = expandf gs o Tactical.VALID;

fun extract_thm (GSTK{prop = PROVED th, ...}) = th
  | extract_thm _ = raise BWD_ERR{func = "extract_thm", 
                                  mesg = "no theorem proved"};

(* Prettyprinting *)

local
fun ppgoal ppstrm (asl,w) =
   let val {add_string, add_break, begin_block, end_block, add_newline, ...} =
                     PP.with_ppstream ppstrm
       val pr = Term_io.Hol_pp.pp_self_parsing_term ppstrm
   in
     begin_block PP.CONSISTENT 0;
     pr w; 
     add_newline ();
     (case asl
        of [] => ()
         | _  => ( begin_block PP.CONSISTENT 4;
                   add_string (!Globals.goal_line);
                   add_newline ();
                   PP.pr_list pr (fn () => ()) add_newline (rev asl);
                   end_block ()));
     add_newline ();
     end_block ()
   end
   handle e => (say "\nError in attempting to print a goal!\n";  raise e);

val goal_printer = ref ppgoal
in
val std_pp_goal = ppgoal
fun pp_goal ppstrm = !goal_printer ppstrm
fun set_goal_pp pp = !goal_printer before (goal_printer := pp)
end;

fun pp_gstk ppstrm  =
   let val pr_goal = pp_goal ppstrm
       val {add_string, add_break, begin_block, end_block, add_newline, ...} =
                     PP.with_ppstream ppstrm
       fun pr (GSTK{prop = POSED g, stack = []}) = 
              (begin_block PP.CONSISTENT 0;
               add_string"Initial goal:";
               add_newline(); add_newline();
               pr_goal g;
               end_block())
         | pr (GSTK{prop = POSED _, stack = {goals,...}::_}) = 
             (begin_block PP.CONSISTENT 0;
              PP.pr_list pr_goal (fn () => ()) add_newline (rev goals);
              end_block())
         | pr (GSTK{prop = PROVED th, ...}) = 
             (begin_block PP.CONSISTENT 0;
              add_string "Initial goal proved.";
              add_newline();
              Thm.pp_thm ppstrm th;
              end_block())
   in pr
   end;

end; (* Bwd *)


(* COLLECTIONS OF PROOF ATTEMPTS *)

(* History provides "registers-with-bounded-history". You can read (via
 * "project"), write (via "apply"), and undo. This is a general purpose
 * type.
 ***********************************************************************)

abstype 'a history = HISTORY of {obj :'a, past :'a list, limit :int}
with

exception CANT_BACKUP_ANYMORE;

fun new_history {obj, limit} = HISTORY{obj = obj, past = [], limit = limit}

local
fun chop n alist = fst (split_after n alist) handle _ => alist
in
fun apply f (HISTORY{obj, past, limit}) = 
      HISTORY{obj = f obj, past = chop limit (obj :: past), limit = limit}

fun set_limit (HISTORY{obj,past,limit}) n =
   if (n<0) then raise GSTK_ERR{func = "set_limit", mesg = "negative limit"}
   else HISTORY{obj = obj, past = chop n past, limit = n}
end;

fun project f (HISTORY{obj, ...}) = f obj;

fun undo (HISTORY{past = h::rst, limit,...}) = 
          HISTORY{obj = h, past = rst, limit = limit}
  | undo (HISTORY{past = [], ...}) = raise CANT_BACKUP_ANYMORE

end; 


(* Add the notion of undo *)
datatype goalstack = GOALSTACK of Bwd.gstk history;

datatype proofs = PRFS of goalstack list;

exception NO_EXTANT_PROOFS;

structure Functional =
struct

fun set_goal g = GOALSTACK(new_history{obj = Bwd.new_goal g, limit = 15});
fun add gstk (PRFS L) = PRFS (gstk::L);

fun backup (GOALSTACK s) = GOALSTACK(undo s);
fun set_backup i (GOALSTACK s) = GOALSTACK(set_limit s i);
fun restart (GOALSTACK s) = set_goal (project Bwd.initial_goal s);
fun drop (PRFS (h::rst)) = PRFS rst
  | drop (PRFS []) = raise NO_EXTANT_PROOFS;


fun expandf tac (GOALSTACK s) = GOALSTACK (apply (C Bwd.expandf tac) s);
fun expand tac (GOALSTACK s) = GOALSTACK (apply (C Bwd.expand tac) s);

fun current_goalstack (PRFS (h::_)) = h
  | current_goalstack (PRFS []) = raise NO_EXTANT_PROOFS;

fun top_thm (GOALSTACK s) = project Bwd.extract_thm s;
fun initial_goal (GOALSTACK s) = project Bwd.initial_goal s;
fun top_goal (GOALSTACK s) = project Bwd.top_goal s;
fun top_goals (GOALSTACK s) = project Bwd.top_goals s;

fun rotate i (GOALSTACK s) = GOALSTACK(apply (C Bwd.rotate i) s);
fun rotate_proofs i (PRFS []) = raise NO_EXTANT_PROOFS
  | rotate_proofs i (PRFS L) = 
      if (i<0)
      then raise GSTK_ERR{func = "rotate_proofs", mesg = "negative rotation"}
      else if (i > length L)
           then raise GSTK_ERR{func = "rotate_proofs", 
                               mesg = "more rotations than proofs"}
           else PRFS(funpow i rotl L);

end (* Functional *)

structure Implicit =
struct

val the_proofs = ref (PRFS []);

fun proofs() = (!the_proofs);

fun set_goal g = 
   (the_proofs := Functional.add (Functional.set_goal g) (proofs());
    proofs());

fun g flist = set_goal([],Parse.term_parser flist);

fun add g = (say"Adding new proof..\n";
             the_proofs := Functional.add g (proofs());
             proofs());

fun hd_opr f (PRFS (h::rst)) = PRFS(f h::rst)
  | hd_opr f (PRFS[]) = raise NO_EXTANT_PROOFS;

fun hd_proj f (PRFS (h::_)) = f h
  | hd_proj f (PRFS[]) = raise NO_EXTANT_PROOFS;

fun backup () = (the_proofs := hd_opr Functional.backup (proofs());
                 Functional.current_goalstack(proofs()));
val b = backup;
fun set_backup i = (the_proofs := hd_opr (Functional.set_backup i) (proofs()));
fun restart() = (the_proofs := hd_opr Functional.restart (proofs());
                 Functional.current_goalstack(proofs()));

fun drop() = (say"OK..\n";
              the_proofs := Functional.drop (proofs());
              proofs());

fun expandf tac = (say "OK..\n";
                   the_proofs := hd_opr (Functional.expandf tac) (proofs());
                   Functional.current_goalstack(proofs()));
fun expand tac = (say "OK..\n";
                  the_proofs := hd_opr (Functional.expand tac) (proofs());
                  Functional.current_goalstack(proofs()));

val e = expand;

val top_thm      = hd_proj Functional.top_thm o proofs;
val initial_goal = hd_proj Functional.initial_goal o proofs;
val top_goal     = hd_proj Functional.top_goal o proofs;
val top_goals    = hd_proj Functional.top_goals o proofs;

val p = hd_proj I o proofs;
val status = proofs;

fun rotate i = (the_proofs := hd_opr (Functional.rotate i) (proofs());
                Functional.current_goalstack(proofs()));
val r = rotate;

fun rotate_proofs i = (the_proofs := Functional.rotate_proofs i (proofs()); 
                       proofs());
val R = rotate_proofs;

end (* Implicit *)


(* PrettyPrinting *)

fun pp_goalstack ppstrm (GOALSTACK g) = project (Bwd.pp_gstk ppstrm) g;
val set_goal_pp = Bwd.set_goal_pp;
val std_goal_pp = Bwd.std_pp_goal;

fun enumerate L = snd(rev_itlist (fn x => fn (n,A) => (n+1, (n,x)::A)) 
                                 L (1,[]));
val inactive = can Bwd.extract_thm

fun pp_proofs ppstrm =
   let val pr_goal = Bwd.pp_goal ppstrm 
       val pr_thm = Thm.pp_thm ppstrm
       val {add_string, add_break, begin_block, end_block, add_newline, ...} =
                     PP.with_ppstream ppstrm
       fun pr1 (GOALSTACK x) = 
            if (project inactive x)
            then (begin_block PP.CONSISTENT 2;
                  add_string"Completed:";  add_break(1,0);
                  pr_thm (project Bwd.extract_thm x);
                  end_block())
            else (begin_block PP.CONSISTENT 2;
                  add_string"Incomplete:";   add_break(1,0);
                  add_string"Initial goal:"; add_break(1,0);
                  pr_goal (project Bwd.initial_goal x);
                  if (project Bwd.is_initial x)
                  then ()
                  else (add_newline(); add_string"Current goal:";
                        add_break(1,0);
                        pr_goal (project Bwd.top_goal x));
                  end_block())
       fun pr (PRFS extants) = 
          let val len = length extants
          in if (len = 0) 
             then add_string"There are currently no proofs."
             else ( begin_block PP.CONSISTENT 2;
                    add_string("Status:");  add_break(1,0);
                    (case len of 1 => add_string "1 proof."
                          | n => add_string(int_to_string n^" proofs."));
                    end_block(); add_newline();
                    map (fn (i,x) => (begin_block PP.CONSISTENT 0;
                                      add_string(int_to_string i^". ");
                                      pr1 x; 
                                      end_block(); add_newline()))
                        (enumerate extants);
                    ())
          end
   in fn pl => (begin_block PP.CONSISTENT 0; pr pl; end_block())
   end;

end; (* Goalstack *)
@


1.2.2.1
log
@The core of hol90.9.alpha now builds successfully with SML/NJ 109,
SML/NJ 108.5 (using CM), SML/NJ 0.93, and Poly/ML 3.0.
I have not yet tried rebuilding the theory files.
@
text
@a7 2
infix 0 before;

a301 1
(* Implementation for old-style quotations
a302 2
*)
fun g t = set_goal([],t);
@


1.2.2.2
log
@Restored `g' to using raw quotations.
@
text
@d304 1
d306 2
@


1.2.2.2.2.1
log
@Changes made so that HOL builds on SMLNJ 109.26.
@
text
@a18 2
fun rotl (a::rst) = rst@@[a]
  | rotl [] = raise GSTK_ERR{func = "rotl", mesg =  "empty list"}
a19 7
fun rotr lst = 
   let val (front,back) = Lib.front_last lst
   in (back::front)
   end 
   handle _ => raise GSTK_ERR{func = "rotr",mesg =  "empty list"}


d166 1
a166 1
       val pr = Hol_pp.pp_self_parsing_term ppstrm
d218 1
a218 2
(*---------------------------------------------------------------------------
 * History provides "registers-with-bounded-history". You can read (via
d221 1
a221 1
 *---------------------------------------------------------------------------*)
a292 2


@


1.2.2.2.2.2
log
@Updates to make HOP CM-friendly. gstack.sml.0 deleted because it was just a
security copy.
@
text
@d3 1
a3 7

type term = CoreHol.Term.term
type thm = CoreHol.Thm.thm
type tactic = Abbrev.tactic
type goal = Abbrev.goal

open CoreHol;
d6 1
@


1.2.2.2.2.3
log
@Changes so that frags are known.
@
text
@a14 3

datatype frag = datatype Portable.frag;

@


1.1
log
@Initial revision
@
text
@d4 3
a7 1

a12 13
(* -------------------------------------------------------------------------
 * Could be in some standard library of list processing functions. We 
 * consider it an error to rotate an empty list,  although it is easier to 
 * just make that be an identity operation.
 ***************************************************************************)
fun rotl (a::rst) = rst@@[a]
  | rotl [] = raise GSTK_ERR{func = "rotl", mesg =  "empty list"}

fun rotr lst = 
   let val (front,back) = Lib.front_n_back lst
   in (back::front)
   end 
   handle _ => raise GSTK_ERR{func = "rotr",mesg =  "empty list"}
d14 2
a15 2
fun add_string_cr s = Lib.say (s^"\n")
fun cr_add_string_cr s = Lib.say ("\n"^s^"\n")
d28 5
a32 4
      val pp_goal : System.PrettyPrint.ppstream -> goal -> unit
      val set_goal_pp : (System.PrettyPrint.ppstream -> goal -> unit)
                        -> (System.PrettyPrint.ppstream -> goal -> unit)
      val pp_gstk : System.PrettyPrint.ppstream -> gstk -> unit
d37 1
a37 1
    end =
d46 1
a46 1
(* A goalstack is a stack of (goal list, validation_function) pairs. Each 
d120 1
a120 1
       | _ => imp_err (Lib.quote "return")
d160 2
a161 1
fun pp_goal ppstrm (asl,w) =
d179 1
a179 1
   handle e => (Lib.say "\nError in attempting to print a goal!\n";  raise e);
d181 6
a186 2
val goal_printer = ref pp_goal;
fun set_goal_pp pp = !goal_printer before (goal_printer := pp);
d189 1
a189 1
   let val pr_goal = !goal_printer ppstrm
d229 1
a229 1
fun chop n alist = fst (Lib.split_after n alist) handle _ => alist
d268 2
a269 2
fun expandf tac (GOALSTACK s) = GOALSTACK (apply (Lib.C Bwd.expandf tac) s);
fun expand tac (GOALSTACK s) = GOALSTACK (apply (Lib.C Bwd.expand tac) s);
d279 1
a279 1
fun rotate i (GOALSTACK s) = GOALSTACK(apply (Lib.C Bwd.rotate i) s);
d287 1
a287 1
           else PRFS(Lib.funpow i rotl L);
d304 1
a304 1
fun add g = (Lib.say"Adding new proof..\n";
d321 1
a321 1
fun drop() = (Lib.say"OK..\n";
d325 1
a325 1
fun expandf tac = (Lib.say "OK..\n";
d328 1
a328 1
fun expand tac = (Lib.say "OK..\n";
d339 1
a339 1
val p = hd_proj Lib.I o proofs;
d357 1
d361 1
a361 1
val inactive = Lib.can Bwd.extract_thm
d364 2
a365 1
   let val pr_proof = pp_goalstack ppstrm
d369 31
a399 36
                   if (project inactive x)
                   then (begin_block PP.CONSISTENT 2;
                         add_string"Completed:";
                         add_break(1,0);
                         Thm.pp_thm ppstrm (project Bwd.extract_thm x);
                         end_block())
                   else (begin_block PP.CONSISTENT 2;
                         add_string"Incomplete:";
                         add_break(1,0);
                         add_string"Initial goal:";
                         add_break(1,0);
                         Bwd.pp_goal ppstrm (project Bwd.initial_goal x);
                         if (project Bwd.is_initial x)
                         then ()
                         else (add_newline();
                               add_string"Current goal:";
                               add_break(1,0);
                               Bwd.pp_goal ppstrm (project Bwd.top_goal x));
                         end_block())
       fun pr (PRFS []) = add_string"There are currently no proofs."
         | pr (PRFS (extants as (x::_))) = 
            ( begin_block PP.CONSISTENT 2;
              add_string("Status:");
              add_break(1,0);
              (case (length extants)
               of 0 => add_string"all proofs have been completed."
                | 1 => add_string "1 proof."
                | n => add_string(Lib.int_to_string n^" proofs."));
               end_block();
               add_newline();
               map (fn (i,x) => (begin_block PP.CONSISTENT 0;
                                 add_string(Lib.int_to_string i^". ");
                                 pr1 x; 
                                 end_block(); add_newline()))
                   (enumerate extants);
               ())
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@


1.1.1.1.2.1
log
@	Konrad's bug fixes and further development to hol90.7 after it's release.
	Checked n on a side branch for later merging with the main trunk
	(Elsa's revisions).  See doc/7.changes for details.
@
text
@d39 4
a42 5
      val std_pp_goal : PP.ppstream -> goal -> unit
      val pp_goal : PP.ppstream -> goal -> unit
      val set_goal_pp : (PP.ppstream -> goal -> unit)
                          -> (PP.ppstream -> goal -> unit)
      val pp_gstk : PP.ppstream -> gstk -> unit
d47 1
a47 1
   end =
d56 1
a56 1
(* A goalstack is a stack of (goal list, validation_function) records. Each 
d170 1
a170 2
local
fun ppgoal ppstrm (asl,w) =
d190 2
a191 6
val goal_printer = ref ppgoal
in
val std_pp_goal = ppgoal
fun pp_goal ppstrm = !goal_printer ppstrm
fun set_goal_pp pp = !goal_printer before (goal_printer := pp)
end;
d194 1
a194 1
   let val pr_goal = pp_goal ppstrm
a361 1
val std_goal_pp = Bwd.std_pp_goal;
d368 1
a368 2
   let val pr_goal = Bwd.pp_goal ppstrm 
       val pr_thm = Thm.pp_thm ppstrm
d372 36
a407 31
            if (project inactive x)
            then (begin_block PP.CONSISTENT 2;
                  add_string"Completed:";  add_break(1,0);
                  pr_thm (project Bwd.extract_thm x);
                  end_block())
            else (begin_block PP.CONSISTENT 2;
                  add_string"Incomplete:";   add_break(1,0);
                  add_string"Initial goal:"; add_break(1,0);
                  pr_goal (project Bwd.initial_goal x);
                  if (project Bwd.is_initial x)
                  then ()
                  else (add_newline(); add_string"Current goal:";
                        add_break(1,0);
                        pr_goal (project Bwd.top_goal x));
                  end_block())
       fun pr (PRFS extants) = 
          let val len = length extants
          in if (len = 0) 
             then add_string"There are currently no proofs."
             else ( begin_block PP.CONSISTENT 2;
                    add_string("Status:");  add_break(1,0);
                    (case len of 1 => add_string "1 proof."
                          | n => add_string(Lib.int_to_string n^" proofs."));
                    end_block(); add_newline();
                    map (fn (i,x) => (begin_block PP.CONSISTENT 0;
                                      add_string(Lib.int_to_string i^". ");
                                      pr1 x; 
                                      end_block(); add_newline()))
                        (enumerate extants);
                    ())
          end
@
