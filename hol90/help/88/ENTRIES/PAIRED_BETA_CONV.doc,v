head	1.1;
branch	1.1.1;
access;
symbols
	HOL97:1.1.1.1.0.6
	bpHOL97:1.1.1.1
	hol90_9_alpha:1.1.1.1
	hol90_pre8_for_multiple_compilers:1.1.1.1.0.4
	hol90_pre8_after_donalds_separate_compilation_changes:1.1.1.1
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.10.16.13.34.12;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.34.12;	author rjb;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@\DOC PAIRED_BETA_CONV

\TYPE {PAIRED_BETA_CONV : conv}

\SYNOPSIS
Performs generalized beta conversion for tupled beta-redexes.

\KEYWORDS
conversion.

\DESCRIBE
The conversion {PAIRED_BETA_CONV} implements beta-reduction for certain
applications of tupled lambda abstractions called `tupled beta-redexes'.
Tupled lambda abstractions have the form {"\<vs>.tm"}, where {<vs>} is an
arbitrarily-nested tuple of variables called a `varstruct'. For the purposes of
{PAIRED_BETA_CONV}, the syntax of varstructs is given by:
{
   <vs>  ::=   (v1,v2)  |  (<vs>,v)  |  (v,<vs>)  |  (<vs>,<vs>)
}
\noindent where {v}, {v1}, and {v2} range over variables.  A tupled beta-redex
is an application of the form {"(\<vs>.tm) t"}, where the term {"t"} is a
nested tuple of values having the same structure as the varstruct {<vs>}. For
example, the term:
{
   "(\((a,b),(c,d)). a + b + c + d)  ((1,2),(3,4))"
}
\noindent is a tupled beta-redex, but the term:
{
   "(\((a,b),(c,d)). a + b + c + d)  ((1,2),p)"
}
\noindent is not, since {p} is not a pair of terms.

Given a tupled beta-redex {"(\<vs>.tm) t"}, the conversion {PAIRED_BETA_CONV}
performs generalized beta-reduction and returns the theorem
{
   |-  (\<vs>.tm) t = t[t1,...,tn/v1,...,vn]
}
\noindent where {ti} is the subterm of the tuple {t} that corresponds to
the variable {vi} in the varstruct {<vs>}. In the simplest case, the
varstruct {<vs>} is flat, as in the term:
{
   "(\(v1,...,vn).t) (t1,...,tn)"
}
\noindent When applied to a term of this form, {PAIRED_BETA_CONV} returns:
{
   |- (\(v1, ... ,vn).t) (t1, ... ,tn) = t[t1,...,tn/v1,...,vn]
}
\noindent As with ordinary beta-conversion, bound variables may be renamed to
prevent free variable capture.  That is, the term {t[t1,...,tn/v1,...,vn]} in
this theorem is the result of substituting {ti} for {vi} in parallel in {t},
with suitable renaming of variables to prevent free variables in {t1}, ...,
{tn} becoming bound in the result.

\FAILURE
{PAIRED_BETA_CONV tm} fails if {tm} is not a tupled beta-redex, as described
above.  Note that ordinary beta-redexes are specifically excluded:
{PAIRED_BETA_CONV} fails when applied to {"(\v.t)u"}.  For these beta-redexes,
use {BETA_CONV}.

\EXAMPLE
The following is a typical use of the conversion:
{
   #PAIRED_BETA_CONV "(\((a,b),(c,d)). a + b + c + d)  ((1,2),(3,4))";;
   |- (\((a,b),c,d). a + (b + (c + d)))((1,2),3,4) = 1 + (2 + (3 + 4))
}
\noindent Note that the term to which the tupled lambda abstraction
is applied must have the same structure as the varstruct.  For example,
the following succeeds:
{
   #PAIRED_BETA_CONV "(\((a,b),p). a + b)  ((1,2),(3+5,4))";;
   |- (\((a,b),p). a + b)((1,2),3 + 5,4) = 1 + 2
}
\noindent but the following call to {PAIRED_BETA_CONV} fails:
{
   #PAIRED_BETA_CONV "(\((a,b),(c,d)). a + b + c + d)  ((1,2),p)";;
   evaluation failed     PAIRED_BETA_CONV
}
\noindent because {p} is not a pair.

\SEEALSO
BETA_CONV, BETA_RULE, BETA_TAC, LIST_BETA_CONV, RIGHT_BETA, RIGHT_LIST_BETA.

\ENDDOC
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
