head	1.1;
branch	1.1.1;
access;
symbols
	HOL97:1.1.1.1.0.6
	bpHOL97:1.1.1.1
	hol90_9_alpha:1.1.1.1
	hol90_pre8_for_multiple_compilers:1.1.1.1.0.4
	hol90_pre8_after_donalds_separate_compilation_changes:1.1.1.1
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.10.16.13.31.37;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.31.37;	author rjb;	state Exp;
branches
	1.1.1.1.6.1;
next	;

1.1.1.1.6.1
date	97.07.11.19.29.15;	author kxs;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@(*****************************************************************************)
(* FILE          : streams.sml                                               *)
(* DESCRIPTION   : Datatype and functions for streams (lazy lists).          *)
(*                                                                           *)
(* READS FILES   : <none>                                                    *)
(* WRITES FILES  : <none>                                                    *)
(*                                                                           *)
(* AUTHOR        : R.J.Boulton, University of Cambridge                      *)
(* DATE          : 20th April 1991                                           *)
(*                                                                           *)
(* TRANSLATOR    : R.J.Boulton, University of Cambridge                      *)
(* DATE          : 16th February 1993                                        *)
(*                                                                           *)
(* LAST MODIFIED : R.J.Boulton                                               *)
(* DATE          : 16th February 1993                                        *)
(*****************************************************************************)

structure Streams : Streams_sig =
struct

(*---------------------------------------------------------------------------*)
(* Datatype for lazy lists                                                   *)
(*---------------------------------------------------------------------------*)

datatype 'a stream = Stream of 'a * (unit -> 'a stream);

exception end_of_stream;

(*---------------------------------------------------------------------------*)
(* stream_map : ('a -> 'b) -> (unit -> 'a stream) -> (unit -> 'b stream)     *)
(*---------------------------------------------------------------------------*)

fun stream_map f s () =
   case s ()
   of (Stream (x,s')) => (Stream (f x,stream_map f s'));

(*---------------------------------------------------------------------------*)
(* stream_append : (unit -> 'a stream) ->                                    *)
(*                 (unit -> 'a stream) ->                                    *)
(*                 (unit -> 'a stream)                                       *)
(*---------------------------------------------------------------------------*)

fun stream_append s1 s2 () =
   (case s1 ()
    of (Stream (x,s1')) => (Stream (x,stream_append s1' s2)))
   handle end_of_stream => s2 ();

(*---------------------------------------------------------------------------*)
(* stream_flat : (unit -> (unit -> 'a stream) stream) -> unit -> 'a stream   *)
(*---------------------------------------------------------------------------*)

fun stream_flat ss () =
   case ss ()
   of (Stream (s,ss')) => (stream_append s (stream_flat ss') ());

(*---------------------------------------------------------------------------*)
(* permutations : 'a list -> unit -> 'a list stream                          *)
(*---------------------------------------------------------------------------*)

fun permutations l () =
   let fun remove_el n l =
          if ((null l) orelse (n < 1))
          then raise end_of_stream
          else if (n = 1)
               then (hd l,tl l)
               else let val (x,l') = remove_el (n - 1) (tl l)
                    in  (x,(hd l)::l')
                    end
       fun one_smaller_subsets l =
          let fun one_smaller_subsets' l n () =
                 if (null l)
                 then raise end_of_stream
                 else Stream (remove_el n l,one_smaller_subsets' l (n + 1))
          in  one_smaller_subsets' l 1
          end
   in
   if (null l) then raise end_of_stream
   else if (null (tl l)) then Stream ([hd l],fn () => raise end_of_stream)
   else let val oss = one_smaller_subsets l
            val subperms = stream_map (I ## permutations) oss
        in  stream_flat
               (stream_map (fn (x,sofl) => stream_map (fn l => x::l) sofl)
                   subperms) ()
        end
   end;

end
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@


1.1.1.1.6.1
log
@Changes to accomodate CM, and also the differences between  SML'90 and SML'97.
@
text
@a20 3
open Lib;
infix ##;

@
