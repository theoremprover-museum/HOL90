head	1.2;
access;
symbols
	HOL97:1.2.2.1.0.2
	bpHOL97:1.2.2.1
	hol90_9_alpha:1.2.2.1
	hol90_pre8_for_multiple_compilers:1.2.0.2
	hol90_pre8_after_donalds_separate_compilation_changes:1.2
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.2
date	95.10.31.14.01.56;	author drs1004;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	95.10.16.13.31.34;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.31.34;	author rjb;	state Exp;
branches;
next	;

1.2.2.1
date	96.08.23.09.03.44;	author rjb;	state Exp;
branches
	1.2.2.1.2.1;
next	;

1.2.2.1.2.1
date	97.07.11.19.28.51;	author kxs;	state Exp;
branches;
next	;


desc
@@


1.2
log
@First phase of hol90.8 development.  hol90 now compiles using NJSML-CM
108.5, with separate compilation of libraries.  System dependencies
have been isolated in the makefiles and "portable.sml".

This involved a large number of enhancments to the source files,
most of which are documented in the 7.changes file (or will be shortly).
See also the correpsonding email corrspondence between RJB, KLS, TFM,
JRH and DRS that happened during this development.
@
text
@(*****************************************************************************)
(* FILE          : norm_ineqs.sml                                            *)
(* DESCRIPTION   : Functions for normalizing inequalities.                   *)
(*                                                                           *)
(* READS FILES   : <none>                                                    *)
(* WRITES FILES  : <none>                                                    *)
(*                                                                           *)
(* AUTHOR        : R.J.Boulton, University of Cambridge                      *)
(* DATE          : 4th March 1991                                            *)
(*                                                                           *)
(* TRANSLATOR    : R.J.Boulton, University of Cambridge                      *)
(* DATE          : 5th February 1993                                         *)
(*                                                                           *)
(* LAST MODIFIED : R.J.Boulton                                               *)
(* DATE          : 16th February 1993                                        *)
(*****************************************************************************)

structure Norm_ineqs : Norm_ineqs_sig =
struct

open Core; (* open up all of the HOL 0/1 Core - could be replaced by more *)
           (* explicit opens to avoid endless recompilation of libraries  *)
           (* during system development                                   *)

fun failwith function = raise HOL_ERR{origin_structure = "Norm_ineqs",
                                      origin_function = function,
                                      message = ""};

open Arith_cons;
open Term_coeffs;
open Qconv;
open Arith_thm_convs;
open Norm_bool;
open Norm_arith;

(*===========================================================================*)
(* Adding terms to inequalities                                              *)
(*===========================================================================*)

(*---------------------------------------------------------------------------*)
(* ADD_TERM_TO_LEQ_CONV : term -> conv                                       *)
(*                                                                           *)
(* ADD_TERM_TO_LEQ_CONV `x` `a <= b` returns the theorem:                    *)
(*                                                                           *)
(*    |- (a <= b) = ((x + a) <= (x + b))                                     *)
(*---------------------------------------------------------------------------*)

fun ADD_TERM_TO_LEQ_CONV addition tm =
 (let val (tm1,tm2) = dest_leq tm
      val tm' = mk_leq (mk_plus (addition,tm1),mk_plus (addition,tm2))
  in  SYM (LEQ_PLUS_CONV tm')
  end
 ) handle (HOL_ERR _) => failwith "ADD_TERM_TO_LEQ_CONV";

(*---------------------------------------------------------------------------*)
(* ADD_COEFFS_TO_LEQ_CONV : (int * (string * int) list) -> conv              *)
(*                                                                           *)
(* Adds terms to both sides of a less-than-or-equal-to inequality. The       *)
(* conversion avoids adding a zero constant but does not concern itself with *)
(* eliminating zero terms in any other way.                                  *)
(*---------------------------------------------------------------------------*)

fun ADD_COEFFS_TO_LEQ_CONV (const,bind) =
 let fun add_terms_conv bind =
        if (null bind)
        then ALL_CONV
        else let val (name,coeff) = hd bind
                 val addition = mk_mult (term_of_int coeff,mk_num_var name)
             in  ((add_terms_conv (tl bind)) THENC
                  (ADD_TERM_TO_LEQ_CONV addition))
             end
 in fn tm =>
 (((add_terms_conv bind) THENC
   (if (const = 0)
    then ALL_CONV
    else ADD_TERM_TO_LEQ_CONV (term_of_int const))) tm)
 handle (HOL_ERR _) => failwith "ADD_COEFFS_TO_LEQ_CONV"
 end;

(*===========================================================================*)
(* Normalizing inequalities                                                  *)
(*===========================================================================*)

(*---------------------------------------------------------------------------*)
(* LESS_OR_EQ_GATHER_CONV : conv                                             *)
(*                                                                           *)
(* Assumes that the argument term is a less-than-or-equal-to of two fully    *)
(* normalized arithmetic expressions. The conversion transforms such a term  *)
(* to a less-than-or-equal-to in which each variable occurs on only one side *)
(* of the inequality, and a constant term appears on at most one side,       *)
(* unless the whole of one side is zero.                                     *)
(*                                                                           *)
(* Here is an example result:                                                *)
(*                                                                           *)
(*    |- (1 + ((3 * x) + (1 * z))) <= (2 + ((1 * x) + (4 * y))) =            *)
(*       ((2 * x) + (1 * z)) <= (1 + (4 * y))                                *)
(*---------------------------------------------------------------------------*)

val LESS_OR_EQ_GATHER_CONV =
 let fun subtract_common_terms bind1 bind2 =
        if (null bind1) then ([],[],bind2)
        else if (null bind2) then ([],bind1,[])
        else (let val (name1,coeff1) = hd bind1
                  and (name2,coeff2) = hd bind2
              in  if (name1 = name2) then
                     (let val (c,b1,b2) =
                             subtract_common_terms (tl bind1) (tl bind2)
                      in  if (coeff1 = coeff2) then ((name1,coeff1)::c,b1,b2)
                          else if (coeff1 < coeff2) then
                             ((name1,coeff1)::c,b1,(name1,coeff2 - coeff1)::b2)
                          else ((name1,coeff2)::c,
                                (name1,coeff1 - coeff2)::b1,
                                b2)
                      end)
                  else if (name1 < name2) then
                     (let val (c,b1,b2) =
                             subtract_common_terms (tl bind1) bind2
                      in  (c,(name1,coeff1)::b1,b2)
                      end)
                  else (let val (c,b1,b2) =
                               subtract_common_terms bind1 (tl bind2)
                        in  (c,b1,(name2,coeff2)::b2)
                        end)
              end)
 in fn tm =>
 (let val (tm1,tm2) = dest_leq tm
      val (const1,bind1) = coeffs_of_arith tm1
      and (const2,bind2) = coeffs_of_arith tm2
      val (bindc,bindl,bindr) = subtract_common_terms bind1 bind2
      and (constc,constl,constr) =
         if (const1 < const2)
         then (const1,0,const2 - const1)
         else (const2,const1 - const2,0)
      val tml = build_arith (constl,bindl)
      and tmr = build_arith (constr,bindr)
  in  SYM
       (((ADD_COEFFS_TO_LEQ_CONV (constc,bindc)) THENC
         (ARGS_CONV (SORT_AND_GATHER_CONV THENC NORM_ZERO_AND_ONE_CONV)))
        (mk_leq (tml,tmr)))
  end
 ) handle (HOL_ERR _) => failwith "LESS_OR_EQ_GATHER_CONV"
 end;

(*---------------------------------------------------------------------------*)
(* ARITH_FORM_NORM_CONV : conv                                               *)
(*                                                                           *)
(* Converts an arithmetic formula into a disjunction of conjunctions of      *)
(* less-than-or-equal-to inequalities. The arithmetic expressions are only   *)
(* allowed to contain variables, addition, the SUC function, and             *)
(* multiplication by constants. The formula is not allowed to contain        *)
(* quantifiers, but may have disjunction, conjunction, negation,             *)
(* implication, equality on Booleans, and the natural number relations       *)
(* =, <, <=, >, >=.                                                          *)
(*                                                                           *)
(* The inequalities in the result are normalized so that each variable       *)
(* appears on only one side of the inequality, and each side is a linear sum *)
(* in which any constant appears first, followed by products of a constant   *)
(* and a variable. The variables are ordered lexicographically, and if the   *)
(* coefficient of the variable is 1, the product of 1 and the variable       *)
(* appears in the term, not simply the variable.                             *)
(*---------------------------------------------------------------------------*)

fun ARITH_FORM_NORM_CONV tm =
 ((EQ_IMP_ELIM_CONV is_num_reln) THENC
  (MOVE_NOT_DOWN_CONV is_num_reln
    (NUM_RELN_NORM_CONV
      (SUM_OF_PRODUCTS_CONV THENC
       LINEAR_SUM_CONV THENC
       SORT_AND_GATHER_CONV THENC
       NORM_ZERO_AND_ONE_CONV)
      LESS_OR_EQ_GATHER_CONV)) THENC
  DISJ_NORM_FORM_CONV)
 tm handle (HOL_ERR _) => failwith "ARITH_FORM_NORM_CONV";

end
@


1.2.2.1
log
@Added type annotations. Made print functions ML-independent.
@
text
@d15 1
a15 1
(* DATE          : 7th August 1996                                           *)
d103 1
a103 1
        else (let val (name1:string,coeff1:int) = hd bind1
@


1.2.2.1.2.1
log
@Changes to accomodate CM, and also the differences between  SML'90 and SML'97.
@
text
@d21 8
d31 1
a31 1
open Qconv; infix THENC;
a34 8
open Exception;

val SYM = Drule.SYM;

fun failwith function = raise HOL_ERR{origin_structure = "Norm_ineqs",
                                      origin_function = function,
                                      message = ""};

@


1.1
log
@Initial revision
@
text
@d21 4
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
