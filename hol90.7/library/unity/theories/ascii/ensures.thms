thid = (ensures, 783975377, 612540)
axioms = []
definitions =
[((ENSURES),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(q :'a -> bool).
   ((! :(('a -> 'a) list -> bool) -> bool) (\(Pr :('a -> 'a) list).
   (((= :bool -> bool -> bool)
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool) $2) $1) $0)) ((/\
   ((((UNLESS :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
               bool) $2) $1) $0))
   ((((EXIST_TRANSITION :('a -> bool) -> ('a -> bool) ->
                         ('a -> 'a) list -> bool) $2) $1)
   $0)))))))))`),
 ((EXIST_TRANSITION),
  [],
  `((/\ ((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(q :'a -> bool).
   (((= :bool -> bool -> bool)
   ((((EXIST_TRANSITION :('a -> bool) -> ('a -> bool) ->
                         ('a -> 'a) list -> bool) $1) $0)
   (NIL :('a -> 'a) list))) F))))))
   ((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(q :'a -> bool).
   ((! :(('a -> 'a) list -> bool) -> bool) (\(Pr :('a -> 'a) list).
   ((! :(('a -> 'a) -> bool) -> bool) (\(st :'a -> 'a).
   (((= :bool -> bool -> bool)
   ((((EXIST_TRANSITION :('a -> bool) -> ('a -> bool) ->
                         ('a -> 'a) list -> bool) $3) $2)
   (((CONS :('a -> 'a) -> ('a -> 'a) list -> ('a -> 'a) list) $0)
   $1))) ((\/ ((! :('a -> bool) -> bool) (\(s :'a). ((==> ((/\ ($4
   $0)) (~ ($3 $0)))) ($3 ($1 $0))))))
   ((((EXIST_TRANSITION :('a -> bool) -> ('a -> bool) ->
                         ('a -> 'a) list -> bool) $3) $2)
   $1))))))))))))`)]
theorems =
[((ENSURES_cor7),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(q :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(r :'a -> bool).
   ((! :(('a -> 'a) list -> bool) -> bool) (\(Pr :('a -> 'a) list).
   ((==> ((/\
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool) $3) $2) $0))
   (((STABLE :('a -> bool) -> ('a -> 'a) list -> bool) $1) $0)))
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool)
   (((/\* :('a -> bool) -> ('a -> bool) -> 'a -> bool) $3) $1))
   (((/\* :('a -> bool) -> ('a -> bool) -> 'a -> bool) $2) $1))
   $0))))))))))`),
 ((ENSURES_cor6),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> 'a) -> bool) -> bool) (\(st :'a -> 'a).
   ((! :(('a -> 'a) list -> bool) -> bool) (\(Pr :('a -> 'a) list).
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool) (False :'a -> bool)) $2)
   (((CONS :('a -> 'a) -> ('a -> 'a) list -> ('a -> 'a) list) $1)
   $0))))))))`),
 ((ENSURES_cor5),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(q :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(r :'a -> bool).
   ((! :(('a -> 'a) list -> bool) -> bool) (\(Pr :('a -> 'a) list).
   ((==>
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool) $3) $2) $0))
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool) $3)
   (((\/* :('a -> bool) -> ('a -> bool) -> 'a -> bool) $2) $1))
   $0))))))))))`),
 ((ENSURES_cor4),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(q :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(r :'a -> bool).
   ((! :(('a -> 'a) list -> bool) -> bool) (\(Pr :('a -> 'a) list).
   ((==>
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool) $3)
   (((\/* :('a -> bool) -> ('a -> bool) -> 'a -> bool) $2) $1)) $0))
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool)
   (((/\* :('a -> bool) -> ('a -> bool) -> 'a -> bool) $3)
   ((~* :('a -> bool) -> 'a -> bool) $2)))
   (((\/* :('a -> bool) -> ('a -> bool) -> 'a -> bool) $2) $1))
   $0))))))))))`),
 ((ENSURES_cor3),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(q :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(r :'a -> bool).
   ((! :(('a -> 'a) list -> bool) -> bool) (\(Pr :('a -> 'a) list).
   ((==>
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool)
   (((\/* :('a -> bool) -> ('a -> bool) -> 'a -> bool) $3) $2)) $1)
   $0))
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool) $3)
   (((\/* :('a -> bool) -> ('a -> bool) -> 'a -> bool) $2) $1))
   $0))))))))))`),
 ((ENSURES_cor2),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(q :'a -> bool).
   ((! :(('a -> 'a) list -> bool) -> bool) (\(Pr :('a -> 'a) list).
   ((==>
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool) $2) $1) $0))
   ((((UNLESS :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
               bool) $2) $1) $0))))))))`),
 ((ENSURES_cor1),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(q :'a -> bool).
   ((! :(('a -> 'a) -> bool) -> bool) (\(st :'a -> 'a).
   ((! :(('a -> 'a) list -> bool) -> bool) (\(Pr :('a -> 'a) list).
   ((==> ((! :('a -> bool) -> bool) (\(s :'a). ((==> ($4 $0)) ($3
   $0)))))
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool) $3) $2)
   (((CONS :('a -> 'a) -> ('a -> 'a) list -> ('a -> 'a) list) $1)
   $0)))))))))))`),
 ((ENSURES_thm5),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(q :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(r :'a -> bool).
   ((! :(('a -> 'a) list -> bool) -> bool) (\(Pr :('a -> 'a) list).
   ((==>
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool) $3) $2) $0))
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool)
   (((\/* :('a -> bool) -> ('a -> bool) -> 'a -> bool) $3) $1))
   (((\/* :('a -> bool) -> ('a -> bool) -> 'a -> bool) $2) $1))
   $0))))))))))`),
 ((ENSURES_thm4),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(q :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(p' :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(q' :'a -> bool).
   ((! :(('a -> 'a) list -> bool) -> bool) (\(Pr :('a -> 'a) list).
   ((==> ((/\
   ((((UNLESS :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
               bool) $4) $3) $0))
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool) $2) $1) $0)))
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool)
   (((/\* :('a -> bool) -> ('a -> bool) -> 'a -> bool) $4) $2))
   (((\/* :('a -> bool) -> ('a -> bool) -> 'a -> bool)
   (((\/* :('a -> bool) -> ('a -> bool) -> 'a -> bool)
   (((/\* :('a -> bool) -> ('a -> bool) -> 'a -> bool) $4) $1))
   (((/\* :('a -> bool) -> ('a -> bool) -> 'a -> bool) $2) $3)))
   (((/\* :('a -> bool) -> ('a -> bool) -> 'a -> bool) $3) $1)))
   $0))))))))))))`),
 ((ENSURES_thm3),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> 'a) list -> bool) -> bool) (\(Pr :('a -> 'a) list).
   ((==>
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool) $1) (False :'a -> bool)) $0))
   ((! :('a -> bool) -> bool) (\(s :'a).
   (((~* :('a -> bool) -> 'a -> bool) $2) $0))))))))`),
 ((ENSURES_thm2),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(q :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(r :'a -> bool).
   ((! :(('a -> 'a) list -> bool) -> bool) (\(Pr :('a -> 'a) list).
   ((==> ((/\
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool) $3) $2) $0)) ((! :('a -> bool) -> bool)
   (\(s :'a). ((==> ($3 $0)) ($2 $0))))))
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool) $3) $1) $0))))))))))`),
 ((ENSURES_thm1),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> 'a) -> bool) -> bool) (\(st :'a -> 'a).
   ((! :(('a -> 'a) list -> bool) -> bool) (\(Pr :('a -> 'a) list).
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool) $2) $2)
   (((CONS :('a -> 'a) -> ('a -> 'a) list -> ('a -> 'a) list) $1)
   $0))))))))`),
 ((ENSURES_thm0),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(q :'a -> bool).
   (((= :bool -> bool -> bool)
   ((((ENSURES :('a -> bool) -> ('a -> bool) -> ('a -> 'a) list ->
                bool) $1) $0) (NIL :('a -> 'a) list))) F)))))`),
 ((EXIST_TRANSITION_thm3),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> 'a) -> bool) -> bool) (\(st :'a -> 'a).
   ((! :(('a -> 'a) list -> bool) -> bool) (\(Pr :('a -> 'a) list).
   ((((EXIST_TRANSITION :('a -> bool) -> ('a -> bool) ->
                         ('a -> 'a) list -> bool) (False :'a -> bool))
   $2) (((CONS :('a -> 'a) -> ('a -> 'a) list -> ('a -> 'a) list) $1)
   $0))))))))`),
 ((EXIST_TRANSITION_thm2),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> 'a) list -> bool) -> bool) (\(Pr :('a -> 'a) list).
   ((==>
   ((((EXIST_TRANSITION :('a -> bool) -> ('a -> bool) ->
                         ('a -> 'a) list -> bool) $1)
   (False :'a -> bool)) $0)) ((! :('a -> bool) -> bool) (\(s :'a).
   (((~* :('a -> bool) -> 'a -> bool) $2) $0))))))))`),
 ((EXIST_TRANSITION_thm1),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(p :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(q :'a -> bool).
   ((! :(('a -> bool) -> bool) -> bool) (\(r :'a -> bool).
   ((! :(('a -> 'a) list -> bool) -> bool) (\(Pr :('a -> 'a) list).
   ((==> ((/\
   ((((EXIST_TRANSITION :('a -> bool) -> ('a -> bool) ->
                         ('a -> 'a) list -> bool) $3) $2) $0))
   ((! :('a -> bool) -> bool) (\(s :'a). ((==> ($3 $0)) ($2 $0))))))
   ((((EXIST_TRANSITION :('a -> bool) -> ('a -> bool) ->
                         ('a -> 'a) list -> bool) $3) $1)
   $0))))))))))`)]
