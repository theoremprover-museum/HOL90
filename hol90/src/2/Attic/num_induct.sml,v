head	1.4;
access;
symbols
	HOL97:1.2.0.4
	bpHOL97:1.2
	hol90_9_alpha:1.2
	hol90_pre8_for_multiple_compilers:1.2.0.2
	hol90_pre8_after_donalds_separate_compilation_changes:1.2
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.4
date	96.02.08.00.44.54;	author drs1004;	state dead;
branches;
next	1.3;

1.3
date	96.01.04.14.06.06;	author drs1004;	state Exp;
branches;
next	1.2;

1.2
date	95.10.31.15.07.15;	author drs1004;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	95.10.16.13.30.20;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.30.20;	author rjb;	state Exp;
branches;
next	;

1.2.4.1
date	97.06.11.17.52.09;	author kxs;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	97.07.11.15.18.14;	author kxs;	state Exp;
branches;
next	;


desc
@@


1.4
log
@New theory mechanism, code reorganisation and other enhancements by Don Syme.
@
text
@(* ===================================================================== *)
(* FILE          : Num_induct.sml                                        *)
(* DESCRIPTION   : Provides a forward inference rule and a tactic for    *)
(*                 induction over numbers.Translated from hol88.         *)
(*                                                                       *)
(* AUTHORS       : (c) Mike Gordon and                                   *)
(*                     Tom Melham, University of Cambridge               *)
(* TRANSLATOR    : Konrad Slind, University of Calgary                   *)
(* DATE          : September 15, 1991                                    *)
(* ===================================================================== *)


structure Num_induct : Num_induct_sig =
struct 

open Exception;
open Theory;
open Term_io.Parse;
open Term;
open Thm;
open Type;
open Dsyntax;
open Drule;
open Tactic;
open Induct_then;

structure Thm = Thm;

val ERR = Exception.ERR "Num_induct";
val WRAP_ERR = Exception.WRAP_ERR "Num_induct";
val INDUCTION = theorem "num" "INDUCTION";

open BASIC_HOL; (* create dependency on theory "BASIC_HOL" *)

(* --------------------------------------------------------------------- *)
(* INDUCT: (thm * thm) -> thm                                            *)
(*                                                                       *)
(*   A1 |- t[0]      A2 |- !n. t[n] ==> t[SUC n]                         *)
(* -----------------------------------------------                       *)
(*             A1 u A2 |- !n. t[n]                                       *)
(* --------------------------------------------------------------------- *)

local
val v1 = genvar bool_ty 
and v2 = genvar bool_ty
and zero = --`0`--
and SUC = --`SUC`--
in
fun INDUCT (base,step) =
   let val {Bvar,Body} = dest_forall(concl step)
       val {ant,...} = dest_imp Body
       val P  = mk_abs{Bvar = Bvar, Body = ant}
       val P0 = mk_comb{Rator = P, Rand = zero}
       val Pv = mk_comb{Rator = P, Rand = Bvar}
       val PSUC = mk_comb{Rator = P, Rand = mk_comb{Rator = SUC, Rand = Bvar}}
       val base' = EQ_MP (SYM(BETA_CONV P0)) base 
       and step'  = SPEC Bvar step 
       and hypth  = SYM(RIGHT_BETA(REFL Pv)) 
       and concth = SYM(RIGHT_BETA(REFL PSUC)) 
       and IND    = SPEC P INDUCTION 
       val template = mk_eq{lhs = concl step',
                            rhs = mk_imp{ant = v1, conseq = v2}}
       val th1 = SUBST [{var = v1, thm = hypth},{var = v2, thm = concth}]
                       template
                       (REFL (concl step'))
       val th2 = GEN Bvar (EQ_MP th1 step')
       val th3 = SPEC Bvar (MP IND (CONJ base' th2)) 
   in
   GEN Bvar (EQ_MP (BETA_CONV(concl th3)) th3)
   end
   handle e => WRAP_ERR("INDUCT",e)
end;

(* --------------------------------------------------------------------- *)
(*             [A] !n.t[n]                                               *)
(*  ================================                                     *)
(*   [A] t[0]  ,  [A,t[n]] t[SUC x]                                      *)
(* --------------------------------------------------------------------- *)

fun INDUCT_TAC g = INDUCT_THEN INDUCTION ASSUME_TAC g 
                   handle e => WRAP_ERR("INDUCT_TAC", e);

end; (* Num_induction *)
@


1.3
log
@Added simplifier components, added drule files, added MK_ABS_CONV, better error messages
@
text
@@


1.2
log
@First phase of hol90.8 development.  hol90 now compiles using NJSML-CM
108.5, with separate compilation of libraries.  System dependencies
have been isolated in the makefiles and "portable.sml".

This involved a large number of enhancments to the source files,
most of which are documented in the 7.changes file (or will be shortly).
See also the correpsonding email corrspondence between RJB, KLS, TFM,
JRH and DRS that happened during this development.
@
text
@d29 3
a31 3
fun NUM_INDUCT_ERR{function,message} = HOL_ERR{origin_structure = "Num_induct",
					       origin_function = function,
					       message = message}
d33 1
a33 1
val INDUCTION = theorem "num" "INDUCTION";
a43 1
val bool_ty = ==`:bool`==
d71 1
a71 1
   handle _ => raise NUM_INDUCT_ERR{function = "INDUCT",message = ""}
d81 1
a81 2
                   handle _ => raise NUM_INDUCT_ERR{function = "INDUCT_TAC",
						    message = ""};
@


1.2.4.1
log
@Changes made in order to move to SML/NJ 109.26.
@
text
@d18 1
a18 1
open Parse;
@


1.2.4.2
log
@Minor changes to make HOL CM-friendly.
@
text
@a15 1
open CoreHol;
a25 1
open BASIC_HOL;
d43 6
a48 5
local val bool_ty = ==`:bool`==
      val v1 = genvar bool_ty 
      and v2 = genvar bool_ty
      and zero = --`0`--
      and SUC = --`SUC`--
@


1.1
log
@Initial revision
@
text
@d16 13
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
