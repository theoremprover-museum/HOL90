\DOC RATOR_COND_CONV

\TYPE {RATOR_COND_CONV: conv}

\SYNOPSIS
moves a rator inward through a conditonal.

\LIBRARY cond

\DESCRIBE 
moves a rator inward through a conditonal.

{
   |- f (A => x|y)
  ================== 
   |- A => f x|f y
}

\EXAMPLE

{
- RATOR_COND_CONV (--`SUC (A => 5|6)`--);
val it = |- SUC (A => 5 | 6) = (A => (SUC 5) | (SUC 6)) : thm
}

\FAILURE

if the term has not the form f (A => x|y)

{
- (RATOR_COND_CONV (--`A => 5|6`--);()) handle e => print_HOL_ERR e;
Exception raised at cond.RATOR_COND_CONV:
term
A => 5 | 6
 has not the form: f (A -> x|y)

}
\SEEALSO

RATOR_COND_RULE RATOR_COND_TAC
FILTER_RATOR_COND_CONV FILTER_RATOR_COND_RULE FILTER_RATOR_COND_TAC
COND_RATOR_CONV COND_RATOR_RULE COND_RATOR_TAC
FILTER_COND_RATOR_CONV FILTER_COND_RATOR_RULE FILTER_COND_RATOR_TAC

\ENDDOC

