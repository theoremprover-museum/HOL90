thid = (common_ModML, 784040893, 721910)
axioms = []
definitions =
[((eval_exdesc_DEF),
  [],
  `((/\ ((/\ ((! :(excon -> bool) -> bool) (\(excon :excon).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((((eval_exdesc
   ((EXCONexdesc $2) (NONE :exdesc option))) $1) $0)
   (((INSERT :excon -> excon set -> excon set) $2)
   (EMPTY :excon set)))))))))) ((! :(exdesc -> bool) -> bool)
   (\(exdesc :exdesc). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(excon set -> bool) -> bool) (\(excons :excon set). ((==>
   ((((eval_exdesc $3) $2) $1) $0)) ((! :(excon -> bool) -> bool)
   (\(excon :excon). ((((eval_exdesc ((EXCONexdesc $0)
   ((SOME :exdesc -> exdesc option) $4))) $3) $2)
   (((UNION :excon set -> excon set -> excon set)
   (((INSERT :excon -> excon set -> excon set) $0)
   (EMPTY :excon set))) $1)))))))))))))))
   ((! :((exdesc -> state -> state -> excon set -> bool) -> bool) ->
        bool) (\(P :exdesc -> state -> state -> excon set -> bool).
   ((==> ((/\ ((! :(excon -> bool) -> bool) (\(excon :excon).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). (((($3 ((EXCONexdesc
   $2) (NONE :exdesc option))) $1) $0)
   (((INSERT :excon -> excon set -> excon set) $2)
   (EMPTY :excon set)))))))))) ((! :(exdesc -> bool) -> bool)
   (\(exdesc :exdesc). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(excon set -> bool) -> bool) (\(excons :excon set). ((==>
   (((($4 $3) $2) $1) $0)) ((! :(excon -> bool) -> bool)
   (\(excon :excon). (((($5 ((EXCONexdesc $0)
   ((SOME :exdesc -> exdesc option) $4))) $3) $2)
   (((UNION :excon set -> excon set -> excon set)
   (((INSERT :excon -> excon set -> excon set) $0)
   (EMPTY :excon set))) $1)))))))))))))))
   ((! :(exdesc -> bool) -> bool) (\(exdesc :exdesc).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(excon set -> bool) -> bool) (\(excons :excon set). ((==>
   ((((eval_exdesc $3) $2) $1) $0)) (((($4 $3) $2) $1)
   $0))))))))))))))`),
 ((eval_valdesc_DEF),
  [],
  `((/\ ((/\ ((! :(var -> bool) -> bool) (\(var :var).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((((eval_valdesc
   ((VARvaldesc $2) (NONE :valdesc option))) $1) $0)
   (((INSERT :var -> var set -> var set) $2) (EMPTY :var set))))))))))
   ((! :(valdesc -> bool) -> bool) (\(valdesc :valdesc).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(var set -> bool) -> bool) (\(vars :var set). ((==>
   ((((eval_valdesc $3) $2) $1) $0)) ((! :(var -> bool) -> bool)
   (\(var :var). ((((eval_valdesc ((VARvaldesc $0)
   ((SOME :valdesc -> valdesc option) $4))) $3) $2)
   (((UNION :var set -> var set -> var set)
   (((INSERT :var -> var set -> var set) $0) (EMPTY :var set)))
   $1)))))))))))))))
   ((! :((valdesc -> state -> state -> var set -> bool) -> bool) ->
        bool) (\(P :valdesc -> state -> state -> var set -> bool).
   ((==> ((/\ ((! :(var -> bool) -> bool) (\(var :var).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). (((($3 ((VARvaldesc
   $2) (NONE :valdesc option))) $1) $0)
   (((INSERT :var -> var set -> var set) $2) (EMPTY :var set))))))))))
   ((! :(valdesc -> bool) -> bool) (\(valdesc :valdesc).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(var set -> bool) -> bool) (\(vars :var set). ((==> (((($4 $3)
   $2) $1) $0)) ((! :(var -> bool) -> bool) (\(var :var). (((($5
   ((VARvaldesc $0) ((SOME :valdesc -> valdesc option) $4))) $3) $2)
   (((UNION :var set -> var set -> var set)
   (((INSERT :var -> var set -> var set) $0) (EMPTY :var set)))
   $1))))))))))))))) ((! :(valdesc -> bool) -> bool)
   (\(valdesc :valdesc). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(var set -> bool) -> bool) (\(vars :var set). ((==>
   ((((eval_valdesc $3) $2) $1) $0)) (((($4 $3) $2) $1)
   $0))))))))))))))`),
 ((int_exdesc_SOME_exdesc_arg_DEF),
  [],
  `((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :exdesc -> exdesc -> bool) (int_exdesc_SOME_exdesc_arg
   (int_exdesc_SOME_exdesc $0))) $0))))
   (((= :exdesc -> exdesc -> bool) (int_exdesc_SOME_exdesc_arg
   int_exdesc_NONE_exdesc)) ((@ :(exdesc -> bool) -> exdesc)
   (\(x :exdesc). T))))`),
 ((int_EXCONexdesc_arg2_DEF),
  [],
  `((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(exdesc_option_exdesc -> bool) -> bool)
   (\(x2 :exdesc_option_exdesc).
   (((= :exdesc_option_exdesc -> exdesc_option_exdesc -> bool)
   (int_EXCONexdesc_arg2 ((int_EXCONexdesc $1) $0))) $0)))))`),
 ((int_EXCONexdesc_arg1_DEF),
  [],
  `((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(exdesc_option_exdesc -> bool) -> bool)
   (\(x2 :exdesc_option_exdesc). (((= :excon -> excon -> bool)
   (int_EXCONexdesc_arg1 ((int_EXCONexdesc $1) $0))) $1)))))`),
 ((dist_aux_ftn_exdesc_DEF),
  [],
  `((/\ ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(exdesc_option_exdesc -> bool) -> bool)
   (\(x2 :exdesc_option_exdesc). (((= :num -> num -> bool)
   (dist_aux_ftn_exdesc ((int_EXCONexdesc $1) $0))) 0)))))) ((/\
   (((= :num -> num -> bool) (dist_aux_ftn_exdesc_option_exdesc
   int_exdesc_NONE_exdesc)) 1)) ((! :(exdesc -> bool) -> bool)
   (\(x1 :exdesc). (((= :num -> num -> bool)
   (dist_aux_ftn_exdesc_option_exdesc (int_exdesc_SOME_exdesc $0)))
   2)))))`),
 ((EXCONexdesc),
  [],
  `(((= :(excon -> exdesc option -> exdesc) ->
         (excon -> exdesc option -> exdesc) -> bool) EXCONexdesc)
   (\(x0 :excon). (\(x1 :exdesc option). ((int_EXCONexdesc $1)
   (int_inj_exdesc_option_exdesc $0)))))`),
 ((int_inv_exdesc_option_exdesc),
  [],
  `((/\ (((= :exdesc option -> exdesc option -> bool)
   (int_inv_exdesc_option_exdesc int_exdesc_NONE_exdesc))
   (NONE :exdesc option))) ((! :(exdesc -> bool) -> bool)
   (\(x1 :exdesc). (((= :exdesc option -> exdesc option -> bool)
   (int_inv_exdesc_option_exdesc (int_exdesc_SOME_exdesc $0)))
   ((SOME :exdesc -> exdesc option) $0)))))`),
 ((int_inj_exdesc_option_exdesc),
  [],
  `((/\ (((= :exdesc_option_exdesc -> exdesc_option_exdesc -> bool)
   (int_inj_exdesc_option_exdesc (NONE :exdesc option)))
   int_exdesc_NONE_exdesc)) ((! :(exdesc -> bool) -> bool)
   (\(x0 :exdesc).
   (((= :exdesc_option_exdesc -> exdesc_option_exdesc -> bool)
   (int_inj_exdesc_option_exdesc ((SOME :exdesc -> exdesc option)
   $0))) (int_exdesc_SOME_exdesc $0)))))`),
 ((int_exdesc_SOME_exdesc_DEF),
  [],
  `((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :exdesc_option_exdesc -> exdesc_option_exdesc -> bool)
   (int_exdesc_SOME_exdesc $0)) (exdesc_option_exdesc_abs
   (JOINT_int_exdesc_SOME_exdesc (exdesc_rep $0))))))`),
 ((int_exdesc_NONE_exdesc_DEF),
  [],
  `(((= :exdesc_option_exdesc -> exdesc_option_exdesc -> bool)
   int_exdesc_NONE_exdesc) (exdesc_option_exdesc_abs
   JOINT_int_exdesc_NONE_exdesc))`),
 ((int_EXCONexdesc_DEF),
  [],
  `((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(exdesc_option_exdesc -> bool) -> bool)
   (\(x2 :exdesc_option_exdesc). (((= :exdesc -> exdesc -> bool)
   ((int_EXCONexdesc $1) $0)) (exdesc_abs ((JOINT_int_EXCONexdesc $1)
   (exdesc_option_exdesc_rep $0))))))))`),
 ((exdesc_option_exdesc_REP_ABS),
  [],
  `((/\ ((! :(exdesc_option_exdesc -> bool) -> bool)
   (\(a :exdesc_option_exdesc).
   (((= :exdesc_option_exdesc -> exdesc_option_exdesc -> bool)
   (exdesc_option_exdesc_abs (exdesc_option_exdesc_rep $0))) $0))))
   ((! :(joint_ty_exdesc_exdesc_option_exdesc -> bool) -> bool)
   (\(r :joint_ty_exdesc_exdesc_option_exdesc).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_exdesc_exdesc_option_exdesc).
   (((= :num -> num -> bool)
   (joint_ty_exdesc_exdesc_option_exdesc_select $0)) 2)) $0))
   (((= :joint_ty_exdesc_exdesc_option_exdesc ->
         joint_ty_exdesc_exdesc_option_exdesc -> bool)
   (exdesc_option_exdesc_rep (exdesc_option_exdesc_abs $0)))
   $0)))))`),
 ((exdesc_option_exdesc_TY_DEF),
  [],
  `((? :((exdesc_option_exdesc ->
         joint_ty_exdesc_exdesc_option_exdesc) -> bool) -> bool)
   (\(rep :exdesc_option_exdesc ->
           joint_ty_exdesc_exdesc_option_exdesc).
   (((TYPE_DEFINITION :(joint_ty_exdesc_exdesc_option_exdesc ->
                       bool) ->
                       (exdesc_option_exdesc ->
                       joint_ty_exdesc_exdesc_option_exdesc) -> bool)
   (\(x :joint_ty_exdesc_exdesc_option_exdesc).
   (((= :num -> num -> bool)
   (joint_ty_exdesc_exdesc_option_exdesc_select $0)) 2))) $0)))`),
 ((exdesc_REP_ABS),
  [],
  `((/\ ((! :(exdesc -> bool) -> bool) (\(a :exdesc).
   (((= :exdesc -> exdesc -> bool) (exdesc_abs (exdesc_rep $0)))
   $0)))) ((! :(joint_ty_exdesc_exdesc_option_exdesc -> bool) -> bool)
   (\(r :joint_ty_exdesc_exdesc_option_exdesc).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_exdesc_exdesc_option_exdesc).
   (((= :num -> num -> bool)
   (joint_ty_exdesc_exdesc_option_exdesc_select $0)) 1)) $0))
   (((= :joint_ty_exdesc_exdesc_option_exdesc ->
         joint_ty_exdesc_exdesc_option_exdesc -> bool) (exdesc_rep
   (exdesc_abs $0))) $0)))))`),
 ((exdesc_TY_DEF),
  [],
  `((? :((exdesc -> joint_ty_exdesc_exdesc_option_exdesc) -> bool) ->
        bool) (\(rep :exdesc -> joint_ty_exdesc_exdesc_option_exdesc).
   (((TYPE_DEFINITION :(joint_ty_exdesc_exdesc_option_exdesc ->
                       bool) ->
                       (exdesc ->
                       joint_ty_exdesc_exdesc_option_exdesc) -> bool)
   (\(x :joint_ty_exdesc_exdesc_option_exdesc).
   (((= :num -> num -> bool)
   (joint_ty_exdesc_exdesc_option_exdesc_select $0)) 1))) $0)))`),
 ((joint_ty_exdesc_exdesc_option_exdesc_select_DEF),
  [],
  `((/\ ((! :(excon -> bool) -> bool) (\(e' :excon).
   ((! :(joint_ty_exdesc_exdesc_option_exdesc -> bool) -> bool)
   (\(j :joint_ty_exdesc_exdesc_option_exdesc).
   (((= :num -> num -> bool)
   (joint_ty_exdesc_exdesc_option_exdesc_select
   ((JOINT_int_EXCONexdesc $1) $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_exdesc_exdesc_option_exdesc_select $0)) 2)) 1) 0)))))))
   ((/\ (((= :num -> num -> bool)
   (joint_ty_exdesc_exdesc_option_exdesc_select
   JOINT_int_exdesc_NONE_exdesc)) 2))
   ((! :(joint_ty_exdesc_exdesc_option_exdesc -> bool) -> bool)
   (\(j :joint_ty_exdesc_exdesc_option_exdesc).
   (((= :num -> num -> bool)
   (joint_ty_exdesc_exdesc_option_exdesc_select
   (JOINT_int_exdesc_SOME_exdesc $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_exdesc_exdesc_option_exdesc_select $0)) 1)) 2) 0))))))`),
 ((JOINT_int_exdesc_SOME_exdesc_DEF),
  [],
  `((! :(joint_ty_exdesc_exdesc_option_exdesc -> bool) -> bool)
   (\(j :joint_ty_exdesc_exdesc_option_exdesc).
   (((= :joint_ty_exdesc_exdesc_option_exdesc ->
         joint_ty_exdesc_exdesc_option_exdesc -> bool)
   (JOINT_int_exdesc_SOME_exdesc $0))
   (ABS_joint_ty_exdesc_exdesc_option_exdesc
   (((Node :excon + one + one -> (excon + one + one) ltree list ->
            (excon + one + one) ltree)
   ((INR :one + one -> excon + one + one) ((INR :one -> one + one)
   one)))
   (((CONS :(excon + one + one) ltree ->
            (excon + one + one) ltree list ->
            (excon + one + one) ltree list)
   (REP_joint_ty_exdesc_exdesc_option_exdesc $0))
   (NIL :(excon + one + one) ltree list)))))))`),
 ((JOINT_int_exdesc_NONE_exdesc_DEF),
  [],
  `(((= :joint_ty_exdesc_exdesc_option_exdesc ->
         joint_ty_exdesc_exdesc_option_exdesc -> bool)
   JOINT_int_exdesc_NONE_exdesc)
   (ABS_joint_ty_exdesc_exdesc_option_exdesc
   (((Node :excon + one + one -> (excon + one + one) ltree list ->
            (excon + one + one) ltree)
   ((INR :one + one -> excon + one + one) ((INL :one -> one + one)
   one))) (NIL :(excon + one + one) ltree list))))`),
 ((JOINT_int_EXCONexdesc_DEF),
  [],
  `((! :(excon -> bool) -> bool) (\(e :excon).
   ((! :(joint_ty_exdesc_exdesc_option_exdesc -> bool) -> bool)
   (\(j :joint_ty_exdesc_exdesc_option_exdesc).
   (((= :joint_ty_exdesc_exdesc_option_exdesc ->
         joint_ty_exdesc_exdesc_option_exdesc -> bool)
   ((JOINT_int_EXCONexdesc $1) $0))
   (ABS_joint_ty_exdesc_exdesc_option_exdesc
   (((Node :excon + one + one -> (excon + one + one) ltree list ->
            (excon + one + one) ltree)
   ((INL :excon -> excon + one + one) $1))
   (((CONS :(excon + one + one) ltree ->
            (excon + one + one) ltree list ->
            (excon + one + one) ltree list)
   (REP_joint_ty_exdesc_exdesc_option_exdesc $0))
   (NIL :(excon + one + one) ltree list)))))))))`),
 ((joint_ty_exdesc_exdesc_option_exdesc_ISO_DEF),
  [],
  `((/\ ((! :(joint_ty_exdesc_exdesc_option_exdesc -> bool) -> bool)
   (\(a :joint_ty_exdesc_exdesc_option_exdesc).
   (((= :joint_ty_exdesc_exdesc_option_exdesc ->
         joint_ty_exdesc_exdesc_option_exdesc -> bool)
   (ABS_joint_ty_exdesc_exdesc_option_exdesc
   (REP_joint_ty_exdesc_exdesc_option_exdesc $0))) $0))))
   ((! :((excon + one + one) ltree -> bool) -> bool)
   (\(r :(excon + one + one) ltree). (((= :bool -> bool -> bool)
   (((TRP :(excon + one + one -> (excon + one + one) ltree list ->
           bool) -> (excon + one + one) ltree -> bool)
   (\(v :excon + one + one). (\(tl :(excon + one + one) ltree list).
   ((\/ ((/\ ((? :(excon -> bool) -> bool) (\(e :excon).
   (((= :excon + one + one -> excon + one + one -> bool) $2)
   ((INL :excon -> excon + one + one) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(excon + one + one) ltree list -> num) $0)) (SUC 0))))
   ((\/ ((/\ (((= :excon + one + one -> excon + one + one -> bool) $1)
   ((INR :one + one -> excon + one + one) ((INL :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(excon + one + one) ltree list -> num) $0)) 0))) ((/\
   (((= :excon + one + one -> excon + one + one -> bool) $1)
   ((INR :one + one -> excon + one + one) ((INR :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(excon + one + one) ltree list -> num) $0)) (SUC
   0)))))))) $0))
   (((= :(excon + one + one) ltree -> (excon + one + one) ltree ->
         bool) (REP_joint_ty_exdesc_exdesc_option_exdesc
   (ABS_joint_ty_exdesc_exdesc_option_exdesc $0))) $0)))))`),
 ((joint_ty_exdesc_exdesc_option_exdesc_TY_DEF),
  [],
  `((? :((joint_ty_exdesc_exdesc_option_exdesc ->
         (excon + one + one) ltree) -> bool) -> bool)
   (\(rep :joint_ty_exdesc_exdesc_option_exdesc ->
           (excon + one + one) ltree).
   (((TYPE_DEFINITION :((excon + one + one) ltree -> bool) ->
                       (joint_ty_exdesc_exdesc_option_exdesc ->
                       (excon + one + one) ltree) -> bool)
   ((TRP :(excon + one + one -> (excon + one + one) ltree list ->
          bool) -> (excon + one + one) ltree -> bool)
   (\(v :excon + one + one). (\(tl :(excon + one + one) ltree list).
   ((\/ ((/\ ((? :(excon -> bool) -> bool) (\(e :excon).
   (((= :excon + one + one -> excon + one + one -> bool) $2)
   ((INL :excon -> excon + one + one) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(excon + one + one) ltree list -> num) $0)) (SUC 0))))
   ((\/ ((/\ (((= :excon + one + one -> excon + one + one -> bool) $1)
   ((INR :one + one -> excon + one + one) ((INL :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(excon + one + one) ltree list -> num) $0)) 0))) ((/\
   (((= :excon + one + one -> excon + one + one -> bool) $1)
   ((INR :one + one -> excon + one + one) ((INR :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(excon + one + one) ltree list -> num) $0)) (SUC
   0))))))))) $0)))`),
 ((int_valdesc_SOME_valdesc_arg_DEF),
  [],
  `((/\ ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :valdesc -> valdesc -> bool) (int_valdesc_SOME_valdesc_arg
   (int_valdesc_SOME_valdesc $0))) $0))))
   (((= :valdesc -> valdesc -> bool) (int_valdesc_SOME_valdesc_arg
   int_valdesc_NONE_valdesc)) ((@ :(valdesc -> bool) -> valdesc)
   (\(x :valdesc). T))))`),
 ((int_VARvaldesc_arg2_DEF),
  [],
  `((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(valdesc_option_valdesc -> bool) -> bool)
   (\(x2 :valdesc_option_valdesc).
   (((= :valdesc_option_valdesc -> valdesc_option_valdesc -> bool)
   (int_VARvaldesc_arg2 ((int_VARvaldesc $1) $0))) $0)))))`),
 ((int_VARvaldesc_arg1_DEF),
  [],
  `((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(valdesc_option_valdesc -> bool) -> bool)
   (\(x2 :valdesc_option_valdesc). (((= :var -> var -> bool)
   (int_VARvaldesc_arg1 ((int_VARvaldesc $1) $0))) $1)))))`),
 ((dist_aux_ftn_valdesc_DEF),
  [],
  `((/\ ((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(valdesc_option_valdesc -> bool) -> bool)
   (\(x2 :valdesc_option_valdesc). (((= :num -> num -> bool)
   (dist_aux_ftn_valdesc ((int_VARvaldesc $1) $0))) 0)))))) ((/\
   (((= :num -> num -> bool) (dist_aux_ftn_valdesc_option_valdesc
   int_valdesc_NONE_valdesc)) 1)) ((! :(valdesc -> bool) -> bool)
   (\(x1 :valdesc). (((= :num -> num -> bool)
   (dist_aux_ftn_valdesc_option_valdesc (int_valdesc_SOME_valdesc
   $0))) 2)))))`),
 ((VARvaldesc),
  [],
  `(((= :(var -> valdesc option -> valdesc) ->
         (var -> valdesc option -> valdesc) -> bool) VARvaldesc)
   (\(x0 :var). (\(x1 :valdesc option). ((int_VARvaldesc $1)
   (int_inj_valdesc_option_valdesc $0)))))`),
 ((int_inv_valdesc_option_valdesc),
  [],
  `((/\ (((= :valdesc option -> valdesc option -> bool)
   (int_inv_valdesc_option_valdesc int_valdesc_NONE_valdesc))
   (NONE :valdesc option))) ((! :(valdesc -> bool) -> bool)
   (\(x1 :valdesc). (((= :valdesc option -> valdesc option -> bool)
   (int_inv_valdesc_option_valdesc (int_valdesc_SOME_valdesc $0)))
   ((SOME :valdesc -> valdesc option) $0)))))`),
 ((int_inj_valdesc_option_valdesc),
  [],
  `((/\
   (((= :valdesc_option_valdesc -> valdesc_option_valdesc -> bool)
   (int_inj_valdesc_option_valdesc (NONE :valdesc option)))
   int_valdesc_NONE_valdesc)) ((! :(valdesc -> bool) -> bool)
   (\(x0 :valdesc).
   (((= :valdesc_option_valdesc -> valdesc_option_valdesc -> bool)
   (int_inj_valdesc_option_valdesc ((SOME :valdesc -> valdesc option)
   $0))) (int_valdesc_SOME_valdesc $0)))))`),
 ((int_valdesc_SOME_valdesc_DEF),
  [],
  `((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :valdesc_option_valdesc -> valdesc_option_valdesc -> bool)
   (int_valdesc_SOME_valdesc $0)) (valdesc_option_valdesc_abs
   (JOINT_int_valdesc_SOME_valdesc (valdesc_rep $0))))))`),
 ((int_valdesc_NONE_valdesc_DEF),
  [],
  `(((= :valdesc_option_valdesc -> valdesc_option_valdesc -> bool)
   int_valdesc_NONE_valdesc) (valdesc_option_valdesc_abs
   JOINT_int_valdesc_NONE_valdesc))`),
 ((int_VARvaldesc_DEF),
  [],
  `((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(valdesc_option_valdesc -> bool) -> bool)
   (\(x2 :valdesc_option_valdesc). (((= :valdesc -> valdesc -> bool)
   ((int_VARvaldesc $1) $0)) (valdesc_abs ((JOINT_int_VARvaldesc $1)
   (valdesc_option_valdesc_rep $0))))))))`),
 ((valdesc_option_valdesc_REP_ABS),
  [],
  `((/\ ((! :(valdesc_option_valdesc -> bool) -> bool)
   (\(a :valdesc_option_valdesc).
   (((= :valdesc_option_valdesc -> valdesc_option_valdesc -> bool)
   (valdesc_option_valdesc_abs (valdesc_option_valdesc_rep $0)))
   $0))))
   ((! :(joint_ty_valdesc_valdesc_option_valdesc -> bool) -> bool)
   (\(r :joint_ty_valdesc_valdesc_option_valdesc).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_valdesc_valdesc_option_valdesc).
   (((= :num -> num -> bool)
   (joint_ty_valdesc_valdesc_option_valdesc_select $0)) 2)) $0))
   (((= :joint_ty_valdesc_valdesc_option_valdesc ->
         joint_ty_valdesc_valdesc_option_valdesc -> bool)
   (valdesc_option_valdesc_rep (valdesc_option_valdesc_abs $0)))
   $0)))))`),
 ((valdesc_option_valdesc_TY_DEF),
  [],
  `((? :((valdesc_option_valdesc ->
         joint_ty_valdesc_valdesc_option_valdesc) -> bool) -> bool)
   (\(rep :valdesc_option_valdesc ->
           joint_ty_valdesc_valdesc_option_valdesc).
   (((TYPE_DEFINITION :(joint_ty_valdesc_valdesc_option_valdesc ->
                       bool) ->
                       (valdesc_option_valdesc ->
                       joint_ty_valdesc_valdesc_option_valdesc) ->
                       bool)
   (\(x :joint_ty_valdesc_valdesc_option_valdesc).
   (((= :num -> num -> bool)
   (joint_ty_valdesc_valdesc_option_valdesc_select $0)) 2))) $0)))`),
 ((valdesc_REP_ABS),
  [],
  `((/\ ((! :(valdesc -> bool) -> bool) (\(a :valdesc).
   (((= :valdesc -> valdesc -> bool) (valdesc_abs (valdesc_rep $0)))
   $0))))
   ((! :(joint_ty_valdesc_valdesc_option_valdesc -> bool) -> bool)
   (\(r :joint_ty_valdesc_valdesc_option_valdesc).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_valdesc_valdesc_option_valdesc).
   (((= :num -> num -> bool)
   (joint_ty_valdesc_valdesc_option_valdesc_select $0)) 1)) $0))
   (((= :joint_ty_valdesc_valdesc_option_valdesc ->
         joint_ty_valdesc_valdesc_option_valdesc -> bool) (valdesc_rep
   (valdesc_abs $0))) $0)))))`),
 ((valdesc_TY_DEF),
  [],
  `((? :((valdesc -> joint_ty_valdesc_valdesc_option_valdesc) ->
        bool) -> bool)
   (\(rep :valdesc -> joint_ty_valdesc_valdesc_option_valdesc).
   (((TYPE_DEFINITION :(joint_ty_valdesc_valdesc_option_valdesc ->
                       bool) ->
                       (valdesc ->
                       joint_ty_valdesc_valdesc_option_valdesc) ->
                       bool)
   (\(x :joint_ty_valdesc_valdesc_option_valdesc).
   (((= :num -> num -> bool)
   (joint_ty_valdesc_valdesc_option_valdesc_select $0)) 1))) $0)))`),
 ((joint_ty_valdesc_valdesc_option_valdesc_select_DEF),
  [],
  `((/\ ((! :(var -> bool) -> bool) (\(v' :var).
   ((! :(joint_ty_valdesc_valdesc_option_valdesc -> bool) -> bool)
   (\(j :joint_ty_valdesc_valdesc_option_valdesc).
   (((= :num -> num -> bool)
   (joint_ty_valdesc_valdesc_option_valdesc_select
   ((JOINT_int_VARvaldesc $1) $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_valdesc_valdesc_option_valdesc_select $0)) 2)) 1)
   0))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_valdesc_valdesc_option_valdesc_select
   JOINT_int_valdesc_NONE_valdesc)) 2))
   ((! :(joint_ty_valdesc_valdesc_option_valdesc -> bool) -> bool)
   (\(j :joint_ty_valdesc_valdesc_option_valdesc).
   (((= :num -> num -> bool)
   (joint_ty_valdesc_valdesc_option_valdesc_select
   (JOINT_int_valdesc_SOME_valdesc $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_valdesc_valdesc_option_valdesc_select $0)) 1)) 2)
   0))))))`),
 ((JOINT_int_valdesc_SOME_valdesc_DEF),
  [],
  `((! :(joint_ty_valdesc_valdesc_option_valdesc -> bool) -> bool)
   (\(j :joint_ty_valdesc_valdesc_option_valdesc).
   (((= :joint_ty_valdesc_valdesc_option_valdesc ->
         joint_ty_valdesc_valdesc_option_valdesc -> bool)
   (JOINT_int_valdesc_SOME_valdesc $0))
   (ABS_joint_ty_valdesc_valdesc_option_valdesc
   (((Node :var + one + one -> (var + one + one) ltree list ->
            (var + one + one) ltree)
   ((INR :one + one -> var + one + one) ((INR :one -> one + one)
   one)))
   (((CONS :(var + one + one) ltree -> (var + one + one) ltree list ->
            (var + one + one) ltree list)
   (REP_joint_ty_valdesc_valdesc_option_valdesc $0))
   (NIL :(var + one + one) ltree list)))))))`),
 ((JOINT_int_valdesc_NONE_valdesc_DEF),
  [],
  `(((= :joint_ty_valdesc_valdesc_option_valdesc ->
         joint_ty_valdesc_valdesc_option_valdesc -> bool)
   JOINT_int_valdesc_NONE_valdesc)
   (ABS_joint_ty_valdesc_valdesc_option_valdesc
   (((Node :var + one + one -> (var + one + one) ltree list ->
            (var + one + one) ltree)
   ((INR :one + one -> var + one + one) ((INL :one -> one + one)
   one))) (NIL :(var + one + one) ltree list))))`),
 ((JOINT_int_VARvaldesc_DEF),
  [],
  `((! :(var -> bool) -> bool) (\(v' :var).
   ((! :(joint_ty_valdesc_valdesc_option_valdesc -> bool) -> bool)
   (\(j :joint_ty_valdesc_valdesc_option_valdesc).
   (((= :joint_ty_valdesc_valdesc_option_valdesc ->
         joint_ty_valdesc_valdesc_option_valdesc -> bool)
   ((JOINT_int_VARvaldesc $1) $0))
   (ABS_joint_ty_valdesc_valdesc_option_valdesc
   (((Node :var + one + one -> (var + one + one) ltree list ->
            (var + one + one) ltree) ((INL :var -> var + one + one)
   $1))
   (((CONS :(var + one + one) ltree -> (var + one + one) ltree list ->
            (var + one + one) ltree list)
   (REP_joint_ty_valdesc_valdesc_option_valdesc $0))
   (NIL :(var + one + one) ltree list)))))))))`),
 ((joint_ty_valdesc_valdesc_option_valdesc_ISO_DEF),
  [],
  `((/\
   ((! :(joint_ty_valdesc_valdesc_option_valdesc -> bool) -> bool)
   (\(a :joint_ty_valdesc_valdesc_option_valdesc).
   (((= :joint_ty_valdesc_valdesc_option_valdesc ->
         joint_ty_valdesc_valdesc_option_valdesc -> bool)
   (ABS_joint_ty_valdesc_valdesc_option_valdesc
   (REP_joint_ty_valdesc_valdesc_option_valdesc $0))) $0))))
   ((! :((var + one + one) ltree -> bool) -> bool)
   (\(r :(var + one + one) ltree). (((= :bool -> bool -> bool)
   (((TRP :(var + one + one -> (var + one + one) ltree list ->
           bool) -> (var + one + one) ltree -> bool)
   (\(v :var + one + one). (\(tl :(var + one + one) ltree list). ((\/
   ((/\ ((? :(var -> bool) -> bool) (\(v :var).
   (((= :var + one + one -> var + one + one -> bool) $2)
   ((INL :var -> var + one + one) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(var + one + one) ltree list -> num) $0)) (SUC 0)))) ((\/
   ((/\ (((= :var + one + one -> var + one + one -> bool) $1)
   ((INR :one + one -> var + one + one) ((INL :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(var + one + one) ltree list -> num) $0)) 0))) ((/\
   (((= :var + one + one -> var + one + one -> bool) $1)
   ((INR :one + one -> var + one + one) ((INR :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(var + one + one) ltree list -> num) $0)) (SUC 0))))))))
   $0))
   (((= :(var + one + one) ltree -> (var + one + one) ltree -> bool)
   (REP_joint_ty_valdesc_valdesc_option_valdesc
   (ABS_joint_ty_valdesc_valdesc_option_valdesc $0))) $0)))))`),
 ((joint_ty_valdesc_valdesc_option_valdesc_TY_DEF),
  [],
  `((? :((joint_ty_valdesc_valdesc_option_valdesc ->
         (var + one + one) ltree) -> bool) -> bool)
   (\(rep :joint_ty_valdesc_valdesc_option_valdesc ->
           (var + one + one) ltree).
   (((TYPE_DEFINITION :((var + one + one) ltree -> bool) ->
                       (joint_ty_valdesc_valdesc_option_valdesc ->
                       (var + one + one) ltree) -> bool)
   ((TRP :(var + one + one -> (var + one + one) ltree list -> bool) ->
          (var + one + one) ltree -> bool) (\(v :var + one + one).
   (\(tl :(var + one + one) ltree list). ((\/ ((/\
   ((? :(var -> bool) -> bool) (\(v :var).
   (((= :var + one + one -> var + one + one -> bool) $2)
   ((INL :var -> var + one + one) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(var + one + one) ltree list -> num) $0)) (SUC 0)))) ((\/
   ((/\ (((= :var + one + one -> var + one + one -> bool) $1)
   ((INR :one + one -> var + one + one) ((INL :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(var + one + one) ltree list -> num) $0)) 0))) ((/\
   (((= :var + one + one -> var + one + one -> bool) $1)
   ((INR :one + one -> var + one + one) ((INR :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(var + one + one) ltree list -> num) $0)) (SUC 0)))))))))
   $0)))`),
 ((less_funid_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(f1 :funid).
   ((! :(funid -> bool) -> bool) (\(f2 :funid).
   (((= :bool -> bool -> bool) ((less_funid $1) $0)) ((ltstring
   (FUNID_arg $1)) (FUNID_arg $0)))))))`),
 ((FUNID_arg_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) (FUNID_arg (FUNID $0))) $0)))`),
 ((FUNID_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :funid -> funid -> bool) (FUNID $0)) (ABS_funid
   (((Node :string -> string ltree list -> string ltree) $0)
   (NIL :string ltree list))))))`),
 ((funid_ISO_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(a :funid).
   (((= :funid -> funid -> bool) (ABS_funid (REP_funid $0))) $0))))
   ((! :(string ltree -> bool) -> bool) (\(r :string ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(string -> string ltree list -> bool) -> string ltree ->
           bool) (\(v :string). (\(tl :string ltree list). ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) $2) $0))))
   (((= :num -> num -> bool) ((LENGTH :string ltree list -> num) $0))
   0))))) $0)) (((= :string ltree -> string ltree -> bool) (REP_funid
   (ABS_funid $0))) $0)))))`),
 ((funid_TY_DEF),
  [],
  `((? :((funid -> string ltree) -> bool) -> bool)
   (\(rep :funid -> string ltree).
   (((TYPE_DEFINITION :(string ltree -> bool) ->
                       (funid -> string ltree) -> bool)
   ((TRP :(string -> string ltree list -> bool) -> string ltree ->
          bool) (\(v :string). (\(tl :string ltree list). ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) $2) $0))))
   (((= :num -> num -> bool) ((LENGTH :string ltree list -> num) $0))
   0)))))) $0)))`),
 ((SIGID_arg_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) (SIGID_arg (SIGID $0))) $0)))`),
 ((SIGID_DEF),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   (((= :sigid -> sigid -> bool) (SIGID $0)) (ABS_sigid
   (((Node :string -> string ltree list -> string ltree) $0)
   (NIL :string ltree list))))))`),
 ((sigid_ISO_DEF),
  [],
  `((/\ ((! :(sigid -> bool) -> bool) (\(a :sigid).
   (((= :sigid -> sigid -> bool) (ABS_sigid (REP_sigid $0))) $0))))
   ((! :(string ltree -> bool) -> bool) (\(r :string ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(string -> string ltree list -> bool) -> string ltree ->
           bool) (\(v :string). (\(tl :string ltree list). ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) $2) $0))))
   (((= :num -> num -> bool) ((LENGTH :string ltree list -> num) $0))
   0))))) $0)) (((= :string ltree -> string ltree -> bool) (REP_sigid
   (ABS_sigid $0))) $0)))))`),
 ((sigid_TY_DEF),
  [],
  `((? :((sigid -> string ltree) -> bool) -> bool)
   (\(rep :sigid -> string ltree).
   (((TYPE_DEFINITION :(string ltree -> bool) ->
                       (sigid -> string ltree) -> bool)
   ((TRP :(string -> string ltree list -> bool) -> string ltree ->
          bool) (\(v :string). (\(tl :string ltree list). ((/\
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :string -> string -> bool) $2) $0))))
   (((= :num -> num -> bool) ((LENGTH :string ltree list -> num) $0))
   0)))))) $0)))`)]
theorems =
[((eval_exdesc_induction_thm),
  [],
  `((! :((exdesc -> state -> state -> excon set -> bool) -> bool) ->
        bool) (\(P :exdesc -> state -> state -> excon set -> bool).
   ((==> ((/\ ((! :(excon -> bool) -> bool) (\(excon :excon).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). (((($3 ((EXCONexdesc
   $2) (NONE :exdesc option))) $1) $0)
   (((INSERT :excon -> excon set -> excon set) $2)
   (EMPTY :excon set)))))))))) ((! :(exdesc -> bool) -> bool)
   (\(exdesc :exdesc). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(excon set -> bool) -> bool) (\(excons :excon set). ((==>
   (((($4 $3) $2) $1) $0)) ((! :(excon -> bool) -> bool)
   (\(excon :excon). (((($5 ((EXCONexdesc $0)
   ((SOME :exdesc -> exdesc option) $4))) $3) $2)
   (((UNION :excon set -> excon set -> excon set)
   (((INSERT :excon -> excon set -> excon set) $0)
   (EMPTY :excon set))) $1)))))))))))))))
   ((! :(exdesc -> bool) -> bool) (\(exdesc :exdesc).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(excon set -> bool) -> bool) (\(excons :excon set). ((==>
   ((((eval_exdesc $3) $2) $1) $0)) (((($4 $3) $2) $1)
   $0)))))))))))))`),
 (( Rule185b),
  [],
  `((! :(exdesc -> bool) -> bool) (\(exdesc :exdesc).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(excon set -> bool) -> bool) (\(excons :excon set). ((==>
   ((((eval_exdesc $3) $2) $1) $0)) ((! :(excon -> bool) -> bool)
   (\(excon :excon). ((((eval_exdesc ((EXCONexdesc $0)
   ((SOME :exdesc -> exdesc option) $4))) $3) $2)
   (((UNION :excon set -> excon set -> excon set)
   (((INSERT :excon -> excon set -> excon set) $0)
   (EMPTY :excon set))) $1)))))))))))))`),
 ((Rule185a),
  [],
  `((! :(excon -> bool) -> bool) (\(excon :excon).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((((eval_exdesc
   ((EXCONexdesc $2) (NONE :exdesc option))) $1) $0)
   (((INSERT :excon -> excon set -> excon set) $2)
   (EMPTY :excon set)))))))))`),
 ((eval_valdesc_induction_thm),
  [],
  `((! :((valdesc -> state -> state -> var set -> bool) -> bool) ->
        bool) (\(P :valdesc -> state -> state -> var set -> bool).
   ((==> ((/\ ((! :(var -> bool) -> bool) (\(var :var).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). (((($3 ((VARvaldesc
   $2) (NONE :valdesc option))) $1) $0)
   (((INSERT :var -> var set -> var set) $2) (EMPTY :var set))))))))))
   ((! :(valdesc -> bool) -> bool) (\(valdesc :valdesc).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(var set -> bool) -> bool) (\(vars :var set). ((==> (((($4 $3)
   $2) $1) $0)) ((! :(var -> bool) -> bool) (\(var :var). (((($5
   ((VARvaldesc $0) ((SOME :valdesc -> valdesc option) $4))) $3) $2)
   (((UNION :var set -> var set -> var set)
   (((INSERT :var -> var set -> var set) $0) (EMPTY :var set)))
   $1))))))))))))))) ((! :(valdesc -> bool) -> bool)
   (\(valdesc :valdesc). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(var set -> bool) -> bool) (\(vars :var set). ((==>
   ((((eval_valdesc $3) $2) $1) $0)) (((($4 $3) $2) $1)
   $0)))))))))))))`),
 ((Rule184b),
  [],
  `((! :(valdesc -> bool) -> bool) (\(valdesc :valdesc).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(var set -> bool) -> bool) (\(vars :var set). ((==>
   ((((eval_valdesc $3) $2) $1) $0)) ((! :(var -> bool) -> bool)
   (\(var :var). ((((eval_valdesc ((VARvaldesc $0)
   ((SOME :valdesc -> valdesc option) $4))) $3) $2)
   (((UNION :var set -> var set -> var set)
   (((INSERT :var -> var set -> var set) $0) (EMPTY :var set)))
   $1)))))))))))))`),
 ((Rule184a),
  [],
  `((! :(var -> bool) -> bool) (\(var :var).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((((eval_valdesc
   ((VARvaldesc $2) (NONE :valdesc option))) $1) $0)
   (((INSERT :var -> var set -> var set) $2)
   (EMPTY :var set)))))))))`),
 ((exdesc_cases_thm),
  [],
  `((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   ((? :(excon -> bool) -> bool) (\(y :excon).
   ((? :(exdesc option -> bool) -> bool) (\(y' :exdesc option).
   (((= :exdesc -> exdesc -> bool) $2) ((EXCONexdesc $1) $0)))))))))
   ((! :(exdesc option -> bool) -> bool) (\(x2 :exdesc option). ((\/
   (((= :exdesc option -> exdesc option -> bool) $0)
   (NONE :exdesc option))) ((? :(exdesc -> bool) -> bool)
   (\(y :exdesc). (((= :exdesc option -> exdesc option -> bool) $1)
   ((SOME :exdesc -> exdesc option) $0))))))))`),
 ((exdesc_constructors_one_one),
  [],
  `((/\ ((! :(excon -> bool) -> bool) (\(x1 :excon).
   ((! :(exdesc option -> bool) -> bool) (\(x2 :exdesc option).
   ((! :(excon -> bool) -> bool) (\(x1' :excon).
   ((! :(exdesc option -> bool) -> bool) (\(x2' :exdesc option).
   (((= :bool -> bool -> bool) (((= :exdesc -> exdesc -> bool)
   ((EXCONexdesc $3) $2)) ((EXCONexdesc $1) $0))) ((/\
   (((= :excon -> excon -> bool) $3) $1))
   (((= :exdesc option -> exdesc option -> bool) $2) $0))))))))))))
   ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   ((! :(exdesc -> bool) -> bool) (\(x1' :exdesc).
   (((= :bool -> bool -> bool)
   (((= :exdesc option -> exdesc option -> bool)
   ((SOME :exdesc -> exdesc option) $1))
   ((SOME :exdesc -> exdesc option) $0)))
   (((= :exdesc -> exdesc -> bool) $1) $0)))))))`),
 ((exdesc_constructors_distinct),
  [],
  `((! :(exdesc -> bool) -> bool) (\(x1' :exdesc). (~
   (((= :exdesc option -> exdesc option -> bool)
   (NONE :exdesc option)) ((SOME :exdesc -> exdesc option) $0)))))`),
 ((exdesc_unique_thm),
  [],
  `((! :(('b -> excon -> exdesc option -> 'a) -> bool) -> bool)
   (\(EXCONexdesc_case :'b -> excon -> exdesc option -> 'a).
   ((! :('b -> bool) -> bool) (\(exdesc_NONE_exdesc_case :'b).
   ((! :(('a -> exdesc -> 'b) -> bool) -> bool)
   (\(exdesc_SOME_exdesc_case :'a -> exdesc -> 'b).
   ((! :((exdesc -> 'a) -> bool) -> bool) (\(fn1 :exdesc -> 'a).
   ((! :((exdesc option -> 'b) -> bool) -> bool)
   (\(fn2 :exdesc option -> 'b).
   ((! :((exdesc -> 'a) -> bool) -> bool) (\(fn1' :exdesc -> 'a).
   ((! :((exdesc option -> 'b) -> bool) -> bool)
   (\(fn2' :exdesc option -> 'b). ((==> ((/\
   ((! :(excon -> bool) -> bool) (\(y :excon).
   ((! :(exdesc option -> bool) -> bool) (\(y' :exdesc option).
   (((= :'a -> 'a -> bool) ($5 ((EXCONexdesc $1) $0))) ((($8 ($4 $0))
   $1) $0))))))) ((/\ (((= :'b -> 'b -> bool) ($2
   (NONE :exdesc option))) $5)) ((! :(exdesc -> bool) -> bool)
   (\(y :exdesc). (((= :'b -> 'b -> bool) ($3
   ((SOME :exdesc -> exdesc option) $0))) (($5 ($4 $0)) $0)))))))
   ((==> ((/\ ((! :(excon -> bool) -> bool) (\(y :excon).
   ((! :(exdesc option -> bool) -> bool) (\(y' :exdesc option).
   (((= :'a -> 'a -> bool) ($3 ((EXCONexdesc $1) $0))) ((($8 ($2 $0))
   $1) $0))))))) ((/\ (((= :'b -> 'b -> bool) ($0
   (NONE :exdesc option))) $5)) ((! :(exdesc -> bool) -> bool)
   (\(y :exdesc). (((= :'b -> 'b -> bool) ($1
   ((SOME :exdesc -> exdesc option) $0))) (($5 ($2 $0)) $0))))))) ((/\
   (((= :(exdesc -> 'a) -> (exdesc -> 'a) -> bool) $3) $1))
   (((= :(exdesc option -> 'b) -> (exdesc option -> 'b) -> bool) $2)
   $0))))))))))))))))))`),
 ((exdesc_induction_thm),
  [],
  `((! :((exdesc -> bool) -> bool) -> bool)
   (\(exdesc_Prop :exdesc -> bool).
   ((! :((exdesc option -> bool) -> bool) -> bool)
   (\(exdesc_option_exdesc_Prop :exdesc option -> bool). ((==> ((/\
   ((! :(excon -> bool) -> bool) (\(y :excon).
   ((! :(exdesc option -> bool) -> bool) (\(y' :exdesc option). ((==>
   ($2 $0)) ($3 ((EXCONexdesc $1) $0)))))))) ((/\ ($0
   (NONE :exdesc option))) ((! :(exdesc -> bool) -> bool)
   (\(y :exdesc). ((==> ($2 $0)) ($1 ((SOME :exdesc -> exdesc option)
   $0)))))))) ((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc). ($2
   $0)))) ((! :(exdesc option -> bool) -> bool) (\(x2 :exdesc option).
   ($1 $0)))))))))`),
 ((exdesc_rec_thm),
  [],
  `((! :(('b -> excon -> exdesc option -> 'a) -> bool) -> bool)
   (\(EXCONexdesc_case :'b -> excon -> exdesc option -> 'a).
   ((! :('b -> bool) -> bool) (\(exdesc_NONE_exdesc_case :'b).
   ((! :(('a -> exdesc -> 'b) -> bool) -> bool)
   (\(exdesc_SOME_exdesc_case :'a -> exdesc -> 'b).
   ((? :((exdesc -> 'a) -> bool) -> bool) (\(y :exdesc -> 'a).
   ((? :((exdesc option -> 'b) -> bool) -> bool)
   (\(y' :exdesc option -> 'b). ((/\ ((! :(excon -> bool) -> bool)
   (\(x1 :excon). ((! :(exdesc option -> bool) -> bool)
   (\(x2 :exdesc option). (((= :'a -> 'a -> bool) ($3 ((EXCONexdesc
   $1) $0))) ((($6 ($2 $0)) $1) $0))))))) ((/\ (((= :'b -> 'b -> bool)
   ($0 (NONE :exdesc option))) $3)) ((! :(exdesc -> bool) -> bool)
   (\(x1 :exdesc). (((= :'b -> 'b -> bool) ($1
   ((SOME :exdesc -> exdesc option) $0))) (($3 ($2 $0))
   $0))))))))))))))))`),
 ((joint_ty_exdesc_exdesc_option_exdesc_Axiom),
  [],
  `((! :(('a -> excon -> joint_ty_exdesc_exdesc_option_exdesc ->
         'a) -> bool) -> bool)
   (\(f0 :'a -> excon -> joint_ty_exdesc_exdesc_option_exdesc -> 'a).
   ((! :('a -> bool) -> bool) (\(e :'a).
   ((! :(('a -> joint_ty_exdesc_exdesc_option_exdesc -> 'a) ->
        bool) -> bool)
   (\(f1 :'a -> joint_ty_exdesc_exdesc_option_exdesc -> 'a).
   ((?! :((joint_ty_exdesc_exdesc_option_exdesc -> 'a) -> bool) ->
         bool) (\(fn :joint_ty_exdesc_exdesc_option_exdesc -> 'a).
   ((/\ ((! :(excon -> bool) -> bool) (\(e' :excon).
   ((! :(joint_ty_exdesc_exdesc_option_exdesc -> bool) -> bool)
   (\(j :joint_ty_exdesc_exdesc_option_exdesc).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_EXCONexdesc $1) $0))) ((($5
   ($2 $0)) $1) $0))))))) ((/\ (((= :'a -> 'a -> bool) ($0
   JOINT_int_exdesc_NONE_exdesc)) $2))
   ((! :(joint_ty_exdesc_exdesc_option_exdesc -> bool) -> bool)
   (\(j :joint_ty_exdesc_exdesc_option_exdesc).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_exdesc_SOME_exdesc $0)))
   (($2 ($1 $0)) $0))))))))))))))`),
 ((valdesc_cases_thm),
  [],
  `((/\ ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   ((? :(var -> bool) -> bool) (\(y :var).
   ((? :(valdesc option -> bool) -> bool) (\(y' :valdesc option).
   (((= :valdesc -> valdesc -> bool) $2) ((VARvaldesc $1) $0)))))))))
   ((! :(valdesc option -> bool) -> bool) (\(x2 :valdesc option). ((\/
   (((= :valdesc option -> valdesc option -> bool) $0)
   (NONE :valdesc option))) ((? :(valdesc -> bool) -> bool)
   (\(y :valdesc). (((= :valdesc option -> valdesc option -> bool) $1)
   ((SOME :valdesc -> valdesc option) $0))))))))`),
 ((valdesc_constructors_one_one),
  [],
  `((/\ ((! :(var -> bool) -> bool) (\(x1 :var).
   ((! :(valdesc option -> bool) -> bool) (\(x2 :valdesc option).
   ((! :(var -> bool) -> bool) (\(x1' :var).
   ((! :(valdesc option -> bool) -> bool) (\(x2' :valdesc option).
   (((= :bool -> bool -> bool) (((= :valdesc -> valdesc -> bool)
   ((VARvaldesc $3) $2)) ((VARvaldesc $1) $0))) ((/\
   (((= :var -> var -> bool) $3) $1))
   (((= :valdesc option -> valdesc option -> bool) $2) $0))))))))))))
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   ((! :(valdesc -> bool) -> bool) (\(x1' :valdesc).
   (((= :bool -> bool -> bool)
   (((= :valdesc option -> valdesc option -> bool)
   ((SOME :valdesc -> valdesc option) $1))
   ((SOME :valdesc -> valdesc option) $0)))
   (((= :valdesc -> valdesc -> bool) $1) $0)))))))`),
 ((valdesc_constructors_distinct),
  [],
  `((! :(valdesc -> bool) -> bool) (\(x1' :valdesc). (~
   (((= :valdesc option -> valdesc option -> bool)
   (NONE :valdesc option)) ((SOME :valdesc -> valdesc option)
   $0)))))`),
 ((valdesc_unique_thm),
  [],
  `((! :(('b -> var -> valdesc option -> 'a) -> bool) -> bool)
   (\(VARvaldesc_case :'b -> var -> valdesc option -> 'a).
   ((! :('b -> bool) -> bool) (\(valdesc_NONE_valdesc_case :'b).
   ((! :(('a -> valdesc -> 'b) -> bool) -> bool)
   (\(valdesc_SOME_valdesc_case :'a -> valdesc -> 'b).
   ((! :((valdesc -> 'a) -> bool) -> bool) (\(fn1 :valdesc -> 'a).
   ((! :((valdesc option -> 'b) -> bool) -> bool)
   (\(fn2 :valdesc option -> 'b).
   ((! :((valdesc -> 'a) -> bool) -> bool) (\(fn1' :valdesc -> 'a).
   ((! :((valdesc option -> 'b) -> bool) -> bool)
   (\(fn2' :valdesc option -> 'b). ((==> ((/\
   ((! :(var -> bool) -> bool) (\(y :var).
   ((! :(valdesc option -> bool) -> bool) (\(y' :valdesc option).
   (((= :'a -> 'a -> bool) ($5 ((VARvaldesc $1) $0))) ((($8 ($4 $0))
   $1) $0))))))) ((/\ (((= :'b -> 'b -> bool) ($2
   (NONE :valdesc option))) $5)) ((! :(valdesc -> bool) -> bool)
   (\(y :valdesc). (((= :'b -> 'b -> bool) ($3
   ((SOME :valdesc -> valdesc option) $0))) (($5 ($4 $0)) $0)))))))
   ((==> ((/\ ((! :(var -> bool) -> bool) (\(y :var).
   ((! :(valdesc option -> bool) -> bool) (\(y' :valdesc option).
   (((= :'a -> 'a -> bool) ($3 ((VARvaldesc $1) $0))) ((($8 ($2 $0))
   $1) $0))))))) ((/\ (((= :'b -> 'b -> bool) ($0
   (NONE :valdesc option))) $5)) ((! :(valdesc -> bool) -> bool)
   (\(y :valdesc). (((= :'b -> 'b -> bool) ($1
   ((SOME :valdesc -> valdesc option) $0))) (($5 ($2 $0)) $0)))))))
   ((/\ (((= :(valdesc -> 'a) -> (valdesc -> 'a) -> bool) $3) $1))
   (((= :(valdesc option -> 'b) -> (valdesc option -> 'b) -> bool) $2)
   $0))))))))))))))))))`),
 ((valdesc_induction_thm),
  [],
  `((! :((valdesc -> bool) -> bool) -> bool)
   (\(valdesc_Prop :valdesc -> bool).
   ((! :((valdesc option -> bool) -> bool) -> bool)
   (\(valdesc_option_valdesc_Prop :valdesc option -> bool). ((==> ((/\
   ((! :(var -> bool) -> bool) (\(y :var).
   ((! :(valdesc option -> bool) -> bool) (\(y' :valdesc option).
   ((==> ($2 $0)) ($3 ((VARvaldesc $1) $0)))))))) ((/\ ($0
   (NONE :valdesc option))) ((! :(valdesc -> bool) -> bool)
   (\(y :valdesc). ((==> ($2 $0)) ($1
   ((SOME :valdesc -> valdesc option) $0)))))))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc). ($2 $0))))
   ((! :(valdesc option -> bool) -> bool) (\(x2 :valdesc option). ($1
   $0)))))))))`),
 ((valdesc_rec_thm),
  [],
  `((! :(('b -> var -> valdesc option -> 'a) -> bool) -> bool)
   (\(VARvaldesc_case :'b -> var -> valdesc option -> 'a).
   ((! :('b -> bool) -> bool) (\(valdesc_NONE_valdesc_case :'b).
   ((! :(('a -> valdesc -> 'b) -> bool) -> bool)
   (\(valdesc_SOME_valdesc_case :'a -> valdesc -> 'b).
   ((? :((valdesc -> 'a) -> bool) -> bool) (\(y :valdesc -> 'a).
   ((? :((valdesc option -> 'b) -> bool) -> bool)
   (\(y' :valdesc option -> 'b). ((/\ ((! :(var -> bool) -> bool)
   (\(x1 :var). ((! :(valdesc option -> bool) -> bool)
   (\(x2 :valdesc option). (((= :'a -> 'a -> bool) ($3 ((VARvaldesc
   $1) $0))) ((($6 ($2 $0)) $1) $0))))))) ((/\ (((= :'b -> 'b -> bool)
   ($0 (NONE :valdesc option))) $3)) ((! :(valdesc -> bool) -> bool)
   (\(x1 :valdesc). (((= :'b -> 'b -> bool) ($1
   ((SOME :valdesc -> valdesc option) $0))) (($3 ($2 $0))
   $0))))))))))))))))`),
 ((joint_ty_valdesc_valdesc_option_valdesc_Axiom),
  [],
  `((! :(('a -> var -> joint_ty_valdesc_valdesc_option_valdesc ->
         'a) -> bool) -> bool)
   (\(f0 :'a -> var -> joint_ty_valdesc_valdesc_option_valdesc -> 'a).
   ((! :('a -> bool) -> bool) (\(e :'a).
   ((! :(('a -> joint_ty_valdesc_valdesc_option_valdesc -> 'a) ->
        bool) -> bool)
   (\(f1 :'a -> joint_ty_valdesc_valdesc_option_valdesc -> 'a).
   ((?! :((joint_ty_valdesc_valdesc_option_valdesc -> 'a) -> bool) ->
         bool) (\(fn :joint_ty_valdesc_valdesc_option_valdesc -> 'a).
   ((/\ ((! :(var -> bool) -> bool) (\(v' :var).
   ((! :(joint_ty_valdesc_valdesc_option_valdesc -> bool) -> bool)
   (\(j :joint_ty_valdesc_valdesc_option_valdesc).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_VARvaldesc $1) $0))) ((($5
   ($2 $0)) $1) $0))))))) ((/\ (((= :'a -> 'a -> bool) ($0
   JOINT_int_valdesc_NONE_valdesc)) $2))
   ((! :(joint_ty_valdesc_valdesc_option_valdesc -> bool) -> bool)
   (\(j :joint_ty_valdesc_valdesc_option_valdesc).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_valdesc_SOME_valdesc $0)))
   (($2 ($1 $0)) $0))))))))))))))`),
 ((funid_constructors_one_one),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   ((! :(string -> bool) -> bool) (\(s' :string).
   (((= :bool -> bool -> bool) (((= :funid -> funid -> bool) (FUNID
   $1)) (FUNID $0))) (((= :string -> string -> bool) $1) $0))))))`),
 ((funid_cases_thm),
  [],
  `((! :(funid -> bool) -> bool) (\(f :funid).
   ((? :(string -> bool) -> bool) (\(s :string).
   (((= :funid -> funid -> bool) $1) (FUNID $0))))))`),
 ((funid_induction_thm),
  [],
  `((! :((funid -> bool) -> bool) -> bool) (\(P :funid -> bool). ((==>
   ((! :(string -> bool) -> bool) (\(s :string). ($1 (FUNID $0)))))
   ((! :(funid -> bool) -> bool) (\(f :funid). ($1 $0))))))`),
 ((funid_Axiom),
  [],
  `((! :((string -> 'a) -> bool) -> bool) (\(f :string -> 'a).
   ((?! :((funid -> 'a) -> bool) -> bool) (\(fn :funid -> 'a).
   ((! :(string -> bool) -> bool) (\(s :string).
   (((= :'a -> 'a -> bool) ($1 (FUNID $0))) ($2 $0))))))))`),
 ((sigid_constructors_one_one),
  [],
  `((! :(string -> bool) -> bool) (\(s :string).
   ((! :(string -> bool) -> bool) (\(s' :string).
   (((= :bool -> bool -> bool) (((= :sigid -> sigid -> bool) (SIGID
   $1)) (SIGID $0))) (((= :string -> string -> bool) $1) $0))))))`),
 ((sigid_cases_thm),
  [],
  `((! :(sigid -> bool) -> bool) (\(s :sigid).
   ((? :(string -> bool) -> bool) (\(s' :string).
   (((= :sigid -> sigid -> bool) $1) (SIGID $0))))))`),
 ((sigid_induction_thm),
  [],
  `((! :((sigid -> bool) -> bool) -> bool) (\(P :sigid -> bool). ((==>
   ((! :(string -> bool) -> bool) (\(s :string). ($1 (SIGID $0)))))
   ((! :(sigid -> bool) -> bool) (\(s :sigid). ($1 $0))))))`),
 ((sigid_Axiom),
  [],
  `((! :((string -> 'a) -> bool) -> bool) (\(f :string -> 'a).
   ((?! :((sigid -> 'a) -> bool) -> bool) (\(fn :sigid -> 'a).
   ((! :(string -> bool) -> bool) (\(s :string).
   (((= :'a -> 'a -> bool) ($1 (SIGID $0))) ($2 $0))))))))`)]
