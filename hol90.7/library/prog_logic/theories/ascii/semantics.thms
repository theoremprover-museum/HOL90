thid = (semantics, 783975580, 501191)
axioms = []
definitions =
[((MK_ASSIGN),
  [],
  `((! :(string -> bool) -> bool) (\(x :string).
   ((! :(((string -> num) -> num) -> bool) -> bool)
   (\(e :(string -> num) -> num).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   ((! :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   (((= :bool -> bool -> bool) ((MK_ASSIGN
   (((, :string -> ((string -> num) -> num) ->
         string # ((string -> num) -> num)) $3) $2))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0)))
   (((= :(string -> num) -> (string -> num) -> bool) $0) (((BND $3)
   ($2 $1)) $1)))))))))))`),
 ((BND),
  [],
  `((! :(string -> bool) -> bool) (\(x :string).
   ((! :(num -> bool) -> bool) (\(n :num).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :(string -> num) -> (string -> num) -> bool) (((BND $2) $1)
   $0)) (\(z :string). ((((COND :bool -> num -> num -> num)
   (((= :string -> string -> bool) $0) $3)) $2) ($1 $0))))))))))`),
 ((MK_VARIANT),
  [],
  `((! :(((string -> num) -> num) -> bool) -> bool)
   (\(p :(string -> num) -> num).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   ((! :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   (((= :bool -> bool -> bool) ((MK_VARIANT $2)
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0))) ((/\ ((> ($2
   $1)) ($2 $0))) (((= :(string -> num) -> (string -> num) -> bool)
   $1) $0)))))))))`),
 ((MK_INVARIANT),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   ((! :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   (((= :bool -> bool -> bool) ((MK_INVARIANT $2)
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0))) ((/\ ($2 $1))
   (((= :(string -> num) -> (string -> num) -> bool) $1)
   $0)))))))))`),
 ((MK_ASSERT),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   ((! :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   (((= :bool -> bool -> bool) ((MK_ASSERT $2)
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0))) ((/\ ($2 $1))
   (((= :(string -> num) -> (string -> num) -> bool) $1)
   $0)))))))))`),
 ((MK_SPEC),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool). (((= :bool -> bool -> bool)
   (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0))))
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   ((! :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   ((==> ((/\ ($4 $1)) ($3
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0)))) ($2
   $0)))))))))))))`),
 ((MK_WHILE),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   ((! :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   (((= :bool -> bool -> bool) ((MK_WHILE
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $3) $2))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0)))
   ((? :(num -> bool) -> bool) (\(n :num). (((MK_FINITE_WHILE $0)
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $4) $3))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $2) $1)))))))))))))`),
 ((MK_FINITE_WHILE),
  [],
  `((/\
   (((= :(((string -> num) -> bool) #
          ((string -> num) # (string -> num) -> bool) ->
         (string -> num) # (string -> num) -> bool) ->
         (((string -> num) -> bool) #
          ((string -> num) # (string -> num) -> bool) ->
         (string -> num) # (string -> num) -> bool) -> bool)
   (MK_FINITE_WHILE 0))
   ((UNCURRY :(((string -> num) -> bool) ->
              ((string -> num) # (string -> num) -> bool) ->
              (string -> num) # (string -> num) -> bool) ->
              ((string -> num) -> bool) #
              ((string -> num) # (string -> num) -> bool) ->
              (string -> num) # (string -> num) -> bool)
   (\(p :(string -> num) -> bool).
   (\(c :(string -> num) # (string -> num) -> bool).
   ((UNCURRY :((string -> num) -> (string -> num) -> bool) ->
              (string -> num) # (string -> num) -> bool)
   (\(s :string -> num). (\(s' :string -> num). F))))))))
   ((! :(num -> bool) -> bool) (\(n :num).
   (((= :(((string -> num) -> bool) #
          ((string -> num) # (string -> num) -> bool) ->
         (string -> num) # (string -> num) -> bool) ->
         (((string -> num) -> bool) #
          ((string -> num) # (string -> num) -> bool) ->
         (string -> num) # (string -> num) -> bool) -> bool)
   (MK_FINITE_WHILE (SUC $0)))
   ((UNCURRY :(((string -> num) -> bool) ->
              ((string -> num) # (string -> num) -> bool) ->
              (string -> num) # (string -> num) -> bool) ->
              ((string -> num) -> bool) #
              ((string -> num) # (string -> num) -> bool) ->
              (string -> num) # (string -> num) -> bool)
   (\(p :(string -> num) -> bool).
   (\(c :(string -> num) # (string -> num) -> bool). (MK_IF1
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $1) (MK_SEQ
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $0)
   ((MK_FINITE_WHILE $2)
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $1)
   $0)))))))))))))`),
 ((MK_SEQL),
  [],
  `((/\
   (((= :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) -> bool) (MK_SEQL
   (NIL :((string -> num) # (string -> num) -> bool) list)))
   ((UNCURRY :((string -> num) -> (string -> num) -> bool) ->
              (string -> num) # (string -> num) -> bool)
   (\(s :string -> num). (\(s' :string -> num).
   (((= :(string -> num) -> (string -> num) -> bool) $1) $0))))))
   ((! :(((string -> num) # (string -> num) -> bool) list -> bool) ->
        bool)
   (\(cl :((string -> num) # (string -> num) -> bool) list).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   (((= :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) -> bool) (MK_SEQL
   (((CONS :((string -> num) # (string -> num) -> bool) ->
            ((string -> num) # (string -> num) -> bool) list ->
            ((string -> num) # (string -> num) -> bool) list) $0)
   $1))) (MK_SEQ
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $0) (MK_SEQL
   $1)))))))))`),
 ((MK_SEQ),
  [],
  `((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c' :(string -> num) # (string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   ((! :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   (((= :bool -> bool -> bool) ((MK_SEQ
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $3) $2))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0)))
   ((? :((string -> num) -> bool) -> bool) (\(s'' :string -> num).
   ((/\ ($4
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $2) $0))) ($3
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $0) $1))))))))))))))`),
 ((MK_IF2),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c' :(string -> num) # (string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   ((! :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   (((= :bool -> bool -> bool) ((MK_IF2
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $4)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $3) $2)))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0)))
   ((((COND :bool -> bool -> bool -> bool) ($4 $1)) ($3
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0))) ($2
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0))))))))))))))`),
 ((MK_IF1),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   ((! :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   (((= :bool -> bool -> bool) ((MK_IF1
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $3) $2))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0)))
   ((((COND :bool -> bool -> bool -> bool) ($3 $1)) ($2
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0)))
   (((= :(string -> num) -> (string -> num) -> bool) $1)
   $0)))))))))))`),
 ((MK_ABORT),
  [],
  `((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   ((! :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   (((= :bool -> bool -> bool) (MK_ABORT
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0))) F)))))`),
 ((MK_SKIP),
  [],
  `((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   ((! :((string -> num) -> bool) -> bool) (\(s' :string -> num).
   (((= :bool -> bool -> bool) (MK_SKIP
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0)))
   (((= :(string -> num) -> (string -> num) -> bool) $1) $0))))))`)]
theorems =
[((MK_FINITE_WHILE_CLAUSES),
  [],
  `((/\ (((= :bool -> bool -> bool) (((MK_FINITE_WHILE 0)
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (p :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) (s :string -> num))
   (s' :string -> num)))) F)) (((= :bool -> bool -> bool)
   (((MK_FINITE_WHILE (SUC (n :num)))
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (p :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) (s :string -> num))
   (s' :string -> num)))) ((MK_IF1
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (p :(string -> num) -> bool)) (MK_SEQ
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)) ((MK_FINITE_WHILE
   (n :num))
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (p :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)))))))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) (s :string -> num))
   (s' :string -> num)))))`),
 ((BND_THM2),
  [],
  `((! :(num -> bool) -> bool) (\(n :num).
   ((! :(string -> bool) -> bool) (\(x :string).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   ((! :(string -> bool) -> bool) (\(y :string). ((==> (~
   (((= :string -> string -> bool) $0) $2))) (((= :num -> num -> bool)
   ((((BND $2) $3) $1) $0)) ($1 $0)))))))))))`),
 ((BND_THM1),
  [],
  `((! :(num -> bool) -> bool) (\(n :num).
   ((! :(string -> bool) -> bool) (\(x :string).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   (((= :num -> num -> bool) ((((BND $1) $2) $0) $1)) $2)))))))`)]
