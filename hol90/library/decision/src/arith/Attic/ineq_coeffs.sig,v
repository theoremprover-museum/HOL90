head	1.1;
access;
symbols
	HOL97:1.1.2.1.0.2
	bpHOL97:1.1.2.1
	hol90_9_alpha:1.1.2.1
	hol90_pre8_for_multiple_compilers:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	96.08.23.09.15.14;	author rjb;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.08.23.09.15.15;	author rjb;	state Exp;
branches
	1.1.2.1.2.1;
next	;

1.1.2.1.2.1
date	97.07.11.19.39.19;	author kxs;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file ineq_coeffs.sig was initially added on branch hol90_pre8_for_multiple_compilers.
@
text
@@


1.1.2.1
log
@Initial version.
@
text
@a0 53
signature NUMBER_TYPE =
sig
   eqtype num
   val num0 : num
   val num1 : num
   val + : num * num -> num
   val - : num * num -> num
   val * : num * num -> num
   val div : num * num -> num
   val lcm : num * num -> num
   val < : num * num -> bool
end;

signature INEQUALITY_COEFFS =
sig
   structure NumberType : NUMBER_TYPE
   type num
   sharing type num = NumberType.num
   datatype inequality_relation = Eq | Leq | Less
   val dest_ineq : Term.term -> inequality_relation * (Term.term * Term.term)
   val mk_ineq : inequality_relation -> (Term.term * Term.term) -> Term.term
   val coeff_of_const : (num * (string * num) list) -> num
   val coeffs_of_vars : (num * (string * num) list) -> (string * num) list
   val coeff_of_var : string -> (num * (string * num) list) -> num
   val var_on_left : string -> (num * (string * num) list) -> bool
   val var_on_right : string -> (num * (string * num) list) -> bool
   val var_not_present : string -> (num * (string * num) list) -> bool
   val scale_coeffs : num ->
                      (num * (string * num) list) ->
                      (num * (string * num) list)
   val negate_coeffs : (num * (string * num) list) ->
                       (num * (string * num) list)
   val merge_coeffs : (num * (string * num) list) ->
                      (num * (string * num) list) ->
                      (num * (string * num) list)
   val lhs_coeffs : (num * (string * num) list) -> (num * (string * num) list)
   val rhs_coeffs : (num * (string * num) list) -> (num * (string * num) list)
   val diff_of_coeffs :
          ((num * (string * num) list) * (num * (string * num) list)) ->
          ((num * (string * num) list) * (num * (string * num) list))
   val vars_of_coeffs : (num * (string * num) list) list -> string list
   val var_of_prod : Term.term -> string
   val coeffs_of_arith : Term.term -> (num * (string * num) list)
   val coeffs_of_ineq :
          Term.term -> inequality_relation * (num * (string * num) list)
   val coeffs_of_ineq_set :
          Term.term -> (inequality_relation * (num * (string * num) list)) list
   val coeffs_of_goal : (Term.term list * Term.term) ->
                        inequality_relation * (num * (string * num) list)
   val arith_of_coeffs : num * (string * num) list -> Term.term
   val ineq_of_coeffs :
          inequality_relation * (num * (string * num) list) -> Term.term
end;
@


1.1.2.1.2.1
log
@Making the library CM friendly.
@
text
@a18 5

(*   type term sharing type term = CoreHol.Term.term *)

   type term 

d20 2
a21 2
   val dest_ineq : term -> inequality_relation * (term * term)
   val mk_ineq : inequality_relation -> (term * term) -> term
d42 2
a43 2
   val var_of_prod : term -> string
   val coeffs_of_arith : term -> (num * (string * num) list)
d45 1
a45 1
          term -> inequality_relation * (num * (string * num) list)
d47 2
a48 2
          term -> (inequality_relation * (num * (string * num) list)) list
   val coeffs_of_goal : (term list * term) ->
d50 1
a50 1
   val arith_of_coeffs : num * (string * num) list -> term
d52 1
a52 1
          inequality_relation * (num * (string * num) list) -> term
@
