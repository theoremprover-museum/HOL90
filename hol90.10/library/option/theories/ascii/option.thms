thid = (option, 942751733, 585089)
axioms = []
definitions =
[((THE_DEF),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). (((= :'a -> 'a -> bool)
   ((THE :'a option -> 'a) ((SOME :'a -> 'a option) $0))) $0)))`),
 ((IS_NONE_DEF),
  [],
  `((/\ ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :bool -> bool -> bool) ((IS_NONE :'a option -> bool)
   ((SOME :'a -> 'a option) $0))) F)))) (((= :bool -> bool -> bool)
   ((IS_NONE :'a option -> bool) (NONE :'a option))) T))`),
 ((IS_SOME_DEF),
  [],
  `((/\ ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :bool -> bool -> bool) ((IS_SOME :'a option -> bool)
   ((SOME :'a -> 'a option) $0))) T)))) (((= :bool -> bool -> bool)
   ((IS_SOME :'a option -> bool) (NONE :'a option))) F))`),
 ((option_APPLY_DEF),
  [],
  `((/\ ((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'b option -> 'b option -> bool)
   (((option_APPLY :('a -> 'b) -> 'a option -> 'b option) $1)
   ((SOME :'a -> 'a option) $0))) ((SOME :'b -> 'b option) ($1
   $0)))))))) ((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   (((= :'b option -> 'b option -> bool)
   (((option_APPLY :('a -> 'b) -> 'a option -> 'b option) $0)
   (NONE :'a option))) (NONE :'b option)))))`),
 ((option_CASE_DEF),
  [],
  `((/\ ((! :('b -> bool) -> bool) (\(u :'b).
   ((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :'b -> 'b -> bool)
   ((((option_CASE :'b -> ('a -> 'b) -> 'a option -> 'b) $2) $1)
   ((SOME :'a -> 'a option) $0))) ($1 $0)))))))))
   ((! :('b -> bool) -> bool) (\(u :'b).
   ((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   (((= :'b -> 'b -> bool)
   ((((option_CASE :'b -> ('a -> 'b) -> 'a option -> 'b) $1) $0)
   (NONE :'a option))) $1))))))`),
 ((NONE_DEF),
  [],
  `(((= :'a option -> 'a option -> bool) (NONE :'a option))
   ((ABS_option :('a + one) ltree -> 'a option)
   (((Node :'a + one -> ('a + one) ltree list -> ('a + one) ltree)
   ((INR :one -> 'a + one) one)) (NIL :('a + one) ltree list))))`),
 ((SOME_DEF),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a option -> 'a option -> bool) ((SOME :'a -> 'a option) $0))
   ((ABS_option :('a + one) ltree -> 'a option)
   (((Node :'a + one -> ('a + one) ltree list -> ('a + one) ltree)
   ((INL :'a -> 'a + one) $0)) (NIL :('a + one) ltree list))))))`),
 ((option_ISO_DEF),
  [],
  `((/\ ((! :('a option -> bool) -> bool) (\(a :'a option).
   (((= :'a option -> 'a option -> bool)
   ((ABS_option :('a + one) ltree -> 'a option)
   ((REP_option :'a option -> ('a + one) ltree) $0))) $0))))
   ((! :(('a + one) ltree -> bool) -> bool) (\(r :('a + one) ltree).
   (((= :bool -> bool -> bool)
   (((TRP :('a + one -> ('a + one) ltree list -> bool) ->
           ('a + one) ltree -> bool) (\(v :'a + one).
   (\(tl :('a + one) ltree list). ((\/ ((/\ ((? :('a -> bool) -> bool)
   (\(x :'a). (((= :'a + one -> 'a + one -> bool) $2)
   ((INL :'a -> 'a + one) $0))))) (((= :num -> num -> bool)
   ((LENGTH :('a + one) ltree list -> num) $0)) 0))) ((/\
   (((= :'a + one -> 'a + one -> bool) $1) ((INR :one -> 'a + one)
   one))) (((= :num -> num -> bool)
   ((LENGTH :('a + one) ltree list -> num) $0)) 0)))))) $0))
   (((= :('a + one) ltree -> ('a + one) ltree -> bool)
   ((REP_option :'a option -> ('a + one) ltree)
   ((ABS_option :('a + one) ltree -> 'a option) $0))) $0)))))`),
 ((option_TY_DEF),
  [],
  `((? :(('a option -> ('a + one) ltree) -> bool) -> bool)
   (\(rep :'a option -> ('a + one) ltree).
   (((TYPE_DEFINITION :(('a + one) ltree -> bool) ->
                       ('a option -> ('a + one) ltree) -> bool)
   ((TRP :('a + one -> ('a + one) ltree list -> bool) ->
          ('a + one) ltree -> bool) (\(v :'a + one).
   (\(tl :('a + one) ltree list). ((\/ ((/\ ((? :('a -> bool) -> bool)
   (\(x :'a). (((= :'a + one -> 'a + one -> bool) $2)
   ((INL :'a -> 'a + one) $0))))) (((= :num -> num -> bool)
   ((LENGTH :('a + one) ltree list -> num) $0)) 0))) ((/\
   (((= :'a + one -> 'a + one -> bool) $1) ((INR :one -> 'a + one)
   one))) (((= :num -> num -> bool)
   ((LENGTH :('a + one) ltree list -> num) $0)) 0))))))) $0)))`)]
theorems =
[((option_CLAUSES),
  [],
  `((/\ ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a -> bool) -> bool) (\(x' :'a). (((= :bool -> bool -> bool)
   (((= :'a option -> 'a option -> bool) ((SOME :'a -> 'a option) $1))
   ((SOME :'a -> 'a option) $0))) (((= :'a -> 'a -> bool) $1)
   $0))))))) ((/\ ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'a -> 'a -> bool) ((THE :'a option -> 'a)
   ((SOME :'a -> 'a option) $0))) $0)))) ((/\
   ((! :('a -> bool) -> bool) (\(x :'a). (~
   (((= :'a option -> 'a option -> bool) (NONE :'a option))
   ((SOME :'a -> 'a option) $0)))))) ((/\ ((! :('a -> bool) -> bool)
   (\(x :'a). (~ (((= :'a option -> 'a option -> bool)
   ((SOME :'a -> 'a option) $0)) (NONE :'a option)))))) ((/\
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :bool -> bool -> bool)
   ((IS_SOME :'a option -> bool) ((SOME :'a -> 'a option) $0))) T))))
   ((/\ (((= :bool -> bool -> bool) ((IS_SOME :'a option -> bool)
   (NONE :'a option))) F)) ((/\ ((! :('a option -> bool) -> bool)
   (\(x :'a option). (((= :bool -> bool -> bool)
   ((IS_NONE :'a option -> bool) $0))
   (((= :'a option -> 'a option -> bool) $0) (NONE :'a option))))))
   ((/\ ((! :('a option -> bool) -> bool) (\(x :'a option).
   (((= :bool -> bool -> bool) (~ ((IS_SOME :'a option -> bool) $0)))
   (((= :'a option -> 'a option -> bool) $0) (NONE :'a option))))))
   ((/\ ((! :('a option -> bool) -> bool) (\(x :'a option). ((==>
   ((IS_SOME :'a option -> bool) $0))
   (((= :'a option -> 'a option -> bool) ((SOME :'a -> 'a option)
   ((THE :'a option -> 'a) $0))) $0))))) ((/\
   ((! :('a option -> bool) -> bool) (\(x :'a option).
   (((= :'a option -> 'a option -> bool)
   ((((option_CASE :'a option -> ('a -> 'a option) -> 'a option ->
                    'a option) (NONE :'a option))
   (SOME :'a -> 'a option)) $0)) $0)))) ((/\
   ((! :('a option -> bool) -> bool) (\(x :'a option).
   (((= :'a option -> 'a option -> bool)
   ((((option_CASE :'a option -> ('a -> 'a option) -> 'a option ->
                    'a option) $0) (SOME :'a -> 'a option)) $0))
   $0)))) ((/\ ((! :('a option -> bool) -> bool) (\(x :'a option).
   ((==> ((IS_NONE :'a option -> bool) $0)) (((= :'b -> 'b -> bool)
   ((((option_CASE :'b -> ('a -> 'b) -> 'a option -> 'b) (e :'b))
   (f :'a -> 'b)) $0)) (e :'b)))))) ((/\
   ((! :('a option -> bool) -> bool) (\(x :'a option). ((==>
   ((IS_SOME :'a option -> bool) $0)) (((= :'b -> 'b -> bool)
   ((((option_CASE :'b -> ('a -> 'b) -> 'a option -> 'b) (e :'b))
   (f :'a -> 'b)) $0)) ((f :'a -> 'b) ((THE :'a option -> 'a)
   $0))))))) ((/\ ((! :('a option -> bool) -> bool) (\(x :'a option).
   ((==> ((IS_SOME :'a option -> bool) $0))
   (((= :'a option -> 'a option -> bool)
   ((((option_CASE :'a option -> ('a -> 'a option) -> 'a option ->
                    'a option) (e :'a option))
   (SOME :'a -> 'a option)) $0)) $0))))) ((/\
   ((! :('b -> bool) -> bool) (\(u :'b).
   ((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :'b -> 'b -> bool)
   ((((option_CASE :'b -> ('a -> 'b) -> 'a option -> 'b) $2) $1)
   ((SOME :'a -> 'a option) $0))) ($1 $0))))))))) ((/\
   ((! :('b -> bool) -> bool) (\(u :'b).
   ((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   (((= :'b -> 'b -> bool)
   ((((option_CASE :'b -> ('a -> 'b) -> 'a option -> 'b) $1) $0)
   (NONE :'a option))) $1)))))) ((/\
   ((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'b option -> 'b option -> bool)
   (((option_APPLY :('a -> 'b) -> 'a option -> 'b option) $1)
   ((SOME :'a -> 'a option) $0))) ((SOME :'b -> 'b option) ($1
   $0)))))))) ((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   (((= :'b option -> 'b option -> bool)
   (((option_APPLY :('a -> 'b) -> 'a option -> 'b option) $0)
   (NONE :'a option))) (NONE :'b option)))))))))))))))))))))`),
 ((option_CASES),
  [],
  `((! :('a option -> bool) -> bool) (\(o' :'a option). ((\/
   ((? :('a -> bool) -> bool) (\(x :'a).
   (((= :'a option -> 'a option -> bool) $1) ((SOME :'a -> 'a option)
   $0))))) (((= :'a option -> 'a option -> bool) $0)
   (NONE :'a option)))))`),
 ((NOT_SOME_NONE),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). (~
   (((= :'a option -> 'a option -> bool) ((SOME :'a -> 'a option) $0))
   (NONE :'a option)))))`),
 ((NOT_NONE_SOME),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). (~
   (((= :'a option -> 'a option -> bool) (NONE :'a option))
   ((SOME :'a -> 'a option) $0)))))`),
 ((SOME_11),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). ((! :('a -> bool) -> bool)
   (\(x' :'a). (((= :bool -> bool -> bool)
   (((= :'a option -> 'a option -> bool) ((SOME :'a -> 'a option) $1))
   ((SOME :'a -> 'a option) $0))) (((= :'a -> 'a -> bool) $1)
   $0))))))`),
 ((option_Induct),
  [],
  `((! :(('a option -> bool) -> bool) -> bool)
   (\(P :'a option -> bool). ((==> ((/\ ((! :('a -> bool) -> bool)
   (\(x :'a). ($1 ((SOME :'a -> 'a option) $0))))) ($0
   (NONE :'a option)))) ((! :('a option -> bool) -> bool)
   (\(o' :'a option). ($1 $0))))))`),
 ((option_Axiom),
  [],
  `((! :(('a -> 'a1) -> bool) -> bool) (\(f :'a -> 'a1).
   ((! :('a1 -> bool) -> bool) (\(e :'a1).
   ((?! :(('a option -> 'a1) -> bool) -> bool)
   (\(fn :'a option -> 'a1). ((/\ ((! :('a -> bool) -> bool)
   (\(x :'a). (((= :'a1 -> 'a1 -> bool) ($1 ((SOME :'a -> 'a option)
   $0))) ($3 $0))))) (((= :'a1 -> 'a1 -> bool) ($0 (NONE :'a option)))
   $1))))))))`)]
