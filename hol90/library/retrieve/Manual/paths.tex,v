head	1.1;
access;
symbols
	HOL97:1.1.0.4
	bpHOL97:1.1
	hol90_9_alpha:1.1
	hol90_pre8_for_multiple_compilers:1.1.0.2;
locks; strict;
comment	@% @;


1.1
date	95.11.17.10.41.31;	author rjb;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Added library "retrieve", a theorem retrieval system.

R.J.Boulton, 17th November 1995.
@
text
@\section{Search paths}

This session searches the ancestry of the theory {\small\verb%HOL%}. The
patterns used are chosen so that they do not match any theorem. The purpose of
the session is to illustrate the route taken through a theory hierarchy during
a search.

\index{searching!end of}
Attempting to continue a search beyond its end causes an exception. We
illustrate this by binding the \ML\ identifier \ml{none} to a pattern which
never matches. We then search a single theory with this pattern.

\setcounter{sessioncount}{1}

\begin{session}\begin{verbatim}
- val none = thmname "";
val none = ThmPattern (Thmname' (NamePattern ("",Wildchar "?",Wildchar "*")))
  : thmpattern
- find_theorems none (Paths [Theory "HOL"]);
Searching theory HOL
val it = Step ([],fn) : searchstep
- continue_search it;
val it = Endofsearch [] : searchstep
- continue_search it;

uncaught exception HOL_ERR
\end{verbatim}\end{session}

The above example searches a single theory. The next example searches three
theories in sequence, in the order specified.

\begin{session}\begin{verbatim}
- full_search none (Paths [Theory "one",Theory "num",Theory "list"]);
Searching theory one
Searching theory num
Searching theory list
val it = [] : foundthm list
\end{verbatim}\end{session}

\index{searching!a theory ancestry}
We can also search the ancestry of a theory. This is done breadth-first
starting from the specified theory. Its parents are then searched in the order
in which they appear as parents. Then the parents of the parents are searched,
and so on, until no ancestors remain. Since the ancestry is a graph, a theory
may be encountered more than once. It is ignored on all but the first
encounter.

\begin{session}\begin{verbatim}
- full_search none (Paths [Ancestors (["HOL"],[])]);
Searching theory HOL
Searching theory restr_binder
Searching theory sum
Searching theory one
Searching theory rec_type
Searching theory bool
Searching theory combin
Searching theory ltree
Searching theory min
Searching theory tree
Searching theory list
Searching theory arithmetic
Searching theory prim_rec
Searching theory BASIC_HOL
Searching theory num
Searching theory pair
val it = [] : foundthm list
\end{verbatim}\end{session}

\index{exclusion!of parts of an ancestry}
Observe that the theory {\small\verb%rec_type%} is searched quite early on.
We can force {\small\verb%rec_type%} and its parents to be searched later by
excluding them from the first ancestry search and then searching them
explicitly afterwards.

\begin{session}\begin{verbatim}
- full_search none (Paths [Ancestors (["HOL"],["rec_type"]),
=                          Ancestors (["rec_type"],[])]);
Searching theory HOL
Searching theory restr_binder
Searching theory sum
Searching theory one
Searching theory bool
Searching theory combin
Searching theory min
Searching theory rec_type
Searching theory ltree
Searching theory tree
Searching theory list
Searching theory arithmetic
Searching theory prim_rec
Searching theory BASIC_HOL
Searching theory num
Searching theory pair
val it = [] : foundthm list
\end{verbatim}\end{session}

\index{searching!user theories}
\ml{Ancestry} is a constructor for searching a hierarchy excluding
{\small\verb%HOL%} and its ancestors. This is useful when searching user
theory hierarchies. If {\small\verb%HOL%} is not excluded, then because it is
a parent of every user theory, the search soon dives into the built-in
hierarchy.

In the following example, no theories are searched.

\begin{session}\begin{verbatim}
- full_search none (Paths [Ancestry ["HOL"]]);
val it = [] : foundthm list
\end{verbatim}\end{session}

\index{searching!order of}
Two theories which do not have a common descendant cannot be `active' at the
same time. So, they cannot both be specified in a single search. However,
two ancestors of the current theory can be specified in a single search. For
example, we can do a breadth-first search of {\small\verb%sum%}, then
{\small\verb%rec_type%}, then the parents of {\small\verb%sum%}, then the
parents of {\small\verb%rec_type%}, and so on. {\small\verb%BASIC_HOL%} and
its ancestors are excluded.

\begin{session}\begin{verbatim}
- full_search none (Paths [Ancestors (["sum","rec_type"],["BASIC_HOL"])]);
Searching theory sum
Searching theory rec_type
Searching theory combin
Searching theory ltree
Searching theory bool
Searching theory tree
Searching theory min
Searching theory list
Searching theory arithmetic
Searching theory prim_rec
val it = [] : foundthm list
- exit();
$
\end{verbatim}\end{session}

@
