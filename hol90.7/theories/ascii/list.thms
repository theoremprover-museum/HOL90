thid = (list, 783973694, 775931)
axioms = []
definitions =
[((EVERY_DEF),
  [],
  `((/\ ((! :(('a -> bool) -> bool) -> bool) (\(P :'a -> bool).
   (((= :bool -> bool -> bool)
   (((EVERY :('a -> bool) -> 'a list -> bool) $0) (NIL :'a list)))
   T)))) ((! :(('a -> bool) -> bool) -> bool) (\(P :'a -> bool).
   ((! :('a -> bool) -> bool) (\(h :'a).
   ((! :('a list -> bool) -> bool) (\(t :'a list).
   (((= :bool -> bool -> bool)
   (((EVERY :('a -> bool) -> 'a list -> bool) $2)
   (((CONS :'a -> 'a list -> 'a list) $1) $0))) ((/\ ($2 $1))
   (((EVERY :('a -> bool) -> 'a list -> bool) $2) $0))))))))))`),
 ((EL),
  [],
  `((/\ ((! :('a list -> bool) -> bool) (\(l :'a list).
   (((= :'a -> 'a -> bool) (((EL :num -> 'a list -> 'a) 0) $0))
   ((HD :'a list -> 'a) $0))))) ((! :('a list -> bool) -> bool)
   (\(l :'a list). ((! :(num -> bool) -> bool) (\(n :num).
   (((= :'a -> 'a -> bool) (((EL :num -> 'a list -> 'a) (SUC $0)) $1))
   (((EL :num -> 'a list -> 'a) $0) ((TL :'a list -> 'a list)
   $1))))))))`),
 ((MAP2),
  [],
  `((/\ ((! :(('a -> 'b -> 'c) -> bool) -> bool)
   (\(f :'a -> 'b -> 'c). (((= :'c list -> 'c list -> bool)
   ((((MAP2 :('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list) $0)
   (NIL :'a list)) (NIL :'b list))) (NIL :'c list)))))
   ((! :(('a -> 'b -> 'c) -> bool) -> bool) (\(f :'a -> 'b -> 'c).
   ((! :('a -> bool) -> bool) (\(h1 :'a).
   ((! :('a list -> bool) -> bool) (\(t1 :'a list).
   ((! :('b -> bool) -> bool) (\(h2 :'b).
   ((! :('b list -> bool) -> bool) (\(t2 :'b list).
   (((= :'c list -> 'c list -> bool)
   ((((MAP2 :('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list) $4)
   (((CONS :'a -> 'a list -> 'a list) $3) $2))
   (((CONS :'b -> 'b list -> 'b list) $1) $0)))
   (((CONS :'c -> 'c list -> 'c list) (($4 $3) $1))
   ((((MAP2 :('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list) $4)
   $2) $0))))))))))))))`),
 ((MAP),
  [],
  `((/\ ((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   (((= :'b list -> 'b list -> bool)
   (((MAP :('a -> 'b) -> 'a list -> 'b list) $0) (NIL :'a list)))
   (NIL :'b list))))) ((! :(('a -> 'b) -> bool) -> bool)
   (\(f :'a -> 'b). ((! :('a -> bool) -> bool) (\(h :'a).
   ((! :('a list -> bool) -> bool) (\(t :'a list).
   (((= :'b list -> 'b list -> bool)
   (((MAP :('a -> 'b) -> 'a list -> 'b list) $2)
   (((CONS :'a -> 'a list -> 'a list) $1) $0)))
   (((CONS :'b -> 'b list -> 'b list) ($2 $1))
   (((MAP :('a -> 'b) -> 'a list -> 'b list) $2) $0))))))))))`),
 ((LENGTH),
  [],
  `((/\ (((= :num -> num -> bool) ((LENGTH :'a list -> num)
   (NIL :'a list))) 0)) ((! :('a -> bool) -> bool) (\(h :'a).
   ((! :('a list -> bool) -> bool) (\(t :'a list).
   (((= :num -> num -> bool) ((LENGTH :'a list -> num)
   (((CONS :'a -> 'a list -> 'a list) $1) $0))) (SUC
   ((LENGTH :'a list -> num) $0))))))))`),
 ((FLAT),
  [],
  `((/\ (((= :'a list -> 'a list -> bool)
   ((FLAT :'a list list -> 'a list) (NIL :'a list list)))
   (NIL :'a list))) ((! :('a list -> bool) -> bool) (\(h :'a list).
   ((! :('a list list -> bool) -> bool) (\(t :'a list list).
   (((= :'a list -> 'a list -> bool) ((FLAT :'a list list -> 'a list)
   (((CONS :'a list -> 'a list list -> 'a list list) $1) $0)))
   (((APPEND :'a list -> 'a list -> 'a list) $1)
   ((FLAT :'a list list -> 'a list) $0))))))))`),
 ((APPEND),
  [],
  `((/\ ((! :('a list -> bool) -> bool) (\(l :'a list).
   (((= :'a list -> 'a list -> bool)
   (((APPEND :'a list -> 'a list -> 'a list) (NIL :'a list)) $0))
   $0)))) ((! :('a list -> bool) -> bool) (\(l1 :'a list).
   ((! :('a list -> bool) -> bool) (\(l2 :'a list).
   ((! :('a -> bool) -> bool) (\(h :'a).
   (((= :'a list -> 'a list -> bool)
   (((APPEND :'a list -> 'a list -> 'a list)
   (((CONS :'a -> 'a list -> 'a list) $0) $2)) $1))
   (((CONS :'a -> 'a list -> 'a list) $0)
   (((APPEND :'a list -> 'a list -> 'a list) $2) $1))))))))))`),
 ((SUM),
  [],
  `((/\ (((= :num -> num -> bool) (SUM (NIL :num list))) 0))
   ((! :(num -> bool) -> bool) (\(h :num).
   ((! :(num list -> bool) -> bool) (\(t :num list).
   (((= :num -> num -> bool) (SUM
   (((CONS :num -> num list -> num list) $1) $0))) ((+ $1) (SUM
   $0))))))))`),
 ((TL),
  [],
  `((! :('a list -> bool) -> bool) (\(t :'a list).
   ((! :('a -> bool) -> bool) (\(h :'a).
   (((= :'a list -> 'a list -> bool) ((TL :'a list -> 'a list)
   (((CONS :'a -> 'a list -> 'a list) $0) $1))) $1)))))`),
 ((HD),
  [],
  `((! :('a list -> bool) -> bool) (\(t :'a list).
   ((! :('a -> bool) -> bool) (\(h :'a). (((= :'a -> 'a -> bool)
   ((HD :'a list -> 'a) (((CONS :'a -> 'a list -> 'a list) $0) $1)))
   $0)))))`),
 ((NULL_DEF),
  [],
  `((/\ (((= :bool -> bool -> bool) ((NULL :'a list -> bool)
   (NIL :'a list))) T)) ((! :('a list -> bool) -> bool)
   (\(t :'a list). ((! :('a -> bool) -> bool) (\(h :'a).
   (((= :bool -> bool -> bool) ((NULL :'a list -> bool)
   (((CONS :'a -> 'a list -> 'a list) $0) $1))) F))))))`),
 ((CONS_DEF),
  [],
  `((! :('a -> bool) -> bool) (\(h :'a).
   ((! :('a list -> bool) -> bool) (\(t :'a list).
   (((= :'a list -> 'a list -> bool)
   (((CONS :'a -> 'a list -> 'a list) $1) $0))
   ((ABS_list :(num -> 'a) # num -> 'a list)
   (((, :(num -> 'a) -> num -> (num -> 'a) # num) (\(m :num).
   ((((COND :bool -> 'a -> 'a -> 'a) (((= :num -> num -> bool) $0) 0))
   $2) (((FST :(num -> 'a) # num -> num -> 'a)
   ((REP_list :'a list -> (num -> 'a) # num) $1)) (PRE $0))))) (SUC
   ((SND :(num -> 'a) # num -> num)
   ((REP_list :'a list -> (num -> 'a) # num) $0))))))))))`),
 ((NIL_DEF),
  [],
  `(((= :'a list -> 'a list -> bool) (NIL :'a list))
   ((ABS_list :(num -> 'a) # num -> 'a list)
   (((, :(num -> 'a) -> num -> (num -> 'a) # num) (\(n :num).
   ((@ :('a -> bool) -> 'a) (\(e :'a). T)))) 0)))`),
 ((list_ISO_DEF),
  [],
  `((/\ ((! :('a list -> bool) -> bool) (\(a :'a list).
   (((= :'a list -> 'a list -> bool)
   ((ABS_list :(num -> 'a) # num -> 'a list)
   ((REP_list :'a list -> (num -> 'a) # num) $0))) $0))))
   ((! :((num -> 'a) # num -> bool) -> bool) (\(r :(num -> 'a) # num).
   (((= :bool -> bool -> bool)
   ((IS_list_REP :(num -> 'a) # num -> bool) $0))
   (((= :(num -> 'a) # num -> (num -> 'a) # num -> bool)
   ((REP_list :'a list -> (num -> 'a) # num)
   ((ABS_list :(num -> 'a) # num -> 'a list) $0))) $0)))))`),
 ((list_TY_DEF),
  [],
  `((? :(('a list -> (num -> 'a) # num) -> bool) -> bool)
   (\(rep :'a list -> (num -> 'a) # num).
   (((TYPE_DEFINITION :((num -> 'a) # num -> bool) ->
                       ('a list -> (num -> 'a) # num) -> bool)
   (IS_list_REP :(num -> 'a) # num -> bool)) $0)))`),
 ((IS_list_REP),
  [],
  `((! :((num -> 'a) # num -> bool) -> bool) (\(r :(num -> 'a) # num).
   (((= :bool -> bool -> bool)
   ((IS_list_REP :(num -> 'a) # num -> bool) $0))
   ((? :((num -> 'a) -> bool) -> bool) (\(f :num -> 'a).
   ((? :(num -> bool) -> bool) (\(n :num).
   (((= :(num -> 'a) # num -> (num -> 'a) # num -> bool) $2)
   (((, :(num -> 'a) -> num -> (num -> 'a) # num) (\(m :num).
   ((((COND :bool -> 'a -> 'a -> 'a) ((< $0) $1)) ($2 $0))
   ((@ :('a -> bool) -> 'a) (\(x :'a). T))))) $0)))))))))`)]
theorems =
[((LENGTH_EQ_NIL),
  [],
  `((! :(('a list -> bool) -> bool) -> bool) (\(P :'a list -> bool).
   (((= :bool -> bool -> bool) ((! :('a list -> bool) -> bool)
   (\(l :'a list). ((==> (((= :num -> num -> bool)
   ((LENGTH :'a list -> num) $0)) 0)) ($1 $0))))) ($0
   (NIL :'a list)))))`),
 ((LENGTH_EQ_CONS),
  [],
  `((! :(('a list -> bool) -> bool) -> bool) (\(P :'a list -> bool).
   ((! :(num -> bool) -> bool) (\(n :num). (((= :bool -> bool -> bool)
   ((! :('a list -> bool) -> bool) (\(l :'a list). ((==>
   (((= :num -> num -> bool) ((LENGTH :'a list -> num) $0)) (SUC $1)))
   ($2 $0))))) ((! :('a list -> bool) -> bool) (\(l :'a list). ((==>
   (((= :num -> num -> bool) ((LENGTH :'a list -> num) $0)) $1))
   ((\(l :'a list). ((! :('a -> bool) -> bool) (\(x :'a). ($4
   (((CONS :'a -> 'a list -> 'a list) $0) $1))))) $0)))))))))`),
 ((LENGTH_CONS),
  [],
  `((! :('a list -> bool) -> bool) (\(l :'a list).
   ((! :(num -> bool) -> bool) (\(n :num). (((= :bool -> bool -> bool)
   (((= :num -> num -> bool) ((LENGTH :'a list -> num) $1)) (SUC $0)))
   ((? :('a -> bool) -> bool) (\(h :'a).
   ((? :('a list -> bool) -> bool) (\(l' :'a list). ((/\
   (((= :num -> num -> bool) ((LENGTH :'a list -> num) $0)) $2))
   (((= :'a list -> 'a list -> bool) $3)
   (((CONS :'a -> 'a list -> 'a list) $1) $0))))))))))))`),
 ((LENGTH_NIL),
  [],
  `((! :('a list -> bool) -> bool) (\(l :'a list).
   (((= :bool -> bool -> bool) (((= :num -> num -> bool)
   ((LENGTH :'a list -> num) $0)) 0))
   (((= :'a list -> 'a list -> bool) $0) (NIL :'a list)))))`),
 ((EVERY_CONJ),
  [],
  `((! :('a list -> bool) -> bool) (\(l :'a list).
   (((= :bool -> bool -> bool)
   (((EVERY :('a -> bool) -> 'a list -> bool) (\(x :'a). ((/\
   ((P :'a -> bool) $0)) ((Q :'a -> bool) $0)))) $0)) ((/\
   (((EVERY :('a -> bool) -> 'a list -> bool) (P :'a -> bool)) $0))
   (((EVERY :('a -> bool) -> 'a list -> bool) (Q :'a -> bool))
   $0)))))`),
 ((EVERY_EL),
  [],
  `((! :('a list -> bool) -> bool) (\(l :'a list).
   ((! :(('a -> bool) -> bool) -> bool) (\(P :'a -> bool).
   (((= :bool -> bool -> bool)
   (((EVERY :('a -> bool) -> 'a list -> bool) $0) $1))
   ((! :(num -> bool) -> bool) (\(n :num). ((==> ((< $0)
   ((LENGTH :'a list -> num) $2))) ($1 (((EL :num -> 'a list -> 'a)
   $0) $2))))))))))`),
 ((LENGTH_MAP),
  [],
  `((! :('a list -> bool) -> bool) (\(l :'a list).
   ((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   (((= :num -> num -> bool) ((LENGTH :'b list -> num)
   (((MAP :('a -> 'b) -> 'a list -> 'b list) $0) $1)))
   ((LENGTH :'a list -> num) $1))))))`),
 ((MAP_APPEND),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a list -> bool) -> bool) (\(l1 :'a list).
   ((! :('a list -> bool) -> bool) (\(l2 :'a list).
   (((= :'b list -> 'b list -> bool)
   (((MAP :('a -> 'b) -> 'a list -> 'b list) $2)
   (((APPEND :'a list -> 'a list -> 'a list) $1) $0)))
   (((APPEND :'b list -> 'b list -> 'b list)
   (((MAP :('a -> 'b) -> 'a list -> 'b list) $2) $1))
   (((MAP :('a -> 'b) -> 'a list -> 'b list) $2) $0)))))))))`),
 ((LENGTH_APPEND),
  [],
  `((! :('a list -> bool) -> bool) (\(l1 :'a list).
   ((! :('a list -> bool) -> bool) (\(l2 :'a list).
   (((= :num -> num -> bool) ((LENGTH :'a list -> num)
   (((APPEND :'a list -> 'a list -> 'a list) $1) $0))) ((+
   ((LENGTH :'a list -> num) $1)) ((LENGTH :'a list -> num)
   $0)))))))`),
 ((APPEND_ASSOC),
  [],
  `((! :('a list -> bool) -> bool) (\(l1 :'a list).
   ((! :('a list -> bool) -> bool) (\(l2 :'a list).
   ((! :('a list -> bool) -> bool) (\(l3 :'a list).
   (((= :'a list -> 'a list -> bool)
   (((APPEND :'a list -> 'a list -> 'a list) $2)
   (((APPEND :'a list -> 'a list -> 'a list) $1) $0)))
   (((APPEND :'a list -> 'a list -> 'a list)
   (((APPEND :'a list -> 'a list -> 'a list) $2) $1)) $0))))))))`),
 ((CONS),
  [],
  `((! :('a list -> bool) -> bool) (\(l :'a list). ((==> (~
   ((NULL :'a list -> bool) $0))) (((= :'a list -> 'a list -> bool)
   (((CONS :'a -> 'a list -> 'a list) ((HD :'a list -> 'a) $0))
   ((TL :'a list -> 'a list) $0))) $0))))`),
 ((EQ_LIST),
  [],
  `((! :('a -> bool) -> bool) (\(h1 :'a). ((! :('a -> bool) -> bool)
   (\(h2 :'a). ((==> (((= :'a -> 'a -> bool) $1) $0))
   ((! :('a list -> bool) -> bool) (\(l1 :'a list).
   ((! :('a list -> bool) -> bool) (\(l2 :'a list). ((==>
   (((= :'a list -> 'a list -> bool) $1) $0))
   (((= :'a list -> 'a list -> bool)
   (((CONS :'a -> 'a list -> 'a list) $3) $1))
   (((CONS :'a -> 'a list -> 'a list) $2) $0))))))))))))`),
 ((NOT_EQ_LIST),
  [],
  `((! :('a -> bool) -> bool) (\(h1 :'a). ((! :('a -> bool) -> bool)
   (\(h2 :'a). ((==> (~ (((= :'a -> 'a -> bool) $1) $0)))
   ((! :('a list -> bool) -> bool) (\(l1 :'a list).
   ((! :('a list -> bool) -> bool) (\(l2 :'a list). (~
   (((= :'a list -> 'a list -> bool)
   (((CONS :'a -> 'a list -> 'a list) $3) $1))
   (((CONS :'a -> 'a list -> 'a list) $2) $0))))))))))))`),
 ((LIST_NOT_EQ),
  [],
  `((! :('a list -> bool) -> bool) (\(l1 :'a list).
   ((! :('a list -> bool) -> bool) (\(l2 :'a list). ((==> (~
   (((= :'a list -> 'a list -> bool) $1) $0)))
   ((! :('a -> bool) -> bool) (\(h1 :'a). ((! :('a -> bool) -> bool)
   (\(h2 :'a). (~ (((= :'a list -> 'a list -> bool)
   (((CONS :'a -> 'a list -> 'a list) $1) $3))
   (((CONS :'a -> 'a list -> 'a list) $0) $2))))))))))))`),
 ((NOT_CONS_NIL),
  [],
  `((! :('a list -> bool) -> bool) (\(t :'a list).
   ((! :('a -> bool) -> bool) (\(h :'a). (~
   (((= :'a list -> 'a list -> bool)
   (((CONS :'a -> 'a list -> 'a list) $0) $1)) (NIL :'a list)))))))`),
 ((NOT_NIL_CONS),
  [],
  `((! :('a list -> bool) -> bool) (\(t :'a list).
   ((! :('a -> bool) -> bool) (\(h :'a). (~
   (((= :'a list -> 'a list -> bool) (NIL :'a list))
   (((CONS :'a -> 'a list -> 'a list) $0) $1)))))))`),
 ((CONS_11),
  [],
  `((! :('a -> bool) -> bool) (\(h :'a).
   ((! :('a list -> bool) -> bool) (\(t :'a list).
   ((! :('a -> bool) -> bool) (\(h' :'a).
   ((! :('a list -> bool) -> bool) (\(t' :'a list).
   (((= :bool -> bool -> bool) (((= :'a list -> 'a list -> bool)
   (((CONS :'a -> 'a list -> 'a list) $3) $2))
   (((CONS :'a -> 'a list -> 'a list) $1) $0))) ((/\
   (((= :'a -> 'a -> bool) $3) $1)) (((= :'a list -> 'a list -> bool)
   $2) $0)))))))))))`),
 ((list_CASES),
  [],
  `((! :('a list -> bool) -> bool) (\(l :'a list). ((\/
   (((= :'a list -> 'a list -> bool) $0) (NIL :'a list)))
   ((? :('a list -> bool) -> bool) (\(t :'a list).
   ((? :('a -> bool) -> bool) (\(h :'a).
   (((= :'a list -> 'a list -> bool) $2)
   (((CONS :'a -> 'a list -> 'a list) $0) $1)))))))))`),
 ((list_INDUCT),
  [],
  `((! :(('a list -> bool) -> bool) -> bool) (\(P :'a list -> bool).
   ((==> ((/\ ($0 (NIL :'a list))) ((! :('a list -> bool) -> bool)
   (\(t :'a list). ((==> ($1 $0)) ((! :('a -> bool) -> bool)
   (\(h :'a). ($2 (((CONS :'a -> 'a list -> 'a list) $0) $1)))))))))
   ((! :('a list -> bool) -> bool) (\(l :'a list). ($1 $0))))))`),
 ((NULL),
  [],
  `((/\ ((NULL :'a list -> bool) (NIL :'a list)))
   ((! :('a -> bool) -> bool) (\(h :'a).
   ((! :('a list -> bool) -> bool) (\(t :'a list). (~
   ((NULL :'a list -> bool) (((CONS :'a -> 'a list -> 'a list) $1)
   $0))))))))`),
 ((list_Axiom),
  [],
  `((! :('b -> bool) -> bool) (\(x :'b).
   ((! :(('b -> 'a -> 'a list -> 'b) -> bool) -> bool)
   (\(f :'b -> 'a -> 'a list -> 'b).
   ((?! :(('a list -> 'b) -> bool) -> bool) (\(fn1 :'a list -> 'b).
   ((/\ (((= :'b -> 'b -> bool) ($0 (NIL :'a list))) $2))
   ((! :('a -> bool) -> bool) (\(h :'a).
   ((! :('a list -> bool) -> bool) (\(t :'a list).
   (((= :'b -> 'b -> bool) ($2 (((CONS :'a -> 'a list -> 'a list) $1)
   $0))) ((($3 ($2 $0)) $1) $0)))))))))))))`)]
