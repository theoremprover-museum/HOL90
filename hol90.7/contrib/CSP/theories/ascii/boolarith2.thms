thid = (boolarith2, 784894773, 742148)
axioms = []
definitions = []
theorems =
[((LEQ_SPLIT),
  [],
  `((==> ((<= ((+ (m :num)) (n :num))) (p :num))) ((/\ ((<= (n :num))
   (p :num))) ((<= (m :num)) (p :num))))`),
 ((NOT_SUC_LEQ),
  [],
  `(~ ((! :(num -> bool) -> bool) (\(n :num).
   ((! :(num -> bool) -> bool) (\(m :num). ((<= (SUC $0)) $1))))))`),
 ((TWICE),
  [],
  `((! :(num -> bool) -> bool) (\(x :num). (((= :num -> num -> bool)
   ((+ $0) $0)) ((* (SUC (SUC 0))) $0))))`),
 ((INV_SUC_LEQ),
  [],
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). (((= :bool -> bool -> bool) ((<= (SUC $1)) (SUC $0)))
   ((<= $1) $0))))))`),
 ((NOT_SUC_LEQ_0),
  [],
  `((! :(num -> bool) -> bool) (\(n :num). (~ ((<= (SUC $0)) 0))))`),
 ((ADD_SYM_ASSOC),
  [],
  `((! :(num -> bool) -> bool) (\(a :num). ((! :(num -> bool) -> bool)
   (\(b :num). ((! :(num -> bool) -> bool) (\(c :num).
   (((= :num -> num -> bool) ((+ $2) ((+ $1) $0))) ((+ $1) ((+ $2)
   $0)))))))))`),
 ((LESS_EQ_MONO_ADD_EQ3),
  [],
  `((! :(num -> bool) -> bool) (\(n :num). ((! :(num -> bool) -> bool)
   (\(p :num). ((<= $0) ((+ $1) $0))))))`),
 ((LESS_EQ_MONO_ADD_EQ2),
  [],
  `((! :(num -> bool) -> bool) (\(n :num). ((! :(num -> bool) -> bool)
   (\(p :num). (((= :bool -> bool -> bool) ((<= $0) ((+ $1) $0))) ((<=
   0) $1))))))`),
 ((LESS_EQ_MONO_ADD_EQ1),
  [],
  `((! :(num -> bool) -> bool) (\(p :num). ((! :(num -> bool) -> bool)
   (\(m :num). (((= :bool -> bool -> bool) ((<= ((+ $0) $1)) $1)) ((<=
   $0) 0))))))`),
 ((LESS_EQ_MONO_ADD_EQ'),
  [],
  `((! :(num -> bool) -> bool) (\(p :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(m :num).
   (((= :bool -> bool -> bool) ((<= $0) $1)) ((<= ((+ $2) $0)) ((+ $2)
   $1)))))))))`),
 ((LESS_EQ_0_N),
  [],
  `((! :(num -> bool) -> bool) (\(n :num). ((<= 0) $0)))`),
 ((LESS_MONO_MULT'),
  [],
  `((! :(num -> bool) -> bool) (\(p :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(m :num). ((==> ((<= $0)
   $1)) ((<= ((* $2) $0)) ((* $2) $1)))))))))`),
 ((ADD_SUC_0),
  [],
  `((! :(num -> bool) -> bool) (\(m :num). (((= :num -> num -> bool)
   (SUC $0)) ((+ (SUC 0)) $0))))`),
 ((CONJ3_IMP_TAUT),
  [],
  `((! :(bool -> bool) -> bool) (\(a :bool).
   ((! :(bool -> bool) -> bool) (\(b :bool).
   ((! :(bool -> bool) -> bool) (\(c :bool). ((==> ((==> $2) $1))
   ((==> ((/\ $0) $2)) ((/\ $0) $1)))))))))`),
 ((CONJ2_IMP_TAUT),
  [],
  `((! :(bool -> bool) -> bool) (\(a :bool).
   ((! :(bool -> bool) -> bool) (\(b :bool).
   ((! :(bool -> bool) -> bool) (\(c :bool).
   ((! :(bool -> bool) -> bool) (\(d :bool). ((==> ((==> $3) $2))
   ((==> ((/\ $0) ((/\ $3) $1))) ((/\ $0) ((/\ $2) $1))))))))))))`),
 ((CONJ_IMP_TAUT),
  [],
  `((! :(bool -> bool) -> bool) (\(a :bool).
   ((! :(bool -> bool) -> bool) (\(b :bool).
   ((! :(bool -> bool) -> bool) (\(c :bool). ((==> ((==> $2) $1))
   ((==> ((/\ $2) $0)) ((/\ $1) $0)))))))))`),
 ((ID_IMP),
  [],
  `((! :(bool -> bool) -> bool) (\(b :bool). ((==> $0) $0)))`),
 ((F_FROM_EX_F),
  [],
  `(((= :bool -> bool -> bool) ((? :(bool -> bool) -> bool)
   (\(t :bool). F))) F)`),
 ((EX_F_IMP_F),
  [],
  `((==> ((? :(bool -> bool) -> bool) (\(t :bool). F))) F)`),
 ((F_IMP_EX_F),
  [],
  `((==> F) ((? :(bool -> bool) -> bool) (\(t :bool). F)))`)]
