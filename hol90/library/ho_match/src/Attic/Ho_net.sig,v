head	1.1;
access;
symbols
	HOL97:1.1.2.1.0.2
	bpHOL97:1.1.2.1
	hol90_9_alpha:1.1.2.1
	hol90_pre8_for_multiple_compilers:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	96.08.06.11.35.26;	author rjb;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.08.06.11.35.27;	author rjb;	state Exp;
branches
	1.1.2.1.2.1;
next	;

1.1.2.1.2.1
date	97.06.11.18.26.35;	author kxs;	state Exp;
branches;
next	1.1.2.1.2.2;

1.1.2.1.2.2
date	97.07.11.19.49.45;	author kxs;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file Ho_net.sig was initially added on branch hol90_pre8_for_multiple_compilers.
@
text
@@


1.1.2.1
log
@New library ho-match.
@
text
@a0 26
(* ===================================================================== 
 * DESCRIPTION   : Implementation of term nets, from GTT.
 * MODIFIED	: Donald Syme, 1995, to add local constants
 *  
 * Local constants: For rewrites like
 *  [x=0] |- x = 0.
 * "x" is free in the assumptions, so this rewrite should only match
 * terms which are exactly "x" on the left.  The old termnets chose this
 * rewrite for any matching term.
 *
 * MODIFIED    : Donald Syme, November 1995, to be keyed up to higher order
 *               matching, based on JRH's code from GTT.  
 * ===================================================================== *)

signature Ho_net_sig =
sig
    structure Term : Term_sig
    local open Term in
    type 'a net
    val empty_net : 'a net
    val enter : term list * term * 'a -> 'a net -> 'a net
    val lookup :  term -> 'a net -> 'a list
    val merge_nets :  'a net * 'a net -> 'a net
    end;
end (* sig *)

@


1.1.2.1.2.1
log
@Changes to accomodate move to SML/NJ 109.26.
@
text
@d17 2
a18 2
(*    structure Term : Term_sig *)
(*     local open Term in *)
d21 2
a22 2
    val enter : Term.term list * Term.term * 'a -> 'a net -> 'a net
    val lookup :  Term.term -> 'a net -> 'a list
d24 1
a24 1
(*    end; *)
@


1.1.2.1.2.2
log
@CM upgrade. Added ho_matchLib.sml to give a single point-of-delivery for the
library.
@
text
@d17 8
a24 5
 type 'a net
 val empty_net : 'a net
 val enter :CoreHol.Term.term list * CoreHol.Term.term * 'a -> 'a net -> 'a net
 val lookup :  CoreHol.Term.term -> 'a net -> 'a list
 val merge_nets :  'a net * 'a net -> 'a net
@
