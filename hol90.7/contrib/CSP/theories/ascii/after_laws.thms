thid = (after_laws, 784894967, 251215)
axioms = []
definitions = []
theorems =
[((AFTER_CHOICE),
  [],
  `((! :(string -> bool) -> bool) (\(c :string).
   ((! :((string -> process) -> bool) -> bool)
   (\(P :string -> process). ((! :(string set -> bool) -> bool)
   (\(B :string set). ((==> ((/\ ((WELL_DEF_ALPHA $0) $1))
   (((IN :string -> string set -> bool) $2) $0)))
   (((= :process -> process -> bool) ((/ ((choice $0) $1))
   (((CONS :string -> string list -> string list) $2)
   (NIL :string list)))) ($1 $2)))))))))`),
 ((AFTER_PREFIX),
  [],
  `((! :(string -> bool) -> bool) (\(c :string).
   ((! :(process -> bool) -> bool) (\(P :process). ((==>
   (((IN :string -> string set -> bool) $1) (ALPHA $0)))
   (((= :process -> process -> bool) ((/ ((--> $1) $0))
   (((CONS :string -> string list -> string list) $1)
   (NIL :string list)))) $0))))))`),
 ((AFTER_APPEND),
  [],
  `((! :(string list -> bool) -> bool) (\(s :string list).
   ((! :(string list -> bool) -> bool) (\(t :string list).
   ((! :(process -> bool) -> bool) (\(P :process). ((==>
   (((IN :string list -> string list set -> bool)
   (((APPEND :string list -> string list -> string list) $2) $1))
   (TRACES $0))) (((= :process -> process -> bool) ((/ $0)
   (((APPEND :string list -> string list -> string list) $2) $1))) ((/
   ((/ $0) $2)) $1)))))))))`),
 ((TRACES_AFTER_THM),
  [],
  `((! :(string list -> bool) -> bool) (\(s :string list).
   ((! :(string list -> bool) -> bool) (\(t :string list).
   ((! :(process -> bool) -> bool) (\(P :process). ((==>
   (((IN :string list -> string list set -> bool)
   (((APPEND :string list -> string list -> string list) $2) $1))
   (TRACES $0))) ((/\ (((IN :string list -> string list set -> bool)
   $2) (TRACES $0))) (((IN :string list -> string list set -> bool)
   $1) (TRACES ((/ $0) $2)))))))))))`),
 ((AFTER_NIL),
  [],
  `(((= :process -> process -> bool) ((/ (P :process))
   (NIL :string list))) (P :process))`),
 ((SET_ABBREV),
  [],
  `((! :('a set -> bool) -> bool) (\(A :'a set).
   (((= :'a set -> 'a set -> bool)
   ((GSPEC :('a -> 'a # bool) -> 'a set) (\(x :'a).
   (((, :'a -> bool -> 'a # bool) $0) (((IN :'a -> 'a set -> bool) $0)
   $1))))) $0)))`)]
