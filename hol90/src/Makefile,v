head	1.3;
access;
symbols
	HOL97:1.3.2.6.0.2
	bpHOL97:1.3.2.6
	hol90_9_alpha:1.3.2.5
	hol90_pre8_for_multiple_compilers:1.3.0.2
	hol90_pre8_after_donalds_separate_compilation_changes:1.1;
locks; strict;
comment	@# @;


1.3
date	95.11.15.15.40.13;	author rjb;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	95.11.15.13.22.12;	author rjb;	state Exp;
branches;
next	1.1;

1.1
date	95.11.01.13.34.25;	author drs1004;	state Exp;
branches;
next	;

1.3.2.1
date	96.06.25.15.40.27;	author rjb;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	96.06.27.15.56.44;	author rjb;	state Exp;
branches;
next	1.3.2.3;

1.3.2.3
date	96.08.23.16.08.46;	author rjb;	state Exp;
branches;
next	1.3.2.4;

1.3.2.4
date	96.09.02.17.08.46;	author rjb;	state Exp;
branches;
next	1.3.2.5;

1.3.2.5
date	96.09.03.16.00.34;	author rjb;	state Exp;
branches;
next	1.3.2.6;

1.3.2.6
date	96.10.01.13.16.24;	author rjb;	state Exp;
branches
	1.3.2.6.2.1;
next	;

1.3.2.6.2.1
date	97.06.11.18.09.27;	author kxs;	state dead;
branches;
next	;


desc
@@


1.3
log
@Makefile now checks that SML executable exists.
@
text
@#-------------------------------------------------------------------------
# Makefile for HOL90
#-------------------------------------------------------------------------

VERSION=pre8

#-------------------------------------------------------------------------
# parameters
#-------------------------------------------------------------------------

SML_IMPL=njsml.108-cm
HOL_DIR:sh=(cd ..; /bin/pwd)
THEORY_TYPE=ascii

#-------------------------------------------------------------------------
# computed macros
#-------------------------------------------------------------------------

ARCH:sh=(/bin/mach 2>/dev/null) || /bin/arch

BIN_DIR=$(HOL_DIR)/bin
THEORY_SRC=$(HOL_DIR)/theories/src
THMS_DIR=$(HOL_DIR)/theories/$(THEORY_TYPE)
HOLSIG_DIR=$(HOL_DIR)/theories/$(THEORY_TYPE)

#-------------------------------------------------------------------------
# all
#-------------------------------------------------------------------------

all: filter hol hol-script

#-------------------------------------------------------------------------
# hol
#-------------------------------------------------------------------------

hol:
	@@-mkdir $(BIN_DIR) 2> /dev/null
	@@if test -f $(BIN_DIR)/$(SML_IMPL)/sml; \
	 then $(MAKE) -f Makefile.$(SML_IMPL) VERSION=$(VERSION) \
		      HOL_DIR=$(HOL_DIR) THEORY_TYPE=$(THEORY_TYPE); \
	 else echo \"sml\" not found in ../bin/$(SML_IMPL)/; \
	      echo Put a symbolic link to the Standard ML executable there; \
	      echo and one for \"sml-cm\" if required.; \
	      exit 1; \
	 fi

#-------------------------------------------------------------------------
# filter
#-------------------------------------------------------------------------

filter: $(BIN_DIR)/quote-filter.$(ARCH)

$(BIN_DIR)/quote-filter.$(ARCH): quote-filter.lex
	@@-mkdir $(BIN_DIR) 2> /dev/null
	lex -t quote-filter.lex >/tmp/lex.yy.c
	cc -o $@@ /tmp/lex.yy.c -ll
	rm /tmp/lex.yy.c
	chmod a+rx $@@

#-------------------------------------------------------------------------
# script
#-------------------------------------------------------------------------

hol-script: script
	@@-mkdir $(BIN_DIR) 2> /dev/null
	echo '#!/bin/sh' > $(BIN_DIR)/hol90
	echo holdir=$(HOL_DIR) >> $(BIN_DIR)/hol90
	echo version=$(VERSION) >> $(BIN_DIR)/hol90
	echo sml=$(SML_IMPL) >> $(BIN_DIR)/hol90
	cat script >> $(BIN_DIR)/hol90
	chmod a+rx $(BIN_DIR)/hol90

#-------------------------------------------------------------------------
# cleaning
#-------------------------------------------------------------------------

clean:
	$(MAKE) clean -f Makefile.$(SML_IMPL) VERSION=$(VERSION) \
		HOL_DIR=$(HOL_DIR) THEORY_TYPE=$(THEORY_TYPE)

lib_clean:
	$(MAKE) lib_clean -f Makefile.$(SML_IMPL) VERSION=$(VERSION) \
		HOL_DIR=$(HOL_DIR) THEORY_TYPE=$(THEORY_TYPE)

clobber: clean
	rm -f 	$(HOLSIG_DIR)/*.holsig \
		$(THMS_DIR)/*.thms

@


1.3.2.1
log
@The core of hol90.9.alpha now builds successfully with SML/NJ 109,
SML/NJ 108.5 (using CM), SML/NJ 0.93, and Poly/ML 3.0.
I have not yet tried rebuilding the theory files.
@
text
@d5 1
a5 1
HOL90_VERSION=9.alpha
d11 2
a12 4
SML_IMPL=njsml.1xx
ARCH=unknown
#HOL_DIR:sh=(cd ..; /bin/pwd) # works on Suns
HOL_DIR=..
a13 2
# File to `use' before dumping HOL executable/heap/database
USE_FILE=
d19 2
a25 2
PIPE=$(BIN_DIR)/pipe

d30 1
a30 1
all: filter pipe hol hol-script
d36 1
a36 20
hol: filter pipe
	@@-mkdir $(BIN_DIR) 2> /dev/null
	$(MAKE) -f Makefile.$(SML_IMPL) \
	        HOL90_VERSION=$(HOL90_VERSION) \
		ARCH=$(ARCH) \
	        HOL_DIR=$(HOL_DIR) \
	        THEORY_TYPE=$(THEORY_TYPE) \
	        USE_FILE=$(USE_FILE)

#-------------------------------------------------------------------------
# pipe
#
# A shell script to allow a file to be piped through the filter without an
# explicit pipe having to appear in the command executed by the SML
# process.
#-------------------------------------------------------------------------

pipe: $(PIPE)

$(PIPE):
d38 8
a45 3
	echo '#!/bin/sh' > $@@
	echo '/bin/cat $$1 | $$2' >> $@@
	chmod a+rx $@@
d68 1
a68 1
	echo version=$(HOL90_VERSION) >> $(BIN_DIR)/hol90
d78 2
a79 5
	$(MAKE) clean -f Makefile.$(SML_IMPL) \
	        HOL90_VERSION=$(HOL90_VERSION) \
		ARCH=$(ARCH) \
	        HOL_DIR=$(HOL_DIR) \
	        THEORY_TYPE=$(THEORY_TYPE)
d82 2
a83 5
	$(MAKE) lib_clean -f Makefile.$(SML_IMPL) \
		HOL90_VERSION=$(HOL90_VERSION) \
		ARCH=$(ARCH) \
	        HOL_DIR=$(HOL_DIR) \
	        THEORY_TYPE=$(THEORY_TYPE)
d86 2
a87 1
	rm -f $(HOLSIG_DIR)/*.holsig $(THMS_DIR)/*.thms
@


1.3.2.2
log
@Theory files now build with SML/NJ 109, SML/NJ 108.5 (using CM), SML/NJ 0.93,
and Poly/ML 3.0.
The quotation filter has been modified so that antiquotation works correctly
in old-style quotations.
The quotation filter is now compiled using flex and gcc (by default).
The arguments to the script for running hol90 have been changed.
@
text
@a18 3
LEX=flex
CC=gcc

d73 2
a74 2
	$(LEX) -t quote-filter.lex >/tmp/lex.yy.c
	$(CC) -o $@@ /tmp/lex.yy.c -ll
@


1.3.2.3
log
@Added entries for making libraries and contributed libraries, and for cleaning
the contrib area. Added a PRE_LOAD parameter for pre-loading libraries.
Modified some of the dependencies.
@
text
@a15 12

LIBRARIES=lite ho_match refute fol tab meson decision reduce arith simp\
	  automate ind_def_new tfl\
	  string option num set pred_set unwind hol88 ind_def taut utils\
	  retrieve group integer abs_theory unity prog_logic pair real\
	  wellorder window list res_quan word

CONTRIBS=`/bin/ls ../contrib`

# Libraries to load before dumping HOL executable/heap/database
PRE_LOAD=automate ind_def_new

a19 1
LEX_LIB=fl
a29 2
LIBRARY_DIR=$(HOL_DIR)/library
CONTRIB_DIR=$(HOL_DIR)/contrib
d37 14
a50 1
all: pipe filter hol hol-script library
d77 1
a77 1
	$(CC) -o $@@ /tmp/lex.yy.c -l$(LEX_LIB)
d82 1
a82 15
# hol
#-------------------------------------------------------------------------

hol: pipe filter
	@@-mkdir $(BIN_DIR) 2> /dev/null
	$(MAKE) -f Makefile.$(SML_IMPL) \
	        HOL90_VERSION=$(HOL90_VERSION) \
		ARCH=$(ARCH) \
	        HOL_DIR=$(HOL_DIR) \
	        THEORY_TYPE=$(THEORY_TYPE) \
	        PRE_LOAD="$(PRE_LOAD)" \
	        USE_FILE=$(USE_FILE)

#-------------------------------------------------------------------------
# hol-script
d85 1
a85 1
hol-script:
a93 43
$(BIN_DIR)/hol90: script
	$(MAKE) hol-script \
	        HOL90_VERSION=$(HOL90_VERSION) \
	        SML_IMPL=$(SML_IMPL) \
	        HOL_DIR=$(HOL_DIR)

#-------------------------------------------------------------------------
# library
#-------------------------------------------------------------------------

library: hol $(BIN_DIR)/hol90
	@@echo "=====> Making system libraries"
	@@for lib in $(LIBRARIES);\
	 do if test -d $(LIBRARY_DIR)/$$lib;\
	    then if test -f $(LIBRARY_DIR)/$$lib/make_$$lib;\
	         then (echo Making the $$lib library;\
	               cd $(LIBRARY_DIR)/$$lib;\
	               make_$$lib $(BIN_DIR)/hol90 -ml $(SML_IMPL);\
	               echo "=====> The $$lib library is made");\
	         else echo No make file found for library $$lib;\
	         fi;\
	    else echo Library $$lib not found;\
	    fi;\
	 done

#-------------------------------------------------------------------------
# contrib
#-------------------------------------------------------------------------

contrib: hol $(BIN_DIR)/hol90
	@@echo "=====> Making contributed libraries"
	@@for lib in $(CONTRIBS);\
	 do if test -d $(CONTRIB_DIR)/$$lib -a $$lib != "desc";\
	    then if test -f $(CONTRIB_DIR)/$$lib/make_$$lib;\
	         then (echo Making the $$lib contributed library;\
	               cd $(CONTRIB_DIR)/$$lib;\
	               make_$$lib $(BIN_DIR)/hol90 -ml $(SML_IMPL);\
	               echo "=====> The $$lib contributed library is made");\
	         else echo No make file found for contributed library $$lib;\
	         fi;\
	    fi;\
	 done

a111 4
contrib_clean:
	rm -f $(CONTRIB_DIR)/desc/*.hol_lib
	@@echo "=====> Removed old descriptions"

@


1.3.2.4
log
@Modified to generate the library/desc directory if it does not already exist.
@
text
@a88 1
	@@-mkdir $(LIBRARY_DIR)/desc 2> /dev/null
@


1.3.2.5
log
@Modified to make THEORY_TYPE available in the environment when building the
libraries and contributed libraries.
@
text
@d123 1
a123 2
	@@THEORY_TYPE=$(THEORY_TYPE); export THEORY_TYPE;\
	 for lib in $(LIBRARIES);\
d142 1
a142 2
	@@THEORY_TYPE=$(THEORY_TYPE); export THEORY_TYPE;\
	 for lib in $(CONTRIBS);\
@


1.3.2.6
log
@Changed version number to "9.beta1".
@
text
@d5 1
a5 1
HOL90_VERSION=9.beta1
@


1.3.2.6.2.1
log
@Many minor changes in order to get HOL to build on SML/NJ 109.26. There are
several real changes, however.

  1. The reliance on hacked ML-Yacc support files is gone.

  2. After type inference, there is now a pass where new names are guessed for
     unconstrained type variables. This is experimental.

  3. All the grammars used in the basic HOL system are put in one place
     (the "src/Grammars" directory).

  4. The implementations of the "Portable" structure have been moved to
      src/portableML.

  5. All the makefiles used to build the system are in src/Makefiles.
@
text
@@


1.2
log
@The HOL90 sources have been changed to allow for the use of different
Standard ML compilers (possibly simultaneously).

The main changes are:

 * Introduction of makefiles for different ML compilers.

   - The existing Makefile has become Makefile.njsml.108-cm and has been
     modified to be called from the new main Makefile.

   - New Makefile introduced. In addition to an entry for making the HOL90
     executable there are entries for making an architecture-independent
     script for running HOL and a filter for providing quotation and
     antiquotation for those ML compilers/interpretors that do not have the
     facility built-in. The Makefile has a variable for the name of the
     version, e.g. "pre8", which ultimately should be propagated to the build.

 * The "bin" subdirectory is the location for the new architecture-independent
   script and for the quotation filters for various architectures. The HOL90
   executables and heaps are now placed in subdirectories of "bin" based on
   the name of the SML compiler. The naming scheme is:

      njsml.108      Standard ML of New Jersey, Version 108
      njsml.108-cm   SML/NJ, Version 108, using the Compilation Manager
      njsml.93       Standard ML of New Jersey, Version 0.93
      polyml         Poly/ML
      mosml          Moscow ML

   The compiler-specific makefiles should write executables, heaps, and logs
   into these subdirectories. In addition, architecture-independent scripts
   (or symbolic links to them) for the SML compiler and (where appropriate)
   the CM version of the compiler should be placed in these directories under
   the names "sml" and "sml-cm".

 * A file called "script" has been added to the "src" subdirectory. This is
   the architecture-independent script for executing HOL90. The Makefile
   simply copies this to the "bin" subdirectory preceded by a few lines of
   parameter definitions. One of these parameters is the default SML version
   to use. So, the last version of HOL to be built using "make" or "make all"
   will become the default.

 * The Lex source for the quotation filter has been added to the "src"
   subdirectory under the name "quote-filter.lex".

 * Many files in "src/0" changed to make them more portable across different
   ML compilers. Various additions have been made to the Portable structure
   and files changed to access identifiers in the Portable structure rather
   than from the global environment. Worthy of special note are:

   - The pointer equality used in "src/0/term.sml" has been made into a
     function in the Portable structure.

   - The ML-Lex and ML-Yacc files for the various parsers have been changed
     to access the Portable structure. Both the source files and the SML
     produced from them have been changed but I have not verified that the
     source files would reproduce the new SML versions if ML-Lex and ML-Yacc
     were to be rerun on them. The changes involve some hacks that exploit the
     way ML-Lex and ML-Yacc work. See the sources for details.

R.J.Boulton, 15th November 1995.
@
text
@d38 8
a45 2
	$(MAKE) -f Makefile.$(SML_IMPL) VERSION=$(VERSION) \
		HOL_DIR=$(HOL_DIR) THEORY_TYPE=$(THEORY_TYPE)
@


1.1
log
@forgot this!
@
text
@d2 1
a2 13
# Makefile for HOL 90
#
# Standard ML Version: NJSML 108.5
# Compilation done using: CM
#
# We make the CM top level pervasive at the start of each use
# of sml-cm since CM functions are used to implement the loader
# in "Portable" (the loader uses CM to load a binary version of
# a file if one exists).  When you start up sml-cm the CM functions
# are only in the top level environment, not the pervasive environment.
#
# The loader itself is not used during the build sequence, but is used
# to load libraries.
d5 2
d8 1
a8 1
# paramaters
d11 2
a13 2
SML_CM=/usr/groups/theory/njml/mldist.108/sun4_sos/sml-cm
SML=/usr/groups/theory/njml/mldist.108/sun4_sos/sml
d19 6
a24 18
#ARCH:sh=arch
PWD:sh=/bin/pwd
ARCH=sparc
BIN_DIR=../bin
HEAP_DIR=$(BIN_DIR)/.heap
THEORY_SRC=../theories/src
THMS_DIR=../theories/$(THEORY_TYPE)
HOLSIG_DIR=../theories/$(THEORY_TYPE)

HOL0_HEAP=$(HEAP_DIR)/hol0.$(ARCH)
HOL1_HEAP=$(HEAP_DIR)/hol1.$(ARCH)
HOL2_HEAP=$(HEAP_DIR)/hol2.$(ARCH)
HOL3_HEAP=$(HEAP_DIR)/hol3.$(ARCH)
HOL90=../bin/hol90

#fragments of ML code
HANDLE_HOL_ERR= \
	handle e => (print_HOL_ERR e; OS.Process.exit OS.Process.failure)
d30 1
a30 1
all: $(HOL90) lib_prebuild
d33 1
a33 1
# hol0
d36 1
a36 1
$(HOL0_HEAP):
d38 2
a39 67
	@@-mkdir $(HEAP_DIR) 2> /dev/null
	echo 'use "make_toplevel_pervasive.sml";' \
	     'Compiler.Control.quotation := true;' \
	     'CM.make'"'"' (CM.cmfile "0/sources.cm");' \
	     'use "0/hol0.sml";' \
	     'CM.export("$@@",NONE);' \
	| $(SML_CM) 2>&1 | tee $(BIN_DIR)/hol0.$(ARCH).log

#-------------------------------------------------------------------------
# Theories built after hol0
#
# How we ensure theory files don't get rebuilt
# --------------------------------------------
#
# We carefully make the theories dependent only on their source,
# not on the executable which is used to process the source.
# This takes the optimistic approach that if a theory file
# is up-to-date with respect to its source then it is correct - even
# though it is possible the executable has changed the theory file format.
#
# To remake the theory files, go "make clobber" before you begin.
#
# Making the theory files not dependent on the executable 
# stops theory files getting rebuilt unnecessarily.
# However, we still need to force the make of the executable
# which process the theory file if it doesn;t exist at all!
# We do this by running a shell "if" command to do a
# make in the case where no executable is available.  
# Shell wizardry courtesy of Michael Norrish. 
#
# Note that the *only* reason we make the hol0, hol1
# and hol2 executables is to process the theory files they are
# used for.  These are not remade if the relevant theory files
# are up-to-date, even if some of the source they depend on
# have changed.  To force the make of a particular executable,
# try
#	make ../bin/.heap/hol1.sun4
#
# Note that this means it is possible (and evn normal) to make
# a hol3 executable without making hol0, hol1 or hol2 executables.
#                                                  DRS
#-------------------------------------------------------------------------

$(HOLSIG_DIR)/min.holsig: \
		$(THEORY_SRC)/min.sig \
		$(THEORY_SRC)/mk_min.sml
	@@-mkdir $(HOLSIG_DIR) 2> /dev/null
	if test ! -f $(HOL0_HEAP); then $(MAKE) $(HOL0_HEAP); fi
	echo 'use "$(THEORY_SRC)/min.sig" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/mk_min.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL0_HEAP) 

$(HOLSIG_DIR)/bool.holsig:  \
		$(HOLSIG_DIR)/min.holsig \
		$(THEORY_SRC)/exists.sig \
		$(THEORY_SRC)/mk_exists.sml \
		$(THEORY_SRC)/bool.sig \
		$(THEORY_SRC)/mk_bool.sml
	@@-mkdir $(HOLSIG_DIR) 2> /dev/null
	if test ! -f $(HOL0_HEAP); then $(MAKE) $(HOL0_HEAP); fi
	echo 'use "$(THEORY_SRC)/min.sig" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/ld_min.sml" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/exists.sig" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/mk_exists.sml" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/bool.sig" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/mk_bool.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL0_HEAP) 
d42 1
a42 1
# hol1
d45 3
a47 2
$(HOL1_HEAP): \
		$(HOLSIG_DIR)/bool.holsig
d49 8
a56 203
	@@-mkdir $(HEAP_DIR) 2> /dev/null
	echo 'use "make_toplevel_pervasive.sml";' \
	     'Compiler.Control.quotation := true;' \
	     'CM.make'"'"' (CM.cmfile "1/sources.cm");' \
	     'use "0/hol0.sml";' \
	     'use "1/hol1.sml";' \
	     'CM.export("$@@",NONE);' \
	| $(SML_CM) 2>&1 | tee $(BIN_DIR)/hol1.$(ARCH).log

#-------------------------------------------------------------------------
# Theories built after hol1
#-------------------------------------------------------------------------

$(HOLSIG_DIR)/combin.holsig: \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_combin.sml
	if test ! -f $(HOL1_HEAP); then $(MAKE) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_combin.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP) 

$(HOLSIG_DIR)/num.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_num.sml
	if test ! -f $(HOL1_HEAP); then $(MAKE) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_num.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP) 

$(HOLSIG_DIR)/one.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_one.sml
	if test ! -f $(HOL1_HEAP); then $(MAKE) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_one.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP) 

$(HOLSIG_DIR)/sum.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(HOLSIG_DIR)/combin.holsig \
		$(THEORY_SRC)/mk_sum.sml
	if test ! -f $(HOL1_HEAP); then $(MAKE) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_sum.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP) 

$(HOLSIG_DIR)/restr_binder.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_restr_binder.sml
	if test ! -f $(HOL1_HEAP); then $(MAKE) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_restr_binder.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP) 

$(HOLSIG_DIR)/pair.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_pair.sml
	if test ! -f $(HOL1_HEAP); then $(MAKE) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_pair.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP) 

$(HOLSIG_DIR)/BASIC_HOL.holsig:  \
		$(THEORY_SRC)/mk_BASIC_HOL.sml \
		$(HOLSIG_DIR)/bool.holsig \
		$(HOLSIG_DIR)/restr_binder.holsig \
		$(HOLSIG_DIR)/pair.holsig \
		$(HOLSIG_DIR)/sum.holsig \
		$(HOLSIG_DIR)/one.holsig \
		$(HOLSIG_DIR)/num.holsig
	if test ! -f $(HOL1_HEAP); then $(MAKE) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_BASIC_HOL.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL1_HEAP) 

#-------------------------------------------------------------------------
# hol2
#
#-------------------------------------------------------------------------


$(HOL2_HEAP): 	$(HOLSIG_DIR)/BASIC_HOL.holsig
	echo 'use "make_toplevel_pervasive.sml";' \
	     'Compiler.Control.quotation := true;' \
	     'CM.make'"'"' (CM.cmfile "2/sources.cm");' \
	     'use "0/hol0.sml";' \
	     'use "1/hol1.sml";' \
	     'use "2/hol2.sml";' \
	     'CM.export("$@@",NONE);' \
	| $(SML_CM) 2>&1 | tee $(BIN_DIR)/hol2.$(ARCH).log

#-------------------------------------------------------------------------
# Theories built using hol2
#-------------------------------------------------------------------------


$(HOLSIG_DIR)/prim_rec.holsig:  \
		$(THEORY_SRC)/mk_prim_rec.sml
	if test ! -f $(HOL2_HEAP); then $(MAKE) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_prim_rec.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP) 

$(HOLSIG_DIR)/arithmetic.holsig:  \
		$(HOLSIG_DIR)/prim_rec.holsig \
		$(THEORY_SRC)/mk_arithmetic.sml
	if test ! -f $(HOL2_HEAP); then $(MAKE) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_arithmetic.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP) 

$(HOLSIG_DIR)/list.holsig:  \
		$(HOLSIG_DIR)/arithmetic.holsig \
		$(THEORY_SRC)/mk_list.sml \
		$(THEORY_SRC)/mk_list_thms.sml
	if test ! -f $(HOL2_HEAP); then $(MAKE) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_list.sml" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/mk_list_thms.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP) 

$(HOLSIG_DIR)/tree.holsig:  \
		$(HOLSIG_DIR)/list.holsig \
		$(THEORY_SRC)/mk_tree.sml
	if test ! -f $(HOL2_HEAP); then $(MAKE) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_tree.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP) 

$(HOLSIG_DIR)/ltree.holsig:  \
		$(HOLSIG_DIR)/tree.holsig \
		$(THEORY_SRC)/mk_ltree.sml
	if test ! -f $(HOL2_HEAP); then $(MAKE) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_ltree.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP) 

$(HOLSIG_DIR)/rec_type.holsig:  \
		$(HOLSIG_DIR)/ltree.holsig \
		$(THEORY_SRC)/mk_rec_type.sml
	if test ! -f $(HOL2_HEAP); then $(MAKE) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_rec_type.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP) 

$(HOLSIG_DIR)/HOL.holsig:  \
		$(HOLSIG_DIR)/rec_type.holsig \
		$(HOLSIG_DIR)/sum.holsig \
		$(HOLSIG_DIR)/restr_binder.holsig \
		$(HOLSIG_DIR)/one.holsig \
		$(THEORY_SRC)/mk_HOL.sml
	if test ! -f $(HOL2_HEAP); then $(MAKE) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_HOL.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @@SMLload=$(HOL2_HEAP) 

#-------------------------------------------------------------------------
# hol3 = HOL
#
# If the executable stops building, your best bet is to
# start up sml-cm and throw the build commands at it one by one.
# The code below is included here for your convenience (ML
# comments allow you to cut and paste it into a SML session).
#
# sml-cm
#     local open Compiler.Environment in (*
# *)       val _ = #set pervasiveEnvRef (concatEnv (#get topLevelEnvRef (), (*
# *)                                       #get pervasiveEnvRef ())); (*
# *)      val _ = #set topLevelEnvRef emptyEnv (*
# *)     end; (*
# *) Compiler.Control.quotation := true; (*
# *) fun m () = CM.make' (CM.cmfile "3/sources.cm"); (*
# *) fun c () = CM.recompile' (CM.cmfile "3/sources.cm"); (*
# *) m(); (*
# *) use "0/hol0.sml"; (*
# *) use "1/hol1.sml"; (*
# *) use "2/hol2.sml"; (*
# *) use "3/hol3.sml"; (*
# *) 
#-------------------------------------------------------------------------

$(HOL3_HEAP): 	$(HOLSIG_DIR)/HOL.holsig
	echo 'use "make_toplevel_pervasive.sml";' \
	     'Compiler.Control.quotation := true;' \
	     'CM.make'"'"' (CM.cmfile "3/sources.cm");' \
	     'use "0/hol0.sml";' \
	     'use "1/hol1.sml";' \
	     'use "2/hol2.sml";' \
	     'use "3/hol3.sml";' \
	     'use "make_toplevel_pervasive.sml";' \
	     'Globals.use_init_file := true; ' \
	     'Portable.interp := true; ' \
	     'CM.export("$@@",NONE) $(HANDLE_HOL_ERR);' \
	| $(SML_CM) 2>&1 | tee $(BIN_DIR)/hol3.$(ARCH).log
	chmod ugo+rx $(HOL3_HEAP)



$(HOL90): $(HOL3_HEAP)
	echo '#! /bin/sh' > $@@
	echo 'exec $(SML) @@SMLload=$(PWD)/$(HOL3_HEAP)' >> $@@
	chmod ugo+rx $(HOL90)

#-------------------------------------------------------------------------
# pre-building libraries
#
# We just set CM munching away on the source code for the libraries,
# as specified in the sources.cm files.  This will leave the binary
# files for the libraries lying around.
#
#    CM.stabilize (CM.cmfile "3/sources.cm", true); (*
# *) fun c () = CM.recompile' (CM.cmfile "../library/sources.cm");
#-------------------------------------------------------------------------

lib_prebuild: $(HOL90)
	echo 'CM.recompile'"'"' (CM.cmfile "../library/sources.cm");' \
	| $(HOL90) 2>&1 | tee $(BIN_DIR)/lib_prebuild.$(ARCH).log
d58 8
a65 2
lib_clean:
	rm -f ../library/*/src/.$(ARCH)/*.bin
d72 6
a77 9
	rm -f 	$(HEAP_DIR)/*.$(ARCH) \
		0/.$(ARCH)/*.bin \
		0/theory/.$(ARCH)/*.bin \
		0/library/.$(ARCH)/*.bin \
		1/.$(ARCH)/*.bin \
		2/.$(ARCH)/*.bin \
		3/.$(ARCH)/*.bin \
		$(THEORY_SRC)/.$(ARCH)/*.bin \
		$(THMS_DIR)/.$(ARCH)/*.bin
@
