thid = (halts, 783975623, 654217)
axioms = []
definitions =
[((DEC_SEQ),
  [],
  `((/\ ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool).
   (((= :(string -> num) -> (string -> num) -> bool) ((((DEC_SEQ 0)
   $2) $1) $0)) $2)))))))) ((! :(num -> bool) -> bool) (\(n :num).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool).
   (((= :(string -> num) -> (string -> num) -> bool) ((((DEC_SEQ (SUC
   $3)) $2) $1) $0))
   ((((COND :bool -> (string -> num) -> (string -> num) -> string ->
             num) (~ ($0 ((((DEC_SEQ $3) $2) $1) $0)))) ((((DEC_SEQ
   $3) $2) $1) $0)) ((@ :((string -> num) -> bool) -> string -> num)
   (\(z :string -> num). ($2
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) ((((DEC_SEQ $4) $3) $2)
   $1)) $0)))))))))))))))`),
 ((HALTS),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   (((= :bool -> bool -> bool) ((HALTS $1) $0))
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num). ((==>
   ($2 $0)) ((? :((string -> num) -> bool) -> bool)
   (\(s' :string -> num). ($2
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $1) $0))))))))))))`)]
theorems =
[((WHILE_HALTS),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(string -> bool) -> bool) (\(x :string). ((==> ((/\
   ((! :(num -> bool) -> bool) (\(n :num). (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ((/\
   ((p :(string -> num) -> bool) $0)) ((/\ ($4 $0))
   (((= :num -> num -> bool) ($0 $2)) $1)))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) (\(s :string -> num). ((/\
   ((p :(string -> num) -> bool) $0)) ((< ($0 $2)) $1))))))))) ((HALTS
   (\(s :string -> num). ((/\ ((p :(string -> num) -> bool) $0)) ($3
   $0)))) $1))) ((HALTS (p :(string -> num) -> bool)) (MK_WHILE
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $2)
   $1))))))))))`),
 ((SEQ_LEMMA7),
  [],
  `((==> ((/\ (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ((/\
   ((p :(string -> num) -> bool) $0)) ((b :(string -> num) -> bool)
   $0))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool))
   (p :(string -> num) -> bool))))) ((HALTS (\(s :string -> num). ((/\
   ((p :(string -> num) -> bool) $0)) ((b :(string -> num) -> bool)
   $0)))) (c :(string -> num) # (string -> num) -> bool))))
   ((! :(num -> bool) -> bool) (\(n :num).
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num). ((==>
   ((/\ ((p :(string -> num) -> bool) $0)) ((/\ (~
   ((b :(string -> num) -> bool) ((((DEC_SEQ $1) $0)
   (c :(string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))))) ((! :(num -> bool) -> bool)
   (\(m :num). ((==> ((< $0) $2)) ((b :(string -> num) -> bool)
   ((((DEC_SEQ $0) $1) (c :(string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))))))))) (((MK_FINITE_WHILE (SUC $1))
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool)))
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) $0) ((((DEC_SEQ $1) $0)
   (c :(string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))))))))))`),
 ((SEQ_LEMMA6),
  [],
  `((! :(num -> bool) -> bool) (\(n :num).
   (((= :(string -> num) -> (string -> num) -> bool) ((((DEC_SEQ $0)
   ((((DEC_SEQ (SUC 0)) (s :string -> num))
   (c :(string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool)))
   (c :(string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))) ((((DEC_SEQ (SUC $0))
   (s :string -> num)) (c :(string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool)))))`),
 ((SEQ_LEMMA5),
  [],
  `((==> ((/\ ((? :(string -> bool) -> bool) (\(x :string).
   ((! :(num -> bool) -> bool) (\(n :num). (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ((/\
   ((p :(string -> num) -> bool) $0)) ((/\
   ((b :(string -> num) -> bool) $0)) (((= :num -> num -> bool) ($0
   $2)) $1)))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool))
   (\(s :string -> num). ((/\ ((p :(string -> num) -> bool) $0)) ((<
   ($0 $2)) $1))))))))))) ((/\ ((HALTS (\(s :string -> num). ((/\
   ((p :(string -> num) -> bool) $0)) ((b :(string -> num) -> bool)
   $0)))) (c :(string -> num) # (string -> num) -> bool)))
   ((p :(string -> num) -> bool) (s :string -> num)))))
   ((? :(num -> bool) -> bool) (\(n :num). ((/\ (~
   ((b :(string -> num) -> bool) ((((DEC_SEQ $0) (s :string -> num))
   (c :(string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))))) ((! :(num -> bool) -> bool)
   (\(m :num). ((==> ((< $0) $1)) ((b :(string -> num) -> bool)
   ((((DEC_SEQ $0) (s :string -> num))
   (c :(string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))))))))))`),
 ((SEQ_LEMMA4),
  [],
  `((==> ((/\ ((? :(string -> bool) -> bool) (\(x :string).
   ((! :(num -> bool) -> bool) (\(n :num). (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ((/\
   ((p :(string -> num) -> bool) $0)) ((/\
   ((b :(string -> num) -> bool) $0)) (((= :num -> num -> bool) ($0
   $2)) $1)))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool))
   (\(s :string -> num). ((/\ ((p :(string -> num) -> bool) $0)) ((<
   ($0 $2)) $1))))))))))) ((/\ ((HALTS (\(s :string -> num). ((/\
   ((p :(string -> num) -> bool) $0)) ((b :(string -> num) -> bool)
   $0)))) (c :(string -> num) # (string -> num) -> bool)))
   ((p :(string -> num) -> bool) (s :string -> num)))))
   ((? :(num -> bool) -> bool) (\(n :num). (~
   ((b :(string -> num) -> bool) ((((DEC_SEQ $0) (s :string -> num))
   (c :(string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool)))))))`),
 ((SEQ_LEMMA3),
  [],
  `((==> ((/\ ((? :(string -> bool) -> bool) (\(x :string).
   ((! :(num -> bool) -> bool) (\(n :num). (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ((/\
   ((p :(string -> num) -> bool) $0)) ((/\
   ((b :(string -> num) -> bool) $0)) (((= :num -> num -> bool) ($0
   $2)) $1)))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool))
   (\(s :string -> num). ((/\ ((p :(string -> num) -> bool) $0)) ((<
   ($0 $2)) $1))))))))))) ((/\ ((HALTS (\(s :string -> num). ((/\
   ((p :(string -> num) -> bool) $0)) ((b :(string -> num) -> bool)
   $0)))) (c :(string -> num) # (string -> num) -> bool)))
   ((p :(string -> num) -> bool) (s :string -> num))))) (~
   ((! :(num -> bool) -> bool) (\(n :num).
   ((b :(string -> num) -> bool) ((((DEC_SEQ $0) (s :string -> num))
   (c :(string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool)))))))`),
 ((WF_THM),
  [],
  `(~ ((? :((num -> num) -> bool) -> bool) (\(f :num -> num).
   ((! :(num -> bool) -> bool) (\(n :num). ((> ($1 $0)) ($1 (SUC
   $0))))))))`),
 ((WF_LEMMA),
  [],
  `((==> ((! :(num -> bool) -> bool) (\(n :num). ((> ((f :num -> num)
   $0)) ((f :num -> num) (SUC $0)))))) ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(m :num). ((>
   ((f :num -> num) $0)) $1))))))`),
 ((SEQ_LEMMA2),
  [],
  `((==> ((/\ ((! :(num -> bool) -> bool) (\(n :num).
   ((b :(string -> num) -> bool) ((((DEC_SEQ $0) (s :string -> num))
   (c :(string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool)))))) ((/\
   ((? :(string -> bool) -> bool) (\(x :string).
   ((! :(num -> bool) -> bool) (\(n :num). (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ((/\
   ((p :(string -> num) -> bool) $0)) ((/\
   ((b :(string -> num) -> bool) $0)) (((= :num -> num -> bool) ($0
   $2)) $1)))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool))
   (\(s :string -> num). ((/\ ((p :(string -> num) -> bool) $0)) ((<
   ($0 $2)) $1))))))))))) ((/\ ((HALTS (\(s :string -> num). ((/\
   ((p :(string -> num) -> bool) $0)) ((b :(string -> num) -> bool)
   $0)))) (c :(string -> num) # (string -> num) -> bool)))
   ((p :(string -> num) -> bool) (s :string -> num))))))
   ((? :(string -> bool) -> bool) (\(x :string).
   ((! :(num -> bool) -> bool) (\(m :num). ((> (((((DEC_SEQ $0)
   (s :string -> num)) (c :(string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool)) $1)) (((((DEC_SEQ (SUC $0))
   (s :string -> num)) (c :(string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool)) $1)))))))`),
 ((SEQ_LEMMA1),
  [],
  `((==> ((/\ ((! :(num -> bool) -> bool) (\(n :num).
   ((b :(string -> num) -> bool) ((((DEC_SEQ $0) (s :string -> num))
   (c :(string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool)))))) ((/\ (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ((/\
   ((p :(string -> num) -> bool) $0)) ((b :(string -> num) -> bool)
   $0))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool))
   (p :(string -> num) -> bool))))) ((/\ ((HALTS (\(s :string -> num).
   ((/\ ((p :(string -> num) -> bool) $0))
   ((b :(string -> num) -> bool) $0))))
   (c :(string -> num) # (string -> num) -> bool)))
   ((p :(string -> num) -> bool) (s :string -> num))))))
   ((! :(num -> bool) -> bool) (\(m :num). ((/\
   ((p :(string -> num) -> bool) ((((DEC_SEQ $0) (s :string -> num))
   (c :(string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))))
   ((c :(string -> num) # (string -> num) -> bool)
   (((, :(string -> num) -> (string -> num) ->
         (string -> num) # (string -> num)) ((((DEC_SEQ $0)
   (s :string -> num)) (c :(string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))) ((((DEC_SEQ (SUC $0))
   (s :string -> num)) (c :(string -> num) # (string -> num) -> bool))
   (b :(string -> num) -> bool))))))))`),
 ((SPEC_LEMMA1),
  [],
  `((==> ((? :(string -> bool) -> bool) (\(x :string).
   ((! :(num -> bool) -> bool) (\(n :num). (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ((/\
   ((p :(string -> num) -> bool) $0)) ((/\
   ((b :(string -> num) -> bool) $0)) (((= :num -> num -> bool) ($0
   $2)) $1)))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool))
   (\(s :string -> num). ((/\ ((p :(string -> num) -> bool) $0)) ((<
   ($0 $2)) $1))))))))))) (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ((/\
   ((p :(string -> num) -> bool) $0)) ((b :(string -> num) -> bool)
   $0))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool))
   (c :(string -> num) # (string -> num) -> bool))
   (p :(string -> num) -> bool)))))`),
 ((PRE_STRENGTH_HALTS),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p' :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool). ((==> ((/\
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num). ((==>
   ($2 $0)) ($3 $0))))) ((HALTS $2) $0))) ((HALTS $1) $0))))))))`),
 ((IF2_HALTS),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c1 :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c2 :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool). ((==> ((/\ ((HALTS
   (\(s :string -> num). ((/\ ($4 $0)) ($1 $0)))) $2)) ((HALTS
   (\(s :string -> num). ((/\ ($4 $0)) (~ ($1 $0))))) $1))) ((HALTS
   $3) (MK_IF2
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $0)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $2)
   $1)))))))))))))`),
 ((IF1_HALTS),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool). ((==> ((HALTS (\(s :string -> num).
   ((/\ ($3 $0)) ($1 $0)))) $1)) ((HALTS $2) (MK_IF1
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $0)
   $1))))))))))`),
 ((SEQ_HALTS),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c' :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool). ((==> ((/\ ((HALTS $3) $2)) ((/\
   (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $3)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) $0)))) ((HALTS $0) $1))))
   ((HALTS $3) (MK_SEQ
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $2)
   $1))))))))))))`),
 ((ASSIGN_HALTS),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool). ((! :(string -> bool) -> bool)
   (\(x :string). ((! :(((string -> num) -> num) -> bool) -> bool)
   (\(f :(string -> num) -> num). ((HALTS $2) (MK_ASSIGN
   (((, :string -> ((string -> num) -> num) ->
         string # ((string -> num) -> num)) $1) $0)))))))))`),
 ((SKIP_HALTS),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool). ((HALTS $0) MK_SKIP)))`)]
