thid = (halts_thms, 783975700, 925987)
axioms = []
definitions =
[((T_SPEC),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool). (((= :bool -> bool -> bool) (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0)))) ((/\ (MK_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $0)))) ((HALTS $2)
   $1)))))))))`)]
theorems =
[((WHILE_T_THM),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool). ((==> ((! :(num -> bool) -> bool)
   (\(n :num). (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ((/\ ($4
   $0)) ((/\ ($2 $0)) (((= :num -> num -> bool) ($0 (x :string)))
   $1)))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) (\(s :string -> num). ((/\ ($4
   $0)) ((< ($0 (x :string))) $1))))))))) (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_WHILE
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $0) $1)))
   (\(s :string -> num). ((/\ ($3 $0)) (~ ($1 $0))))))))))))))`),
 ((POST_WEAK_T_THM),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q' :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool). ((==> ((/\
   (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $3)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $0) $2))))
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num). ((==>
   ($3 $0)) ($2 $0)))))) (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $3)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $0) $1))))))))))))`),
 ((PRE_STRENGTH_T_THM),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p' :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool). ((==> ((/\
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num). ((==>
   ($3 $0)) ($4 $0))))) (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $3)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $0) $1))))) (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $0) $1))))))))))))`),
 ((IF2_T_THM),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c' :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool). ((==> ((/\ (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ((/\ ($5
   $0)) ($1 $0))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $2) $3)))) (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ((/\ ($5
   $0)) (~ ($1 $0)))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $3))))) (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $4)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_IF2
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $0)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $2) $1))))
   $3))))))))))))))`),
 ((IF1_T_THM),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(b :(string -> num) -> bool). ((==> ((/\ (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ((/\ ($4
   $0)) ($1 $0))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $2))))
   ((! :((string -> num) -> bool) -> bool) (\(s :string -> num). ((==>
   ((/\ ($4 $0)) (~ ($1 $0)))) ($3 $0)))))) (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $3)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_IF1
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $0) $1)))
   $2))))))))))))`),
 ((SEQ_T_THM),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(q :(string -> num) -> bool).
   ((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(r :(string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c :(string -> num) # (string -> num) -> bool).
   ((! :(((string -> num) # (string -> num) -> bool) -> bool) -> bool)
   (\(c' :(string -> num) # (string -> num) -> bool). ((==> ((/\
   (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $4)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $1) $3)))) (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $3)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $0) $2))))) (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $4)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_SEQ
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool)) $1) $0)))
   $2))))))))))))))`),
 ((ASSIGN_T_THM),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool). ((! :(string -> bool) -> bool)
   (\(x :string). ((! :(((string -> num) -> num) -> bool) -> bool)
   (\(f :(string -> num) -> num). (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (\(s :string -> num). ($3 (((BND
   $2) ($1 $0)) $0))))
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) (MK_ASSIGN
   (((, :string -> ((string -> num) -> num) ->
         string # ((string -> num) -> num)) $1) $0))) $2)))))))))`),
 ((SKIP_T_THM),
  [],
  `((! :(((string -> num) -> bool) -> bool) -> bool)
   (\(p :(string -> num) -> bool). (T_SPEC
   (((, :((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool) ->
         ((string -> num) -> bool) #
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) $0)
   (((, :((string -> num) # (string -> num) -> bool) ->
         ((string -> num) -> bool) ->
         ((string -> num) # (string -> num) -> bool) #
         ((string -> num) -> bool)) MK_SKIP) $0)))))`)]
