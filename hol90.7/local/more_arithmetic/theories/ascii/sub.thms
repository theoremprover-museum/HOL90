thid = (sub, 739178026, 142234)
axioms = []
definitions = []
theorems =
[((SUB_LESS_EQ_SUB1),
  `((! :(num -> bool) -> bool) (\(x :num). ((==> ((> $0) 0))
   ((! :(num -> bool) -> bool) (\(a :num). ((<= ((- $0) $1)) ((- $0)
   1)))))))`),
 ((LESS_EQ_SUB_1),
  `((! :(num -> bool) -> bool) (\(a :num). ((! :(num -> bool) -> bool)
   (\(b :num). ((==> ((<= $1) $0)) ((<= ((- $1) 1)) ((- $0)
   1)))))))`),
 ((SUB_GREATER_0),
  `((! :(num -> bool) -> bool) (\(a :num). ((! :(num -> bool) -> bool)
   (\(b :num). ((==> ((< $1) $0)) ((> ((- $0) $1)) 0))))))`),
 ((ADD_EQ_IMP_SUB_EQ),
  `((! :(num -> bool) -> bool) (\(a :num). ((! :(num -> bool) -> bool)
   (\(b :num). ((! :(num -> bool) -> bool) (\(c :num). ((==>
   (((= :num -> num -> bool) $2) ((+ $1) $0)))
   (((= :num -> num -> bool) ((- $2) $1)) $0))))))))`),
 ((SUB_EQ_SUB_ADD_SUB),
  `((! :(num -> bool) -> bool) (\(a :num). ((! :(num -> bool) -> bool)
   (\(b :num). ((! :(num -> bool) -> bool) (\(c :num). ((==> ((/\ ((<=
   $2) $1)) ((<= $1) $0))) (((= :num -> num -> bool) ((- $0) $2)) ((+
   ((- $0) $1)) ((- $1) $2))))))))))`),
 ((SUB_LESS_EQ_SUB_SUC),
  `((! :(num -> bool) -> bool) (\(a :num). ((! :(num -> bool) -> bool)
   (\(b :num). ((! :(num -> bool) -> bool) (\(c :num).
   ((! :(num -> bool) -> bool) (\(n :num). ((==> ((/\ ((< 0) $1)) ((<=
   $3) ((- $2) $0)))) ((<= ((- $3) $1)) ((- $2) (SUC $0))))))))))))`),
 ((LESS_TWICE_IMP_LESS_SUB),
  `((! :(num -> bool) -> bool) (\(a :num). ((! :(num -> bool) -> bool)
   (\(b :num). ((! :(num -> bool) -> bool) (\(m :num). ((==> ((/\ ((<
   $2) $0)) ((/\ ((< $1) $0)) ((<= $0) ((+ $2) $1))))) ((< ((- ((+ $2)
   $1)) $0)) $0))))))))`),
 ((SUB_LESS_BOTH_SIDES),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num). ((==> ((/\ ((<=
   $0) $2)) ((< $2) $1))) ((< ((- $2) $0)) ((- $1) $0)))))))))`),
 ((SUB_BOTH_SIDES),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num). ((==>
   (((= :num -> num -> bool) $2) $1)) (((= :num -> num -> bool) ((-
   $2) $0)) ((- $1) $0)))))))))`),
 ((NOT_LESS_SUB),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). (~ ((< $1) ((- $1) $0)))))))`),
 ((SMALLER_SUM),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num). ((==> ((/\ ((<
   $2) $0)) ((< $1) $0))) (~ ((> ((- ((+ $2) $1)) $0)) $2)))))))))`),
 ((SUB_ADD_SELF),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((==> (~ ((< $1) $0))) (((= :num -> num -> bool) ((+
   ((- $1) $0)) $0)) $1))))))`),
 ((ADD_SUB_SYM),
  `((! :(num -> bool) -> bool) (\(a :num). ((! :(num -> bool) -> bool)
   (\(c :num). (((= :num -> num -> bool) ((- ((+ $0) $1)) $0))
   $1)))))`),
 ((LESS_SUB_IMP_SUM_LESS),
  `((! :(num -> bool) -> bool) (\(i :num). ((! :(num -> bool) -> bool)
   (\(m :num). ((==> ((/\ ((< $1) ((- $0) 1))) ((< 1) $0))) ((< ((+
   $1) 1)) $0))))))`),
 ((SUB_PRE_SUB_1),
  `((! :(num -> bool) -> bool) (\(a :num). ((! :(num -> bool) -> bool)
   (\(b :num). ((==> ((< 0) $0)) (((= :num -> num -> bool) ((- ((- $1)
   (PRE $0))) 1)) ((- $1) $0)))))))`),
 ((PRE_LESS_LESS_SUC),
  `((! :(num -> bool) -> bool) (\(i :num). ((! :(num -> bool) -> bool)
   (\(m :num). ((==> ((/\ ((< $1) ((- $0) 1))) ((< 0) $0))) ((< ((+
   $1) 1)) $0))))))`),
 ((LESS_PRE),
  `((! :(num -> bool) -> bool) (\(i :num). ((! :(num -> bool) -> bool)
   (\(m :num). ((==> ((< $1) ((- $0) 1))) ((< $1) $0))))))`),
 ((PRE_SUB_SUC),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((==> ((< $1) $0)) (((= :num -> num -> bool) (PRE ((-
   $0) $1))) ((- $0) (SUC $1))))))))`),
 ((ADD_LESS_EQ_SUB),
  `((! :(num -> bool) -> bool) (\(n :num). ((! :(num -> bool) -> bool)
   (\(m :num). ((! :(num -> bool) -> bool) (\(p :num). ((==> ((<= $2)
   $0)) (((= :bool -> bool -> bool) ((<= ((+ $2) $1)) $0)) ((<= $1)
   ((- $0) $2))))))))))`),
 ((SUB_1_LESS_EQ),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((==> ((< $1) $0)) ((>= ((- $0) 1)) $1))))))`),
 ((SUB_1_LESS),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((==> ((/\ (~ (((= :num -> num -> bool) $1) 0))) ((<
   $1) (SUC $0)))) ((< ((- $1) 1)) $0))))))`),
 ((NOT_0_SUB),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((==> (~ (((= :num -> num -> bool) ((- $1) $0)) 0))) (~
   (((= :num -> num -> bool) $1) 0)))))))`),
 ((NOT_SUB_0),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((==> ((< $1) $0)) (~ (((= :num -> num -> bool) ((- $0)
   $1)) 0)))))))`),
 ((SUB_LE_ADD),
  `((! :(num -> bool) -> bool) (\(n :num). ((! :(num -> bool) -> bool)
   (\(m :num). ((! :(num -> bool) -> bool) (\(p :num). ((==> ((<= $2)
   $0)) (((= :bool -> bool -> bool) ((<= $1) ((- $0) $2))) ((<= ((+
   $2) $1)) $0)))))))))`),
 ((SUB_GREATER_EQ_ADD),
  `((! :(num -> bool) -> bool) (\(n :num). ((! :(num -> bool) -> bool)
   (\(m :num). ((! :(num -> bool) -> bool) (\(p :num). ((==> ((>= $0)
   $2)) (((= :bool -> bool -> bool) ((>= ((- $0) $2)) $1)) ((>= $0)
   ((+ $2) $1))))))))))`),
 ((GREATER_EQ_SUB_LESS_TO_ADD),
  `((! :(num -> bool) -> bool) (\(n :num). ((! :(num -> bool) -> bool)
   (\(m :num). ((! :(num -> bool) -> bool) (\(p :num). ((==> ((>= $0)
   $2)) (((= :bool -> bool -> bool) ((< ((- $0) $2)) $1)) ((< $0) ((+
   $2) $1))))))))))`),
 ((LESS_EQ_SUB_ADD),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num). ((==> ((<= $0)
   $2)) (((= :num -> num -> bool) ((+ ((- $2) $0)) $1)) ((- ((+ $2)
   $1)) $0)))))))))`),
 ((LESS_EQ_ADD_SUB1),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num). ((==> ((<= $0)
   $1)) (((= :num -> num -> bool) ((+ $2) ((- $1) $0))) ((- ((+ $2)
   $1)) $0)))))))))`),
 ((LESS_SUB_IMP_INV),
  `((! :(num -> bool) -> bool) (\(k :num). ((! :(num -> bool) -> bool)
   (\(l :num). ((==> ((< 0) ((- $1) $0))) ((< $0) $1))))))`),
 ((SUB_SUB_ID),
  `((! :(num -> bool) -> bool) (\(k :num). ((! :(num -> bool) -> bool)
   (\(l :num). ((==> ((< $0) $1)) (((= :num -> num -> bool) ((- $1)
   ((- $1) $0))) $0))))))`),
 ((SUC_SUB),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((/\ ((==> ((< $1) $0)) (((= :num -> num -> bool) ((-
   (SUC $1)) $0)) 0))) ((==> (~ ((< $1) $0)))
   (((= :num -> num -> bool) ((- (SUC $1)) $0)) (SUC ((- $1)
   $0)))))))))`),
 ((LESS_SUB_TO_ADDL_LESS),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num). ((==> ((<= $1)
   $2)) (((= :bool -> bool -> bool) ((< $0) ((- $2) $1))) ((< ((+ $1)
   $0)) $2)))))))))`),
 ((LESS_SUB_TO_ADDR_LESS),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num). ((==> ((<= $0)
   $2)) (((= :bool -> bool -> bool) ((< $1) ((- $2) $0))) ((< ((+ $1)
   $0)) $2)))))))))`),
 ((SUB_LESS_TO_LESS_ADDL),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num). ((==> ((<= $1)
   $2)) (((= :bool -> bool -> bool) ((< ((- $2) $1)) $0)) ((< $2) ((+
   $1) $0))))))))))`),
 ((SUB_LESS_TO_LESS_ADDR),
  `((! :(num -> bool) -> bool) (\(m :num). ((! :(num -> bool) -> bool)
   (\(n :num). ((! :(num -> bool) -> bool) (\(p :num). ((==> ((<= $0)
   $2)) (((= :bool -> bool -> bool) ((< ((- $2) $0)) $1)) ((< $2) ((+
   $1) $0))))))))))`),
 ((SUB_SUC),
  `((! :(num -> bool) -> bool) (\(k :num). ((! :(num -> bool) -> bool)
   (\(m :num). ((==> ((< $0) $1)) (((= :num -> num -> bool) ((- $1)
   $0)) (SUC ((- $1) (SUC $0)))))))))`),
 ((SUB_SUC_PRE_SUB),
  `((! :(num -> bool) -> bool) (\(n :num). ((! :(num -> bool) -> bool)
   (\(m :num). ((==> ((< 0) $1)) (((= :num -> num -> bool) ((- $1)
   (SUC $0))) ((- (PRE $1)) $0)))))))`)]
