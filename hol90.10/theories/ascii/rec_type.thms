thid = (rec_type, 934216800, 881726)
axioms = []
definitions =
[((TRP_DEF),
  [],
  `((! :(('a -> 'a ltree list -> bool) -> bool) -> bool)
   (\(P :'a -> 'a ltree list -> bool).
   (((= :('a ltree -> bool) -> ('a ltree -> bool) -> bool)
   ((TRP :('a -> 'a ltree list -> bool) -> 'a ltree -> bool) $0))
   ((@ :(('a ltree -> bool) -> bool) -> 'a ltree -> bool)
   (\(trp :'a ltree -> bool). ((! :('a -> bool) -> bool) (\(v :'a).
   ((! :('a ltree list -> bool) -> bool) (\(tl :'a ltree list).
   (((= :bool -> bool -> bool) ($2
   (((Node :'a -> 'a ltree list -> 'a ltree) $1) $0))) ((/\ (($3 $1)
   $0)) (((EVERY :('a ltree -> bool) -> 'a ltree list -> bool) $2)
   $0))))))))))))`)]
theorems =
[((exists_TRP),
  [],
  `((! :(('a -> 'a ltree list -> bool) -> bool) -> bool)
   (\(P :'a -> 'a ltree list -> bool). ((==>
   ((? :('a -> bool) -> bool) (\(v :'a). (($1 $0)
   (NIL :'a ltree list))))) ((? :('a ltree -> bool) -> bool)
   (\(t :'a ltree).
   (((TRP :('a -> 'a ltree list -> bool) -> 'a ltree -> bool) $1)
   $0))))))`),
 ((TY_DEF_THM),
  [],
  `((! :(('b -> 'a ltree) -> bool) -> bool) (\(REP :'b -> 'a ltree).
   ((! :(('a ltree -> 'b) -> bool) -> bool) (\(ABS :'a ltree -> 'b).
   ((! :(('a -> 'a ltree list -> bool) -> bool) -> bool)
   (\(P :'a -> 'a ltree list -> bool). ((==> ((/\
   ((! :('b -> bool) -> bool) (\(a :'b). (((= :'b -> 'b -> bool) ($2
   ($3 $0))) $0)))) ((! :('a ltree -> bool) -> bool) (\(r :'a ltree).
   (((= :bool -> bool -> bool)
   (((TRP :('a -> 'a ltree list -> bool) -> 'a ltree -> bool) $1) $0))
   (((= :'a ltree -> 'a ltree -> bool) ($3 ($2 $0))) $0))))))
   ((! :(('c list -> 'a -> 'b list -> 'c) -> bool) -> bool)
   (\(f :'c list -> 'a -> 'b list -> 'c).
   ((?! :(('b -> 'c) -> bool) -> bool) (\(fn :'b -> 'c).
   ((! :('a -> bool) -> bool) (\(v :'a).
   ((! :('b list -> bool) -> bool) (\(tl :'b list). ((==> (($4 $1)
   (((MAP :('b -> 'a ltree) -> 'b list -> 'a ltree list) $6) $0)))
   (((= :'c -> 'c -> bool) ($2 ($5
   (((Node :'a -> 'a ltree list -> 'a ltree) $1)
   (((MAP :('b -> 'a ltree) -> 'b list -> 'a ltree list) $6) $0)))))
   ((($3 (((MAP :('b -> 'c) -> 'b list -> 'c list) $2) $0)) $1)
   $0))))))))))))))))))`),
 ((MAP_o),
  [],
  `((! :(('b -> 'c) -> bool) -> bool) (\(f :'b -> 'c).
   ((! :(('a -> 'b) -> bool) -> bool) (\(g :'a -> 'b).
   (((= :('a list -> 'c list) -> ('a list -> 'c list) -> bool)
   ((MAP :('a -> 'c) -> 'a list -> 'c list)
   (((o :('b -> 'c) -> ('a -> 'b) -> 'a -> 'c) $1) $0)))
   (((o :('b list -> 'c list) -> ('a list -> 'b list) -> 'a list ->
         'c list) ((MAP :('b -> 'c) -> 'b list -> 'c list) $1))
   ((MAP :('a -> 'b) -> 'a list -> 'b list) $0)))))))`),
 ((TRP),
  [],
  `((! :(('a -> 'a ltree list -> bool) -> bool) -> bool)
   (\(P :'a -> 'a ltree list -> bool). ((! :('a -> bool) -> bool)
   (\(v :'a). ((! :('a ltree list -> bool) -> bool)
   (\(tl :'a ltree list). (((= :bool -> bool -> bool)
   (((TRP :('a -> 'a ltree list -> bool) -> 'a ltree -> bool) $2)
   (((Node :'a -> 'a ltree list -> 'a ltree) $1) $0))) ((/\ (($2 $1)
   $0)) (((EVERY :('a ltree -> bool) -> 'a ltree list -> bool)
   ((TRP :('a -> 'a ltree list -> bool) -> 'a ltree -> bool) $2))
   $0)))))))))`)]
