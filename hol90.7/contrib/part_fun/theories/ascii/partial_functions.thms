thid = (partial_functions, 784895188, 78058)
axioms = []
definitions =
[((graph_compose_DEF),
  [],
  `((! :(('b -> 'c -> bool) -> bool) -> bool) (\(g :'b -> 'c -> bool).
   ((! :(('a -> 'b -> bool) -> bool) -> bool) (\(h :'a -> 'b -> bool).
   (((= :('a -> 'c -> bool) -> ('a -> 'c -> bool) -> bool)
   (((graph_compose :('b -> 'c -> bool) -> ('a -> 'b -> bool) -> 'a ->
                     'c -> bool) $1) $0)) (\(x :'a). (\(z :'c).
   ((? :('b -> bool) -> bool) (\(y :'b). ((/\ (($3 $2) $0)) (($4 $0)
   $1)))))))))))`),
 ((mk_part_fun_graph_DEF),
  [],
  `((! :(('a -> 'b lift) -> bool) -> bool) (\(f :'a -> 'b lift).
   (((= :('a -> 'b -> bool) -> ('a -> 'b -> bool) -> bool)
   ((mk_part_fun_graph :('a -> 'b lift) -> 'a -> 'b -> bool) $0))
   (\(x :'a). (\(y :'b). (((= :'b lift -> 'b lift -> bool) ($2 $1))
   ((lift :'b -> 'b lift) $0)))))))`),
 ((is_part_fun_graph_DEF),
  [],
  `((! :(('a -> 'b -> bool) -> bool) -> bool) (\(g :'a -> 'b -> bool).
   (((= :bool -> bool -> bool)
   ((is_part_fun_graph :('a -> 'b -> bool) -> bool) $0))
   ((! :('a -> bool) -> bool) (\(x :'a). ((! :('b -> bool) -> bool)
   (\(y1 :'b). ((! :('b -> bool) -> bool) (\(y2 :'b). ((==> ((/\ (($3
   $2) $1)) (($3 $2) $0))) (((= :'b -> 'b -> bool) $1)
   $0)))))))))))`),
 ((lift_fun_of_graph_DEF),
  [],
  `((! :(('a -> 'b -> bool) -> bool) -> bool) (\(g :'a -> 'b -> bool).
   ((! :('a -> bool) -> bool) (\(x :'a).
   ((((COND :bool -> bool -> bool -> bool) ((? :('b -> bool) -> bool)
   (\(y :'b). (($2 $1) $0)))) ((/\ ((is_defined :'b lift -> bool)
   (((lift_fun_of_graph :('a -> 'b -> bool) -> 'a -> 'b lift) $1)
   $0))) (($1 $0) ((lower :'b lift -> 'b)
   (((lift_fun_of_graph :('a -> 'b -> bool) -> 'a -> 'b lift) $1)
   $0))))) (((= :'b lift -> 'b lift -> bool)
   (((lift_fun_of_graph :('a -> 'b -> bool) -> 'a -> 'b lift) $1) $0))
   (undefined :'b lift)))))))`),
 ((lift_compose_DEF),
  [],
  `((! :(('b -> 'c lift) -> bool) -> bool) (\(g :'b -> 'c lift).
   ((! :(('a -> 'b lift) -> bool) -> bool) (\(f :'a -> 'b lift).
   ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'c lift -> 'c lift -> bool)
   ((((lift_compose :('b -> 'c lift) -> ('a -> 'b lift) -> 'a ->
                     'c lift) $2) $1) $0))
   ((((COND :bool -> 'c lift -> 'c lift -> 'c lift)
   ((is_defined :'b lift -> bool) ($1 $0))) ($2
   ((lower :'b lift -> 'b) ($1 $0)))) (undefined :'c lift)))))))))`),
 ((lift_fun_DEF),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   (((= :('a -> 'b lift) -> ('a -> 'b lift) -> bool)
   ((lift_fun :('a -> 'b) -> 'a -> 'b lift) $0)) (\(x :'a).
   ((lift :'b -> 'b lift) ($1 $0))))))`),
 ((disjoint_domains_DEF),
  [],
  `((! :(('b -> 'a lift) -> bool) -> bool) (\(f :'b -> 'a lift).
   ((! :(('b -> 'a lift) -> bool) -> bool) (\(g :'b -> 'a lift).
   (((= :bool -> bool -> bool)
   (((disjoint_domains :('b -> 'a lift) -> ('b -> 'a lift) -> bool)
   $1) $0)) (~ ((? :('b -> bool) -> bool) (\(x :'b).
   (((= :bool -> bool -> bool)
   (((part_fun_domain :('b -> 'a lift) -> 'b -> bool) $2) $0))
   (((part_fun_domain :('b -> 'a lift) -> 'b -> bool) $1)
   $0))))))))))`),
 ((part_fun_domain_DEF),
  [],
  `((! :(('a -> 'b lift) -> bool) -> bool) (\(f :'a -> 'b lift).
   (((= :('a -> bool) -> ('a -> bool) -> bool)
   ((part_fun_domain :('a -> 'b lift) -> 'a -> bool) $0)) (\(x :'a).
   ((is_defined :'b lift -> bool) ($1 $0))))))`),
 ((part_fun_range_DEF),
  [],
  `((! :(('a -> 'b lift) -> bool) -> bool) (\(f :'a -> 'b lift).
   (((= :('b -> bool) -> ('b -> bool) -> bool)
   ((part_fun_range :('a -> 'b lift) -> 'b -> bool) $0)) (\(y :'b).
   ((? :('a -> bool) -> bool) (\(x :'a).
   (((= :'b lift -> 'b lift -> bool) ($2 $0)) ((lift :'b -> 'b lift)
   $1))))))))`),
 ((modify_part_fun_DEF),
  [],
  `((! :(('a -> 'b lift) -> bool) -> bool) (\(f :'a -> 'b lift).
   ((! :(('a -> 'b lift) -> bool) -> bool) (\(g :'a -> 'b lift).
   (((= :('a -> 'b lift) -> ('a -> 'b lift) -> bool)
   (((modify_part_fun :('a -> 'b lift) -> ('a -> 'b lift) -> 'a ->
                       'b lift) $1) $0)) (\(x :'a).
   ((((COND :bool -> 'b lift -> 'b lift -> 'b lift)
   (((= :'b lift -> 'b lift -> bool) ($1 $0)) (undefined :'b lift)))
   ($2 $0)) ($1 $0))))))))`),
 ((update_fun_DEF),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a -> bool) -> bool) (\(x :'a). ((! :('b -> bool) -> bool)
   (\(y :'b). (((= :('a -> 'b) -> ('a -> 'b) -> bool)
   ((((update_fun :('a -> 'b) -> 'a -> 'b -> 'a -> 'b) $2) $1) $0))
   (\(z :'a). ((((COND :bool -> 'b -> 'b -> 'b)
   (((= :'a -> 'a -> bool) $2) $0)) $1) ($3 $0))))))))))`),
 ((singleton_part_fun_DEF),
  [],
  `((! :('a -> bool) -> bool) (\(x :'a). ((! :('b -> bool) -> bool)
   (\(s :'b). (((= :('a -> 'b lift) -> ('a -> 'b lift) -> bool)
   (((singleton_part_fun :'a -> 'b -> 'a -> 'b lift) $1) $0))
   (\(y :'a). ((((COND :bool -> 'b lift -> 'b lift -> 'b lift)
   (((= :'a -> 'a -> bool) $2) $0)) ((lift :'b -> 'b lift) $1))
   (undefined :'b lift))))))))`),
 ((empty_part_fun_DEF),
  [],
  `(((= :('b -> 'a lift) -> ('b -> 'a lift) -> bool)
   (empty_part_fun :'b -> 'a lift)) (\(y :'b).
   (undefined :'a lift)))`)]
theorems =
[((lift_graph_compose_is_lift_compose_graph),
  [],
  `((! :(('b -> 'c -> bool) -> bool) -> bool) (\(h :'b -> 'c -> bool).
   ((! :(('a -> 'b -> bool) -> bool) -> bool) (\(g :'a -> 'b -> bool).
   ((==> ((/\ ((is_part_fun_graph :('b -> 'c -> bool) -> bool) $1))
   ((is_part_fun_graph :('a -> 'b -> bool) -> bool) $0)))
   (((= :('a -> 'c lift) -> ('a -> 'c lift) -> bool)
   ((lift_fun_of_graph :('a -> 'c -> bool) -> 'a -> 'c lift)
   (((graph_compose :('b -> 'c -> bool) -> ('a -> 'b -> bool) -> 'a ->
                     'c -> bool) $1) $0)))
   (((lift_compose :('b -> 'c lift) -> ('a -> 'b lift) -> 'a ->
                    'c lift)
   ((lift_fun_of_graph :('b -> 'c -> bool) -> 'b -> 'c lift) $1))
   ((lift_fun_of_graph :('a -> 'b -> bool) -> 'a -> 'b lift)
   $0))))))))`),
 ((graph_lift_compose_COMMUTE),
  [],
  `((! :(('b -> 'c lift) -> bool) -> bool) (\(g :'b -> 'c lift).
   ((! :(('a -> 'b lift) -> bool) -> bool) (\(f :'a -> 'b lift).
   (((= :('a -> 'c -> bool) -> ('a -> 'c -> bool) -> bool)
   (((graph_compose :('b -> 'c -> bool) -> ('a -> 'b -> bool) -> 'a ->
                     'c -> bool)
   ((mk_part_fun_graph :('b -> 'c lift) -> 'b -> 'c -> bool) $1))
   ((mk_part_fun_graph :('a -> 'b lift) -> 'a -> 'b -> bool) $0)))
   ((mk_part_fun_graph :('a -> 'c lift) -> 'a -> 'c -> bool)
   (((lift_compose :('b -> 'c lift) -> ('a -> 'b lift) -> 'a ->
                    'c lift) $1) $0)))))))`),
 ((fun_fun_graph_THM),
  [],
  `((! :(('a -> 'b -> bool) -> bool) -> bool) (\(g :'a -> 'b -> bool).
   (((= :bool -> bool -> bool)
   (((= :('a -> 'b -> bool) -> ('a -> 'b -> bool) -> bool)
   ((mk_part_fun_graph :('a -> 'b lift) -> 'a -> 'b -> bool)
   ((lift_fun_of_graph :('a -> 'b -> bool) -> 'a -> 'b lift) $0)))
   $0)) ((is_part_fun_graph :('a -> 'b -> bool) -> bool) $0))))`),
 ((fun_graph_fun_THM),
  [],
  `((! :(('a -> 'b lift) -> bool) -> bool) (\(f :'a -> 'b lift).
   (((= :('a -> 'b lift) -> ('a -> 'b lift) -> bool)
   ((lift_fun_of_graph :('a -> 'b -> bool) -> 'a -> 'b lift)
   ((mk_part_fun_graph :('a -> 'b lift) -> 'a -> 'b -> bool) $0)))
   $0)))`),
 ((lift_fun_of_graph_lemma),
  [],
  `((! :(('a -> 'b -> bool) -> bool) -> bool) (\(g :'a -> 'b -> bool).
   ((! :('a -> bool) -> bool) (\(x :'a). ((/\
   (((= :bool -> bool -> bool) (((= :'b lift -> 'b lift -> bool)
   (((lift_fun_of_graph :('a -> 'b -> bool) -> 'a -> 'b lift) $1) $0))
   (undefined :'b lift))) ((! :('b -> bool) -> bool) (\(y :'b). (~
   (($2 $1) $0)))))) ((/\ (((= :bool -> bool -> bool)
   ((is_defined :'b lift -> bool)
   (((lift_fun_of_graph :('a -> 'b -> bool) -> 'a -> 'b lift) $1)
   $0))) (($1 $0) ((lower :'b lift -> 'b)
   (((lift_fun_of_graph :('a -> 'b -> bool) -> 'a -> 'b lift) $1)
   $0))))) (((= :bool -> bool -> bool) ((? :('b -> bool) -> bool)
   (\(y :'b). (($2 $1) $0)))) (($1 $0) ((lower :'b lift -> 'b)
   (((lift_fun_of_graph :('a -> 'b -> bool) -> 'a -> 'b lift) $1)
   $0))))))))))`),
 ((range_compose),
  [],
  `((! :(('a -> 'b lift) -> bool) -> bool) (\(f :'a -> 'b lift).
   ((! :(('b -> 'c) -> bool) -> bool) (\(g :'b -> 'c).
   ((! :('b -> bool) -> bool) (\(t :'b). ((==>
   (((part_fun_range :('a -> 'b lift) -> 'b -> bool) $2) $0))
   (((part_fun_range :('a -> 'c lift) -> 'c -> bool)
   (((lift_compose :('b -> 'c lift) -> ('a -> 'b lift) -> 'a ->
                    'c lift) ((lift_fun :('b -> 'c) -> 'b -> 'c lift)
   $1)) $2)) ($1 $0)))))))))`),
 ((lift_fun_compose_COMMUTE),
  [],
  `((! :(('b -> 'c) -> bool) -> bool) (\(g :'b -> 'c).
   ((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   (((= :('a -> 'c lift) -> ('a -> 'c lift) -> bool)
   (((lift_compose :('b -> 'c lift) -> ('a -> 'b lift) -> 'a ->
                    'c lift) ((lift_fun :('b -> 'c) -> 'b -> 'c lift)
   $1)) ((lift_fun :('a -> 'b) -> 'a -> 'b lift) $0)))
   ((lift_fun :('a -> 'c) -> 'a -> 'c lift)
   (((o :('b -> 'c) -> ('a -> 'b) -> 'a -> 'c) $1) $0)))))))`),
 ((lift_compose_ID),
  [],
  `((! :(('a -> 'b lift) -> bool) -> bool) (\(f :'a -> 'b lift). ((/\
   (((= :('a -> 'b lift) -> ('a -> 'b lift) -> bool)
   (((lift_compose :('a -> 'b lift) -> ('a -> 'a lift) -> 'a ->
                    'b lift) $0)
   ((lift_fun :('a -> 'a) -> 'a -> 'a lift) (\(x :'a). $0)))) $0))
   (((= :('a -> 'b lift) -> ('a -> 'b lift) -> bool)
   (((lift_compose :('b -> 'b lift) -> ('a -> 'b lift) -> 'a ->
                    'b lift) ((lift_fun :('b -> 'b) -> 'b -> 'b lift)
   (\(x :'b). $0))) $0)) $0))))`),
 ((lift_compose_lemma),
  [],
  `((! :(('b -> 'c lift) -> bool) -> bool) (\(g :'b -> 'c lift).
   ((! :(('a -> 'b lift) -> bool) -> bool) (\(f :'a -> 'b lift).
   (((= :('a -> 'c lift) -> ('a -> 'c lift) -> bool)
   (((lift_compose :('b -> 'c lift) -> ('a -> 'b lift) -> 'a ->
                    'c lift) $1) $0)) (\(x :'a).
   ((((COND :bool -> 'c lift -> 'c lift -> 'c lift)
   ((is_defined :'b lift -> bool) ($1 $0))) ($2
   ((lower :'b lift -> 'b) ($1 $0)))) (undefined :'c lift))))))))`),
 ((lift_compose_lift_THM),
  [],
  `((! :(('b -> 'c lift) -> bool) -> bool) (\(g :'b -> 'c lift).
   ((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'c lift -> 'c lift -> bool)
   ((((lift_compose :('b -> 'c lift) -> ('a -> 'b lift) -> 'a ->
                     'c lift) $2)
   ((lift_fun :('a -> 'b) -> 'a -> 'b lift) $1)) $0)) ($2 ($1
   $0)))))))))`),
 ((lift_compose_ASSOC),
  [],
  `((! :(('c -> 'd lift) -> bool) -> bool) (\(h :'c -> 'd lift).
   ((! :(('b -> 'c lift) -> bool) -> bool) (\(g :'b -> 'c lift).
   ((! :(('a -> 'b lift) -> bool) -> bool) (\(f :'a -> 'b lift).
   (((= :('a -> 'd lift) -> ('a -> 'd lift) -> bool)
   (((lift_compose :('c -> 'd lift) -> ('a -> 'c lift) -> 'a ->
                    'd lift) $2)
   (((lift_compose :('b -> 'c lift) -> ('a -> 'b lift) -> 'a ->
                    'c lift) $1) $0)))
   (((lift_compose :('b -> 'd lift) -> ('a -> 'b lift) -> 'a ->
                    'd lift)
   (((lift_compose :('c -> 'd lift) -> ('b -> 'c lift) -> 'b ->
                    'd lift) $2) $1)) $0))))))))`),
 ((lift_fun_domain_TOTAL),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   (((= :('a -> bool) -> ('a -> bool) -> bool)
   ((part_fun_domain :('a -> 'b lift) -> 'a -> bool)
   ((lift_fun :('a -> 'b) -> 'a -> 'b lift) $0))) (\(x :'a). T))))`),
 ((lift_fun_ASSOC_THM),
  [],
  `((! :(('b -> 'c) -> bool) -> bool) (\(g :'b -> 'c).
   ((! :(('a -> 'b) -> bool) -> bool) (\(f :'a -> 'b).
   ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'c lift -> 'c lift -> bool)
   (((lift_fun :('b -> 'c) -> 'b -> 'c lift) $2) ($1 $0)))
   (((lift_fun :('a -> 'c) -> 'a -> 'c lift)
   (((o :('b -> 'c) -> ('a -> 'b) -> 'a -> 'c) $2) $1)) $0))))))))`),
 ((disjoint_domians_modify_commute),
  [],
  `((! :(('a -> 'b lift) -> bool) -> bool) (\(f :'a -> 'b lift).
   ((! :(('a -> 'b lift) -> bool) -> bool) (\(g :'a -> 'b lift). ((==>
   (((disjoint_domains :('a -> 'b lift) -> ('a -> 'b lift) -> bool)
   $1) $0)) (((= :('a -> 'b lift) -> ('a -> 'b lift) -> bool)
   (((modify_part_fun :('a -> 'b lift) -> ('a -> 'b lift) -> 'a ->
                       'b lift) $1) $0))
   (((modify_part_fun :('a -> 'b lift) -> ('a -> 'b lift) -> 'a ->
                       'b lift) $0) $1)))))))`),
 ((part_fun_domain_undef_lemma),
  [],
  `((! :('b -> bool) -> bool) (\(x :'b). (~
   (((part_fun_domain :('b -> 'a lift) -> 'b -> bool) (\(x :'b).
   (undefined :'a lift))) $0))))`),
 ((part_fun_domain_lemma),
  [],
  `((! :(('a -> 'b lift) -> bool) -> bool) (\(f :'a -> 'b lift).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :bool -> bool -> bool)
   (((part_fun_domain :('a -> 'b lift) -> 'a -> bool) $1) $0))
   ((is_defined :'b lift -> bool) ($1 $0)))))))`),
 ((part_fun_range_lemma),
  [],
  `((! :(('a -> 'b lift) -> bool) -> bool) (\(f :'a -> 'b lift).
   ((! :('a -> bool) -> bool) (\(x :'a). ((==>
   ((is_defined :'b lift -> bool) ($1 $0)))
   (((part_fun_range :('a -> 'b lift) -> 'b -> bool) $1)
   ((lower :'b lift -> 'b) ($1 $0))))))))`),
 ((modify_ID),
  [],
  `((! :(('a -> 'b lift) -> bool) -> bool) (\(f :'a -> 'b lift). ((/\
   (((= :('a -> 'b lift) -> ('a -> 'b lift) -> bool)
   (((modify_part_fun :('a -> 'b lift) -> ('a -> 'b lift) -> 'a ->
                       'b lift) (empty_part_fun :'a -> 'b lift)) $0))
   $0)) (((= :('a -> 'b lift) -> ('a -> 'b lift) -> bool)
   (((modify_part_fun :('a -> 'b lift) -> ('a -> 'b lift) -> 'a ->
                       'b lift) $0) (empty_part_fun :'a -> 'b lift)))
   $0))))`)]
