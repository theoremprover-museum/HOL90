head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	96.02.08.00.45.04;	author drs1004;	state Exp;
branches;
next	;


desc
@@


1.1
log
@New theory mechanism, code reorganisation and other enhancements by Don Syme.
@
text
@(* ===================================================================== *)
(* FILE          : Num_induct.sml                                        *)
(* DESCRIPTION   : Provides a forward inference rule and a tactic for    *)
(*                 induction over numbers.Translated from hol88.         *)
(*                                                                       *)
(* AUTHORS       : (c) Mike Gordon and                                   *)
(*                     Tom Melham, University of Cambridge               *)
(* TRANSLATOR    : Konrad Slind, University of Calgary                   *)
(* DATE          : September 15, 1991                                    *)
(* ===================================================================== *)


structure Naturals : Naturals_sig =
struct 

open Parse Pterms;
open Thm Drule Tactic Induction Manager0;

open num;  (* create dependency on "num" theory. DRS *)

val ERR = Exception.ERR "Naturals";
val WRAP_ERR = Exception.WRAP_ERR "Naturals";

val SUC = --`SUC`--;
fun mk_SUC tm = mk_comb(SUC,tm);
fun dest_SUC tm = 
    if (is_comb tm andalso rator tm = SUC) then (rand tm)
    else ERR("dest_SUC","");
val num_ty = ==`:num`==;
val zero =  mk_const("0", num_ty);

val INDUCTION = theorem "num" "INDUCTION";
    
(* --------------------------------------------------------------------- *)
(* INDUCT: (thm * thm) -> thm                                            *)
(*                                                                       *)
(*   A1 |- t[0]      A2 |- !n. t[n] ==> t[SUC n]                         *)
(* -----------------------------------------------                       *)
(*             A1 u A2 |- !n. t[n]                                       *)
(* --------------------------------------------------------------------- *)

local
val v1 = genvar bool_ty 
and v2 = genvar bool_ty
in
fun INDUCT (base,step) =
   let val (Bvar,Body) = dest_forall(concl step)
       val (ant,_) = dest_imp Body
       val P  = mk_abs(Bvar, ant)
       val P0 = mk_comb(P,zero)
       val Pv = mk_comb(P,Bvar)
       val PSUC = mk_comb(P,mk_SUC Bvar)
       val base' = EQ_MP (SYM(BETA_CONV P0)) base 
       and step'  = SPEC Bvar step 
       and hypth  = SYM(RIGHT_BETA(REFL Pv)) 
       and concth = SYM(RIGHT_BETA(REFL PSUC)) 
       and IND    = SPEC P INDUCTION 
       val template = mk_eq(concl step',mk_imp(v1,v2))
       val th1 = SUBST [{var = v1, thm = hypth},{var = v2, thm = concth}]
                       template
                       (REFL (concl step'))
       val th2 = GEN Bvar (EQ_MP th1 step')
       val th3 = SPEC Bvar (MP IND (CONJ base' th2)) 
   in
   GEN Bvar (EQ_MP (BETA_CONV(concl th3)) th3)
   end
   handle e => WRAP_ERR("INDUCT",e)
end;

(* --------------------------------------------------------------------- *)
(*             [A] !n.t[n]                                               *)
(*  ================================                                     *)
(*   [A] t[0]  ,  [A,t[n]] t[SUC x]                                      *)
(* --------------------------------------------------------------------- *)

fun INDUCT_TAC g = INDUCT_THEN INDUCTION ASSUME_TAC g 
                   handle e => WRAP_ERR("INDUCT_TAC", e);

end; (* Num_induction *)
@
