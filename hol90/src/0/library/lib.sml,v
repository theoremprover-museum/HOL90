head	1.5;
access;
symbols
	HOL97:1.4.0.4
	bpHOL97:1.4
	hol90_9_alpha:1.4
	hol90_pre8_for_multiple_compilers:1.4.0.2
	hol90_pre8_after_donalds_separate_compilation_changes:1.3
	hol90_8_after_merging_Konrad_Elsa:1.2
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.5
date	95.12.18.11.23.06;	author drs1004;	state Exp;
branches;
next	1.4;

1.4
date	95.11.15.13.29.46;	author rjb;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	95.10.31.15.04.29;	author drs1004;	state Exp;
branches;
next	1.2;

1.2
date	95.10.18.16.37.27;	author drs1004;	state Exp;
branches;
next	1.1;

1.1
date	95.10.16.13.30.05;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.30.05;	author rjb;	state Exp;
branches;
next	;

1.4.4.1
date	97.06.11.17.25.47;	author kxs;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Preterm and other changes, see 7.changes
@
text
@(* ===================================================================== *)
(* FILE          : library.sml                                           *)
(* DESCRIPTION   : Provides functionality for HOL libraries.             *)
(*                                                                       *)
(* AUTHOR        : Konrad Slind, University of Calgary                   *)
(*                                                                       *)
(* DATE          : December 9, 1991                                      *)
(*                                                                       *)
(* Modified      : Dec 25, 1992 (kls)                                    *)
(*                 Builds on modifications made by Elsa Gunter.          *)
(*                 New library scheme: library info held in data         *)
(*                 structure instead of on a disk file. Can then write a *)
(*                 load_library function that works uniformly on the     *)
(*                 data structure.                                       *)
(*                                                                       *)
(*                 Jan 12, 1993 (kls)                                    *)
(*                 Changed to be more like theories: libraries are       *)
(*                 represented on disk, are accessible once more via a   *)
(*                 path, which is OK, since the evil of paths has been   *)
(*                 circumvented.                                         *)
(*                                                                       *)
(*                 March 23, 1993 (kls)                                  *)
(*                 Bugfix to load_library - it needs to find the theories*)
(*                 of a library wrt the "path" field of the library, not *)
(*                 the theory_path.                                      *)
(*                                                                       *)
(*                 October, 1994 (kls)                                   *)
(*                 Changed semantics of "load_library" so that given a   *)
(*                 theory name not equal to the current theory, it will  *)
(*                 always declare that theory.                           *)
(*                                                                       *)
(*                 October 1995 (drs)                                    *)
(*                 Added prim_load_library' to accept a loader which     *)
(*                 takes a list of files as its argument, to support     *)
(*                 quicker loading under CM.                             *)
(* ===================================================================== *)


(* In the following, there is a general confusion between "the" library and 
   a library. The library contains all the libraries. Unfortunately.
*)
functor LIBRARY ((* structure Lib : Lib_sig *)
		 structure Help : Help_sig
		 structure Theory : Theory_sig
                 structure Lib_io : Lib_io_sig): Library_sig = 
struct
structure Theory = Theory;
structure Lib_data = Lib_io.Lib_data


fun LIBRARY_ERR{function,message} =
    Exception.HOL_ERR{origin_structure = "Library",
		      origin_function = function,
		      message = message}

val slash = "/";

abstype lib = Lib of {lib_id : Lib_data.lib_id,
                      doc : string,
                      path : string ref,
                      parents : lib list,
                      theories : string list,
                      code : string list,
                      help : string list,
                      loaded : string}
with

val the_current_library = ref {the_known_libs  = []:lib list,
                               the_loaded_libs = []:lib list};


fun known_libraries() = #the_known_libs(!the_current_library)
fun loaded_libraries() = #the_loaded_libs(!the_current_library)

fun lib_id (Lib{lib_id,...}) = lib_id;
fun lib_name (Lib{lib_id,...}) = Lib_data.lib_id_name lib_id;

fun lib_eq (Lib{lib_id = lib_id1,...}) (Lib{lib_id = lib_id2,...}) =
          Lib_data.lib_id_eq(lib_id1, lib_id2);

fun lib_id_assoc lid =
   let fun assc [] = NONE
         | assc ((lib as Lib{lib_id,...})::rst) = 
              if (Lib_data.lib_id_eq(lib_id,lid))
              then (SOME lib)
              else assc rst
   in assc
   end;

fun lib_str_assoc str =
   let fun assc [] = NONE
         | assc ((lib as Lib{lib_id,...})::rst) = 
              if (str = Lib_data.lib_id_name lib_id)
              then (SOME lib)
              else assc rst
   in assc
   end;

fun is_loaded (Lib{lib_id,...}) = 
   case (lib_id_assoc lib_id (loaded_libraries()))
     of NONE => false
      | _ => true;


fun known_library_names() = map lib_name (known_libraries())
fun is_known s = Lib.mem s (known_library_names());

fun perform_atomic_library_op (f:unit->unit) =
   let val hp = !Globals.help_path
       val thp = !Globals.theory_path
       val clib = !the_current_library
   in Theory.perform_atomic_theory_op f
      handle e => (Globals.help_path := hp; 
                   Globals.theory_path := thp;
                   the_current_library := clib;
                   raise e)
   end;
                  

fun lib_theory_path prefix = prefix^"theories/"^Globals.theory_file_type^slash;


fun dest_library (Lib{lib_id,doc,path,parents,theories,code,help,...}) =
    {name = Lib_data.lib_id_name lib_id,
     doc = doc, path = !path, parents = parents, 
     theories = theories,code=code,help=help}


(*------------------------------------------------------------------------*)
(* So what does new_library do?                                           *)
(*                                                                        *)
(*    0. Appends the theories to the theory path                          *)
(*    1. externalizes the library in a ".hol_lib" file. Written at the    *)
(*       hd of library_path.                                              *)
(*    2. returns the library                                              *)
(*------------------------------------------------------------------------*)
val std_fn = fn () => ()
val loaded_cell = ref std_fn


fun new_library {name,doc,path,parents,theories,code,help,loaded} =
   let val new_lib_id = Lib_data.new_lib_id name
       val extern_lib = Lib_data.mk_lib_data
                          {lib_id = new_lib_id,doc = doc,path = path,
                           parents = map lib_id parents,
                           theories = theories,code = code,
                           help = help,loaded = loaded}
       val _ = Lib_io.write_lib_to_disk(Portable.List.hd(!Globals.library_path), extern_lib)
       val new_lib = Lib {lib_id = new_lib_id,doc = doc,path = ref path,
                          parents = parents,theories = theories,code = code,
                          help = help,loaded = loaded}
       val {the_known_libs, the_loaded_libs} = !the_current_library
   in
    case theories of [] => ()
    | _ => Lib.append_path (lib_theory_path path) Globals.theory_path;
    the_current_library := {the_known_libs = new_lib::the_known_libs,
                            the_loaded_libs = the_loaded_libs};
    Lib.say("\nThe library "^Lib.quote name^" has been declared and exported.\n");
    new_lib
   end;


(* If we come to add a new parent and it is not already a parent (or 
 * the current theory) and we are already in draft mode, make it a new 
 * parent; otherwise fail.
 *************************************************************************)
fun add_new_parent ances sprefix s =
     if Lib.mem s ances
     then ()
     else if Theory.draft_mode()
        then Theory.new_parent (sprefix^s)
	    handle Exception.HOL_ERR{origin_structure,origin_function,message} =>
             raise LIBRARY_ERR{function="load_library.add_new_parent",
                  message = origin_structure^"."^origin_function^": "^message}
        else raise LIBRARY_ERR{function="load_library.add_new_parent",
               message = Lib.quote s^" is not a parent theory, and can not be \
                \ added as a parent theory because we are not in draft mode."}

(* Documentation : see doc/library.html. *)
(*----------------------------------------------------------------------*)
(* So what does load_library do?                                        *)
(*                                                                      *)
(*   1. declares new theory if necessary                                *)
(*   2. loads parent libraries                                          *)
(*   3. does new_parent-ing, if necessary                               *)
(*   4. import code, binary if possible                                 *)
(*   5. adjust help path                                                *)
(*   6. apply loaded                                                    *)
(*   7. updates "loaded_libs"                                           *)
(*   8. If any exceptions raised, clean up as best as possible.         *)
(*----------------------------------------------------------------------*)

fun prim_load_library' code_loader 
         {lib as Lib{lib_id,doc,path,parents,theories,code,help,loaded},
          theory} =
   let val name = Lib_data.lib_id_name lib_id
       val quoted_name = "library "^Lib.quote name
   in
   if (is_loaded lib)
   then Lib.say ("\nThe "^quoted_name^" is already loaded.\n")
   else 
let fun f() =
   let val theory = if (theory = "-") then Theory.current_theory() else theory
       val heritage = Theory.current_theory()::(Theory.ancestry"-")
       val lib_code_path = (!path)^"src/"
       val lib_help_path = (!path)^"help/"
       val lib_thy_path = lib_theory_path (!path)
       fun load_parent_libs ([],_) = ()
         | load_parent_libs (P,str) = 
           (map (fn lib => prim_load_library' code_loader {lib=lib,theory=str})
                P;
              Lib.say ("\n  The parent libraries of "^quoted_name^
                       " have been loaded.\n"))
    in
    (if (theory = Theory.current_theory())
     then ()
     else Theory.new_theory theory
     ;
     load_parent_libs (parents, theory)
     ;
     case theories of [] => ()
     | L => (map (add_new_parent heritage lib_thy_path) L
             ;
             Lib.say("\n  The theories belonging to "^quoted_name^
                     " have been incorporated.\n"))
     ;
     case code of [] => ()
     | L => (code_loader (map (fn s => (lib_code_path^s)) L);
             Lib.say("\n  The code of "^quoted_name^" has been loaded.\n"))
     ;
     (case help of [] => Lib.cons_path lib_help_path Globals.help_path
     | L => Lib.rev_itlist(fn p => fn _ => 
                          Lib.cons_path (lib_help_path^p)Globals.help_path)
                       L ())
     ;
     Lib.say("\n  The help path for "^quoted_name^" has been adjusted.\n")
     ;
     (* this is before the call to "loaded" because at the time of
      * dumping the final image of the system, which is done in the
      * "loaded" section of hol_lib in 3/sys_lib, hol_lib needs
      * to be thought of as loaded, otherwise we get 
      * .../library/HOL/theories/ascii put on the theory_path, but that
      * is a bogus path and bound to be confusing.
      *)
     the_current_library := {the_known_libs = known_libraries(),
                             the_loaded_libs = lib::(loaded_libraries())}
     ;
     loaded_cell := std_fn;
     Portable.use_string("val _ = (Library.loaded_cell := ("^loaded^"))");
     (!loaded_cell) ()
     ;
     Lib.say ("\nThe "^quoted_name^" is loaded.\n"))
     end
in
 Lib.say ("\nLoading the "^quoted_name^".\n");
 perform_atomic_library_op f
end
end;

fun prim_load_library loader = prim_load_library' (fn files => map loader files);


val load_library = prim_load_library' Portable.load;

(*------------------------------------------------------------------------*)
(* So what does load_library_in_place do? It does exactly the same stuff  *)
(* as load_library, but it refuses to leave its current theory.           *)
(*------------------------------------------------------------------------*)

fun load_library_in_place lib = load_library{lib = lib, theory = "-"};

(* We look for the library in known_libraries; if not there, then on disk.
 * Returns a lib suitable for loading.
 *)
fun find_library_by_id id =
   case (lib_id_assoc id (known_libraries()))
     of (SOME L) => L
      | NONE => 
        let val data = Lib_io.get_lib_by_uid (!Globals.library_path) id
            val {lib_id,doc,path,parents,theories,code,help,loaded} = 
                                Lib_data.dest_lib_data data
            val parent_libs = map find_library_by_id parents
            val _ = if (Portable.List.null theories)
                    then ()
                    else Lib.append_path (lib_theory_path path) Globals.theory_path
            val lib = Lib{lib_id = lib_id,doc = doc,path = ref path,
                          parents = parent_libs,theories = theories,
                          code = code,help = help,loaded = loaded}
        in the_current_library := {the_known_libs = lib::(known_libraries()),
                                   the_loaded_libs = loaded_libraries()};
           lib
        end;

fun get_library_from_disk str =
   let val data = Lib_io.get_lib_by_name (!Globals.library_path) str
       val {lib_id,doc,path,parents,theories,code,help,loaded} = 
                                Lib_data.dest_lib_data data
       val parent_libs = map find_library_by_id parents
       val _ = if (Portable.List.null theories)
               then ()
               else Lib.append_path (lib_theory_path path) Globals.theory_path
       val lib = Lib{lib_id = lib_id,doc = doc,path = ref path,
                     parents = parent_libs,theories = theories,
                     code = code,help = help,loaded = loaded}
   in the_current_library := {the_known_libs = lib::(known_libraries()),
                              the_loaded_libs = loaded_libraries()};
      lib
   end;

fun find_library str =
   case (lib_str_assoc str (known_libraries()))
     of (SOME L) => L
      | NONE => get_library_from_disk str;


(* Unfortunately, moving a library (maybe I should call it "new_library_path")
 * will not move the paths that were added by the library to the theory_path.
 * Maybe structured paths are the answer:
 *
 *    datatype path = Absolute of {prefix:string, name}
 *                  | ??
 ****************************************************************************)
fun move_library(Lib{path,...},new) = (path := new);

(* Ought to be a Lib.op_remove *)
fun del L =
   let fun d [] = []
         | d (a::rst) = if (lib_eq L a) then rst else a::(d rst)
   in d
   end;
 
fun delete_library L =
   if (Lib.op_mem lib_eq L (loaded_libraries()))
   then raise LIBRARY_ERR{function = "delete_library",
                 message="the library is loaded and hence can not be removed."}
   else if (Portable.List.exists
	    (fn (Lib{parents,...}) => Lib.op_mem lib_eq L parents) 
	    (known_libraries()))
        then raise LIBRARY_ERR{function = "delete_library",
                 message = "the library is a parent to an existing library and\
                           \ can not be removed."}
        else the_current_library := {the_known_libs=del L (known_libraries()),
                                     the_loaded_libs = loaded_libraries()};


fun lib_help{lib = Lib{path,help,...}, topic} = 
    Help.helper (map (fn d => ((!path)^"help/"^d^slash)) help) topic;


(* Prettyprinting *)

fun pp_library ppstrm (Lib{lib_id,doc,parents,...}) =
   let val {add_string,add_break,begin_block,end_block,add_newline,...} =
                  PP.with_ppstream ppstrm
       val bbc = begin_block PP.CONSISTENT
       val bbi = begin_block PP.INCONSISTENT
       val eb = end_block
       val S = add_string 
       fun comma() = S ","
       fun lbracket() = S "["
       fun rbracket() = S "]"
       fun space() = add_break(1,0)
       val nl = add_newline
       fun pr_sml_list f L = 
          ( bbc 1;lbracket();PP.pr_list f comma space L;rbracket();eb())
   in
     bbc 0;
     S ("library name: "^Lib_data.lib_id_name lib_id);
     nl();
     bbc 0; S "description:"; space(); S doc; eb();
     nl();
     bbc 0; S "parents:"; space(); pr_sml_list (S o lib_name) parents; eb();
     nl();
     end_block ()
   end handle e => (Lib.say "Error in prettyprinting library description!";
                    raise e);
  
  
end; (* abstype *)

end; (* LIBRARY *)
@


1.4
log
@The HOL90 sources have been changed to allow for the use of different
Standard ML compilers (possibly simultaneously).

 * Many files in "src/0" changed to make them more portable across different
   ML compilers. Various additions have been made to the Portable structure
   and files changed to access identifiers in the Portable structure rather
   than from the global environment. Worthy of special note are:

   - The pointer equality used in "src/0/term.sml" has been made into a
     function in the Portable structure.

   - The ML-Lex and ML-Yacc files for the various parsers have been changed
     to access the Portable structure. Both the source files and the SML
     produced from them have been changed but I have not verified that the
     source files would reproduce the new SML versions if ML-Lex and ML-Yacc
     were to be rerun on them. The changes involve some hacks that exploit the
     way ML-Lex and ML-Yacc work. See the sources for details.

R.J.Boulton, 15th November 1995.
@
text
@d249 1
a249 1
     Lib.eval_string("val _ = (Library.loaded_cell := ("^loaded^"))");
@


1.4.4.1
log
@Removed files are parse files and portability files that have
effectively been moved elsewhere.

Modified files are up to date for ML 109.26.
@
text
@d42 2
a43 1
functor LIBRARY (structure Help : Help_sig
d120 1
a120 2
fun lib_theory_path prefix = 
                    prefix^"theories/"^SysParams.theory_file_type^slash;
d163 1
a163 2
(*---------------------------------------------------------------------------
 * If we come to add a new parent and it is not already a parent (or 
d166 1
a166 1
 *---------------------------------------------------------------------------*)
d168 2
a169 1
     if Lib.mem s ances then ()
d171 3
a173 3
       then Theory.new_parent (sprefix^s)
            handle Exception.HOL_ERR{origin_structure,origin_function,message} 
            => raise LIBRARY_ERR{function="load_library.add_new_parent",
d249 1
a249 1
     Lib.use_string("val _ = (Library.loaded_cell := ("^loaded^"))");
d316 1
a316 2
(*---------------------------------------------------------------------------
 * Unfortunately, moving a library (maybe I should call it "new_library_path")
d322 1
a322 1
 *---------------------------------------------------------------------------*)
@


1.3
log
@First phase of hol90.8 development.  hol90 now compiles using NJSML-CM
108.5, with separate compilation of libraries.  System dependencies
have been isolated in the makefiles and "portable.sml".

This involved a large number of enhancments to the source files,
most of which are documented in the 7.changes file (or will be shortly).
See also the correpsonding email corrspondence between RJB, KLS, TFM,
JRH and DRS that happened during this development.
@
text
@d148 1
a148 1
       val _ = Lib_io.write_lib_to_disk(hd(!Globals.library_path), extern_lib)
d283 1
a283 1
            val _ = if (null theories)
d299 1
a299 1
       val _ = if (null theories)
@


1.2
log
@Check in after merging in Konrad's changes made after
the release of hol90.7.  This involved creating a side branch
in which to check in Konrad's changes, then merging in that
side branch into the main development (which contains changes
made by Elsa Gunter).

Some other small modification have been made to the source code,
as I begun to try to make this version into a working version:
	- hol90 will now be compiled in an environment were no
structures can be considered opn.  This means many structures
now need "open Lib" and other such commands at their head.
This has not yet been completed, but has been begun.
	- "rotl" and "rotr" have been added to Lib, something
which I just did impulsively.   Documentation files
have also been added in help/90.
@
text
@d31 5
d193 1
a193 1
fun prim_load_library code_loader 
d210 1
a210 1
           (map (fn lib => prim_load_library code_loader {lib=lib,theory=str})
d228 1
a228 1
     | L => (map (fn s => code_loader (lib_code_path^s)) L;
d260 1
a261 1
val load_library = prim_load_library Lib.compile;
d263 2
d336 1
a336 1
   else if (Sml_system.List.exists
@


1.1
log
@Initial revision
@
text
@d37 3
a39 1
functor LIBRARY (structure Theory : Theory_sig
d47 3
a49 2
        HOL_ERR{origin_structure = "Library", origin_function = function,
	        message = message}
d101 1
a101 1
fun is_known s = mem s (known_library_names());
d153 1
a153 1
    Lib.say("\nThe library "^quote name^" has been declared and exported.\n");
d167 1
a167 1
               handle HOL_ERR{origin_structure,origin_function,message} =>
d227 1
a227 1
     | L => rev_itlist(fn p => fn _ => 
d278 1
a278 1
                    else append_path (lib_theory_path path) Globals.theory_path
d294 1
a294 1
               else append_path (lib_theory_path path) Globals.theory_path
d326 1
a326 1
   if (op_mem lib_eq L (loaded_libraries()))
d329 3
a331 2
   else if (exists (fn (Lib{parents,...}) => op_mem lib_eq L parents) 
                   (known_libraries()))
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
