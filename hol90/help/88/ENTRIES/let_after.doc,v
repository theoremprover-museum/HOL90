head	1.1;
branch	1.1.1;
access;
symbols
	HOL97:1.1.1.1.0.6
	bpHOL97:1.1.1.1
	hol90_9_alpha:1.1.1.1
	hol90_pre8_for_multiple_compilers:1.1.1.1.0.4
	hol90_pre8_after_donalds_separate_compilation_changes:1.1.1.1
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.10.16.13.34.57;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.34.57;	author rjb;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@\DOC let_after

\TYPE {let_after : ((string # string # string list) -> void)}

\SYNOPSIS
Makes an ML declaration dynamically after other pending declarations.

\DESCRIBE
The call
{
   let_after(`x`,`f`,[`arg1`;...;`argn`])
}
\noindent puts an ML declaration
{
   let x = f [`arg1`;...;`argn`];;
}
\noindent at the end of the queue of currently pending toplevel items. It will
be evaluated after the phrase which invoked {let_after}, and any other pending
evaluations. This gives a way of performing declarations dynamically. Note that
the first two argument strings are interpreted as single identifiers, whereas
the arguments are passed as literal strings.

\FAILURE
Never fails, although the subsequent declaration may well fail for any of the
usual reasons.

\EXAMPLE
{
#let fn = \l:(string)list. 1;;
fn = - : (string list -> int)

#let_after(`x`,`fn`,[]);;
() : void

x = 1 : int

#x;;
1 : int
}
\USES
Performing variants on autoloading.

\SEEALSO
inject_input, let_before, ML_eval.

\ENDDOC
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
