head	1.4;
access;
symbols
	HOL97:1.3.0.4
	bpHOL97:1.3
	hol90_9_alpha:1.3
	hol90_pre8_for_multiple_compilers:1.3.0.2
	hol90_pre8_after_donalds_separate_compilation_changes:1.3
	hol90_8_after_merging_Konrad_Elsa:1.3
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.4
date	95.12.18.11.34.50;	author drs1004;	state Exp;
branches;
next	1.3;

1.3
date	95.10.18.16.37.06;	author drs1004;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	95.10.17.17.07.14;	author drs1004;	state Exp;
branches;
next	1.1;

1.1
date	95.10.16.13.29.55;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.29.55;	author rjb;	state Exp;
branches
	1.1.1.1.2.1;
next	;

1.1.1.1.2.1
date	95.10.17.18.42.58;	author drs1004;	state Exp;
branches;
next	;

1.3.4.1
date	97.07.11.15.05.33;	author kxs;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Preterm and other changes, see 7.changes
@
text
@(* ===================================================================== *)
(* FILE          : net.sml                                               *)
(* DESCRIPTION   : Implementation of term nets, from the group at ICL.   *)
(*                 Thanks! A term net is a database, keyed by terms.     *)
(*                 Term nets were initially implemented by Larry Paulson *)
(*                 for Cambridge LCF.                                    *)
(*                                                                       *)
(* AUTHOR        : Somebody in the ICL group.                            *)
(* DATE          : August 26, 1991                                       *)
(* MODIFIED      : Sept 5, 1992, to use deBruijn representation          *)
(* ===================================================================== *)


functor NET (structure Term : Private_term_sig) : Net_sig =
struct
open Lib;
structure Term = Term;

val NET_ERR = Exception.ERR "Net";
    
datatype term_label = V | Cnst of string | Cmb | Lam;

(* A bit convoluted, since we really only want to see the constructor for the
   term. Unfortunately, doing that for Abs requires a full traversal to 
   replace the bound variable with a free one. Therefore we make separate
   checks for abstractions and bound variables.
*) 
fun label_of tm =
   if (Term.is_abs tm) then Lam
   else if (Term.is_bvar tm) then V
        else case (Term.dest_term tm)
             of Term.COMB _ => Cmb
              | Term.CONST{Name,...} => Cnst Name
              | _ => V;

datatype 'a net = NODE of (term_label * 'a net) list | TIP of ('a list)

val empty_net = NODE [];

fun get_edge label =
   let fun get (NODE edges) = 
              (case (Lib.assoc1 label edges)
                 of (SOME (_,net)) => net
                  | NONE => empty_net)
         | get (TIP _) = NET_ERR("get_edge", "tips have no edges")
   in get
   end;

fun get_tip_list (TIP L) = L
  | get_tip_list (NODE _) = [];

fun is_empty_node (NODE []) = true
  | is_empty_node _ = false;

fun follow tm net =
   let val var_net = get_edge V net
       val label = label_of tm
       val othernets = 
          case label
            of V => [] 
             | (Cnst _) => [get_edge label net] 
             | Lam => follow (#Body(Term.break_abs tm)) (get_edge label net)
             | Cmb => let val {Rator,Rand} = Term.dest_comb tm
                      in Lib.itlist(fn i => fn A => (follow Rator i @@ A))
                                   (follow Rand (get_edge label net))
                                   []
                      end
   in Lib.gather (not o is_empty_node) (var_net::othernets)
   end;

fun overwrite (p as (a,_)) = 
  let fun over [] = [p]
        | over ((q as (x,_))::rst) = if (a=x) then p::rst else q::over rst
  in over 
  end;


fun net_update elem =
   let 
   fun update deferred tm (net as (NODE edges)) =
        let fun exec_deferred [] net = TIP (elem::get_tip_list net)
              | exec_deferred (h::rst) net = update rst h net
            val label = label_of tm
            val child = get_edge label net
            val new_child = 
              case label
                of V => exec_deferred deferred child 
                 | (Cnst _) => exec_deferred deferred child 
                 | Cmb => let val {Rator, Rand} = Term.dest_comb tm
                          in update (Rator::deferred) Rand child
                          end
                 | Lam => update deferred (#Body(Term.break_abs tm)) child
        in NODE (overwrite (label,new_child) edges)
        end
     | update _ _ (TIP _) = NET_ERR("net_update","can not update a tip")
   in update
   end

fun enter (tm,elem) net = net_update elem [] tm net;

fun lookup tm net = itlist (fn (TIP L) => (fn A => (L@@A)) | (NODE _) => I)
                           (follow tm net)  [];

end; (* NET *)

@


1.3
log
@Check in after merging in Konrad's changes made after
the release of hol90.7.  This involved creating a side branch
in which to check in Konrad's changes, then merging in that
side branch into the main development (which contains changes
made by Elsa Gunter).

Some other small modification have been made to the source code,
as I begun to try to make this version into a working version:
	- hol90 will now be compiled in an environment were no
structures can be considered opn.  This means many structures
now need "open Lib" and other such commands at their head.
This has not yet been completed, but has been begun.
	- "rotl" and "rotr" have been added to Lib, something
which I just did impulsively.   Documentation files
have also been added in help/90.
@
text
@d14 1
a14 2
functor NET ((* structure Lib : Lib_sig *)
	     structure Term : Term_sig) : Net_sig =
d19 2
a20 4
fun NET_ERR{function,message} = Exception.HOL_ERR{origin_structure = "Net",
						  origin_function = function,
						  message = message}

d45 1
a45 2
         | get (TIP _) = raise NET_ERR{function = "get_edge",
                                       message = "tips have no edges"}
d95 1
a95 2
     | update _ _ (TIP _) = raise NET_ERR{function = "net_update",
                                          message = "can not update a tip"}
@


1.3.4.1
log
@Massive minor changes to close HOL up so as to make it CM-friendly and
some changes to accomodate SML'97.
@
text
@d14 2
a15 1
functor NET (structure Term : Term_sig) : Net_sig =
@


1.2
log
@Keeping you up to date:

I'm about to do a checkin of elsa's modifications to the hol90.7
sources to create her hol90.pre8.  To recap what I've done:
	- I checked out hol90 (in /usr/groups/hol/drs1004/hol90)
		cvs co hol90
	  (Well, to be honest, I only checked out those
	  parts of hol90 I knew I'd be changing, e.g. not the
	  Manual, and only parts of the library.  Checking out the
	  entire source takes a while, mainly due to the enormous number
	  of help files.  The limiting factor is files/second, which
         runs at around 5 when CVS is working on nfs over a network, not
         KB/second, which you might at first think it would be).

	- By doing a recursive diff between Elsa's source and the
	hol90.7 source I found all the changes Elsa had made to
	source files.  I copied relevant files from Elsa's source
	into my checked out version.  The only new files were
		- the sml_system files in src/0
		- some make scripts in src/.
	Changed files were in:
		src/{0,1,2,3}
		library/arith/src/thm_convs.sml
		library/list/src/list_conv1.sml
		library/num/src/num_lib.sml
		library/prog_logic/src/halts_logic.sml
		library/prog_logic/src/translation.sml
		library/prog_logic/theories/src/mk_halts.sml
		library/real/theories/src/Make
		library/real/theories/src/equiv.sml
		library/real/theories/src/seq.sml
		library/reduce/src/arithconv.sml
		library/string/src/string_conv.sml
		library/unity/theories/src/aux_definitions.sml
		library/word/theories/src/*

	- I will now commit these changes, with this email as the log message.
		cvs commit

	- Tomorrow I will get this version compiling
	with NJSML 108 (I will probably add
	the files to enable the NJSML compilation manager to make
	this easier), then check those changes in.  I think it's
	good to get things in a working state.
@
text
@d17 1
d26 5
d32 6
a37 10
   if (Term.is_comb tm)
   then Cmb
   else if (Term.is_abs tm)
        then Lam
        else if (Term.is_const tm)
             then Cnst (#Name(Term.dest_const tm))
             else if ((Term.is_var tm) orelse (Term.is_bvar tm))
                  then V
                  else raise NET_ERR{function = "label_of",
				     message = "not translatable"};
d75 3
a77 6
fun overwrite (a,b) = 
  let fun over [] = [(a,b)]
        | over ((x,y)::rst) = 
              if (a=x)
              then (a,b)::rst
              else (x,y)::(over rst)
d106 2
a107 4
fun lookup tm net = Lib.itlist (fn (TIP L) => (fn A => (L@@A))
                                 | (NODE _) => Lib.I)
                               (follow tm net)
                               [];
@


1.1
log
@Initial revision
@
text
@d14 2
a15 1
functor NET (Term : Term_sig) : Net_sig =
d19 3
a21 3
fun NET_ERR{function,message} = HOL_ERR{origin_structure = "Net",
					origin_function = function,
					message = message}
d43 1
a43 1
              (case (assoc1 label edges)
d66 3
a68 3
                      in itlist(fn i => fn A => (follow Rator i @@ A))
                               (follow Rand (get_edge label net))
                               []
d70 1
a70 1
   in gather (not o is_empty_node) (var_net::othernets)
d107 4
a110 4
fun lookup tm net = itlist (fn (TIP L) => (fn A => (L@@A))
                             | (NODE _) => I)
                           (follow tm net)
                           [];
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@


1.1.1.1.2.1
log
@Konrad's bug fixes up to start of serious
hol90.8 devel;opment.  Checked into branch revision for
later merging with trunk (elsa's work).  See
doc/7.chages for a full description of what's been done.
@
text
@a23 5
(* A bit convoluted, since we really only want to see the constructor for the
   term. Unfortunately, doing that for Abs requires a full traversal to 
   replace the bound variable with a free one. Therefore we make separate
   checks for abstractions and bound variables.
*) 
d25 10
a34 6
   if (Term.is_abs tm) then Lam
   else if (Term.is_bvar tm) then V
        else case (Term.dest_term tm)
             of Term.COMB _ => Cmb
              | Term.CONST{Name,...} => Cnst Name
              | _ => V;
d72 6
a77 3
fun overwrite (p as (a,_)) = 
  let fun over [] = [p]
        | over ((q as (x,_))::rst) = if (a=x) then p::rst else q::over rst
d106 4
a109 2
fun lookup tm net = itlist (fn (TIP L) => (fn A => (L@@A)) | (NODE _) => I)
                           (follow tm net)  [];
@
