head	4.1;
access;
symbols
	HOL90-7:4.1;
locks
	slind:4.1; strict;
comment	@# @;


4.1
date	94.09.10.03.42.51;	author jim;	state Exp;
branches;
next	0.1;

0.1
date	94.05.24.05.42.00;	author jug;	state Exp;
branches;
next	0.0;

0.0
date	94.05.12.00.13.36;	author jug;	state Exp;
branches;
next	;


desc
@General window closing rules.
@


4.1
log
@Version released with HOL90.7.
@
text
@(*--------------------------------------------------------------------------*)
(*                  Copyright (c) Jim Grundy 1992                           *)
(*                  All rights reserved                                     *)
(*                                                                          *)
(* Jim Grundy, hereafter referred to as `the Author', retains the copyright *)
(* and all other legal rights to the Software contained in this file,       *)
(* hereafter referred to as `the Software'.                                 *)
(*                                                                          *)
(* The Software is made available free of charge on an `as is' basis. No    *)
(* guarantee, either express or implied, of maintenance, reliability,       *)
(* merchantability or suitability for any purpose is made by the Author.    *)
(*                                                                          *)
(* The user is granted the right to make personal or internal use of the    *)
(* Software provided that both:                                             *)
(* 1. The Software is not used for commercial gain.                         *)
(* 2. The user shall not hold the Author liable for any consequences        *)
(*    arising from use of the Software.                                     *)
(*                                                                          *)
(* The user is granted the right to further distribute the Software         *)
(* provided that both:                                                      *)
(* 1. The Software and this statement of rights are not modified.           *)
(* 2. The Software does not form part or the whole of a system distributed  *)
(*    for commercial gain.                                                  *)
(*                                                                          *)
(* The user is granted the right to modify the Software for personal or     *)
(* internal use provided that all of the following conditions are observed: *)
(* 1. The user does not distribute the modified software.                   *)
(* 2. The modified software is not used for commercial gain.                *)
(* 3. The Author retains all rights to the modified software.               *)
(*                                                                          *)
(* Anyone seeking a licence to use this software for commercial purposes is *)
(* invited to contact the Author.                                           *)
(*--------------------------------------------------------------------------*)
(*============================================================================*)
(* CONTENTS: generic and basic window inference rules                         *)
(*============================================================================*)
(*$Id: basic_close.sml,v 0.1 1994/05/24 05:42:00 jug Exp $*)

structure BasicClose : sig end =

struct

(*      (|- f = g)                                                           *)
(* --------------------  RATOR_CLOSE "f x"                                   *)
(*  (|- (f x) = (g x))                                                       *)
fun RATOR_CLOSE tm th = (AP_THM th (rand tm))
                        handle _ => WIN_ERR{function="RATOR_CLOSE",message=""};

(*      (|- x = y)                                                           *)
(* -------------------- RAND_CLOSE "f x"                                     *)
(*  (|- (f x) = (f y))                                                       *)
fun RAND_CLOSE tm th = (AP_TERM (rator tm) th)
                       handle _ => WIN_ERR{function="RAND_CLOSE",message=""};

(*       (|- t = u)                                                          *)
(* ---------------------- BODY_CLOSE "\x.t"                                  *)
(*  (|- (\x.t) = (\x.u))                                                     *)
fun BODY_CLOSE tm th = (ABS (bndvar tm) th)
                       handle _ => WIN_ERR{function="BODY_CONV",message=""};

val COND1_THM =
    prove
    (
        (--`!R A B C D. (!x:'a. R x x) ==>
            (A ==> R B D) ==> (R (A => B | C) (A => D | C))`--)
    ,
        (REPEAT GEN_TAC) THEN
        DISCH_TAC THEN
        (BOOL_CASES_TAC (--`A:bool`--)) THEN
        (ASM_REWRITE_TAC [])
    );

(*            (A |- B R D)                                                   *)
(* --------------------------------- COND1_CLOSE "A => B | C"                *)
(*  (|- (A => B | C) R (A => D | C)                                          *)
fun COND1_CLOSE tm th =
    let val {cond=a,larm=b,rarm=c} = dest_cond tm
        and d = rand (concl th)
        and r = rator (rator (concl th)) in
    let val x = genvar (type_of b) in
    let val rref =
            GEN x (reflexive (mk_comb{Rator=(mk_comb{Rator=r,Rand=x}),Rand=x}))
    in
        MP (MP (ISPECL [r,a,b,c,d] COND1_THM) rref) (DISCH a th)
    end end end;


val COND2_THM =
    prove
    (
        (--`!R A B C D. (!x:'a. R x x) ==>
            ((~A) ==> R C D) ==> (R (A => B | C) (A => B | D))`--)
    ,
        (REPEAT GEN_TAC) THEN
        DISCH_TAC THEN
        (BOOL_CASES_TAC (--`A:bool`--)) THEN
        (ASM_REWRITE_TAC [])
    );

(*          (~A |- C R D)                                                    *)
(* --------------------------------- COND2_CLOSE "A => B | C"                *)
(*  (|- (A => B | C) R (A => B | D)                                          *)
fun COND2_CLOSE tm th =
    let val {cond=a,larm=b,rarm=c} = dest_cond tm 
        val d = rand (concl th)
        val r = rator (rator (concl th)) in
    let val x = genvar (type_of c) in
    let val rref =
            GEN x (reflexive (mk_comb{Rator=(mk_comb{Rator=r,Rand=x}),Rand=x}))
    in
        MP (MP (ISPECL [r,a,b,c,d] COND2_THM) rref) (DISCH (mk_neg a) th)
    end end end;

val BODY2_THM =
    prove
    (
        (--`!(c:'a) (f:'a->'b) (g:'a->'b) (r:'b->'b->bool).
            (!v:'a. (v=c) ==> (r (f v) (g v))) ==> (r (f c) (g c))`--)
    ,
        (REPEAT STRIP_TAC) THEN
        (REWRITE_TAC 
            [
                REWRITE_RULE []
                    (SPEC (--`c:'a`--)
                        (ASSUME (--`
                                !v:'a. (v = c) ==> (r:'b->'b->bool)(f v)(g v)
                            `--)))])
    );


(*        (v = c |- u R t)                                                   *)
(* ----------------------------- BODY2_CLOSE "((\v.u) c)"                    *)
(*  (|- ((\v.u) c) R ((\v.t) c)                                              *)
fun BODY2_CLOSE tm th =
    let val {Rator=vu,Rand=c} = dest_comb tm in
    let val {Bvar=v,Body=u} = dest_abs vu
        and t = rand (concl th)
        and r = rator (rator (concl th)) in
    let val vt = mk_abs{Bvar=v,Body=t} 
    in
        if mem v (flatten (map free_vars (hyp th))) then
            let val t1 = GEN v (DISCH (mk_eq{lhs=v,rhs=c}) th) in
            let val t2 = ISPECL [c,vu,vt,r] BODY2_THM in
            let val t3 =
                CONV_RULE
                    (RATOR_CONV (RAND_CONV (RAND_CONV (ABS_CONV (RAND_CONV
                        (RATOR_CONV (RAND_CONV BETA_CONV)))))))
                    t2 in
            let val t4 =
                CONV_RULE
                    (RATOR_CONV (RAND_CONV (RAND_CONV (ABS_CONV (RAND_CONV
                        (RAND_CONV BETA_CONV))))))
                    t3 in
                MP t4 t1
            end end end end
        else
            let val t1 = BETA_CONV (mk_comb{Rator=mk_abs{Bvar=v,Body=u},Rand=v})
                and t2 = SYM (BETA_CONV (mk_comb{Rator=vt,Rand=v}))
            in
                INST [{redex=c,residue=v}]
                     (transitive (CONJ (transitive (CONJ t1 th)) t2))
            end
    end end end;

val LET_THM =
    prove
    (
        (--`!(c:'a) (f:'a->'b) (g:'a->'b) (r:'b->'b->bool).
            (!v:'a. (v=c) ==> (r (f v) (g v))) ==>
                (r (LET f c) (LET g c))`--)
    ,
        (REPEAT STRIP_TAC) THEN
        (PURE_ONCE_REWRITE_TAC [LET_DEF]) THEN
        BETA_TAC THEN
        (REWRITE_TAC
            [REWRITE_RULE
                []
                (SPEC (--`c:'a`--)
                      (ASSUME
                        (--`!v:'a. (v = c) ==> (r:'b->'b->bool)(f v)(g v)`--)
                      ))])
    );

(*             (v = c |- u R t)                                              *)
(* ----------------------------------------- LET_CLOSE "let v = c in u"      *)
(*  (|- (let v = c in u) R (let v = c in t)                                  *)
fun LET_CLOSE tm th =
    let val {func=vu,arg=c} = dest_let tm in
    let val {Bvar=v,Body=u} = dest_abs vu
        and t = rand (concl th)
        and r = rator (rator (concl th)) in
    let val vt = mk_abs{Bvar=v,Body=t} in
    let val t1 = GEN v (DISCH (mk_eq{lhs=v,rhs=c}) th) in
    let val t2 = ISPECL [c,vu,vt,r] LET_THM in
    let val t3 = CONV_RULE
                    (RATOR_CONV (RAND_CONV (RAND_CONV (ABS_CONV (RAND_CONV
                    (RATOR_CONV (RAND_CONV BETA_CONV)))))))
                    t2 in
    let val t4 = CONV_RULE
                    (RATOR_CONV (RAND_CONV (RAND_CONV (ABS_CONV (RAND_CONV
                    (RAND_CONV BETA_CONV))))))
                    t3
    in
        MP t4 t1
    end end end end end end end;

(* Put all those rules in the data base.                                     *)

val dummy =
(
store_rule
    (
        [RATOR], 
        is_comb, 
        (fn targ => fn rel =>
            let val ty = type_of (rator targ) in
                mk_const{Name="=",Ty=(fun_type [ty,ty,bool])}
            end),  
        (fn targ => fn rel => mk_const{Name="=",Ty=(type_of rel)}),
        K [], 
        RATOR_CLOSE
    );
store_rule
    (
        [RAND],
        is_comb,
        (fn targ => fn rel =>
            let val ty = type_of (rand targ) in
                mk_const{Name="=",Ty=(fun_type [ty,ty,bool])}
            end),
        (fn targ => fn rel => mk_const{Name="=",Ty=(type_of rel)}),
        K [],
        RAND_CLOSE
    );
store_rule
    (
        [BODY],
        is_abs,
        (fn targ => fn rel => 
            let val ty = ran targ in
                mk_const{Name="=",Ty=(fun_type [ty,ty,bool])}
            end),
        (fn targ => fn rel => mk_const{Name="=",Ty=(type_of rel)}),
        K [],
        BODY_CLOSE
    );
store_rule
    (
        [RATOR,RAND],
        is_cond,
        K I,
        K I,
        (fn tm => SMASH (ASSUME (rand (rator (rator tm))))),
        COND1_CLOSE
    );
store_rule
    (
        [RAND],
        is_cond,
        K I,
        K I,
        (fn tm => SMASH (ASSUME (mk_neg (rand (rator (rator tm)))))),
        COND2_CLOSE
    );
store_rule
    (
        [RATOR,BODY],
        (fn tm => (is_comb tm) andalso (is_abs (rator tm))),
        K I,
        K I,
        (fn tm => 
            let val v = bndvar (rator tm) in
	       [ASSUME (mk_eq{lhs=v,rhs=(rand tm)})]
            end),
        BODY2_CLOSE
    );
store_rule
    (
        [RATOR,RAND,BODY],
        (fn tm => is_let tm),
        K I,
        K I,
        (fn tm => 
            let val {func=vu,arg=c} = (dest_let tm) in
            let val v = (#Bvar (dest_abs vu)) in
                [ASSUME (mk_eq{lhs=v,rhs=c})]
            end end),
        LET_CLOSE
    )
);
end;
@


0.1
log
@Reverse the direction of all the close rules as relations in the
system now have the opposite since.
The extry in the rule table for finding the assumptions of the child
window now just gets passed the focus of the parent and just returns
the new assumptions.
The entry in the rule table for finding the variables bound by a rule has
been dropped.
@
text
@d37 1
a37 1
(*$Id: basic_close.sml,v 0.0 1994/05/12 00:13:36 jug Exp jug $*)
@


0.0
log
@*** empty log message ***
@
text
@d37 1
a37 1
(*$Id: basic_close.ml,v 3.1 1993/12/07 14:15:19 jg Exp $*)
d44 1
a44 1
(* --------------------  RATOR_CLOSE "g x"                                   *)
d49 3
a51 3
(*      (|- y = x)                                                           *)
(* --------------------- RAND_CLOSE "f x"                                    *)
(*  (|- (f y) = (f x))                                                       *)
d55 2
a56 2
(*       (|- t = u)                                                          *) 
(* ---------------------- BODY_CLOSE "\x.u"                                  *)
d65 1
a65 1
            (A ==> R D B) ==> (R (A => D | C) (A => B | C))`--)
d73 1
a73 1
(*            (A |- D R B)                                                   *)
d75 1
a75 1
(*  (|- (A => D | C) R (A => B | C)                                          *)
d78 1
a78 1
        and d = rand (rator (concl th))
d87 1
d92 1
a92 1
            ((~A) ==> R D C) ==> (R (A => B | D) (A => B | C))`--)
d100 1
a100 1
(*          (~A |- D R C)                                                    *)
d102 1
a102 1
(*  (|- (A => B | D) R (A => B | C)                                          *)
d105 1
a105 1
        val d = rand (rator (concl th))
d132 1
a132 1
(* ----------------------------- BODY2_CLOSE "((\v.t) c)"                    *)
d135 5
a139 4
    let val {Rator=vt,Rand=c} = dest_comb tm in
    let val {Bvar=v,Body=t} = dest_abs vt
        and  u = rand (rator (concl th))
        and r = rator (rator (concl th))
d143 1
a143 1
            let val t2 = ISPECL [c,mk_abs{Bvar=v,Body=u},vt,r] BODY2_THM in
d163 1
a163 1
    end end;
d185 1
a185 1
(* ----------------------------------------- LET_CLOSE "let v = c in t"      *)
d188 3
a190 3
    let val {func=vt,arg=c} = dest_let tm in
    let val {Bvar=v,Body=t} = dest_abs vt
        and u = rand (rator (concl th))
d192 1
d194 1
a194 1
    let val t2 = ISPECL [c,mk_abs{Bvar=v,Body=u},vt,r] LET_THM in
d205 1
a205 1
    end end end end end end;
d220 1
a220 2
        KI, 
        K [],
a231 1
        KI,
d244 1
a244 2
        KI,
        (fn tm => [bndvar tm]),
d253 1
a253 2
        (fn tm => fn tl => (SMASH (ASSUME (rand (rator (rator tm))))) @@ tl),
        K [],
d262 1
a262 3
        (fn tm => fn tl =>
            (SMASH (ASSUME (mk_neg (rand (rator (rator tm)))))) @@ tl),
        K [],
d271 1
a271 1
        (fn tm => fn tl => 
d273 1
a273 1
                       ((ASSUME (mk_eq{lhs=v,rhs=(rand tm)}))::tl)
a274 1
        (fn tm => [bndvar (rator tm)]),
d283 4
a286 4
        (fn tm => fn tl =>
            let val {func=vt,arg=c} = (dest_let tm) in
            let val v = (#Bvar (dest_abs vt)) in
                (ASSUME (mk_eq{lhs=v,rhs=c})):: tl
a287 1
        (fn foc => [bndvar (rand (rator foc))]),
@
