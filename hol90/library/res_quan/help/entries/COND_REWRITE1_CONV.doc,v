head	1.1;
branch	1.1.1;
access;
symbols
	HOL97:1.1.1.1.0.6
	bpHOL97:1.1.1.1
	hol90_9_alpha:1.1.1.1
	hol90_pre8_for_multiple_compilers:1.1.1.1.0.4
	hol90_pre8_after_donalds_separate_compilation_changes:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.10.16.13.33.25;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.33.25;	author rjb;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@\DOC COND_REWRITE1_CONV

\TYPE {COND_REWRITE1_CONV : (thm list -> thm -> conv)}

\SYNOPSIS
A simple conditional rewriting conversion.

\KEYWORDS
conversion, rewriting, conditional.

\DESCRIBE
{COND_REWRITE1_CONV} is a front end of the conditional rewriting
conversion {COND_REWR_CONV}. The input theorem should be in the following form
{
   A |- !x11 ... . P1 ==> ... !xm1 ... . Pm ==> (!x ... . Q = R)
}
\noindent where each antecedent {Pi} itself may be a conjunction or disjunction.
This theorem is transformed to a standard form expected by
{COND_REWR_CONV} which carries out the actual rewriting.
The transformation is performed by {COND_REWR_CANON}. The search function
passed to {COND_REWR_CONV} is {search_top_down}. The effect of applying
the conversion {COND_REWRITE1_CONV ths th} to a term {tm} is to derive a theorem
{
  A' |- tm = tm[R'/Q']
}
\noindent where the right hand side of the equation is obtained by rewriting
the input term {tm} with an instance of the conclusion of the input theorem. 
The theorems in the list {ths} are used to discharge the assumptions
generated from the antecedents of the input theorem. 

\FAILURE
{COND_REWRITE1_CONV ths th}  fails if {th} cannot be transformed into the
required form by {COND_REWR_CANON}. Otherwise, it fails if no match
is found or the theorem cannot be instantiated.

\EXAMPLE
The following example illustrates a straightforward use of {COND_REWRITE1_CONV}.
We use the built-in theorem {LESS_MOD} as the input theorem.
{
   #LESS_MOD;;
   Theorem LESS_MOD autoloading from theory `arithmetic` ...
   LESS_MOD = |- !n k. k < n ==> (k MOD n = k)

   |- !n k. k < n ==> (k MOD n = k)

   #COND_REWRITE1_CONV [] LESS_MOD "2 MOD 3";;
   2 < 3 |- 2 MOD 3 = 2

   #let less_2_3 = REWRITE_RULE[LESS_MONO_EQ;LESS_0]
   #(REDEPTH_CONV num_CONV "2 < 3");;
   less_2_3 = |- 2 < 3

   #COND_REWRITE1_CONV [less_2_3] LESS_MOD "2 MOD 3";;
   |- 2 MOD 3 = 2

}
\noindent In the first example, an empty theorem list is supplied to
{COND_REWRITE1_CONV} so the resulting theorem has an assumption
{2 < 3}. In the second example, a list containing a theorem {|- 2 < 3}
is supplied, the resulting theorem has no assumptions.

\SEEALSO
COND_REWR_TAC, COND_REWRITE1_TAC, COND_REWR_CONV, 
COND_REWR_CANON, search_top_down.

\ENDDOC

@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
