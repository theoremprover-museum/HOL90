thid = (order, 784894825, 179120)
axioms = []
definitions =
[((MONOTONIC),
  [],
  `((! :(('a list -> 'a list) -> bool) -> bool)
   (\(f :'a list -> 'a list). (((= :bool -> bool -> bool)
   ((MONOTONIC :('a list -> 'a list) -> bool) $0))
   ((! :('a list -> bool) -> bool) (\(s :'a list).
   ((! :('a list -> bool) -> bool) (\(t :'a list). ((==>
   (((LEQ :'a list -> 'a list -> bool) $1) $0))
   (((LEQ :'a list -> 'a list -> bool) ($2 $1)) ($2 $0))))))))))`),
 ((IN_TRACE),
  [],
  `((! :('a list -> bool) -> bool) (\(s :'a list).
   ((! :('a list -> bool) -> bool) (\(t :'a list).
   (((= :bool -> bool -> bool) (((In :'a list -> 'a list -> bool) $1)
   $0)) ((? :('a list -> bool) -> bool) (\(u :'a list).
   ((? :('a list -> bool) -> bool) (\(v :'a list).
   (((= :'a list -> 'a list -> bool) $2)
   (((APPEND :'a list -> 'a list -> 'a list) $1)
   (((APPEND :'a list -> 'a list -> 'a list) $3) $0))))))))))))`),
 ((PREFIX),
  [],
  `((! :('a list -> bool) -> bool) (\(s :'a list).
   ((! :('a list -> bool) -> bool) (\(t :'a list).
   (((= :bool -> bool -> bool) (((LEQ :'a list -> 'a list -> bool) $1)
   $0)) ((? :('a list -> bool) -> bool) (\(u :'a list).
   (((= :'a list -> 'a list -> bool)
   (((APPEND :'a list -> 'a list -> 'a list) $2) $0)) $1))))))))`)]
theorems =
[((TOT_ORDER_PREFIX),
  [],
  `((! :('a list -> bool) -> bool) (\(s :'a list).
   ((! :('a list -> bool) -> bool) (\(t :'a list).
   ((! :('a list -> bool) -> bool) (\(v :'a list). ((==> ((/\
   (((LEQ :'a list -> 'a list -> bool) $2) $0))
   (((LEQ :'a list -> 'a list -> bool) $1) $0))) ((\/
   (((LEQ :'a list -> 'a list -> bool) $2) $1))
   (((LEQ :'a list -> 'a list -> bool) $1) $2)))))))))`),
 ((ST_IND_PREFIX'),
  [],
  `((! :('a list -> bool) -> bool) (\(s :'a list).
   ((! :('a list -> bool) -> bool) (\(t :'a list).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :bool -> bool -> bool)
   (((LEQ :'a list -> 'a list -> bool)
   (((CONS :'a -> 'a list -> 'a list) $0) $2)) $1)) ((/\ (~
   (((= :'a list -> 'a list -> bool) $1) (NIL :'a list)))) ((/\
   (((= :'a -> 'a -> bool) $0) ((HD :'a list -> 'a) $1)))
   (((LEQ :'a list -> 'a list -> bool) $2) ((TL :'a list -> 'a list)
   $1)))))))))))`),
 ((ST_IND_PREFIX),
  [],
  `((! :('a list -> bool) -> bool) (\(s :'a list).
   ((! :('a list -> bool) -> bool) (\(t :'a list).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :bool -> bool -> bool)
   (((LEQ :'a list -> 'a list -> bool)
   (((APPEND :'a list -> 'a list -> 'a list)
   (((CONS :'a -> 'a list -> 'a list) $0) (NIL :'a list))) $2)) $1))
   ((/\ (~ (((= :'a list -> 'a list -> bool) $1) (NIL :'a list))))
   ((/\ (((= :'a -> 'a -> bool) $0) ((HD :'a list -> 'a) $1)))
   (((LEQ :'a list -> 'a list -> bool) $2) ((TL :'a list -> 'a list)
   $1)))))))))))`),
 ((TRANS_PREFIX),
  [],
  `((! :('a list -> bool) -> bool) (\(s :'a list).
   ((! :('a list -> bool) -> bool) (\(t :'a list).
   ((! :('a list -> bool) -> bool) (\(v :'a list). ((==> ((/\
   (((LEQ :'a list -> 'a list -> bool) $2) $1))
   (((LEQ :'a list -> 'a list -> bool) $1) $0)))
   (((LEQ :'a list -> 'a list -> bool) $2) $0))))))))`),
 ((ANTI_SYM),
  [],
  `((! :('a list -> bool) -> bool) (\(s :'a list).
   ((! :('a list -> bool) -> bool) (\(t :'a list). ((==> ((/\
   (((LEQ :'a list -> 'a list -> bool) $1) $0))
   (((LEQ :'a list -> 'a list -> bool) $0) $1)))
   (((= :'a list -> 'a list -> bool) $1) $0))))))`),
 ((REFLEXIVE),
  [],
  `((! :('a list -> bool) -> bool) (\(s :'a list).
   (((LEQ :'a list -> 'a list -> bool) $0) $0)))`),
 ((LEAST),
  [],
  `((! :('a list -> bool) -> bool) (\(s :'a list).
   (((LEQ :'a list -> 'a list -> bool) (NIL :'a list)) $0)))`)]
