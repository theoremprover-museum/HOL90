head	1.1;
branch	1.1.1;
access;
symbols
	HOL97:1.1.1.1.0.6
	bpHOL97:1.1.1.1
	hol90_9_alpha:1.1.1.1
	hol90_pre8_for_multiple_compilers:1.1.1.1.0.4
	hol90_pre8_after_donalds_separate_compilation_changes:1.1.1.1
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.10.16.13.35.23;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.35.23;	author rjb;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@\DOC prove_rec_fn_exists

\TYPE {prove_rec_fn_exists : (thm -> term -> thm)}

\SYNOPSIS
Proves the existence of a primitive recursive function over a concrete recursive
type.

\DESCRIBE
{prove_rec_fn_exists} is a version of {new_recursive_definition} which proves
only that the required function exists; it does not make a constant
specification.  The first argument is a theorem of the form returned by
{define_type}, and the second is a user-supplied primitive recursive function
definition.  The theorem which is returned asserts the existence of the
recursively-defined function in question (if it is primitive recursive over the
type characterized by the theorem given as the first argument).  See the entry
for {new_recursive_definition} for details.

\FAILURE
As for {new_recursive_definition}.

\EXAMPLE
Given the following primitive recursion theorem for labelled binary trees:
{
   |- !f0 f1.
        ?! fn.
        (!x. fn(LEAF x) = f0 x) /\
        (!b1 b2. fn(NODE b1 b2) = f1(fn b1)(fn b2)b1 b2)
}
\noindent {prove_rec_fn_exists} can be used to prove the existence of primitive
recursive functions over binary trees.  Suppose the value of {th} is this
theorem.  Then the existence of a recursive function {Leaves}, which computes
the number of leaves in a binary tree, can be proved as shown below:
{
   #prove_rec_fn_exists th
   #  "(Leaves (LEAF (x:*)) = 1) /\
   #   (Leaves (NODE t1 t2) = (Leaves t1) + (Leaves t2))";;
   |- ?Leaves. (!x. Leaves(LEAF x) = 1) /\
               (!t1 t2. Leaves(NODE t1 t2) = (Leaves t1) + (Leaves t2))
}
\noindent The result should be compared with the example given under
{new_recursive_definition}.

\SEEALSO
define_type, new_recursive_definition.

\ENDDOC
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
