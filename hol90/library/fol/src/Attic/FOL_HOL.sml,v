head	1.1;
access;
symbols
	HOL97:1.1.2.1.0.2
	bpHOL97:1.1.2.1
	hol90_9_alpha:1.1.2.1
	hol90_pre8_for_multiple_compilers:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	96.08.06.12.06.48;	author rjb;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.08.06.12.06.49;	author rjb;	state Exp;
branches
	1.1.2.1.2.1;
next	;

1.1.2.1.2.1
date	97.06.11.18.23.39;	author kxs;	state Exp;
branches;
next	1.1.2.1.2.2;

1.1.2.1.2.2
date	97.07.11.19.42.36;	author kxs;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file FOL_HOL.sml was initially added on branch hol90_pre8_for_multiple_compilers.
@
text
@@


1.1.2.1
log
@New library fol.
@
text
@a0 140
(* ========================================================================= 
 * FOL <---> HOL
 * ========================================================================= *)

structure FOL_HOL : FOL_HOL_sig = 
struct

open LiteLib FOL Term Type Psyntax;
    
(* ------------------------------------------------------------------------- *)
(* Translate a term (in NNF) into the shadow syntax.                         *)
(* ------------------------------------------------------------------------- *)

val (reset_vars,fol_of_var,hol_of_var) =
    let val vstore = ref []
	and gstore = ref []
	and vcounter = ref 0 
	fun inc_vcounter() =
	    let val n = !vcounter 
		val m = n + 1 
	    in 
		if m >= offinc then failwith "inc_vcounter: inc_vcounter: too many variables" 
		else (vcounter := m; n) 
	    end
	fun reset_vars() = (vstore := []; gstore := []; vcounter := 0)
	fun fol_of_var v =
	    let val currentvars = !vstore 
	    in assoc v currentvars 
		handle Subscript =>
		    let val n = inc_vcounter()
		    in (vstore := (v,n)::currentvars; n)
			end
		    end
		
	fun hol_of_var v =
	    rev_assoc v (!vstore)
	    handle Subscript => rev_assoc v (!gstore)
		handle Subscript => failwith "hol_of_var"
	fun hol_of_bumped_var v =
	    hol_of_var v 
	    handle HOL_ERR _ => 
		let val v' = v mod offinc 
		    val hv' = hol_of_var v' 
		    val gv = genvar(type_of hv') 
		in (gstore := (gv,v)::(!gstore); gv)
		end
    in ( reset_vars,fol_of_var,hol_of_bumped_var)
    end;
    
val false_tm = (--`F`--);

val (reset_consts,fol_of_const,hol_of_const) =
  let val cstore = ref ([(false_tm,1)]:(term * int)list)
      and ccounter = ref 2
      fun reset_consts() = (cstore := [(false_tm,1)]; ccounter := 2)
      fun fol_of_const c =
	  let val currentconsts = !cstore
	  in assoc c currentconsts 
	      handle Subscript => 
		  let val n = !ccounter 
		  in (ccounter := n + 1; cstore := (c,n)::currentconsts; n)
		  end
	  end
      fun hol_of_const c = 
	  rev_assoc c (!cstore) handle Subscript => failwith "hol_of_const"
  in (reset_consts,fol_of_const,hol_of_const)
  end;;

fun fol_of_term env consts tm =
  if is_var tm andalso not (mem tm consts) then
    Var(fol_of_var tm)
  else
    let val (f,args) = strip_comb tm
    in if mem f env then failwith "fol_of_term: higher order" 
       else let val ff = fol_of_const f
	    in Fnapp(ff,map (fol_of_term env consts) args)
	    end
    end;;

fun fol_of_atom env consts tm =
  let val (f,args) = strip_comb tm
  in if mem f env then failwith "fol_of_atom: higher order" else
      let val ff = fol_of_const f
      in (ff,map (fol_of_term env consts) args)
      end
  end;;

fun fol_of_literal env consts tm =
    let val tm' = dest_neg tm 
	val (p,a) = fol_of_atom env consts tm'
    in (~p,a)
    end
    handle HOL_ERR _ => fol_of_atom env consts tm;;

fun fol_of_form env consts tm =
  let val (v,bod) = dest_forall tm 
      val fv = fol_of_var v 
      val fbod = fol_of_form (v::env) (subtract consts [v]) bod 
  in  Forall(fv,fbod)
  end
  handle HOL_ERR _ => 
      let val (l,r) = dest_conj tm 
	  val fl = fol_of_form env consts l
	  and fr = fol_of_form env consts r 
      in Conj(fl,fr)
      end
  handle HOL_ERR _ => 
      let val (l,r) = dest_disj tm 
	  val fl = fol_of_form env consts l
	  and fr = fol_of_form env consts r 
      in Disj(fl,fr)
      end
  handle HOL_ERR _ =>
      Atom(fol_of_literal env consts tm);;

(* ------------------------------------------------------------------------- *)
(* Conversion of a FOL shadow term back into HOL.                            *)
(* ------------------------------------------------------------------------- *)

fun hol_of_term tm =
  case tm of
    Var v => hol_of_var v
  | Fnapp(f,args) => list_mk_comb(hol_of_const f,map hol_of_term args);;

(* ------------------------------------------------------------------------- 
 * Further translation functions for HOL formulas.                           
 *
 * ------------------------------------------------------------------------- *)

fun hol_of_atom (p,args) =
  list_mk_comb(hol_of_const p,map hol_of_term args);;

fun hol_of_literal (p,args) =
  if p < 0 then mk_neg(hol_of_atom(~p,args))
  else hol_of_atom (p,args);;


end (* struct *)


@


1.1.2.1.2.1
log
@Changes to accomodate move to SML/NJ 109.26.
@
text
@d14 5
a18 4
local val vstore = ref ([]:(term*int) list)
      and gstore = ref ([]:(term*int) list)
      and vcounter = ref 0 
      fun inc_vcounter() =
d22 1
a22 2
		if m >= offinc 
                then failwith "inc_vcounter: too many variables"
d25 5
a29 6
       fun currentvars() = !vstore
in
fun reset_vars() = (vstore := []; gstore := []; vcounter := 0)
fun fol_of_var v =
   (assoc v (currentvars())
       handle Subscript =>
d31 3
a33 1
		    in (vstore := (v,n)::currentvars(); n) end)
d35 14
a48 13
fun hol_of_var v =
    rev_assoc v (currentvars())
    handle Subscript => rev_assoc v (!gstore)
	handle Subscript => failwith "hol_of_var"
fun hol_of_bumped_var v =
    hol_of_var v 
    handle HOL_ERR _ => 
	let val v' = v mod offinc 
	    val hv' = hol_of_var v' 
	    val gv = genvar(type_of hv') 
	in (gstore := (gv,v)::(!gstore); gv)
	end
end;
d52 2
a53 1
local val cstore = ref ([(false_tm,1)]:(term * int)list)
d55 8
a62 8
in
fun reset_consts() = (cstore := [(false_tm,1)]; ccounter := 2)
fun fol_of_const c =
  let val currentconsts = !cstore
  in assoc c currentconsts 
      handle Subscript => 
	  let val n = !ccounter 
	  in (ccounter := n + 1; cstore := (c,n)::currentconsts; n)
d64 4
a67 4
  end
fun hol_of_const c = 
  rev_assoc c (!cstore) handle Subscript => failwith "hol_of_const"
end;;
@


1.1.2.1.2.2
log
@Upgrade to CM. the file "folLib.sml" was added in order to give a single
structure for the library.
@
text
@d8 1
a8 9
type term = CoreHol.Term.term;

open liteLib;
open Exception;
open LiteLib FOL CoreHol;
open Type Term Dsyntax Psyntax Parse;

val mem = Lib.mem;
val subtract = Lib.subtract;
d136 2
@
