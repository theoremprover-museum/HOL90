#-------------------------------------------------------------------------
# Makefile for HOL90
#
# Standard ML Version: NJSML 108.5
# Compilation done using: CM
#
# We make the CM top level pervasive at the start of each use
# of sml-cm since CM functions are used to implement the loader
# in "Portable" (the loader uses CM to load a binary version of
# a file if one exists).  When you start up sml-cm the CM functions
# are only in the top level environment, not the pervasive environment.
#
# The loader itself is not used during the build sequence, but is used
# to load libraries.
#-------------------------------------------------------------------------

#-------------------------------------------------------------------------
# parameters
#-------------------------------------------------------------------------

SML_IMPL=njsml.108-cm
ARCH=unknown
HOL_DIR=..
THEORY_TYPE=ascii
# File to `use' before dumping HOL executable/heap/database
USE_FILE=

#-------------------------------------------------------------------------
# computed macros
#-------------------------------------------------------------------------

MAKE_IMPL=$(MAKE) -f Makefile.$(SML_IMPL) \
		  HOL90_VERSION=$(HOL90_VERSION) \
		  ARCH=$(ARCH) \
		  HOL_DIR=$(HOL_DIR) \
		  THEORY_TYPE=$(THEORY_TYPE) \
		  USE_FILE=$(USE_FILE)

BIN_DIR=$(HOL_DIR)/bin/$(SML_IMPL)
HEAP_DIR=$(BIN_DIR)/.heap
THEORY_SRC=$(HOL_DIR)/theories/src
THMS_DIR=$(HOL_DIR)/theories/$(THEORY_TYPE)
HOLSIG_DIR=$(HOL_DIR)/theories/$(THEORY_TYPE)

SML_CM=$(BIN_DIR)/sml-cm
SML=$(BIN_DIR)/sml

HOL0_HEAP=$(HEAP_DIR)/hol0.$(ARCH)
HOL1_HEAP=$(HEAP_DIR)/hol1.$(ARCH)
HOL2_HEAP=$(HEAP_DIR)/hol2.$(ARCH)
HOL3_HEAP=$(HEAP_DIR)/hol90.$(ARCH)
HOL90=$(BIN_DIR)/hol90

#fragments of ML code
HANDLE_HOL_ERR= \
	handle e => (print_HOL_ERR e; OS.Process.exit OS.Process.failure)

MAKE_TOPLEVEL_PERVASIVE=\
	local\
	   open Compiler.Environment\
	   val {get=pget,set=pset} = pervasiveEnvRef\
	   and {get=tget,set=tset} = topLevelEnvRef\
	in\
	   val _ = pset (concatEnv (tget (),pget ()))\
	   val _ = tset emptyEnv\
	end;

#-------------------------------------------------------------------------
# all
#-------------------------------------------------------------------------

all: check_sources hol lib_clean

#-------------------------------------------------------------------------
# check_sources
#-------------------------------------------------------------------------

check_sources:
	@-mkdir $(BIN_DIR) 2> /dev/null
	@if test -f $(BIN_DIR)/sml-cm; \
	 then echo \"sml-cm\" found; \
	 else echo \"sml-cm\" not found in $(BIN_DIR)/; \
	      echo Put a symbolic link to the CM executable there.; \
	      exit 1; \
	 fi
	@if test -f $(BIN_DIR)/sml; \
	 then echo \"sml\" found; \
	 else echo \"sml\" not found in $(BIN_DIR)/; \
	      echo Put a symbolic link to the Standard ML executable there.; \
	      exit 1; \
	 fi

#-------------------------------------------------------------------------
# hol0
#-------------------------------------------------------------------------

$(HOL0_HEAP): 0/* 0/library/* 0/theory/*
	@-mkdir $(BIN_DIR) 2> /dev/null
	@-mkdir $(HEAP_DIR) 2> /dev/null
	echo '$(MAKE_TOPLEVEL_PERVASIVE)' \
	     'Compiler.Control.quotation := true;' \
	     'CM.make'"'"' (CM.cmfile "0/sources.cm");' \
	     'use "0/hol0.sml";' \
	     'CM.export("$@",NONE);' \
	| $(SML_CM) 2>&1 | tee $(BIN_DIR)/log.$(ARCH).0

#-------------------------------------------------------------------------
# Theories built after hol0
#
# How we ensure theory files don't get rebuilt
# --------------------------------------------
#
# We carefully make the theories dependent only on their source,
# not on the executable which is used to process the source.
# This takes the optimistic approach that if a theory file
# is up-to-date with respect to its source then it is correct - even
# though it is possible the executable has changed the theory file format.
#
# To remake the theory files, go "make clobber" before you begin.
#
# Making the theory files not dependent on the executable 
# stops theory files getting rebuilt unnecessarily.
# However, we still need to force the make of the executable
# which processes the theory file if it doesn't exist at all!
# We do this by running a shell "if" command to do a
# make in the case where no executable is available.  
# Shell wizardry courtesy of Michael Norrish. 
#
# Note that the *only* reason we make the hol0, hol1
# and hol2 executables is to process the theory files they are
# used for.  These are not remade if the relevant theory files
# are up-to-date, even if some of the source they depend on
# have changed.  To force the make of a particular executable
# (e.g. hol1), try:
#
# 	make -f Makefile.njsml.108-cm ../bin/njsml.108-cm/.heap/hol1.arch
#
# Note that this means it is possible (and even normal) to make
# a hol3 executable without making hol0, hol1 or hol2 executables.
#
#                                                  DRS
#-------------------------------------------------------------------------

$(HOLSIG_DIR)/min.holsig: \
		$(THEORY_SRC)/min.sig \
		$(THEORY_SRC)/mk_min.sml
	@-mkdir $(HOLSIG_DIR) 2> /dev/null
	@if test ! -f $(HOL0_HEAP); then $(MAKE_IMPL) $(HOL0_HEAP); fi
	echo 'use "$(THEORY_SRC)/min.sig" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/mk_min.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @SMLload=$(HOL0_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).0

$(HOLSIG_DIR)/bool.holsig:  \
		$(HOLSIG_DIR)/min.holsig \
		$(THEORY_SRC)/exists.sig \
		$(THEORY_SRC)/mk_exists.sml \
		$(THEORY_SRC)/bool.sig \
		$(THEORY_SRC)/mk_bool.sml
	@-mkdir $(HOLSIG_DIR) 2> /dev/null
	@if test ! -f $(HOL0_HEAP); then $(MAKE_IMPL) $(HOL0_HEAP); fi
	echo 'use "$(THEORY_SRC)/min.sig" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/ld_min.sml" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/exists.sig" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/mk_exists.sml" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/bool.sig" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/mk_bool.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @SMLload=$(HOL0_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).0

#-------------------------------------------------------------------------
# hol1
#-------------------------------------------------------------------------

$(HOL1_HEAP): 0/* 0/library/* 0/theory/* 1/* $(HOLSIG_DIR)/bool.holsig
	@-mkdir $(BIN_DIR) 2> /dev/null
	@-mkdir $(HEAP_DIR) 2> /dev/null
	echo '$(MAKE_TOPLEVEL_PERVASIVE)' \
	     'Compiler.Control.quotation := true;' \
	     'CM.make'"'"' (CM.cmfile "1/sources.cm");' \
	     'use "0/hol0.sml";' \
	     'use "1/hol1.sml";' \
	     'CM.export("$@",NONE);' \
	| $(SML_CM) 2>&1 | tee $(BIN_DIR)/log.$(ARCH).1

#-------------------------------------------------------------------------
# Theories built after hol1
#-------------------------------------------------------------------------

$(HOLSIG_DIR)/combin.holsig: \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_combin.sml
	@if test ! -f $(HOL1_HEAP); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_combin.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @SMLload=$(HOL1_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).1

$(HOLSIG_DIR)/num.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_num.sml
	@if test ! -f $(HOL1_HEAP); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_num.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @SMLload=$(HOL1_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).1

$(HOLSIG_DIR)/one.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_one.sml
	@if test ! -f $(HOL1_HEAP); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_one.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @SMLload=$(HOL1_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).1

$(HOLSIG_DIR)/sum.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(HOLSIG_DIR)/combin.holsig \
		$(THEORY_SRC)/mk_sum.sml
	@if test ! -f $(HOL1_HEAP); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_sum.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @SMLload=$(HOL1_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).1

$(HOLSIG_DIR)/restr_binder.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_restr_binder.sml
	@if test ! -f $(HOL1_HEAP); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_restr_binder.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @SMLload=$(HOL1_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).1

$(HOLSIG_DIR)/pair.holsig:  \
		$(HOLSIG_DIR)/bool.holsig \
		$(THEORY_SRC)/mk_pair.sml
	@if test ! -f $(HOL1_HEAP); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_pair.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @SMLload=$(HOL1_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).1

$(HOLSIG_DIR)/BASIC_HOL.holsig:  \
		$(THEORY_SRC)/mk_BASIC_HOL.sml \
		$(HOLSIG_DIR)/bool.holsig \
		$(HOLSIG_DIR)/restr_binder.holsig \
		$(HOLSIG_DIR)/pair.holsig \
		$(HOLSIG_DIR)/sum.holsig \
		$(HOLSIG_DIR)/one.holsig \
		$(HOLSIG_DIR)/num.holsig
	@if test ! -f $(HOL1_HEAP); then $(MAKE_IMPL) $(HOL1_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_BASIC_HOL.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @SMLload=$(HOL1_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).1

#-------------------------------------------------------------------------
# hol2
#-------------------------------------------------------------------------

$(HOL2_HEAP): 0/* 0/library/* 0/theory/* 1/* 2/* $(HOLSIG_DIR)/BASIC_HOL.holsig
	@-mkdir $(BIN_DIR) 2> /dev/null
	@-mkdir $(HEAP_DIR) 2> /dev/null
	echo '$(MAKE_TOPLEVEL_PERVASIVE)' \
	     'Compiler.Control.quotation := true;' \
	     'CM.make'"'"' (CM.cmfile "2/sources.cm");' \
	     'use "0/hol0.sml";' \
	     'use "1/hol1.sml";' \
	     'use "2/hol2.sml";' \
	     'CM.export("$@",NONE);' \
	| $(SML_CM) 2>&1 | tee $(BIN_DIR)/log.$(ARCH).2

#-------------------------------------------------------------------------
# Theories built after hol2
#-------------------------------------------------------------------------

$(HOLSIG_DIR)/prim_rec.holsig:  \
		$(THEORY_SRC)/mk_prim_rec.sml
	@if test ! -f $(HOL2_HEAP); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_prim_rec.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @SMLload=$(HOL2_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).2

$(HOLSIG_DIR)/arithmetic.holsig:  \
		$(HOLSIG_DIR)/prim_rec.holsig \
		$(THEORY_SRC)/mk_arithmetic.sml
	@if test ! -f $(HOL2_HEAP); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_arithmetic.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @SMLload=$(HOL2_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).2

$(HOLSIG_DIR)/list.holsig:  \
		$(HOLSIG_DIR)/arithmetic.holsig \
		$(THEORY_SRC)/mk_list.sml \
		$(THEORY_SRC)/mk_list_thms.sml
	@if test ! -f $(HOL2_HEAP); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_list.sml" $(HANDLE_HOL_ERR);' \
	     'use "$(THEORY_SRC)/mk_list_thms.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @SMLload=$(HOL2_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).2

$(HOLSIG_DIR)/tree.holsig:  \
		$(HOLSIG_DIR)/list.holsig \
		$(THEORY_SRC)/mk_tree.sml
	@if test ! -f $(HOL2_HEAP); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_tree.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @SMLload=$(HOL2_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).2

$(HOLSIG_DIR)/ltree.holsig:  \
		$(HOLSIG_DIR)/tree.holsig \
		$(THEORY_SRC)/mk_ltree.sml
	@if test ! -f $(HOL2_HEAP); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_ltree.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @SMLload=$(HOL2_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).2

$(HOLSIG_DIR)/rec_type.holsig:  \
		$(HOLSIG_DIR)/ltree.holsig \
		$(THEORY_SRC)/mk_rec_type.sml
	@if test ! -f $(HOL2_HEAP); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_rec_type.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @SMLload=$(HOL2_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).2

$(HOLSIG_DIR)/HOL.holsig:  \
		$(HOLSIG_DIR)/rec_type.holsig \
		$(HOLSIG_DIR)/sum.holsig \
		$(HOLSIG_DIR)/restr_binder.holsig \
		$(HOLSIG_DIR)/one.holsig \
		$(THEORY_SRC)/mk_HOL.sml
	@if test ! -f $(HOL2_HEAP); then $(MAKE_IMPL) $(HOL2_HEAP); fi
	echo 'use "$(THEORY_SRC)/mk_HOL.sml" $(HANDLE_HOL_ERR);' \
	| $(SML) @SMLload=$(HOL2_HEAP) 2>&1 | tee -a $(BIN_DIR)/log.$(ARCH).2

#-------------------------------------------------------------------------
# hol3
#
# If the executable stops building, your best bet is to
# start up sml-cm and throw the build commands at it one by one.
# The code below is included here for your convenience (ML
# comments allow you to cut and paste it into a SML session).
#
# sml-cm
#     local open Compiler.Environment in (*
# *)       val _ = #set pervasiveEnvRef (concatEnv (#get topLevelEnvRef (), (*
# *)                                       #get pervasiveEnvRef ())); (*
# *)      val _ = #set topLevelEnvRef emptyEnv (*
# *)     end; (*
# *) Compiler.Control.quotation := true; (*
# *) fun m () = CM.make' (CM.cmfile "3/sources.cm"); (*
# *) fun c () = CM.recompile' (CM.cmfile "3/sources.cm"); (*
# *) m(); (*
# *) use "0/hol0.sml"; (*
# *) use "1/hol1.sml"; (*
# *) use "2/hol2.sml"; (*
# *) use "3/hol3.sml"; (*
# *) 
#-------------------------------------------------------------------------

$(HOL3_HEAP): 0/* 0/library/* 0/theory/* 1/* 2/* 3/* $(HOLSIG_DIR)/HOL.holsig
	echo '$(MAKE_TOPLEVEL_PERVASIVE)' \
	     'Compiler.Control.quotation := true;' \
	     'CM.make'"'"' (CM.cmfile "3/sources.cm");' \
	     'use "0/hol0.sml";' \
	     'use "1/hol1.sml";' \
	     'use "2/hol2.sml";' \
	     'use "3/hol3.sml";' \
	     '$(MAKE_TOPLEVEL_PERVASIVE)' \
	     'if not ("$(USE_FILE)" = "") andalso' \
	     '   Portable.file_exists_for_reading "$(USE_FILE)"' \
	     'then use "$(USE_FILE)"' \
	     'else ();' \
	     'Globals.use_init_file := true;' \
	     'Portable.interp := true;' \
	     'val use = Portable.use;' \
	     'Save_hol.save_hol "$@" $(HANDLE_HOL_ERR);' \
	| $(SML_CM) 2>&1 | tee $(BIN_DIR)/log.$(ARCH).3
	chmod ugo+rx $(HOL3_HEAP)

#-------------------------------------------------------------------------
# HOL90
#-------------------------------------------------------------------------

hol: $(HOL3_HEAP)
	rm -f $(HOL0_HEAP) $(HOL1_HEAP) $(HOL2_HEAP)

#-------------------------------------------------------------------------
# Script for running HOL when building libraries
#-------------------------------------------------------------------------

$(HOL90): $(HOL3_HEAP)
	echo '#! /bin/sh' > $@
	echo 'exec $(SML) @SMLload=$(HOL3_HEAP)' >> $@
	chmod ugo+rx $@

#-------------------------------------------------------------------------
# pre-building libraries
#
# We just set CM munching away on the source code for the libraries,
# as specified in the sources.cm files.  This will leave the binary
# files for the libraries lying around.
#
#    CM.stabilize (CM.cmfile "3/sources.cm", true); (*
# *) fun c () = CM.recompile' (CM.cmfile "../library/sources.cm");
#-------------------------------------------------------------------------

lib_prebuild: $(HOL90)
	echo 'CM.recompile'"'"' (CM.cmfile "../library/sources.cm");' \
	| $(HOL90) 2>&1 | tee $(BIN_DIR)/lib_prebuild.$(ARCH).log

#-------------------------------------------------------------------------
# cleaning
#-------------------------------------------------------------------------

clean:
	@echo 'let' \
	      '   val arch = CM.Compiler.architecture;' \
	      '   val command =' \
	      '      "rm -rf 0/." ^ arch ^' \
	      ' " \\\n       0/theory/." ^ arch ^' \
	      ' " \\\n       0/library/." ^ arch ^' \
	      ' " \\\n       1/." ^ arch ^' \
	      ' " \\\n       2/." ^ arch ^' \
	      ' " \\\n       3/." ^ arch ^' \
	      ' " \\\n       $(THEORY_SRC)/." ^ arch ^' \
	      ' " \\\n       $(THMS_DIR)/." ^ arch;' \
	      'in print ("\n" ^ command ^ "\n");' \
	      '   OS.Process.exit (OS.Process.system command)' \
	      'end;' \
	| $(SML_CM)
	rm -rf 0/.depend \
	       0/theory/.depend \
	       0/library/.depend \
	       1/.depend \
	       2/.depend \
	       3/.depend \
	       $(THEORY_SRC)/.depend \
	       $(THMS_DIR)/.depend
	rm -f $(HEAP_DIR)/*.$(ARCH)

clobber: clean
	rm -f $(HOLSIG_DIR)/*.holsig $(THMS_DIR)/*.thms

lib_clean:
	@echo 'let' \
	      '   val arch = CM.Compiler.architecture;' \
	      '   val command = "rm -rf ../library/*/src/.depend " ^' \
	      '                 "../library/*/src/." ^ arch;' \
	      'in print ("\n" ^ command ^ "\n");' \
	      '   OS.Process.exit (OS.Process.system command)' \
	      'end;' \
	| $(SML_CM)

