head	1.1;
branch	1.1.1;
access;
symbols
	HOL97:1.1.1.1.0.6
	bpHOL97:1.1.1.1
	hol90_9_alpha:1.1.1.1
	hol90_pre8_for_multiple_compilers:1.1.1.1.0.4
	hol90_pre8_after_donalds_separate_compilation_changes:1.1.1.1
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.10.16.13.35.30;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.35.30;	author rjb;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@\DOC set_sticky_type

\TYPE {set_sticky_type : ((string # type) -> void)}

\SYNOPSIS
Gives a particular sticky type to a named variable.

\DESCRIBE
A call {set_sticky_type(`name`,":ty")} will give the name {name} a sticky type
{ty}. This means that if {name} occurs in a quotation with a completely
unconstrained type (in particular, the sticky type will not be used if the name
is that of a constant), the type {ty} is automatically inferred. For further
details of the sticky type mechanism, refer to the DESCRIPTION.

\FAILURE
Never fails, even if the name could not be the name of a variable or constant.
It is permissible to redefine a sticky type.

\EXAMPLE
The following shows how the sticky type is used only when the type of the
variable is unconstrained by context.
{
  #set_sticky_type(`n`,":num");;
  () : void

  #"n = n";;
  "n = n" : term

  #type_of (snd (dest_eq it));;
  ":num" : type

  #"HD [F] = n";;
  "HD[F] = n" : term

  #type_of (snd (dest_eq it));;
  ":bool" : type
}
\COMMENTS
If the flag {sticky} is set, the name is liable to have its sticky type
changed automatically, just like any other name.

\SEEALSO
remove_sticky_type, sticky_list.

\ENDDOC
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
