\DOC RATOR_COND_RULE

\TYPE {RATOR_COND_RULE: thm -> thm}

\SYNOPSIS
moves all rators inward through conditonals.

\LIBRARY cond

\DESCRIBE 
moves all rators inward through conditonals.

{
      |- f (A => x|y)
     ==================
      |- A => f x|f y
}

\EXAMPLE

{
- val it = |- ~(SUC (A => (SUC (B => 1 | 2)) | 3) = 0) : thm
RATOR_COND_RULE it;
val it =
  |- ~((B => (COND A (SUC (SUC 1))) | (COND A (SUC (SUC 2)))) (SUC 3) = 0)
  : thm

}

\FAILURE

\SEEALSO

RATOR_COND_CONV RATOR_COND_TAC 
FILTER_RATOR_COND_CONV FILTER_RATOR_COND_TAC FILTER_RATOR_COND_RULE
COND_RATOR_CONV COND_RATOR_RULE COND_RATOR_TAC
FILTER_COND_RATOR_CONV FILTER_COND_RATOR_RULE FILTER_COND_RATOR_TAC

\ENDDOC

