head	1.1;
branch	1.1.1;
access;
symbols
	HOL97:1.1.1.1.0.6
	bpHOL97:1.1.1.1
	hol90_9_alpha:1.1.1.1
	hol90_pre8_for_multiple_compilers:1.1.1.1.0.4
	hol90_pre8_after_donalds_separate_compilation_changes:1.1.1.1
	hol90_8_after_merging_Konrad_Elsa:1.1.1.1
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.1
date	95.10.16.13.35.13;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.35.13;	author rjb;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@\DOC new_special_symbol

\TYPE {new_special_symbol : (string -> void)}

\SYNOPSIS
Adds new string to the list of special symbols.

\DESCRIBE
An identifier, at the ML or object level, is either alphanumeric, e.g. {true}
or {T}, or consists of a special symbol which starts with a non-alphanumeric
character, e.g. {==>} or {+}. It is a consequence of the non-backtracking
implementation of lexical analysis that any (non-null) initial segment of a
special symbol is also a special symbol, so from the above we know that {==}
and {=} are. The function {new_special_symbol} makes the given string and its
non-null initial segments into special symbols, provided the string does not
start with an alphanumeric character (according to {is_alphanum}).

\FAILURE
Fails if the string provided starts with an alphanumeric character. The test is
performed using the function {is_alphanum}, so this may include some unexpected
characters if {new_alphanum} has been used.

\EXAMPLE
The call:
{
   new_special_symbol `.EQ.`;;
}
\noindent makes the following three strings special symbols:
{
   .E  .EQ  .EQ.
}
\SEEALSO
is_alphanum, new_alphanum, special_symbols.

\ENDDOC
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@
