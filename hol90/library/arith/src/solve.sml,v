head	1.4;
access;
symbols
	HOL97:1.4.0.4
	bpHOL97:1.4
	hol90_9_alpha:1.4
	hol90_pre8_for_multiple_compilers:1.4.0.2
	hol90_pre8_after_donalds_separate_compilation_changes:1.3
	hol90_8_after_merging_Konrad_Elsa:1.2
	hol90_7_cleaned_up_original_branchtag:1.1.1.1.0.2
	hol90_7_cleaned_up_original:1.1.1.1
	hol90_7_cleaned_up_original:1.1.1;
locks; strict;
comment	@# @;


1.4
date	95.11.16.16.53.08;	author rjb;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	95.10.31.14.02.06;	author drs1004;	state Exp;
branches;
next	1.2;

1.2
date	95.10.18.15.50.16;	author drs1004;	state Exp;
branches;
next	1.1;

1.1
date	95.10.16.13.31.36;	author rjb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.16.13.31.36;	author rjb;	state Exp;
branches
	1.1.1.1.2.1;
next	;

1.1.1.1.2.1
date	95.10.18.15.47.16;	author drs1004;	state Exp;
branches;
next	;

1.4.4.1
date	97.07.11.19.29.07;	author kxs;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Support for the predecessor function, PRE, has been added to the arith
library. It is eliminated in the pre-processing phase along with natural
number subtraction. The modifications are due to Kim Dam Petersen of
Tele Danmark Research.

R.J.Boulton, 16th November 1995.
@
text
@(*****************************************************************************)
(* FILE          : solve.sml                                                 *)
(* DESCRIPTION   : Functions for solving arithmetic formulae.                *)
(*                                                                           *)
(* READS FILES   : <none>                                                    *)
(* WRITES FILES  : <none>                                                    *)
(*                                                                           *)
(* AUTHOR        : R.J.Boulton, University of Cambridge                      *)
(* DATE          : 19th April 1991                                           *)
(*                                                                           *)
(* TRANSLATOR    : R.J.Boulton, University of Cambridge                      *)
(* DATE          : 15th February 1993                                        *)
(*                                                                           *)
(* LAST MODIFIED : R.J.Boulton                                               *)
(* DATE          : 16th November 1995                                        *)
(*****************************************************************************)

structure Solve : Solve_sig =
struct

open Core; (* open up all of the HOL 0/1 Core - could be replaced by more *)
           (* explicit opens to avoid endless recompilation of libraries  *)
           (* during system development                                   *)

fun failwith function = raise HOL_ERR{origin_structure = "Solve",
                                      origin_function = function,
                                      message = ""};

open Arith_cons;
open Term_coeffs;
open Qconv;
open Arith_theorems;
open Arith_thm_convs;
open Norm_arith;
open Norm_ineqs;
open Solve_ineqs;

(*---------------------------------------------------------------------------*)
(* INEQS_FALSE_CONV : conv                                                   *)
(*                                                                           *)
(* Proves a conjunction of normalized inequalities is false, provided they   *)
(* are unsatisfiable. Checks for any inequalities that can immediately be    *)
(* shown to be false before calling VAR_ELIM.                                *)
(*                                                                           *)
(* Example:                                                                  *)
(*                                                                           *)
(*    INEQS_FALSE_CONV                                                       *)
(*       `((2 + (2 * n)) <= (1 * m)) /\                                      *)
(*        ((1 * m) <= (1 * n)) /\                                            *)
(*        (0 <= (1 * n)) /\                                                  *)
(*        (0 <= (1 * m))`                                                    *)
(*    --->                                                                   *)
(*    |- (2 + (2 * n)) <= (1 * m) /\                                         *)
(*       (1 * m) <= (1 * n) /\                                               *)
(*       0 <= (1 * n) /\                                                     *)
(*       0 <= (1 * m) =                                                      *)
(*       F                                                                   *)
(*---------------------------------------------------------------------------*)

fun INEQS_FALSE_CONV tm =
 (let val ineqs = strip_conj tm
      val rev_ineqs = rev ineqs
      val coeffsl = map coeffs_of_leq ineqs
      val falses =
         filter (fn (const,bind) => (null bind) andalso (const < 0)) coeffsl
      val th =
         if (null falses)
         then let val var_names = Lib.mk_set(map fst(flatten(map snd coeffsl)))
                  val coeffsl' =
                     (map (fn v => (0, [(v,1)])) var_names) @@ coeffsl
                  val (_,f) = VAR_ELIM coeffsl'
                  val axioms =
                     map (fn v => SPEC (mk_num_var v) ZERO_LESS_EQ_ONE_TIMES)
                                                                     var_names
              in  itlist PROVE_HYP axioms (f ())
              end
         else ASSUME (build_leq (hd falses))
      val th' = CONV_RULE LEQ_CONV th
      val th'' = DISCH (hd rev_ineqs) th'
      fun conj_disch tm th = CONV_RULE IMP_IMP_CONJ_IMP_CONV (DISCH tm th)
      val th''' = itlist conj_disch (rev (tl rev_ineqs)) th''
  in  CONV_RULE IMP_F_EQ_F_CONV th'''
  end
 ) handle (HOL_ERR _) => failwith "INEQS_FALSE_CONV";

(*---------------------------------------------------------------------------*)
(* DISJ_INEQS_FALSE_CONV : conv                                              *)
(*                                                                           *)
(* Proves a disjunction of conjunctions of normalized inequalities is false, *)
(* provided each conjunction is unsatisfiable.                               *)
(*---------------------------------------------------------------------------*)

fun DISJ_INEQS_FALSE_CONV tm =
 (if (is_disj tm)
  then ((RATOR_CONV (RAND_CONV INEQS_FALSE_CONV)) THENC
        OR_F_CONV THENC
        DISJ_INEQS_FALSE_CONV) tm
  else INEQS_FALSE_CONV tm
 ) handle (HOL_ERR _) => failwith "DISJ_INEQS_FALSE_CONV";

(*---------------------------------------------------------------------------*)
(* NOT_NOT_INTRO_CONV : conv                                                 *)
(*                                                                           *)
(* `b`  --->  |- b = ~~b  provided b is of type ":bool".                     *)
(*---------------------------------------------------------------------------*)

fun NOT_NOT_INTRO_CONV tm =
 (SYM ((NOT_NOT_NORM_CONV o mk_neg o mk_neg) tm)
 ) handle (HOL_ERR _) => failwith "NOT_NOT_INTRO_CONV";

(*---------------------------------------------------------------------------*)
(* Discriminator functions for T (true) and F (false)                        *)
(*---------------------------------------------------------------------------*)

val is_T = let val T = (--`T`--) in fn tm => tm = T end
and is_F = let val F = (--`F`--) in fn tm => tm = F end;

(*---------------------------------------------------------------------------*)
(* NEGATE_CONV : conv -> conv                                                *)
(*                                                                           *)
(* Function for negating the operation of a conversion that proves a formula *)
(* to be either true or false. For example if `conv' proves `0 <= n` to be   *)
(* equal to `T` then `NEGATE_CONV conv' will prove `~(0 <= n)` to be `F`.    *)
(* The function fails if the application of `conv' to the negation of the    *)
(* formula does not yield either `T` or `F`.                                 *)
(*                                                                           *)
(* If use of this function succeeds then the input term will necessarily     *)
(* have been changed. Hence it does not need to be a CONV. It can however    *)
(* take a CONV as its argument.                                              *)
(*---------------------------------------------------------------------------*)

fun NEGATE_CONV conv tm =
 let val neg = is_neg tm
     val th = RULE_OF_CONV conv (if neg then (dest_neg tm) else (mk_neg tm))
     val r = rhs (concl th)
     val truth_th =
        if (is_T r) then NOT_T_F
        else if (is_F r) then NOT_F_T
        else failwith "NEGATE_CONV"
     val neg_fn = if neg then I else TRANS (NOT_NOT_INTRO_CONV tm)
 in  neg_fn (TRANS (AP_TERM (--`$~`--) th) truth_th)
 end;

(*---------------------------------------------------------------------------*)
(* DEPTH_FORALL_CONV : conv -> conv                                          *)
(*                                                                           *)
(* DEPTH_FORALL_CONV conv `!x1 ... xn. body` applies conv to `body` and      *)
(* returns a theorem of the form:                                            *)
(*                                                                           *)
(*    |- (!x1 ... xn. body) = (!x1 ... xn. body')                            *)
(*---------------------------------------------------------------------------*)

fun DEPTH_FORALL_CONV conv tm =
 if (is_forall tm)
 then RAND_CONV (ABS_CONV (DEPTH_FORALL_CONV conv)) tm
 else conv tm;

(*---------------------------------------------------------------------------*)
(* FORALL_ARITH_CONV : conv                                                  *)
(*                                                                           *)
(* Proof procedure for non-existential Presburger natural arithmetic         *)
(* (+, * by a constant, numeric constants, numeric variables, <, <=, =, >=,  *)
(* >, ~, /\, \/, ==>, = (iff), ! (when in prenex normal form).               *)
(* Expects formula in prenex normal form.                                    *)
(* Subtraction, PRE and conditionals must have been eliminated.              *)
(* SUC is allowed.                                                           *)
(* Boolean variables and constants are not allowed.                          *)
(*                                                                           *)
(* The procedure will prove most formulae in the subset of arithmetic        *)
(* specified above, but there is some incompleteness. However, this rarely   *)
(* manifests itself in practice. It is therefore likely that if the          *)
(* procedure cannot prove a formula in the subset, the formula is not valid. *)
(*---------------------------------------------------------------------------*)

fun FORALL_ARITH_CONV tm =
 (reset_multiplication_theorems ();
  RULE_OF_CONV
  (DEPTH_FORALL_CONV
    (NEGATE_CONV
      ((fn tm => ARITH_FORM_NORM_CONV tm
                 handle (HOL_ERR _) =>
                 raise HOL_ERR{origin_structure = "Solve",
                               origin_function = "FORALL_ARITH_CONV",
                               message = "formula not in the allowed subset"}
       ) THENC
       (fn tm => DISJ_INEQS_FALSE_CONV tm
                 handle (HOL_ERR _) =>
                 raise HOL_ERR{origin_structure = "Solve",
                               origin_function = "FORALL_ARITH_CONV",
                               message = "cannot prove formula"}
       ))) THENC
   REPEATC FORALL_SIMP_CONV)
  tm
 );

end
@


1.4.4.1
log
@Changes to accomodate CM, and also the differences between  SML'90 and SML'97.
@
text
@d21 7
a27 2
type term = CoreHol.Term.term
type conv = Abbrev.conv;
d31 1
a31 1
open Qconv; infix THENC;
a36 12
open Drule;
open CoreHol.Dsyntax;
open CoreHol.Thm;
open Parse;
open Lib;
open Exception;

fun failwith function = raise 
 HOL_ERR{origin_structure = "Solve",
         origin_function = function,
                  message = ""};

@


1.3
log
@First phase of hol90.8 development.  hol90 now compiles using NJSML-CM
108.5, with separate compilation of libraries.  System dependencies
have been isolated in the makefiles and "portable.sml".

This involved a large number of enhancments to the source files,
most of which are documented in the 7.changes file (or will be shortly).
See also the correpsonding email corrspondence between RJB, KLS, TFM,
JRH and DRS that happened during this development.
@
text
@d15 1
a15 1
(* DATE          : 16th February 1993                                        *)
d165 1
a165 1
(* Subtraction and conditionals must have been eliminated.                   *)
@


1.2
log
@	Konrad's bug fixes and further development to hol90.7 after it's release.
	Checked n on a side branch for later merging with the main trunk
	(Elsa's revisions), which is what I'm doing now.
        See doc/7.changes for details.
@
text
@d21 4
@


1.1
log
@Initial revision
@
text
@d64 1
a64 1
         then let val var_names = mk_set (map fst (flatten (map snd coeffsl)))
@


1.1.1.1
log
@Sources of hol90.7 as released, cleaned up by R.J.Boulton and D.R.Syme.

Summary of changes:

 * "contrib" directory not included
 * Machine-generatable files deleted, e.g. .dvi, .ps, .thms, .holsig, .hol_lib
 * Some directory restructuring in "library", in particular help files for
   ML functions have been put in a help/entries subdirectory in cases where
   they were originally in the help directory itself.
@
text
@@


1.1.1.1.2.1
log
@	Konrad's bug fixes and further development to hol90.7 after it's release.
	Checked n on a side branch for later merging with the main trunk
	(Elsa's revisions).  See doc/7.changes for details.
@
text
@d64 1
a64 1
         then let val var_names = Lib.mk_set(map fst(flatten(map snd coeffsl)))
@
