thid = (zip, 866812943, 863070)
axioms = []
definitions =
[((UNZIP),
  [],
  `((! :(('a -> 'b # 'c) -> bool) -> bool) (\(y :'a -> 'b # 'c).
   (((= :('a -> 'b) # ('a -> 'c) -> ('a -> 'b) # ('a -> 'c) -> bool)
   ((UNZIP :('a -> 'b # 'c) -> ('a -> 'b) # ('a -> 'c)) $0))
   (((, :('a -> 'b) -> ('a -> 'c) -> ('a -> 'b) # ('a -> 'c))
   (\(x :'a). ((FST :'b # 'c -> 'b) ($1 $0)))) (\(x :'a).
   ((SND :'b # 'c -> 'c) ($1 $0)))))))`),
 ((Zip_DEF),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(a :'a -> 'b).
   ((! :(('a -> 'c) -> bool) -> bool) (\(b :'a -> 'c).
   (((= :('a -> 'b # 'c) -> ('a -> 'b # 'c) -> bool)
   (((Zip :('a -> 'b) -> ('a -> 'c) -> 'a -> 'b # 'c) $1) $0))
   ((ZIP :('a -> 'b) # ('a -> 'c) -> 'a -> 'b # 'c)
   (((, :('a -> 'b) -> ('a -> 'c) -> ('a -> 'b) # ('a -> 'c)) $1)
   $0)))))))`),
 ((ZIP),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(y :'a -> 'b).
   ((! :(('a -> 'c) -> bool) -> bool) (\(z :'a -> 'c).
   ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'b # 'c -> 'b # 'c -> bool)
   (((ZIP :('a -> 'b) # ('a -> 'c) -> 'a -> 'b # 'c)
   (((, :('a -> 'b) -> ('a -> 'c) -> ('a -> 'b) # ('a -> 'c)) $2) $1))
   $0)) (((, :'b -> 'c -> 'b # 'c) ($2 $0)) ($1 $0)))))))))`)]
theorems =
[((FORALL_Zip),
  [],
  `((! :((('a -> 'b # 'c) -> bool) -> bool) -> bool)
   (\(P :('a -> 'b # 'c) -> bool). (((= :bool -> bool -> bool)
   ((! :(('a -> 'b # 'c) -> bool) -> bool) (\(s :'a -> 'b # 'c). ($1
   $0)))) ((! :(('a -> 'b) -> bool) -> bool) (\(s1 :'a -> 'b).
   ((! :(('a -> 'c) -> bool) -> bool) (\(s2 :'a -> 'c). ($2
   (((Zip :('a -> 'b) -> ('a -> 'c) -> 'a -> 'b # 'c) $1)
   $0)))))))))`),
 ((FORALL_ZIP),
  [],
  `((! :((('a -> 'b # 'c) -> bool) -> bool) -> bool)
   (\(P :('a -> 'b # 'c) -> bool). (((= :bool -> bool -> bool)
   ((! :(('a -> 'b # 'c) -> bool) -> bool) (\(s :'a -> 'b # 'c). ($1
   $0)))) ((! :(('a -> 'b) -> bool) -> bool) (\(s1 :'a -> 'b).
   ((! :(('a -> 'c) -> bool) -> bool) (\(s2 :'a -> 'c). ($2
   ((ZIP :('a -> 'b) # ('a -> 'c) -> 'a -> 'b # 'c)
   (((, :('a -> 'b) -> ('a -> 'c) -> ('a -> 'b) # ('a -> 'c)) $1)
   $0))))))))))`),
 ((EXISTS_Zip),
  [],
  `((! :((('a -> 'b # 'c) -> bool) -> bool) -> bool)
   (\(P :('a -> 'b # 'c) -> bool). (((= :bool -> bool -> bool)
   ((? :(('a -> 'b # 'c) -> bool) -> bool) (\(s :'a -> 'b # 'c). ($1
   $0)))) ((? :(('a -> 'b) -> bool) -> bool) (\(s1 :'a -> 'b).
   ((? :(('a -> 'c) -> bool) -> bool) (\(s2 :'a -> 'c). ($2
   (((Zip :('a -> 'b) -> ('a -> 'c) -> 'a -> 'b # 'c) $1)
   $0)))))))))`),
 ((EXISTS_ZIP),
  [],
  `((! :((('a -> 'b # 'c) -> bool) -> bool) -> bool)
   (\(P :('a -> 'b # 'c) -> bool). (((= :bool -> bool -> bool)
   ((? :(('a -> 'b # 'c) -> bool) -> bool) (\(s :'a -> 'b # 'c). ($1
   $0)))) ((? :(('a -> 'b) -> bool) -> bool) (\(s1 :'a -> 'b).
   ((? :(('a -> 'c) -> bool) -> bool) (\(s2 :'a -> 'c). ($2
   ((ZIP :('a -> 'b) # ('a -> 'c) -> 'a -> 'b # 'c)
   (((, :('a -> 'b) -> ('a -> 'c) -> ('a -> 'b) # ('a -> 'c)) $1)
   $0))))))))))`),
 ((ZIP_UNZIP),
  [],
  `((! :(('a -> 'b # 'c) -> bool) -> bool) (\(y :'a -> 'b # 'c).
   (((= :('a -> 'b # 'c) -> ('a -> 'b # 'c) -> bool)
   ((ZIP :('a -> 'b) # ('a -> 'c) -> 'a -> 'b # 'c)
   ((UNZIP :('a -> 'b # 'c) -> ('a -> 'b) # ('a -> 'c)) $0))) $0)))`),
 ((UNZIP_ZIP),
  [],
  `((! :(('a -> 'b) # ('a -> 'c) -> bool) -> bool)
   (\(y :('a -> 'b) # ('a -> 'c)).
   (((= :('a -> 'b) # ('a -> 'c) -> ('a -> 'b) # ('a -> 'c) -> bool)
   ((UNZIP :('a -> 'b # 'c) -> ('a -> 'b) # ('a -> 'c))
   ((ZIP :('a -> 'b) # ('a -> 'c) -> 'a -> 'b # 'c) $0))) $0)))`),
 ((Zip),
  [],
  `((! :(('a -> 'b) -> bool) -> bool) (\(a :'a -> 'b).
   ((! :(('a -> 'c) -> bool) -> bool) (\(b :'a -> 'c).
   ((! :('a -> bool) -> bool) (\(x :'a).
   (((= :'b # 'c -> 'b # 'c -> bool)
   ((((Zip :('a -> 'b) -> ('a -> 'c) -> 'a -> 'b # 'c) $2) $1) $0))
   (((, :'b -> 'c -> 'b # 'c) ($2 $0)) ($1 $0)))))))))`),
 ((PAIR_EXISTS),
  [],
  `((! :(('a # 'b -> bool) -> bool) -> bool) (\(P :'a # 'b -> bool).
   (((= :bool -> bool -> bool) ((? :('a # 'b -> bool) -> bool)
   (\(s :'a # 'b). ($1 $0)))) ((? :('a -> bool) -> bool) (\(s1 :'a).
   ((? :('b -> bool) -> bool) (\(s2 :'b). ($2
   (((, :'a -> 'b -> 'a # 'b) $1) $0)))))))))`),
 ((PAIR_FORALL),
  [],
  `((! :(('a # 'b -> bool) -> bool) -> bool) (\(P :'a # 'b -> bool).
   (((= :bool -> bool -> bool) ((! :('a # 'b -> bool) -> bool)
   (\(s :'a # 'b). ($1 $0)))) ((! :('a -> bool) -> bool) (\(s1 :'a).
   ((! :('b -> bool) -> bool) (\(s2 :'b). ($2
   (((, :'a -> 'b -> 'a # 'b) $1) $0)))))))))`)]
