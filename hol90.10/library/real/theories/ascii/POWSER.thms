thid = (POWSER, 942752613, 532395)
axioms = []
definitions =
[((diffs),
  [],
  `((! :((num -> real) -> bool) -> bool) (\(c :num -> real).
   (((= :(num -> real) -> (num -> real) -> bool) (diffs $0))
   (\(n :num). ((|*| (& (SUC $0))) ($1 (SUC $0)))))))`)]
theorems =
[((TERMDIFF),
  [],
  `((! :((num -> real) -> bool) -> bool) (\(c :num -> real).
   ((! :(real -> bool) -> bool) (\(k' :real).
   ((! :(real -> bool) -> bool) (\(x :real). ((==> ((/\ (summable
   (\(n :num). ((|*| ($3 $0)) ((pow $2) $0))))) ((/\ (summable
   (\(n :num). ((|*| ((diffs $3) $0)) ((pow $2) $0))))) ((/\ (summable
   (\(n :num). ((|*| ((diffs (diffs $3)) $0)) ((pow $2) $0))))) ((|<|
   (abs $0)) (abs $1)))))) (((diffl (\(x :real). (suminf (\(n :num).
   ((|*| ($4 $0)) ((pow $1) $0)))))) (suminf (\(n :num). ((|*| ((diffs
   $3) $0)) ((pow $1) $0))))) $0))))))))`),
 ((TERMDIFF_LEMMA5),
  [],
  `((! :((num -> real) -> bool) -> bool) (\(f :num -> real).
   ((! :((real -> num -> real) -> bool) -> bool)
   (\(g :real -> num -> real). ((! :(real -> bool) -> bool)
   (\(k :real). ((==> ((/\ ((|<| (& 0)) $0)) ((/\ (summable $2))
   ((! :(real -> bool) -> bool) (\(h :real). ((==> ((/\ ((|<| (& 0))
   (abs $0))) ((|<| (abs $0)) $1))) ((! :(num -> bool) -> bool)
   (\(n :num). ((|<=| (abs (($3 $1) $0))) ((|*| ($4 $0)) (abs
   $1))))))))))) (((-> (\(h :real). (suminf ($2 $0)))) (& 0)) (&
   0)))))))))`),
 ((TERMDIFF_LEMMA4),
  [],
  `((! :((real -> real) -> bool) -> bool) (\(f :real -> real).
   ((! :(real -> bool) -> bool) (\(k' :real).
   ((! :(real -> bool) -> bool) (\(k :real). ((==> ((/\ ((|<| (& 0))
   $0)) ((! :(real -> bool) -> bool) (\(h :real). ((==> ((/\ ((|<| (&
   0)) (abs $0))) ((|<| (abs $0)) $1))) ((|<=| (abs ($3 $0))) ((|*|
   $2) (abs $0)))))))) (((-> $2) (& 0)) (& 0)))))))))`),
 ((TERMDIFF_LEMMA3),
  [],
  `((! :(real -> bool) -> bool) (\(z :real).
   ((! :(real -> bool) -> bool) (\(h :real).
   ((! :(num -> bool) -> bool) (\(n :num).
   ((! :(real -> bool) -> bool) (\(k' :real). ((==> ((/\ (~
   (((= :real -> real -> bool) $2) (& 0)))) ((/\ ((|<=| (abs $3)) $0))
   ((|<=| (abs ((|+| $3) $2))) $0)))) ((|<=| (abs ((|-| ((/ ((|-|
   ((pow ((|+| $3) $2)) $1)) ((pow $3) $1))) $2)) ((|*| (& $1)) ((pow
   $3) ((- $1) 1)))))) ((|*| (& $1)) ((|*| (& ((- $1) 1))) ((|*| ((pow
   $0) ((- $1) 2))) (abs $2))))))))))))))`),
 ((TERMDIFF_LEMMA2),
  [],
  `((! :(real -> bool) -> bool) (\(z :real).
   ((! :(real -> bool) -> bool) (\(h :real).
   ((! :(num -> bool) -> bool) (\(n :num). ((==> (~
   (((= :real -> real -> bool) $1) (& 0))))
   (((= :real -> real -> bool) ((|-| ((/ ((|-| ((pow ((|+| $2) $1))
   $0)) ((pow $2) $0))) $1)) ((|*| (& $0)) ((pow $2) ((- $0) 1)))))
   ((|*| $1) ((sum (((, :num -> num -> num # num) 0) ((- $0) 1)))
   (\(p :num). ((|*| ((pow $3) $0)) ((sum
   (((, :num -> num -> num # num) 0) ((- ((- $1) 1)) $0))) (\(q :num).
   ((|*| ((pow ((|+| $4) $3)) $0)) ((pow $4) ((- ((- ((- $2) 2)) $1))
   $0)))))))))))))))))`),
 ((TERMDIFF_LEMMA1),
  [],
  `((! :(num -> bool) -> bool) (\(m :num).
   ((! :(real -> bool) -> bool) (\(z :real).
   ((! :(real -> bool) -> bool) (\(h :real).
   (((= :real -> real -> bool) ((sum (((, :num -> num -> num # num) 0)
   $2)) (\(p :num). ((|-| ((|*| ((pow ((|+| $2) $1)) ((- $3) $0)))
   ((pow $2) $0))) ((pow $2) $3))))) ((sum
   (((, :num -> num -> num # num) 0) $2)) (\(p :num). ((|*| ((pow $2)
   $0)) ((|-| ((pow ((|+| $2) $1)) ((- $3) $0))) ((pow $2) ((- $3)
   $0)))))))))))))`),
 ((DIFFS_EQUIV),
  [],
  `((! :((num -> real) -> bool) -> bool) (\(c :num -> real).
   ((! :(real -> bool) -> bool) (\(x :real). ((==> (summable
   (\(n :num). ((|*| ((diffs $2) $0)) ((pow $1) $0))))) ((sums
   (\(n :num). ((|*| (& $0)) ((|*| ($2 $0)) ((pow $1) ((- $0) 1))))))
   (suminf (\(n :num). ((|*| ((diffs $2) $0)) ((pow $1)
   $0))))))))))`),
 ((DIFFS_LEMMA2),
  [],
  `((! :(num -> bool) -> bool) (\(n :num).
   ((! :((num -> real) -> bool) -> bool) (\(c :num -> real).
   ((! :(real -> bool) -> bool) (\(x :real).
   (((= :real -> real -> bool) ((sum (((, :num -> num -> num # num) 0)
   $2)) (\(n :num). ((|*| (& $0)) ((|*| ($2 $0)) ((pow $1) ((- $0)
   1))))))) ((|-| ((sum (((, :num -> num -> num # num) 0) $2))
   (\(n :num). ((|*| ((diffs $2) $0)) ((pow $1) $0))))) ((|*| (& $2))
   ((|*| ($1 $2)) ((pow $0) ((- $2) 1))))))))))))`),
 ((DIFFS_LEMMA),
  [],
  `((! :(num -> bool) -> bool) (\(n :num).
   ((! :((num -> real) -> bool) -> bool) (\(c :num -> real).
   ((! :(real -> bool) -> bool) (\(x :real).
   (((= :real -> real -> bool) ((sum (((, :num -> num -> num # num) 0)
   $2)) (\(n :num). ((|*| ((diffs $2) $0)) ((pow $1) $0))))) ((|+|
   ((sum (((, :num -> num -> num # num) 0) $2)) (\(n :num). ((|*| (&
   $0)) ((|*| ($2 $0)) ((pow $1) ((- $0) 1))))))) ((|*| (& $2)) ((|*|
   ($1 $2)) ((pow $0) ((- $2) 1))))))))))))`),
 ((DIFFS_NEG),
  [],
  `((! :((num -> real) -> bool) -> bool) (\(c :num -> real).
   (((= :(num -> real) -> (num -> real) -> bool) (diffs (\(n :num).
   (-- ($1 $0))))) (\(n :num). (-- ((diffs $1) $0))))))`),
 ((POWSER_INSIDE),
  [],
  `((! :((num -> real) -> bool) -> bool) (\(f :num -> real).
   ((! :(real -> bool) -> bool) (\(x :real).
   ((! :(real -> bool) -> bool) (\(z :real). ((==> ((/\ (summable
   (\(n :num). ((|*| ($3 $0)) ((pow $2) $0))))) ((|<| (abs $0)) (abs
   $1)))) (summable (\(n :num). ((|*| ($3 $0)) ((pow $1)
   $0)))))))))))`),
 ((POWSER_INSIDEA),
  [],
  `((! :((num -> real) -> bool) -> bool) (\(f :num -> real).
   ((! :(real -> bool) -> bool) (\(x :real).
   ((! :(real -> bool) -> bool) (\(z :real). ((==> ((/\ (summable
   (\(n :num). ((|*| ($3 $0)) ((pow $2) $0))))) ((|<| (abs $0)) (abs
   $1)))) (summable (\(n :num). ((|*| (abs ($3 $0))) ((pow $1)
   $0)))))))))))`),
 ((POWREV),
  [],
  `((! :(num -> bool) -> bool) (\(n :num).
   ((! :(real -> bool) -> bool) (\(x :real).
   ((! :(real -> bool) -> bool) (\(y :real).
   (((= :real -> real -> bool) ((sum (((, :num -> num -> num # num) 0)
   (SUC $2))) (\(p :num). ((|*| ((pow $2) $0)) ((pow $1) ((- $3)
   $0)))))) ((sum (((, :num -> num -> num # num) 0) (SUC $2)))
   (\(p :num). ((|*| ((pow $2) ((- $3) $0))) ((pow $1)
   $0)))))))))))`),
 ((POWDIFF),
  [],
  `((! :(num -> bool) -> bool) (\(n :num).
   ((! :(real -> bool) -> bool) (\(x :real).
   ((! :(real -> bool) -> bool) (\(y :real).
   (((= :real -> real -> bool) ((|-| ((pow $1) (SUC $2))) ((pow $0)
   (SUC $2)))) ((|*| ((|-| $1) $0)) ((sum
   (((, :num -> num -> num # num) 0) (SUC $2))) (\(p :num). ((|*|
   ((pow $2) $0)) ((pow $1) ((- $3) $0)))))))))))))`),
 ((POWDIFF_LEMMA),
  [],
  `((! :(num -> bool) -> bool) (\(n :num).
   ((! :(real -> bool) -> bool) (\(x :real).
   ((! :(real -> bool) -> bool) (\(y :real).
   (((= :real -> real -> bool) ((sum (((, :num -> num -> num # num) 0)
   (SUC $2))) (\(p :num). ((|*| ((pow $2) $0)) ((pow $1) ((- (SUC $3))
   $0)))))) ((|*| $0) ((sum (((, :num -> num -> num # num) 0) (SUC
   $2))) (\(p :num). ((|*| ((pow $2) $0)) ((pow $1) ((- $3)
   $0)))))))))))))`)]
