\DOC FILTER_COND_RATOR_RULE

\TYPE {FILTER_COND_RATOR_RULE: (term -> bool) -> thm -> thm}

\SYNOPSIS
moves all selected rators outward through conditonals.

\LIBRARY cond

\DESCRIBE 
moves all selected rators outward through conditonals.

{
   |- A => f x|f y
  ================== 
   |- f (A => x|y)
}

\EXAMPLE

{
th;
val it = |- ~((\x. ~x) (T => (F => ((\x. x) F) | ((\x. x) T)) | F)) : thm
- FILTER_COND_RATOR_RULE (fn t => (--`\x:bool.x`--) = t) it;
val it = |- ~((\x. ~x) (T => ((\x. x) (F => F | T)) | F)) : thm
}

\FAILURE

if the term has not the form A => f x|f y or the supplied filter is
not true for f

\SEEALSO

COND_RATOR_CONV COND_RATOR_RULE COND_RATOR_TAC
FILTER_COND_RATOR_CONV FILTER_COND_RATOR_TAC
RATOR_COND_CONV RATOR_COND_RULE RATOR_COND_TAC
FILTER_RATOR_COND_CONV FILTER_RATOR_COND_RULE FILTER_RATOR_COND_TAC

\ENDDOC

