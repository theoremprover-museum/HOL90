head	1.2;
access;
symbols
	hol90_8_after_merging_Konrad_Elsa:1.1;
locks; strict;
comment	@# @;


1.2
date	95.10.31.13.56.34;	author drs1004;	state dead;
branches;
next	1.1;

1.1
date	95.10.17.17.07.23;	author drs1004;	state Exp;
branches;
next	;


desc
@@


1.2
log
@First phase of hol90.8 development.  hol90 now compiles using NJSML-CM
108.5, with separate compilation of libraries.  System dependencies
have been isolated in the makefiles and "portable.sml".

This involved a large number of enhancments to the source files,
most of which are documented in the 7.changes file (or will be shortly).
See also the correpsonding email corrspondence between RJB, KLS, TFM,
JRH and DRS that happened during this development.
@
text
@(* ===================================================================== *)
(* FILE          : sml_system.sig                                        *)
(* DESCRIPTION   : Signature for SML System dependent functions.         *)
(*                                                                       *)
(* AUTHOR        : Elsa L. Gunter, AT&T Bell Laboratories                *)
(* DATE          : 7 October, 1993                                       *)
(* ===================================================================== *)

(* Copyright 1993 by AT&T Bell Laboratories *)

(* Share and Enjoy *)

signature Sml_system_sig =
sig

structure General :
  sig
    exception Bind
    exception Match
    exception Subscript
    exception Size
    exception Overflow
    exception Div
    exception Ln
    exception Sqrt
    exception Fail of string

    datatype 'a option = NONE | SOME of 'a

    datatype ordering = LESS | EQUAL | GREATER

    val <> : ''a * ''a -> bool

    val !  : 'a ref -> 'a
    val := : ('a ref * 'a) -> unit

    val o      : ('b -> 'c) * ('a -> 'b) -> ('a -> 'c)
    val before : ('a * 'b) -> 'a
    val ignore : 'a -> unit

  end

structure List :
  sig
    type 'a list
    sharing type list = List.list
    exception Empty
    val null : 'a list -> bool
    val hd : 'a list -> 'a
    val tl : 'a list -> 'a list
    val last : 'a list -> 'a
    val nth : 'a list * int -> 'a
    val take : 'a list * int -> 'a list
    val drop : 'a list * int -> 'a list
    val length : 'a list -> int
    val rev : 'a list -> 'a list
    val @@ : 'a list * 'a list -> 'a list
    val concat : 'a list list -> 'a list
    val revAppend : 'a list * 'a list -> 'a list
    val app : ('a -> unit) -> 'a list -> unit
    val map : ('a -> 'b) -> 'a list -> 'b list
    val mapPartial : ('a -> 'b General.option) -> 'a list -> 'b list
    val find : ('a -> bool) -> 'a list -> 'a General.option
    val filter : ('a -> bool) -> 'a list -> 'a list
    val partition : ('a -> bool) -> 'a list -> 'a list * 'a list
    val foldr : ('a * 'b -> 'b) -> 'b -> 'a list -> 'b
    val foldl : ('a * 'b -> 'b) -> 'b -> 'a list -> 'b
    val exists : ('a -> bool) -> 'a list -> bool
    val all : ('a -> bool) -> 'a list -> bool
    val tabulate : int * (int -> 'a) -> 'a list
  end

structure Vector :
  sig
    type 'a vector
    sharing type vector = Vector.vector
    val maxLen : int
(*    val vector : 'a list -> 'a vector *)
    val fromList : 'a list -> 'a vector
    val tabulate : int * (int -> 'a) -> 'a vector
    val length : 'a vector -> int
    val sub : 'a vector * int -> 'a
    val extract : 'a vector * int * int -> 'a vector
    val concat : 'a vector list -> 'a vector
  end

structure Array :
  sig
    type 'a array
    sharing type array = Array.array
    val maxLen : int
    val array : int * '1a -> '1a array
    val tabulate : int * (int -> '1a) -> '1a array
(*    val arrayoflist : '1a list -> '1a array *)
    val fromList : '1a list -> '1a array
    val length : 'a array -> int
    val sub : 'a array * int -> 'a
    val update : 'a array * int * 'a -> unit
    val extract : 'a array * int * int -> 'a Vector.vector
  end

structure Ref :
    sig
	val inc : int ref -> unit
	val dec : int ref -> unit
    end


structure Char :
  sig
    eqtype char
    exception Chr
    val chr : int -> char
    val ord : char -> int
    val maxOrd : int
    val < : char * char -> bool
    val <= : char * char -> bool
    val > : char * char -> bool
    val >= : char * char -> bool
  end

structure String :
  sig
    exception Ord
    eqtype string
    sharing type string = String.string
    val maxLen : int 
    val size : string -> int
    val sub : string * int -> Char.char
    val substring : string * int * int -> string
    val concat : string list -> string
    val ^ : string * string -> string
    val str : Char.char -> string
    val ordof : string * int -> int
    val implode : Char.char list -> string
    val explode : string -> Char.char list
    val <= : string * string -> bool
    val < : string * string -> bool
    val >= : string * string -> bool
    val > : string * string -> bool
  end



structure PrettyPrint :
  sig
    type ppstream
    datatype break_style = CONSISTENT | INCONSISTENT
    val mk_ppstream : {consumer : string -> unit,
		       flush : unit -> unit,
		       linewidth : int} -> ppstream
    val dest_ppstream : ppstream -> {consumer : string -> unit,
				     flush : unit -> unit,
				     linewidth : int}
    val add_break : ppstream -> int * int -> unit
    val add_newline : ppstream -> unit
    val add_string : ppstream -> string -> unit
    val begin_block : ppstream -> break_style -> int -> unit
    val end_block : ppstream -> unit
    val clear_ppstream : ppstream -> unit
    val flush_ppstream : ppstream -> unit
    val with_pp : {consumer : string -> unit,
		   flush : unit -> unit,
		   linewidth : int} -> (ppstream -> unit) -> unit
    val install_pp : string list -> (ppstream -> 'a -> unit) -> unit
    val pp_to_string : int -> (ppstream -> 'a -> unit) -> 'a -> string
    val with_ppstream : ppstream
                        -> {add_break:int * int -> unit, 
			    add_string:string -> unit,
			    begin_block:break_style -> int -> unit,
			    end_block:unit -> unit, 
			    add_newline:unit -> unit, 
			    clear_ppstream:unit -> unit,
			    flush_ppstream:unit -> unit}
    val defaultConsumer : unit -> {consumer : string -> unit,
				   linewidth : int, 
				   flush : unit -> unit}
  end

structure Time :
  sig
    eqtype time (* = TIME of {sec:int, usec:int} *)
    val dest_time : time -> {sec:int, usec:int}
    val mk_time : {sec:int, usec:int} -> time
    val timestamp : unit -> time
    val time_eq : time -> time -> bool
    val time_lt : time -> time -> bool
    val time_to_string : time -> String.string
  end

structure Timer :
  sig

    type cpu_timer
    type real_timer

    val totalCPUTimer : unit -> cpu_timer
    val startCPUTimer : unit -> cpu_timer
    val checkCPUTimer : cpu_timer -> {
	    usr : Time.time, sys : Time.time, gc : Time.time
	  }

    val totalRealTimer : unit -> real_timer
    val startRealTimer : unit -> real_timer
    val checkRealTimer : real_timer -> Time.time

  end (* TIMER *)


(* exception SysError  of (int * string)*)
val execute : string * string list -> instream * outstream
val use : string -> unit
val use_stream : instream -> unit
val interp : bool ref
val say : string -> unit
val linewidth : int ref
(* val environ : unit -> string list *)
val getEnv : string -> string option
val cd : string -> unit
val pwd : unit -> string
val listDir : string -> string list
val ls : unit -> int
val system : string -> int
(* val argv : unit -> string list *)
val getArgs : unit -> string list
val arch : string
val version : {system:string, date:string, version_id:int list}
val sml_banner : string
val file_exists_for_reading : string -> bool
val exit : unit -> 'a


val int_to_string : int -> String.string
val real_to_string : real -> String.string


(*---------------------------------------------------------------------
 * HOL specific things.  What on earth are these doing in this module?? DRS
 *--------------------------------------------------------------------*)

val hol_make : string list -> unit
val new_make_fun : (string list -> unit) -> unit

val store_hol_in_HOLdir : bool ref
val exportHOL : string -> bool
structure Sys_params :
sig
    datatype thy_opt = make_binary | make_new_ascii | use_old_ascii
    val theory_file_option : thy_opt
    val HOL_base_directory : string ref
end

end

@


1.1
log
@Keeping you up to date:

I'm about to do a checkin of elsa's modifications to the hol90.7
sources to create her hol90.pre8.  To recap what I've done:
	- I checked out hol90 (in /usr/groups/hol/drs1004/hol90)
		cvs co hol90
	  (Well, to be honest, I only checked out those
	  parts of hol90 I knew I'd be changing, e.g. not the
	  Manual, and only parts of the library.  Checking out the
	  entire source takes a while, mainly due to the enormous number
	  of help files.  The limiting factor is files/second, which
         runs at around 5 when CVS is working on nfs over a network, not
         KB/second, which you might at first think it would be).

	- By doing a recursive diff between Elsa's source and the
	hol90.7 source I found all the changes Elsa had made to
	source files.  I copied relevant files from Elsa's source
	into my checked out version.  The only new files were
		- the sml_system files in src/0
		- some make scripts in src/.
	Changed files were in:
		src/{0,1,2,3}
		library/arith/src/thm_convs.sml
		library/list/src/list_conv1.sml
		library/num/src/num_lib.sml
		library/prog_logic/src/halts_logic.sml
		library/prog_logic/src/translation.sml
		library/prog_logic/theories/src/mk_halts.sml
		library/real/theories/src/Make
		library/real/theories/src/equiv.sml
		library/real/theories/src/seq.sml
		library/reduce/src/arithconv.sml
		library/string/src/string_conv.sml
		library/unity/theories/src/aux_definitions.sml
		library/word/theories/src/*

	- I will now commit these changes, with this email as the log message.
		cvs commit

	- Tomorrow I will get this version compiling
	with NJSML 108 (I will probably add
	the files to enable the NJSML compilation manager to make
	this easier), then check those changes in.  I think it's
	good to get things in a working state.
@
text
@@
