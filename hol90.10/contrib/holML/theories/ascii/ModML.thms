thid = (ModML, 784041215, 880024)
axioms = []
definitions =
[((eval_topdec_DEF),
  [],
  `((/\ ((/\ ((! :(strdec -> bool) -> bool) (\(strdec :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(env -> bool) -> bool) (\(E :env). ((==> (((((eval_strdec $4)
   $3) $2) $1) (ENVep $0))) (((((eval_topdec (STRDEC $4)) $3) $2) $1)
   (BASISbp (env_in_basis $0))))))))))))))) ((/\
   ((! :(strdec -> bool) -> bool) (\(strdec :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(pack -> bool) -> bool) (\(p :pack). ((==> (((((eval_strdec
   $4) $3) $2) $1) (PACKep $0))) (((((eval_topdec (STRDEC $4)) $3) $2)
   $1) (PACKbp $0)))))))))))))) ((/\ ((! :(sigdec -> bool) -> bool)
   (\(sigdec :sigdec). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv -> bool) -> bool) (\(G :sigenv). ((==>
   (((((eval_sigdec $4) $3) (Inter_basis $2)) $1) $0))
   (((((eval_topdec (SIGDEC $4)) $3) $2) $1) (BASISbp (sigenv_in_basis
   $0))))))))))))))) ((! :(fundec -> bool) -> bool)
   (\(fundec :fundec). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(funenv -> bool) -> bool) (\(f :funenv). ((==>
   (((((eval_fundec $4) $3) $2) $1) $0)) (((((eval_topdec (FUNDEC $4))
   $3) $2) $1) (BASISbp (funenv_in_basis $0))))))))))))))))))
   ((! :((topdec -> state -> basis -> state -> basis_pack -> bool) ->
        bool) -> bool)
   (\(P :topdec -> state -> basis -> state -> basis_pack -> bool).
   ((==> ((/\ ((! :(strdec -> bool) -> bool) (\(strdec :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(env -> bool) -> bool) (\(E :env). ((==> (((((eval_strdec $4)
   $3) $2) $1) (ENVep $0))) ((((($5 (STRDEC $4)) $3) $2) $1) (BASISbp
   (env_in_basis $0))))))))))))))) ((/\ ((! :(strdec -> bool) -> bool)
   (\(strdec :strdec). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(pack -> bool) -> bool) (\(p :pack). ((==> (((((eval_strdec
   $4) $3) $2) $1) (PACKep $0))) ((((($5 (STRDEC $4)) $3) $2) $1)
   (PACKbp $0)))))))))))))) ((/\ ((! :(sigdec -> bool) -> bool)
   (\(sigdec :sigdec). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv -> bool) -> bool) (\(G :sigenv). ((==>
   (((((eval_sigdec $4) $3) (Inter_basis $2)) $1) $0)) ((((($5 (SIGDEC
   $4)) $3) $2) $1) (BASISbp (sigenv_in_basis $0)))))))))))))))
   ((! :(fundec -> bool) -> bool) (\(fundec :fundec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(funenv -> bool) -> bool) (\(f :funenv). ((==>
   (((((eval_fundec $4) $3) $2) $1) $0)) ((((($5 (FUNDEC $4)) $3) $2)
   $1) (BASISbp (funenv_in_basis $0))))))))))))))))))
   ((! :(topdec -> bool) -> bool) (\(topdec :topdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(basis_pack -> bool) -> bool) (\(bp :basis_pack). ((==>
   (((((eval_topdec $4) $3) $2) $1) $0)) ((((($5 $4) $3) $2) $1)
   $0))))))))))))))))`),
 ((eval_fundec_DEF),
  [],
  `((/\ ((/\ ((! :(funbind -> bool) -> bool) (\(funbind :funbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(funenv -> bool) -> bool) (\(f :funenv). ((==>
   (((((eval_funbind $4) $3) $2) $1) $0)) (((((eval_fundec
   (FUNCTORfundec $4)) $3) $2) $1) $0))))))))))))) ((/\
   ((! :(state -> bool) -> bool) (\(s :state).
   ((! :(basis -> bool) -> bool) (\(B :basis). (((((eval_fundec
   EMPTYfundec) $1) $0) $1) empty_funenv))))))
   ((! :(fundec -> bool) -> bool) (\(fundec1 :fundec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(funenv -> bool) -> bool) (\(F1 :funenv).
   ((! :(fundec -> bool) -> bool) (\(fundec2 :fundec).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(funenv -> bool) -> bool) (\(F2 :funenv). ((==>
   ((? :(state -> bool) -> bool) (\(s2 :state). ((/\ (((((eval_fundec
   $7) $6) $5) $0) $4)) (((((eval_fundec $3) $0) ((add_funenv_to_basis
   $5) $4)) $2) $1))))) (((((eval_fundec ((SEQfundec $6) $2)) $5) $4)
   $1) ((add_funenv $3) $0))))))))))))))))))))
   ((! :((fundec -> state -> basis -> state -> funenv -> bool) ->
        bool) -> bool)
   (\(P :fundec -> state -> basis -> state -> funenv -> bool). ((==>
   ((/\ ((! :(funbind -> bool) -> bool) (\(funbind :funbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(funenv -> bool) -> bool) (\(f :funenv). ((==>
   (((((eval_funbind $4) $3) $2) $1) $0)) ((((($5 (FUNCTORfundec $4))
   $3) $2) $1) $0))))))))))))) ((/\ ((! :(state -> bool) -> bool)
   (\(s :state). ((! :(basis -> bool) -> bool) (\(B :basis). ((((($2
   EMPTYfundec) $1) $0) $1) empty_funenv))))))
   ((! :(fundec -> bool) -> bool) (\(fundec1 :fundec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(funenv -> bool) -> bool) (\(F1 :funenv).
   ((! :(fundec -> bool) -> bool) (\(fundec2 :fundec).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(funenv -> bool) -> bool) (\(F2 :funenv). ((==>
   ((? :(state -> bool) -> bool) (\(s2 :state). ((/\ ((((($8 $7) $6)
   $5) $0) $4)) ((((($8 $3) $0) ((add_funenv_to_basis $5) $4)) $2)
   $1))))) ((((($7 ((SEQfundec $6) $2)) $5) $4) $1) ((add_funenv $3)
   $0)))))))))))))))))))) ((! :(fundec -> bool) -> bool)
   (\(fundec :fundec). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(funenv -> bool) -> bool) (\(f :funenv). ((==>
   (((((eval_fundec $4) $3) $2) $1) $0)) ((((($5 $4) $3) $2) $1)
   $0))))))))))))))))`),
 ((eval_funbind_DEF),
  [],
  `((! :(funbind -> bool) -> bool) (\(funbind :funbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(funenv -> bool) -> bool) (\(f :funenv).
   (((= :bool -> bool -> bool) (((((eval_funbind $4) $3) $2) $1) $0))
   ((! :((funbind -> state -> basis -> state -> funenv -> bool) ->
        bool) -> bool)
   (\(poss_eval_funbind :funbind -> state -> basis -> state ->
                         funenv -> bool). ((==>
   (ModML_eval_funbind_pred $0)) ((((($0 $5) $4) $3) $2)
   $1)))))))))))))))`),
 ((ModML_eval_funbind_pred_DEF),
  [],
  `((! :((funbind -> state -> basis -> state -> funenv -> bool) ->
        bool) -> bool)
   (\(eval_funbind :funbind -> state -> basis -> state -> funenv ->
                    bool). (((= :bool -> bool -> bool)
   (ModML_eval_funbind_pred $0)) ((/\ ((! :(sigexp -> bool) -> bool)
   (\(sigexp :sigexp). ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> (((((eval_sigexp
   $7) $1) (Inter_basis $6)) $0) $5)) ((((($8 ((((((BINDfunbind $4)
   $3) $7) (NONE :sigexp option)) $2) (NONE :funbind option))) $1) $6)
   $0) ((funenv_map $4) (((((FUNCLOS $3) $5) $2) (NONE :int option))
   $6))))))))))))))))))))) ((/\ ((! :(sigexp -> bool) -> bool)
   (\(sigexp :sigexp). ((! :(sigexp -> bool) -> bool)
   (\(sigexp' :sigexp). ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(int -> bool) -> bool) (\(i :int). ((! :(int -> bool) -> bool)
   (\(i' :int). ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((((eval_sigexp $10) $2) (Inter_basis $8)) $1) $7))
   (((((eval_sigexp $9) $1) ((add_intenv_to_intbasis (Inter_basis $8))
   ((intenv_map $4) $7))) $0) $6))) ((((($11 ((((((BINDfunbind $5) $4)
   $10) ((SOME :sigexp -> sigexp option) $9)) $3)
   (NONE :funbind option))) $2) $8) $0) ((funenv_map $5) (((((FUNCLOS
   $4) $7) $3) ((SOME :int -> int option) $6))
   $8))))))))))))))))))))))))))) ((/\ ((! :(sigexp -> bool) -> bool)
   (\(sigexp :sigexp). ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(funbind -> bool) -> bool) (\(funbind :funbind).
   ((! :(funenv -> bool) -> bool) (\(f :funenv).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((((eval_sigexp $10) $2) (Inter_basis $9)) $1) $8)) ((((($11 $7)
   $1) $9) $0) $6))) ((((($11 ((((((BINDfunbind $5) $4) $10)
   (NONE :sigexp option)) $3) ((SOME :funbind -> funbind option) $7)))
   $2) $9) $0) ((add_funenv ((funenv_map $5) (((((FUNCLOS $4) $8) $3)
   (NONE :int option)) $9))) $6))))))))))))))))))))))))))
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(sigexp -> bool) -> bool) (\(sigexp' :sigexp).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(int -> bool) -> bool) (\(i :int). ((! :(int -> bool) -> bool)
   (\(i' :int). ((! :(funbind -> bool) -> bool) (\(funbind :funbind).
   ((! :(funenv -> bool) -> bool) (\(f :funenv).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(state -> bool) -> bool) (\(s4 :state). ((==> ((/\
   (((((eval_sigexp $13) $3) (Inter_basis $11)) $2) $10)) ((/\
   (((((eval_sigexp $12) $2) ((add_intenv_to_intbasis (Inter_basis
   $11)) ((intenv_map $5) $10))) $1) $9)) ((((($14 $8) $1) $11) $0)
   $7)))) ((((($14 ((((((BINDfunbind $6) $5) $13)
   ((SOME :sigexp -> sigexp option) $12)) $4)
   ((SOME :funbind -> funbind option) $8))) $3) $11) $0) ((add_funenv
   ((funenv_map $6) (((((FUNCLOS $5) $10) $4)
   ((SOME :int -> int option) $9)) $11)))
   $7)))))))))))))))))))))))))))))))))))))`),
 ((eval_strbind_DEF),
  [],
  `((! :(strbind -> bool) -> bool) (\(strbind :strbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(strenv_pack -> bool) -> bool) (\(sep :strenv_pack).
   (((= :bool -> bool -> bool) (((((eval_strbind $4) $3) $2) $1) $0))
   ((! :((strexp -> state -> basis -> state -> env_pack -> bool) ->
        bool) -> bool)
   (\(poss_eval_strexp :strexp -> state -> basis -> state ->
                        env_pack -> bool).
   ((! :((strdec -> state -> basis -> state -> env_pack -> bool) ->
        bool) -> bool)
   (\(poss_eval_strdec :strdec -> state -> basis -> state ->
                        env_pack -> bool).
   ((! :((strbind -> state -> basis -> state -> strenv_pack ->
         bool) -> bool) -> bool)
   (\(poss_eval_strbind :strbind -> state -> basis -> state ->
                         strenv_pack -> bool). ((==>
   (((ModML_eval_structures_pred $2) $1) $0)) ((((($0 $7) $6) $5) $4)
   $3)))))))))))))))))))`),
 ((eval_strdec_DEF),
  [],
  `((! :(strdec -> bool) -> bool) (\(strdec :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(env_pack -> bool) -> bool) (\(ep :env_pack).
   (((= :bool -> bool -> bool) (((((eval_strdec $4) $3) $2) $1) $0))
   ((! :((strexp -> state -> basis -> state -> env_pack -> bool) ->
        bool) -> bool)
   (\(poss_eval_strexp :strexp -> state -> basis -> state ->
                        env_pack -> bool).
   ((! :((strdec -> state -> basis -> state -> env_pack -> bool) ->
        bool) -> bool)
   (\(poss_eval_strdec :strdec -> state -> basis -> state ->
                        env_pack -> bool).
   ((! :((strbind -> state -> basis -> state -> strenv_pack ->
         bool) -> bool) -> bool)
   (\(poss_eval_strbind :strbind -> state -> basis -> state ->
                         strenv_pack -> bool). ((==>
   (((ModML_eval_structures_pred $2) $1) $0)) ((((($1 $7) $6) $5) $4)
   $3)))))))))))))))))))`),
 ((eval_strexp_DEF),
  [],
  `((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(env_pack -> bool) -> bool) (\(ep :env_pack).
   (((= :bool -> bool -> bool) (((((eval_strexp $4) $3) $2) $1) $0))
   ((! :((strexp -> state -> basis -> state -> env_pack -> bool) ->
        bool) -> bool)
   (\(poss_eval_strexp :strexp -> state -> basis -> state ->
                        env_pack -> bool).
   ((! :((strdec -> state -> basis -> state -> env_pack -> bool) ->
        bool) -> bool)
   (\(poss_eval_strdec :strdec -> state -> basis -> state ->
                        env_pack -> bool).
   ((! :((strbind -> state -> basis -> state -> strenv_pack ->
         bool) -> bool) -> bool)
   (\(poss_eval_strbind :strbind -> state -> basis -> state ->
                         strenv_pack -> bool). ((==>
   (((ModML_eval_structures_pred $2) $1) $0)) ((((($2 $7) $6) $5) $4)
   $3)))))))))))))))))))`),
 ((ModML_eval_structures_pred_DEF),
  [],
  `((! :((strexp -> state -> basis -> state -> env_pack -> bool) ->
        bool) -> bool)
   (\(eval_strexp :strexp -> state -> basis -> state -> env_pack ->
                   bool).
   ((! :((strdec -> state -> basis -> state -> env_pack -> bool) ->
        bool) -> bool)
   (\(eval_strdec :strdec -> state -> basis -> state -> env_pack ->
                   bool).
   ((! :((strbind -> state -> basis -> state -> strenv_pack ->
         bool) -> bool) -> bool)
   (\(eval_strbind :strbind -> state -> basis -> state ->
                    strenv_pack -> bool). (((= :bool -> bool -> bool)
   (((ModML_eval_structures_pred $2) $1) $0)) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(strdec -> bool) -> bool) (\(strdec :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($6 $2) $1)
   $4) $0) (ENVep $3))) ((((($7 (STRUCTstrexp $2)) $1) $4) $0) (ENVep
   $3)))))))))))))) ((/\ ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strdec -> bool) -> bool) (\(strdec :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($6 $2) $1)
   $4) $0) (PACKep $3))) ((((($7 (STRUCTstrexp $2)) $1) $4) $0)
   (PACKep $3)))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(strid long -> bool) -> bool) (\(longstrid :strid long).
   ((! :(state -> bool) -> bool) (\(s :state). ((==>
   (((= :env lift -> env lift -> bool) ((lift :env -> env lift) $2))
   ((lookup_longstrid_basis $3) $1))) ((((($6 (LONGSTRIDstrexp $1))
   $0) $3) $0) (ENVep $2)))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(basis -> bool) -> bool) (\(B' :basis).
   ((! :(env -> bool) -> bool) (\(E :env). ((! :(env -> bool) -> bool)
   (\(E' :env). ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strexp -> bool) -> bool) (\(strexp' :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((= :funclos lift -> funclos lift -> bool)
   ((lift :funclos -> funclos lift) (((((FUNCLOS $3) $7) $4)
   (NONE :int option)) $10))) ((lookup_funid_basis $11) $6))) ((/\
   ((((($14 $5) $2) $11) $1) (ENVep $9))) ((((($14 $4) $1) ((add_basis
   $10) (strenv_in_basis ((strenv_map $3) ((cut_env $9) $7))))) $0)
   (ENVep $8))))) ((((($14 ((APPstrexp $6) $5)) $2) $11) $0) (ENVep
   $8)))))))))))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(basis -> bool) -> bool) (\(B' :basis).
   ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strexp -> bool) -> bool) (\(strexp' :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((/\
   (((= :funclos lift -> funclos lift -> bool)
   ((lift :funclos -> funclos lift) (((((FUNCLOS $2) $7) $3)
   (NONE :int option)) $8))) ((lookup_funid_basis $9) $6))) ((((($12
   $4) $1) $9) $0) (PACKep $5)))) ((((($12 ((APPstrexp $6) $4)) $1)
   $9) $0) (PACKep $5)))))))))))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(basis -> bool) -> bool) (\(B' :basis).
   ((! :(env -> bool) -> bool) (\(E :env). ((! :(int -> bool) -> bool)
   (\(i :int). ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strexp -> bool) -> bool) (\(strexp' :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((= :funclos lift -> funclos lift -> bool)
   ((lift :funclos -> funclos lift) (((((FUNCLOS $3) $8) $4)
   (NONE :int option)) $10))) ((lookup_funid_basis $11) $7))) ((/\
   ((((($14 $5) $2) $11) $1) (ENVep $9))) ((((($14 $4) $1) ((add_basis
   $10) (strenv_in_basis ((strenv_map $3) ((cut_env $9) $8))))) $0)
   (PACKep $6))))) ((((($14 ((APPstrexp $7) $5)) $2) $11) $0) (PACKep
   $6)))))))))))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(basis -> bool) -> bool) (\(B' :basis).
   ((! :(env -> bool) -> bool) (\(E :env). ((! :(env -> bool) -> bool)
   (\(E' :env). ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(int -> bool) -> bool) (\(i' :int).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strexp -> bool) -> bool) (\(strexp' :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((= :funclos lift -> funclos lift -> bool)
   ((lift :funclos -> funclos lift) (((((FUNCLOS $3) $8) $4)
   ((SOME :int -> int option) $7)) $11))) ((lookup_funid_basis $12)
   $6))) ((/\ ((((($15 $5) $2) $12) $1) (ENVep $10))) ((((($15 $4) $1)
   ((add_basis $11) (strenv_in_basis ((strenv_map $3) ((cut_env $10)
   $8))))) $0) (ENVep $9))))) ((((($15 ((APPstrexp $6) $5)) $2) $12)
   $0) (ENVep ((cut_env $9) $7))))))))))))))))))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(basis -> bool) -> bool) (\(B' :basis).
   ((! :(int -> bool) -> bool) (\(i :int). ((! :(int -> bool) -> bool)
   (\(i' :int). ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strexp -> bool) -> bool) (\(strexp' :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((/\
   (((= :funclos lift -> funclos lift -> bool)
   ((lift :funclos -> funclos lift) (((((FUNCLOS $2) $8) $3)
   ((SOME :int -> int option) $7)) $9))) ((lookup_funid_basis $10)
   $6))) ((((($13 $4) $1) $10) $0) (PACKep $5)))) ((((($13 ((APPstrexp
   $6) $4)) $1) $10) $0) (PACKep $5)))))))))))))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(basis -> bool) -> bool) (\(B' :basis).
   ((! :(env -> bool) -> bool) (\(E :env). ((! :(int -> bool) -> bool)
   (\(i :int). ((! :(int -> bool) -> bool) (\(i' :int).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strexp -> bool) -> bool) (\(strexp' :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((= :funclos lift -> funclos lift -> bool)
   ((lift :funclos -> funclos lift) (((((FUNCLOS $3) $9) $4)
   ((SOME :int -> int option) $8)) $11))) ((lookup_funid_basis $12)
   $7))) ((/\ ((((($15 $5) $2) $12) $1) (ENVep $10))) ((((($15 $4) $1)
   ((add_basis $11) (strenv_in_basis ((strenv_map $3) ((cut_env $10)
   $9))))) $0) (PACKep $6))))) ((((($15 ((APPstrexp $7) $5)) $2) $12)
   $0) (PACKep $6)))))))))))))))))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(env -> bool) -> bool) (\(E :env). ((! :(env -> bool) -> bool)
   (\(E' :env). ((! :(strdec -> bool) -> bool) (\(strdec :strdec).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) (ENVep $6))) ((((($10 $3) $1) ((add_env_to_basis $7)
   $6)) $0) (ENVep $5)))) ((((($10 ((LETstrexp $4) $3)) $2) $7) $0)
   (ENVep $5)))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strdec -> bool) -> bool) (\(strdec :strdec).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($7 $3) $1)
   $5) $0) (PACKep $4))) ((((($8 ((LETstrexp $3) $2)) $1) $5) $0)
   (PACKep $4)))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strdec -> bool) -> bool) (\(strdec :strdec).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) (ENVep $6))) ((((($10 $3) $1) ((add_env_to_basis $7)
   $6)) $0) (PACKep $5)))) ((((($10 ((LETstrexp $4) $3)) $2) $7) $0)
   (PACKep $5)))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E' :env).
   ((! :(dec -> bool) -> bool) (\(dec :dec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> (((((eval_dec
   $2) $1) (env_of_basis $4)) $0) (ENVep $3))) ((((($6 (DECstrdec $2))
   $1) $4) $0) (ENVep $3)))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(dec -> bool) -> bool) (\(dec :dec).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> (((((eval_dec
   $3) $1) (env_of_basis $4)) $0) (PACKep $2))) ((((($6 (DECstrdec
   $3)) $1) $4) $0) (PACKep $2)))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(strenv -> bool) -> bool) (\(SE :strenv).
   ((! :(strbind -> bool) -> bool) (\(strbind :strbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($5 $2) $1)
   $4) $0) (STRENVsp $3))) ((((($6 (STRUCTUREstrdec $2)) $1) $4) $0)
   (ENVep (strenv_in_env $3))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strbind -> bool) -> bool) (\(strbind :strbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($5 $2) $1)
   $4) $0) (PACKsp $3))) ((((($6 (STRUCTUREstrdec $2)) $1) $4) $0)
   (PACKep $3)))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E1 :env).
   ((! :(env -> bool) -> bool) (\(E2 :env).
   ((! :(strdec -> bool) -> bool) (\(strdec1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(strdec2 :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) (ENVep $6))) ((((($9 $3) $1) ((add_env_to_basis $7)
   $6)) $0) (ENVep $5)))) ((((($9 ((LOCALstrdec $4) $3)) $2) $7) $0)
   (ENVep $5)))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strdec -> bool) -> bool) (\(strdec1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(strdec2 :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($7 $3) $1)
   $5) $0) (PACKep $4))) ((((($7 ((LOCALstrdec $3) $2)) $1) $5) $0)
   (PACKep $4)))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strdec -> bool) -> bool) (\(strdec1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(strdec2 :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) (ENVep $6))) ((((($9 $3) $1) ((add_env_to_basis $7)
   $6)) $0) (PACKep $5)))) ((((($9 ((LOCALstrdec $4) $3)) $2) $7) $0)
   (PACKep $5)))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(state -> bool) -> bool) (\(s :state). ((((($3
   EMPTYstrdec) $0) $1) $0) (ENVep empty_env))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(env -> bool) -> bool) (\(E1 :env).
   ((! :(env -> bool) -> bool) (\(E2 :env).
   ((! :(strdec -> bool) -> bool) (\(strdec1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(strdec2 :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) (ENVep $6))) ((((($9 $3) $1) ((add_env_to_basis $7)
   $6)) $0) (ENVep $5)))) ((((($9 ((SEQstrdec $4) $3)) $2) $7) $0)
   (ENVep ((add_env $6) $5))))))))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strdec -> bool) -> bool) (\(strdec1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(strdec2 :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($7 $3) $1)
   $5) $0) (PACKep $4))) ((((($7 ((SEQstrdec $3) $2)) $1) $5) $0)
   (PACKep $4)))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strdec -> bool) -> bool) (\(strdec1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(strdec2 :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) (ENVep $6))) ((((($9 $3) $1) ((add_env_to_basis $7)
   $6)) $0) (PACKep $5)))) ((((($9 ((SEQstrdec $4) $3)) $2) $7) $0)
   (PACKep $5)))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($8 $3) $1)
   $5) $0) (ENVep $4))) ((((($6 ((((BINDstrbind $2)
   (NONE :sigexp option)) $3) (NONE :strbind option))) $1) $5) $0)
   (STRENVsp ((strenv_map $2) $4))))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($8 $3) $1)
   $5) $0) (PACKep $4))) ((((($6 ((((BINDstrbind $2)
   (NONE :sigexp option)) $3) (NONE :strbind option))) $1) $5) $0)
   (PACKsp $4)))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($11
   $4) $2) $8) $1) (ENVep $7))) (((((eval_sigexp $5) $1) (Inter_basis
   $8)) $0) $6))) ((((($9 ((((BINDstrbind $3)
   ((SOME :sigexp -> sigexp option) $5)) $4) (NONE :strbind option)))
   $2) $8) $0) (STRENVsp ((strenv_map $3) ((cut_env $7)
   $6)))))))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($9 $3) $1)
   $6) $0) (PACKep $5))) ((((($7 ((((BINDstrbind $2)
   ((SOME :sigexp -> sigexp option) $4)) $3) (NONE :strbind option)))
   $1) $6) $0) (PACKsp $5)))))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(strenv -> bool) -> bool) (\(SE :strenv).
   ((! :(strbind -> bool) -> bool) (\(strbind :strbind).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($11
   $4) $2) $8) $1) (ENVep $7))) ((((($9 $5) $1) $8) $0) (STRENVsp
   $6)))) ((((($9 ((((BINDstrbind $3) (NONE :sigexp option)) $4)
   ((SOME :strbind -> strbind option) $5))) $2) $8) $0) (STRENVsp
   ((add_strenv ((strenv_map $3) $7)) $6))))))))))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strbind -> bool) -> bool) (\(strbind :strbind).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($9 $3) $1)
   $6) $0) (PACKep $5))) ((((($7 ((((BINDstrbind $2)
   (NONE :sigexp option)) $3) ((SOME :strbind -> strbind option) $4)))
   $1) $6) $0) (PACKsp $5)))))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strbind -> bool) -> bool) (\(strbind :strbind).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($11
   $4) $2) $8) $1) (ENVep $7))) ((((($9 $5) $1) $8) $0) (PACKsp $6))))
   ((((($9 ((((BINDstrbind $3) (NONE :sigexp option)) $4)
   ((SOME :strbind -> strbind option) $5))) $2) $8) $0) (PACKsp
   $6)))))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(strenv -> bool) -> bool) (\(SE :strenv).
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(strbind -> bool) -> bool) (\(strbind :strbind).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(state -> bool) -> bool) (\(s4 :state). ((==> ((/\ ((((($14
   $5) $3) $11) $2) (ENVep $10))) ((/\ (((((eval_sigexp $7) $2)
   (Inter_basis $11)) $1) $9)) ((((($12 $6) $1) $11) $0) (STRENVsp
   $8))))) ((((($12 ((((BINDstrbind $4)
   ((SOME :sigexp -> sigexp option) $7)) $5)
   ((SOME :strbind -> strbind option) $6))) $3) $11) $0) (STRENVsp
   ((add_strenv ((strenv_map $4) ((cut_env $10) $9)))
   $8))))))))))))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(strbind -> bool) -> bool) (\(strbind :strbind).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($10 $3) $1)
   $7) $0) (PACKep $6))) ((((($8 ((((BINDstrbind $2)
   ((SOME :sigexp -> sigexp option) $5)) $3)
   ((SOME :strbind -> strbind option) $4))) $1) $7) $0) (PACKsp
   $6)))))))))))))))))))) ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(env -> bool) -> bool) (\(E :env). ((! :(int -> bool) -> bool)
   (\(i :int). ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(strbind -> bool) -> bool) (\(strbind :strbind).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(state -> bool) -> bool) (\(s4 :state). ((==> ((/\ ((((($14
   $5) $3) $11) $2) (ENVep $10))) ((/\ (((((eval_sigexp $7) $2)
   (Inter_basis $11)) $1) $9)) ((((($12 $6) $1) $11) $0) (PACKsp
   $8))))) ((((($12 ((((BINDstrbind $4)
   ((SOME :sigexp -> sigexp option) $7)) $5)
   ((SOME :strbind -> strbind option) $6))) $3) $11) $0) (PACKsp
   $8))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((eval_sigdec_DEF),
  [],
  `((/\ ((/\ ((! :(sigbind -> bool) -> bool) (\(sigbind :sigbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv -> bool) -> bool) (\(G :sigenv). ((==>
   (((((eval_sigbind $4) $3) $2) $1) $0)) (((((eval_sigdec
   (SIGNATUREsigdec $4)) $3) $2) $1) $0))))))))))))) ((/\
   ((! :(state -> bool) -> bool) (\(s :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis). (((((eval_sigdec
   EMPTYsigdec) $1) $0) $1) empty_sigenv))))))
   ((! :(sigdec -> bool) -> bool) (\(sigdec1 :sigdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(sigenv -> bool) -> bool) (\(G1 :sigenv).
   ((! :(sigdec -> bool) -> bool) (\(sigdec2 :sigdec).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(sigenv -> bool) -> bool) (\(G2 :sigenv). ((==>
   ((? :(state -> bool) -> bool) (\(s2 :state). ((/\ (((((eval_sigdec
   $7) $6) $5) $0) $4)) (((((eval_sigdec $3) $0)
   ((add_sigenv_to_intbasis $5) $4)) $2) $1))))) (((((eval_sigdec
   ((SEQsigdec $6) $2)) $5) $4) $1) ((add_sigenv $3)
   $0))))))))))))))))))))
   ((! :((sigdec -> state -> intbasis -> state -> sigenv -> bool) ->
        bool) -> bool)
   (\(P :sigdec -> state -> intbasis -> state -> sigenv -> bool).
   ((==> ((/\ ((! :(sigbind -> bool) -> bool) (\(sigbind :sigbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv -> bool) -> bool) (\(G :sigenv). ((==>
   (((((eval_sigbind $4) $3) $2) $1) $0)) ((((($5 (SIGNATUREsigdec
   $4)) $3) $2) $1) $0))))))))))))) ((/\ ((! :(state -> bool) -> bool)
   (\(s :state). ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((((($2 EMPTYsigdec) $1) $0) $1) empty_sigenv))))))
   ((! :(sigdec -> bool) -> bool) (\(sigdec1 :sigdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(sigenv -> bool) -> bool) (\(G1 :sigenv).
   ((! :(sigdec -> bool) -> bool) (\(sigdec2 :sigdec).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(sigenv -> bool) -> bool) (\(G2 :sigenv). ((==>
   ((? :(state -> bool) -> bool) (\(s2 :state). ((/\ ((((($8 $7) $6)
   $5) $0) $4)) ((((($8 $3) $0) ((add_sigenv_to_intbasis $5) $4)) $2)
   $1))))) ((((($7 ((SEQsigdec $6) $2)) $5) $4) $1) ((add_sigenv $3)
   $0)))))))))))))))))))) ((! :(sigdec -> bool) -> bool)
   (\(sigdec :sigdec). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv -> bool) -> bool) (\(G :sigenv). ((==>
   (((((eval_sigdec $4) $3) $2) $1) $0)) ((((($5 $4) $3) $2) $1)
   $0))))))))))))))))`),
 ((eval_sigbind_DEF),
  [],
  `((! :(sigbind -> bool) -> bool) (\(sigbind :sigbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv -> bool) -> bool) (\(G :sigenv).
   (((= :bool -> bool -> bool) (((((eval_sigbind $4) $3) $2) $1) $0))
   ((! :((sigbind -> state -> intbasis -> state -> sigenv -> bool) ->
        bool) -> bool)
   (\(poss_eval_sigbind :sigbind -> state -> intbasis -> state ->
                         sigenv -> bool). ((==>
   (ModML_eval_sigbind_pred $0)) ((((($0 $5) $4) $3) $2)
   $1)))))))))))))))`),
 ((ModML_eval_sigbind_pred_DEF),
  [],
  `((! :((sigbind -> state -> intbasis -> state -> sigenv -> bool) ->
        bool) -> bool)
   (\(eval_sigbind :sigbind -> state -> intbasis -> state -> sigenv ->
                    bool). (((= :bool -> bool -> bool)
   (ModML_eval_sigbind_pred $0)) ((/\ ((! :(sigexp -> bool) -> bool)
   (\(sigexp :sigexp). ((! :(intbasis -> bool) -> bool)
   (\(IB :intbasis). ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(sigid -> bool) -> bool) (\(sigid :sigid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> (((((eval_sigexp
   $5) $1) $4) $0) $3)) ((((($6 (((BINDsigbind $2) $5)
   (NONE :sigbind option))) $1) $4) $0) ((sigenv_map $2)
   $3)))))))))))))))) ((! :(sigbind -> bool) -> bool)
   (\(sigbind :sigbind). ((! :(intbasis -> bool) -> bool)
   (\(IB :intbasis). ((! :(sigenv -> bool) -> bool) (\(G :sigenv).
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(sigid -> bool) -> bool) (\(sigid :sigid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $8)
   $1) $7) $0) $6)) (((((eval_sigexp $5) $2) $7) $1) $4))) ((((($9
   (((BINDsigbind $3) $5) ((SOME :sigbind -> sigbind option) $8))) $2)
   $7) $0) ((add_sigenv ((sigenv_map $3) $4))
   $6)))))))))))))))))))))))))`),
 ((eval_strdesc_DEF),
  [],
  `((! :(strdesc -> bool) -> bool) (\(strdesc :strdesc).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(intenv -> bool) -> bool) (\(int :intenv).
   (((= :bool -> bool -> bool) (((((eval_strdesc $4) $3) $2) $1) $0))
   ((! :((sigexp -> state -> intbasis -> state -> int -> bool) ->
        bool) -> bool)
   (\(poss_eval_sigexp :sigexp -> state -> intbasis -> state -> int ->
                        bool).
   ((! :((spec -> state -> intbasis -> state -> int -> bool) ->
        bool) -> bool)
   (\(poss_eval_spec :spec -> state -> intbasis -> state -> int ->
                      bool).
   ((! :((strdesc -> state -> intbasis -> state -> intenv -> bool) ->
        bool) -> bool)
   (\(poss_eval_strdesc :strdesc -> state -> intbasis -> state ->
                         intenv -> bool). ((==>
   (((ModML_eval_signatures_pred $2) $1) $0)) ((((($0 $7) $6) $5) $4)
   $3)))))))))))))))))))`),
 ((eval_spec_DEF),
  [],
  `((! :(spec -> bool) -> bool) (\(spec :spec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(int -> bool) -> bool) (\(i :int). (((= :bool -> bool -> bool)
   (((((eval_spec $4) $3) $2) $1) $0))
   ((! :((sigexp -> state -> intbasis -> state -> int -> bool) ->
        bool) -> bool)
   (\(poss_eval_sigexp :sigexp -> state -> intbasis -> state -> int ->
                        bool).
   ((! :((spec -> state -> intbasis -> state -> int -> bool) ->
        bool) -> bool)
   (\(poss_eval_spec :spec -> state -> intbasis -> state -> int ->
                      bool).
   ((! :((strdesc -> state -> intbasis -> state -> intenv -> bool) ->
        bool) -> bool)
   (\(poss_eval_strdesc :strdesc -> state -> intbasis -> state ->
                         intenv -> bool). ((==>
   (((ModML_eval_signatures_pred $2) $1) $0)) ((((($1 $7) $6) $5) $4)
   $3)))))))))))))))))))`),
 ((eval_sigexp_DEF),
  [],
  `((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(int -> bool) -> bool) (\(i :int). (((= :bool -> bool -> bool)
   (((((eval_sigexp $4) $3) $2) $1) $0))
   ((! :((sigexp -> state -> intbasis -> state -> int -> bool) ->
        bool) -> bool)
   (\(poss_eval_sigexp :sigexp -> state -> intbasis -> state -> int ->
                        bool).
   ((! :((spec -> state -> intbasis -> state -> int -> bool) ->
        bool) -> bool)
   (\(poss_eval_spec :spec -> state -> intbasis -> state -> int ->
                      bool).
   ((! :((strdesc -> state -> intbasis -> state -> intenv -> bool) ->
        bool) -> bool)
   (\(poss_eval_strdesc :strdesc -> state -> intbasis -> state ->
                         intenv -> bool). ((==>
   (((ModML_eval_signatures_pred $2) $1) $0)) ((((($2 $7) $6) $5) $4)
   $3)))))))))))))))))))`),
 ((ModML_eval_signatures_pred_DEF),
  [],
  `((! :((sigexp -> state -> intbasis -> state -> int -> bool) ->
        bool) -> bool)
   (\(eval_sigexp :sigexp -> state -> intbasis -> state -> int ->
                   bool).
   ((! :((spec -> state -> intbasis -> state -> int -> bool) ->
        bool) -> bool)
   (\(eval_spec :spec -> state -> intbasis -> state -> int -> bool).
   ((! :((strdesc -> state -> intbasis -> state -> intenv -> bool) ->
        bool) -> bool)
   (\(eval_strdesc :strdesc -> state -> intbasis -> state -> intenv ->
                    bool). (((= :bool -> bool -> bool)
   (((ModML_eval_signatures_pred $2) $1) $0)) ((/\
   ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(spec -> bool) -> bool) (\(spec :spec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($6 $2) $1)
   $3) $0) $4)) ((((($7 (SIGsigexp $2)) $1) $3) $0) $4)))))))))))))
   ((/\ ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(state -> bool) -> bool) (\(s :state).
   ((! :(sigid -> bool) -> bool) (\(sigid :sigid). ((==>
   (((= :int lift -> int lift -> bool) ((lookup_sigid_intbasis $2)
   $0)) ((lift :int -> int lift) $3))) ((((($6 (SIGIDsigexp $0)) $1)
   $2) $1) $3))))))))))) ((/\ ((! :(intbasis -> bool) -> bool)
   (\(IB :intbasis). ((! :(valdesc -> bool) -> bool)
   (\(valdesc :valdesc). ((! :(var set -> bool) -> bool)
   (\(vars :var set). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((eval_valdesc
   $3) $1) $0) $2)) ((((($6 (VALspec $3)) $1) $4) $0) (vars_in_int
   $2)))))))))))))) ((/\ ((! :(intbasis -> bool) -> bool)
   (\(IB :intbasis). ((! :(excon set -> bool) -> bool)
   (\(excons :excon set). ((! :(exdesc -> bool) -> bool)
   (\(exdesc :exdesc). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((eval_exdesc
   $2) $1) $0) $3)) ((((($6 (EXCEPTIONspec $2)) $1) $4) $0)
   (excons_in_int $3)))))))))))))) ((/\
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(intenv -> bool) -> bool) (\(IE :intenv).
   ((! :(strdesc -> bool) -> bool) (\(strdesc :strdesc).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($5 $2) $1)
   $4) $0) $3)) ((((($6 (STRUCTUREspec $2)) $1) $4) $0) (intenv_in_int
   $3)))))))))))))) ((/\ ((! :(intbasis -> bool) -> bool)
   (\(IB :intbasis). ((! :(int -> bool) -> bool) (\(I1 :int).
   ((! :(int -> bool) -> bool) (\(I2 :int).
   ((! :(spec -> bool) -> bool) (\(spec1 :spec).
   ((! :(spec -> bool) -> bool) (\(spec2 :spec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) $6)) ((((($9 $3) $1) ((add_intenv_to_intbasis $7)
   (intenv_of_int $6))) $0) $5))) ((((($9 ((LOCALspec $4) $3)) $2) $7)
   $0) $5))))))))))))))))))) ((/\ ((! :(intbasis -> bool) -> bool)
   (\(IB :intbasis). ((! :(int nonemptylist -> bool) -> bool)
   (\(nonempty_int_list :int nonemptylist).
   ((! :(int lift nonemptylist -> bool) -> bool)
   (\(nonempty_lift_int_list :int lift nonemptylist).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(nonempty_longstrid_list :strid long nonemptylist).
   ((! :(state -> bool) -> bool) (\(s :state). ((==> ((/\
   (((= :int lift nonemptylist -> int lift nonemptylist -> bool)
   (((nonempty_MAP :(strid long -> int lift) ->
                    strid long nonemptylist -> int lift nonemptylist)
   (lookup_longstrid_intbasis $4)) $1)) $2))
   (((= :int lift nonemptylist -> int lift nonemptylist -> bool)
   (((nonempty_MAP :(int -> int lift) -> int nonemptylist ->
                    int lift nonemptylist) (lift :int -> int lift))
   $3)) $2))) ((((($6 (OPENspec $1)) $0) $4) $0)
   (((nonempty_FOLDL_WITH_INIT :(int -> int -> int) ->
                                int nonemptylist -> int) add_int)
   $3)))))))))))))) ((/\ ((! :(intbasis -> bool) -> bool)
   (\(IB :intbasis). ((! :(int nonemptylist -> bool) -> bool)
   (\(nonempty_int_list :int nonemptylist).
   ((! :(int lift nonemptylist -> bool) -> bool)
   (\(nonempty_lift_int_list :int lift nonemptylist).
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(nonempty_sigid_list :sigid nonemptylist).
   ((! :(state -> bool) -> bool) (\(s :state). ((==> ((/\
   (((= :int lift nonemptylist -> int lift nonemptylist -> bool)
   (((nonempty_MAP :(sigid -> int lift) -> sigid nonemptylist ->
                    int lift nonemptylist) (lookup_sigid_intbasis $4))
   $1)) $2))
   (((= :int lift nonemptylist -> int lift nonemptylist -> bool)
   (((nonempty_MAP :(int -> int lift) -> int nonemptylist ->
                    int lift nonemptylist) (lift :int -> int lift))
   $3)) $2))) ((((($6 (INCLUDEspec $1)) $0) $4) $0)
   (((nonempty_FOLDL_WITH_INIT :(int -> int -> int) ->
                                int nonemptylist -> int) add_int)
   $3)))))))))))))) ((/\ ((! :(intbasis -> bool) -> bool)
   (\(IB :intbasis). ((! :(state -> bool) -> bool) (\(s :state).
   ((((($3 EMPTYspec) $0) $1) $0) empty_int)))))) ((/\
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(int -> bool) -> bool) (\(I1 :int).
   ((! :(int -> bool) -> bool) (\(I2 :int).
   ((! :(spec -> bool) -> bool) (\(spec1 :spec).
   ((! :(spec -> bool) -> bool) (\(spec2 :spec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) $6)) ((((($9 $3) $1) ((add_intenv_to_intbasis $7)
   (intenv_of_int $6))) $0) $5))) ((((($9 ((SEQspec $4) $3)) $2) $7)
   $0) ((add_int $6) $5)))))))))))))))))))) ((/\
   ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($8 $3) $1)
   $4) $0) $5)) ((((($6 (((STRIDstrdesc $2) $3)
   (NONE :strdesc option))) $1) $4) $0) ((intenv_map $2)
   $5)))))))))))))))) ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(intenv -> bool) -> bool) (\(IE :intenv).
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(strdesc -> bool) -> bool) (\(strdesc :strdesc).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($11
   $5) $2) $7) $1) $8)) ((((($9 $4) $1) $7) $0) $6))) ((((($9
   (((STRIDstrdesc $3) $5) ((SOME :strdesc -> strdesc option) $4)))
   $2) $7) $0) ((add_intenv ((intenv_map $3) $8))
   $6)))))))))))))))))))))))))))))))))))))))`),
 ((cut_env_DEF),
  [],
  `((/\ ((! :(strenv -> bool) -> bool) (\(x1 :strenv).
   ((! :(varenv -> bool) -> bool) (\(x2 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x3 :exconenv).
   (((= :(int -> env) -> (int -> env) -> bool) (cut_env (((ENV $2) $1)
   $0))) (\(int :int). (((ENV ((cut_strenv $3) (intenv_of_int $0)))
   ((cut_varenv $2) (vars_of_int $0))) ((cut_exconenv $1)
   (excons_of_int $0)))))))))))) ((/\
   ((! :((strid # env) list finmap -> bool) -> bool)
   (\(x1 :(strid # env) list finmap).
   (((= :(intenv -> strenv) -> (intenv -> strenv) -> bool) (cut_strenv
   (STRENV $0))) (\(intenv :intenv). (STRENV ((cut_strenv_finmap $1)
   $0))))))) ((/\ ((! :((strid # env) list -> bool) -> bool)
   (\(x1 :(strid # env) list).
   (((= :(intenv -> (strid # env) list finmap) ->
         (intenv -> (strid # env) list finmap) -> bool)
   (cut_strenv_finmap
   ((FINMAP :(strid # env) list -> (strid # env) list finmap) $0)))
   (\(intenv :intenv).
   ((FINMAP :(strid # env) list -> (strid # env) list finmap)
   ((cut_strenv_list $1) $0))))))) ((/\
   (((= :(intenv -> (strid # env) list) ->
         (intenv -> (strid # env) list) -> bool) (cut_strenv_list
   (NIL :(strid # env) list))) (\(intenv :intenv).
   (NIL :(strid # env) list)))) ((/\
   ((! :(strid # env -> bool) -> bool) (\(x1 :strid # env).
   ((! :((strid # env) list -> bool) -> bool)
   (\(x2 :(strid # env) list).
   (((= :(intenv -> (strid # env) list) ->
         (intenv -> (strid # env) list) -> bool) (cut_strenv_list
   (((CONS :strid # env -> (strid # env) list -> (strid # env) list)
   $1) $0))) (\(intenv :intenv).
   ((((COND :bool -> (strid # env) list -> (strid # env) list ->
             (strid # env) list)
   (((= :(strid # env) lift -> (strid # env) lift -> bool)
   ((cut_strenv_pair $2) $0)) (undefined :(strid # env) lift)))
   ((cut_strenv_list $1) $0))
   (((CONS :strid # env -> (strid # env) list -> (strid # env) list)
   ((lower :(strid # env) lift -> strid # env) ((cut_strenv_pair $2)
   $0))) ((cut_strenv_list $1) $0))))))))))
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(env -> bool) -> bool) (\(x2 :env).
   (((= :(intenv -> (strid # env) lift) ->
         (intenv -> (strid # env) lift) -> bool) (cut_strenv_pair
   (((, :strid -> env -> strid # env) $1) $0))) (\(intenv :intenv).
   ((((COND :bool -> (strid # env) lift -> (strid # env) lift ->
             (strid # env) lift) (((= :int lift -> int lift -> bool)
   ((lookup_strid_intenv $0) $2)) (undefined :int lift)))
   (undefined :(strid # env) lift))
   ((lift :strid # env -> (strid # env) lift)
   (((, :strid -> env -> strid # env) $2) ((cut_env $1)
   ((lower :int lift -> int) ((lookup_strid_intenv $0)
   $2)))))))))))))))))`),
 ((Inter_basis_DEF),
  [],
  `((! :(funenv -> bool) -> bool) (\(x1 :funenv).
   ((! :(sigenv -> bool) -> bool) (\(x2 :sigenv).
   ((! :(env -> bool) -> bool) (\(x3 :env).
   (((= :intbasis -> intbasis -> bool) (Inter_basis (((BASIS $2) $1)
   $0))) ((INTBASIS $1) (intenv_of_int (Inter $0))))))))))`),
 ((Inter_DEF),
  [],
  `((/\ ((! :(strenv -> bool) -> bool) (\(x1 :strenv).
   ((! :(varenv -> bool) -> bool) (\(x2 :varenv).
   ((! :(exconenv -> bool) -> bool) (\(x3 :exconenv).
   (((= :int -> int -> bool) (Inter (((ENV $2) $1) $0))) (((BASICint
   (intenv_from_strenv $2)) (vars_from_varenv $1))
   (excons_from_exconenv $0)))))))))) ((/\
   ((! :((strid # env) list finmap -> bool) -> bool)
   (\(x1 :(strid # env) list finmap). (((= :intenv -> intenv -> bool)
   (intenv_from_strenv (STRENV $0))) (INTENV
   (intenv_from_strenv_finmap $0)))))) ((/\
   ((! :((strid # env) list -> bool) -> bool)
   (\(x1 :(strid # env) list).
   (((= :(strid # int) list finmap -> (strid # int) list finmap ->
         bool) (intenv_from_strenv_finmap
   ((FINMAP :(strid # env) list -> (strid # env) list finmap) $0)))
   ((FINMAP :(strid # int) list -> (strid # int) list finmap)
   (intenv_from_strenv_list $0)))))) ((/\
   (((= :(strid # int) list -> (strid # int) list -> bool)
   (intenv_from_strenv_list (NIL :(strid # env) list)))
   (NIL :(strid # int) list))) ((/\
   ((! :(strid # env -> bool) -> bool) (\(x1 :strid # env).
   ((! :((strid # env) list -> bool) -> bool)
   (\(x2 :(strid # env) list).
   (((= :(strid # int) list -> (strid # int) list -> bool)
   (intenv_from_strenv_list
   (((CONS :strid # env -> (strid # env) list -> (strid # env) list)
   $1) $0)))
   (((CONS :strid # int -> (strid # int) list -> (strid # int) list)
   (intenv_from_strenv_pair $1)) (intenv_from_strenv_list $0))))))))
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(env -> bool) -> bool) (\(x2 :env).
   (((= :strid # int -> strid # int -> bool) (intenv_from_strenv_pair
   (((, :strid -> env -> strid # env) $1) $0)))
   (((, :strid -> int -> strid # int) $1) (Inter $0))))))))))))`),
 ((lookup_sigid_intbasis_DEF),
  [],
  `((! :(sigenv -> bool) -> bool) (\(sigenv :sigenv).
   ((! :(intenv -> bool) -> bool) (\(intenv :intenv).
   ((! :(sigid -> bool) -> bool) (\(sigid :sigid).
   (((= :int lift -> int lift -> bool) ((lookup_sigid_intbasis
   ((INTBASIS $2) $1)) $0)) ((lookup_sigid_sigenv $2) $0))))))))`),
 ((lookup_sigid_sigenv_DEF),
  [],
  `((! :((sigid -> int lift) -> bool) -> bool)
   (\(l :sigid -> int lift). ((! :(sigid -> bool) -> bool)
   (\(sigid :sigid). (((= :int lift -> int lift -> bool)
   ((lookup_sigid_sigenv (SIGENV $1)) $0)) ($1 $0))))))`),
 ((lookup_funid_basis_DEF),
  [],
  `((! :(funenv -> bool) -> bool) (\(x1 :funenv).
   ((! :(sigenv -> bool) -> bool) (\(x2 :sigenv).
   ((! :(env -> bool) -> bool) (\(x3 :env).
   (((= :(funid -> funclos lift) -> (funid -> funclos lift) -> bool)
   (lookup_funid_basis (((BASIS $2) $1) $0))) (\(funid :funid).
   ((lookup_funid_funenv $3) $0)))))))))`),
 ((lookup_funid_funenv_DEF),
  [],
  `((! :((funid # funclos) list finmap -> bool) -> bool)
   (\(x1 :(funid # funclos) list finmap).
   (((= :(funid -> funclos lift) -> (funid -> funclos lift) -> bool)
   (lookup_funid_funenv (FUNENV $0))) (\(funid :funid).
   (((finmap_lookup :funid -> (funid # funclos) list finmap ->
                     funclos lift) $0) $1)))))`),
 ((lookup_longstrid_intbasis_DEF),
  [],
  `((! :(sigenv -> bool) -> bool) (\(s :sigenv).
   ((! :(intenv -> bool) -> bool) (\(i :intenv).
   ((! :(strid long -> bool) -> bool) (\(ls :strid long).
   (((= :int lift -> int lift -> bool) ((lookup_longstrid_intbasis
   ((INTBASIS $2) $1)) $0)) ((lookup_longstrid_intenv $1)
   $0))))))))`),
 ((lookup_longstrid_intenv_DEF),
  [],
  `((/\ ((! :(intenv -> bool) -> bool) (\(i :intenv).
   ((! :(strid -> bool) -> bool) (\(s :strid).
   (((= :int lift -> int lift -> bool) ((lookup_longstrid_intenv $1)
   ((BASE :strid -> strid long) $0))) ((lookup_strid_intenv $1)
   $0))))))) ((! :(intenv -> bool) -> bool) (\(i :intenv).
   ((! :(strid long -> bool) -> bool) (\(ls :strid long).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   (((= :int lift -> int lift -> bool) ((lookup_longstrid_intenv $2)
   (((QUALIFIED :strid -> strid long -> strid long) $0) $1)))
   ((((COND :bool -> int lift -> int lift -> int lift)
   (((= :int lift -> int lift -> bool) ((lookup_strid_intenv $2) $0))
   (undefined :int lift))) (undefined :int lift))
   ((lookup_longstrid_intenv (intenv_of_int ((lower :int lift -> int)
   ((lookup_strid_intenv $2) $0)))) $1))))))))))`),
 ((lookup_strid_int_DEF),
  [],
  `((/\ ((! :(intenv -> bool) -> bool) (\(x1 :intenv).
   ((! :(var set -> bool) -> bool) (\(x2 :var set).
   ((! :(excon set -> bool) -> bool) (\(x3 :excon set).
   (((= :(strid -> int lift) -> (strid -> int lift) -> bool)
   (lookup_strid_int (((BASICint $2) $1) $0))) (\(strid :strid).
   ((lookup_strid_intenv $3) $0))))))))))
   ((! :((strid # int) list finmap -> bool) -> bool)
   (\(x1 :(strid # int) list finmap).
   (((= :(strid -> int lift) -> (strid -> int lift) -> bool)
   (lookup_strid_intenv (INTENV $0))) (\(id :strid).
   (((finmap_lookup :strid -> (strid # int) list finmap -> int lift)
   $0) $1))))))`),
 ((define_mutual_functions),
  [],
  `((! :(funenv -> bool) -> bool) (\(x1 :funenv).
   ((! :(sigenv -> bool) -> bool) (\(x2 :sigenv).
   ((! :(env -> bool) -> bool) (\(x3 :env).
   (((= :(strid long -> env lift) -> (strid long -> env lift) -> bool)
   (lookup_longstrid_basis (((BASIS $2) $1) $0))) (\(ls :strid long).
   ((lookuplongstrid_env $1) $0)))))))))`),
 ((funenv_in_basis_DEF),
  [],
  `((! :(funenv -> bool) -> bool) (\(f :funenv).
   (((= :basis -> basis -> bool) (funenv_in_basis $0)) (((BASIS $0)
   empty_sigenv) empty_env))))`),
 ((sigenv_in_basis_DEF),
  [],
  `((! :(sigenv -> bool) -> bool) (\(s :sigenv).
   (((= :basis -> basis -> bool) (sigenv_in_basis $0)) (((BASIS
   empty_funenv) $0) empty_env))))`),
 ((strenv_in_basis_DEF),
  [],
  `((! :(strenv -> bool) -> bool) (\(s :strenv).
   (((= :basis -> basis -> bool) (strenv_in_basis $0)) (env_in_basis
   (strenv_in_env $0)))))`),
 ((env_in_basis_DEF),
  [],
  `((! :(env -> bool) -> bool) (\(e :env).
   (((= :basis -> basis -> bool) (env_in_basis $0)) (((BASIS
   empty_funenv) empty_sigenv) $0))))`),
 ((intenv_in_int_DEF),
  [],
  `((! :(intenv -> bool) -> bool) (\(x :intenv).
   (((= :int -> int -> bool) (intenv_in_int $0)) (((BASICint $0)
   (EMPTY :var set)) (EMPTY :excon set)))))`),
 ((excons_in_int_DEF),
  [],
  `((! :(excon set -> bool) -> bool) (\(x :excon set).
   (((= :int -> int -> bool) (excons_in_int $0)) (((BASICint
   empty_intenv) (EMPTY :var set)) $0))))`),
 ((vars_in_int_DEF),
  [],
  `((! :(var set -> bool) -> bool) (\(x :var set).
   (((= :int -> int -> bool) (vars_in_int $0)) (((BASICint
   empty_intenv) $0) (EMPTY :excon set)))))`),
 ((strenv_in_env_DEF),
  [],
  `((! :(strenv -> bool) -> bool) (\(s :strenv).
   (((= :env -> env -> bool) (strenv_in_env $0)) (((ENV $0)
   empty_varenv) empty_exconenv))))`),
 ((add_intenv_to_intbasis_DEF),
  [],
  `((! :(sigenv -> bool) -> bool) (\(s :sigenv).
   ((! :(intenv -> bool) -> bool) (\(i :intenv).
   ((! :(intenv -> bool) -> bool) (\(i' :intenv).
   (((= :intbasis -> intbasis -> bool) ((add_intenv_to_intbasis
   ((INTBASIS $2) $1)) $0)) ((INTBASIS $2) ((add_intenv $1)
   $0)))))))))`),
 ((add_sigenv_to_intbasis_DEF),
  [],
  `((! :(sigenv -> bool) -> bool) (\(s :sigenv).
   ((! :(intenv -> bool) -> bool) (\(i :intenv).
   ((! :(sigenv -> bool) -> bool) (\(s' :sigenv).
   (((= :intbasis -> intbasis -> bool) ((add_sigenv_to_intbasis
   ((INTBASIS $2) $1)) $0)) ((INTBASIS ((add_sigenv $2) $0))
   $1))))))))`),
 ((add_funenv_to_basis_DEF),
  [],
  `((! :(funenv -> bool) -> bool) (\(x1 :funenv).
   ((! :(sigenv -> bool) -> bool) (\(x2 :sigenv).
   ((! :(env -> bool) -> bool) (\(x3 :env).
   (((= :(funenv -> basis) -> (funenv -> basis) -> bool)
   (add_funenv_to_basis (((BASIS $2) $1) $0))) (\(f :funenv). (((BASIS
   ((add_funenv $3) $0)) $2) $1)))))))))`),
 ((add_env_to_basis_DEF),
  [],
  `((! :(funenv -> bool) -> bool) (\(x1 :funenv).
   ((! :(sigenv -> bool) -> bool) (\(x2 :sigenv).
   ((! :(env -> bool) -> bool) (\(x3 :env).
   (((= :(env -> basis) -> (env -> basis) -> bool) (add_env_to_basis
   (((BASIS $2) $1) $0))) (\(e' :env). (((BASIS $3) $2) ((add_env $1)
   $0))))))))))`),
 ((add_int_DEF),
  [],
  `((! :(intenv -> bool) -> bool) (\(x1 :intenv).
   ((! :(var set -> bool) -> bool) (\(x2 :var set).
   ((! :(excon set -> bool) -> bool) (\(x3 :excon set).
   (((= :(int -> int) -> (int -> int) -> bool) (add_int (((BASICint
   $2) $1) $0))) (\(int :int). ((((add_int_aux $0) $3) $2)
   $1)))))))))`),
 ((add_int_aux_DEF),
  [],
  `((! :(intenv -> bool) -> bool) (\(x1 :intenv).
   ((! :(var set -> bool) -> bool) (\(x2 :var set).
   ((! :(excon set -> bool) -> bool) (\(x3 :excon set).
   (((= :(intenv -> var set -> excon set -> int) ->
         (intenv -> var set -> excon set -> int) -> bool) (add_int_aux
   (((BASICint $2) $1) $0))) (\(i1 :intenv). (\(v1 :var set).
   (\(e1 :excon set). (((BASICint ((add_intenv $2) $5))
   (((UNION :var set -> var set -> var set) $1) $4))
   (((UNION :excon set -> excon set -> excon set) $0)
   $3))))))))))))`),
 ((add_intenv_DEF),
  [],
  `((! :(intenv -> bool) -> bool) (\(ie1 :intenv).
   ((! :(intenv -> bool) -> bool) (\(ie2 :intenv).
   (((= :intenv -> intenv -> bool) ((add_intenv $1) $0)) (INTENV
   ((((finmap_modify :(strid -> strid -> bool) ->
                      (strid # int) list finmap ->
                      (strid # int) list finmap ->
                      (strid # int) list finmap) less_strid)
   (INTENV_arg $1)) (INTENV_arg $0))))))))`),
 ((add_basis_DEF),
  [],
  `((! :(funenv -> bool) -> bool) (\(x1 :funenv).
   ((! :(sigenv -> bool) -> bool) (\(x2 :sigenv).
   ((! :(env -> bool) -> bool) (\(x3 :env).
   (((= :(basis -> basis) -> (basis -> basis) -> bool) (add_basis
   (((BASIS $2) $1) $0))) (\(b :basis). ((((add_basis_aux $0) $3) $2)
   $1)))))))))`),
 ((add_basis_aux_DEF),
  [],
  `((! :(funenv -> bool) -> bool) (\(x1 :funenv).
   ((! :(sigenv -> bool) -> bool) (\(x2 :sigenv).
   ((! :(env -> bool) -> bool) (\(x3 :env).
   (((= :(funenv -> sigenv -> env -> basis) ->
         (funenv -> sigenv -> env -> basis) -> bool) (add_basis_aux
   (((BASIS $2) $1) $0))) (\(f1 :funenv). (\(s1 :sigenv). (\(e1 :env).
   (((BASIS ((add_funenv $2) $5)) ((add_sigenv $1) $4)) ((add_env $0)
   $3))))))))))))`),
 ((add_sigenv_DEF),
  [],
  `((! :(sigenv -> bool) -> bool) (\(s1 :sigenv).
   ((! :(sigenv -> bool) -> bool) (\(s2 :sigenv).
   (((= :sigenv -> sigenv -> bool) ((add_sigenv $1) $0)) (SIGENV
   (\(x :sigid). ((((COND :bool -> int lift -> int lift -> int lift)
   (((= :int lift -> int lift -> bool) ((SIGENV_arg $2) $0))
   (undefined :int lift))) ((SIGENV_arg $1) $0)) ((SIGENV_arg $2)
   $0)))))))))`),
 ((add_funenv_DEF),
  [],
  `((! :(funenv -> bool) -> bool) (\(fe1 :funenv).
   ((! :(funenv -> bool) -> bool) (\(fe2 :funenv).
   (((= :funenv -> funenv -> bool) ((add_funenv $1) $0)) (FUNENV
   ((((finmap_modify :(funid -> funid -> bool) ->
                      (funid # funclos) list finmap ->
                      (funid # funclos) list finmap ->
                      (funid # funclos) list finmap) less_funid)
   (FUNENV_arg $1)) (FUNENV_arg $0))))))))`),
 ((strenv_map_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(si :strid).
   ((! :(env -> bool) -> bool) (\(e :env).
   (((= :strenv -> strenv -> bool) ((strenv_map $1) $0)) (STRENV
   ((FINMAP :(strid # env) list -> (strid # env) list finmap)
   (((CONS :strid # env -> (strid # env) list -> (strid # env) list)
   (((, :strid -> env -> strid # env) $1) $0))
   (NIL :(strid # env) list)))))))))`),
 ((sigenv_map_DEF),
  [],
  `((! :(sigid -> bool) -> bool) (\(si :sigid).
   ((! :(int -> bool) -> bool) (\(i :int).
   (((= :sigenv -> sigenv -> bool) ((sigenv_map $1) $0)) (SIGENV
   (\(x :sigid). ((((COND :bool -> int lift -> int lift -> int lift)
   (((= :sigid -> sigid -> bool) $0) $2)) ((lift :int -> int lift)
   $1)) (undefined :int lift)))))))))`),
 ((intenv_map_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(si :strid).
   ((! :(int -> bool) -> bool) (\(i :int).
   (((= :intenv -> intenv -> bool) ((intenv_map $1) $0)) (INTENV
   ((FINMAP :(strid # int) list -> (strid # int) list finmap)
   (((CONS :strid # int -> (strid # int) list -> (strid # int) list)
   (((, :strid -> int -> strid # int) $1) $0))
   (NIL :(strid # int) list)))))))))`),
 ((funenv_map_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(fi :funid).
   ((! :(funclos -> bool) -> bool) (\(fc :funclos).
   (((= :funenv -> funenv -> bool) ((funenv_map $1) $0)) (FUNENV
   ((FINMAP :(funid # funclos) list -> (funid # funclos) list finmap)
   (((CONS :funid # funclos -> (funid # funclos) list ->
            (funid # funclos) list)
   (((, :funid -> funclos -> funid # funclos) $1) $0))
   (NIL :(funid # funclos) list)))))))))`),
 ((insert_into_sigenv),
  [],
  `((! :((sigid -> int lift) -> bool) -> bool)
   (\(l :sigid -> int lift). ((! :(sigid -> bool) -> bool)
   (\(sigid :sigid). ((! :(int -> bool) -> bool) (\(i :int).
   (((= :sigenv -> sigenv -> bool) (((insert_into_sigenv (SIGENV $2))
   $1) $0)) (SIGENV (\(x :sigid).
   ((((COND :bool -> int lift -> int lift -> int lift)
   (((= :sigid -> sigid -> bool) $0) $2)) ((lift :int -> int lift)
   $1)) ($3 $0)))))))))))`),
 ((insert_into_intenv_DEF),
  [],
  `((! :((strid # int) list finmap -> bool) -> bool)
   (\(x1 :(strid # int) list finmap).
   (((= :(strid -> int -> intenv) -> (strid -> int -> intenv) -> bool)
   (insert_into_intenv (INTENV $0))) (\(strid :strid). (\(int :int).
   (INTENV
   (((((finmap_insert :(strid -> strid -> bool) -> strid -> int ->
                       (strid # int) list finmap ->
                       (strid # int) list finmap) less_strid) $1) $0)
   $2)))))))`),
 ((insert_into_funenv_DEF),
  [],
  `((! :((funid # funclos) list finmap -> bool) -> bool)
   (\(x1 :(funid # funclos) list finmap).
   (((= :(funid -> funclos -> funenv) ->
         (funid -> funclos -> funenv) -> bool) (insert_into_funenv
   (FUNENV $0))) (\(funid :funid). (\(fcl :funclos). (FUNENV
   (((((finmap_insert :(funid -> funid -> bool) -> funid -> funclos ->
                       (funid # funclos) list finmap ->
                       (funid # funclos) list finmap) less_funid) $1)
   $0) $2)))))))`),
 ((empty_funenv_DEF),
  [],
  `(((= :funenv -> funenv -> bool) empty_funenv) (FUNENV
   (empty_finmap :(funid # funclos) list finmap)))`),
 ((empty_sigenv_DEF),
  [],
  `(((= :sigenv -> sigenv -> bool) empty_sigenv) (SIGENV (\(x :sigid).
   (undefined :int lift))))`),
 ((empty_int_DEF),
  [],
  `(((= :int -> int -> bool) empty_int) (((BASICint empty_intenv)
   (EMPTY :var set)) (EMPTY :excon set)))`),
 ((empty_intenv_DEF),
  [],
  `(((= :intenv -> intenv -> bool) empty_intenv) (INTENV
   (empty_finmap :(strid # int) list finmap)))`),
 ((empty_env_DEF),
  [],
  `(((= :env -> env -> bool) empty_env) (((ENV empty_strenv)
   empty_varenv) empty_exconenv))`),
 ((SIGENV_arv_DEF),
  [],
  `((! :((sigid -> int lift) -> bool) -> bool)
   (\(s :sigid -> int lift).
   (((= :(sigid -> int lift) -> (sigid -> int lift) -> bool)
   (SIGENV_arg (SIGENV $0))) $0)))`),
 ((FUNENV_arg_DEF),
  [],
  `((! :((funid # funclos) list finmap -> bool) -> bool)
   (\(x1 :(funid # funclos) list finmap).
   (((= :(funid # funclos) list finmap ->
         (funid # funclos) list finmap -> bool) (FUNENV_arg (FUNENV
   $0))) $0)))`),
 ((INTENV_arg_DEF),
  [],
  `((! :((strid # int) list finmap -> bool) -> bool)
   (\(x1 :(strid # int) list finmap).
   (((= :(strid # int) list finmap -> (strid # int) list finmap ->
         bool) (INTENV_arg (INTENV $0))) $0)))`),
 ((env_of_basis_DEF),
  [],
  `((! :(funenv -> bool) -> bool) (\(x1 :funenv).
   ((! :(sigenv -> bool) -> bool) (\(x2 :sigenv).
   ((! :(env -> bool) -> bool) (\(x3 :env). (((= :env -> env -> bool)
   (env_of_basis (((BASIS $2) $1) $0))) $0)))))))`),
 ((excons_of_int_DEF),
  [],
  `((! :(intenv -> bool) -> bool) (\(x1 :intenv).
   ((! :(var set -> bool) -> bool) (\(x2 :var set).
   ((! :(excon set -> bool) -> bool) (\(x3 :excon set).
   (((= :excon set -> excon set -> bool) (excons_of_int (((BASICint
   $2) $1) $0))) $0)))))))`),
 ((vars_of_int_DEF),
  [],
  `((! :(intenv -> bool) -> bool) (\(x1 :intenv).
   ((! :(var set -> bool) -> bool) (\(x2 :var set).
   ((! :(excon set -> bool) -> bool) (\(x3 :excon set).
   (((= :var set -> var set -> bool) (vars_of_int (((BASICint $2) $1)
   $0))) $1)))))))`),
 ((intenv_of_int_DEF),
  [],
  `((! :(intenv -> bool) -> bool) (\(x1 :intenv).
   ((! :(var set -> bool) -> bool) (\(x2 :var set).
   ((! :(excon set -> bool) -> bool) (\(x3 :excon set).
   (((= :intenv -> intenv -> bool) (intenv_of_int (((BASICint $2) $1)
   $0))) $2)))))))`),
 ((PACKbp_DEF),
  [],
  `((! :(pack -> bool) -> bool) (\(p :pack).
   (((= :basis_pack -> basis_pack -> bool) (PACKbp $0))
   (ABS_basis_pack
   (((Node :basis + pack -> (basis + pack) ltree list ->
            (basis + pack) ltree) ((INR :pack -> basis + pack) $0))
   (NIL :(basis + pack) ltree list))))))`),
 ((BASISbp_DEF),
  [],
  `((! :(basis -> bool) -> bool) (\(b :basis).
   (((= :basis_pack -> basis_pack -> bool) (BASISbp $0))
   (ABS_basis_pack
   (((Node :basis + pack -> (basis + pack) ltree list ->
            (basis + pack) ltree) ((INL :basis -> basis + pack) $0))
   (NIL :(basis + pack) ltree list))))))`),
 ((basis_pack_ISO_DEF),
  [],
  `((/\ ((! :(basis_pack -> bool) -> bool) (\(a :basis_pack).
   (((= :basis_pack -> basis_pack -> bool) (ABS_basis_pack
   (REP_basis_pack $0))) $0))))
   ((! :((basis + pack) ltree -> bool) -> bool)
   (\(r :(basis + pack) ltree). (((= :bool -> bool -> bool)
   (((TRP :(basis + pack -> (basis + pack) ltree list -> bool) ->
           (basis + pack) ltree -> bool) (\(v :basis + pack).
   (\(tl :(basis + pack) ltree list). ((\/ ((/\
   ((? :(basis -> bool) -> bool) (\(b :basis).
   (((= :basis + pack -> basis + pack -> bool) $2)
   ((INL :basis -> basis + pack) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(basis + pack) ltree list -> num) $0)) 0))) ((/\
   ((? :(pack -> bool) -> bool) (\(p :pack).
   (((= :basis + pack -> basis + pack -> bool) $2)
   ((INR :pack -> basis + pack) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(basis + pack) ltree list -> num) $0)) 0)))))) $0))
   (((= :(basis + pack) ltree -> (basis + pack) ltree -> bool)
   (REP_basis_pack (ABS_basis_pack $0))) $0)))))`),
 ((basis_pack_TY_DEF),
  [],
  `((? :((basis_pack -> (basis + pack) ltree) -> bool) -> bool)
   (\(rep :basis_pack -> (basis + pack) ltree).
   (((TYPE_DEFINITION :((basis + pack) ltree -> bool) ->
                       (basis_pack -> (basis + pack) ltree) -> bool)
   ((TRP :(basis + pack -> (basis + pack) ltree list -> bool) ->
          (basis + pack) ltree -> bool) (\(v :basis + pack).
   (\(tl :(basis + pack) ltree list). ((\/ ((/\
   ((? :(basis -> bool) -> bool) (\(b :basis).
   (((= :basis + pack -> basis + pack -> bool) $2)
   ((INL :basis -> basis + pack) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(basis + pack) ltree list -> num) $0)) 0))) ((/\
   ((? :(pack -> bool) -> bool) (\(p :pack).
   (((= :basis + pack -> basis + pack -> bool) $2)
   ((INR :pack -> basis + pack) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(basis + pack) ltree list -> num) $0)) 0))))))) $0)))`),
 ((int_basis_funclos_funenv_SOME_int_arg_DEF),
  [],
  `((/\ ((! :(int -> bool) -> bool) (\(x1 :int).
   (((= :int -> int -> bool) (int_basis_funclos_funenv_SOME_int_arg
   (int_basis_funclos_funenv_SOME_int $0))) $0))))
   (((= :int -> int -> bool) (int_basis_funclos_funenv_SOME_int_arg
   int_basis_funclos_funenv_NONE_int)) ((@ :(int -> bool) -> int)
   (\(x :int). T))))`),
 ((int_basis_funclos_funenv_FINMAP_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_arg_DEF),
  [],
  `((! :(funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
        bool) -> bool)
   (\(x1 :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv).
   (((= :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
         funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
         bool)
   (int_basis_funclos_funenv_FINMAP_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_arg
   (int_basis_funclos_funenv_FINMAP_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   $0))) $0)))`),
 ((int_basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv_arg2_DEF),
  [],
  `((/\
   ((! :(funid_funclos_prod_basis_funclos_funenv -> bool) -> bool)
   (\(x1 :funid_funclos_prod_basis_funclos_funenv).
   ((! :(funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
        bool) -> bool)
   (\(x2 :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv).
   (((= :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
         funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
         bool)
   (int_basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv_arg2
   ((int_basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv
   $1) $0))) $0))))))
   (((= :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
         funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
         bool)
   (int_basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv_arg2
   int_basis_funclos_funenv_NIL_funid_funclos_prod_basis_funclos_funenv))
   ((@ :(funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
        bool) ->
        funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv)
   (\(x :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv).
   T))))`),
 ((int_basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv_arg1_DEF),
  [],
  `((/\
   ((! :(funid_funclos_prod_basis_funclos_funenv -> bool) -> bool)
   (\(x1 :funid_funclos_prod_basis_funclos_funenv).
   ((! :(funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
        bool) -> bool)
   (\(x2 :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv).
   (((= :funid_funclos_prod_basis_funclos_funenv ->
         funid_funclos_prod_basis_funclos_funenv -> bool)
   (int_basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv_arg1
   ((int_basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv
   $1) $0))) $1))))))
   (((= :funid_funclos_prod_basis_funclos_funenv ->
         funid_funclos_prod_basis_funclos_funenv -> bool)
   (int_basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv_arg1
   int_basis_funclos_funenv_NIL_funid_funclos_prod_basis_funclos_funenv))
   ((@ :(funid_funclos_prod_basis_funclos_funenv -> bool) ->
        funid_funclos_prod_basis_funclos_funenv)
   (\(x :funid_funclos_prod_basis_funclos_funenv). T))))`),
 ((int_basis_funclos_funenv_ch44_funid_funclos_arg2_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funclos -> bool) -> bool) (\(x2 :funclos).
   (((= :funclos -> funclos -> bool)
   (int_basis_funclos_funenv_ch44_funid_funclos_arg2
   ((int_basis_funclos_funenv_ch44_funid_funclos $1) $0))) $0)))))`),
 ((int_basis_funclos_funenv_ch44_funid_funclos_arg1_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funclos -> bool) -> bool) (\(x2 :funclos).
   (((= :funid -> funid -> bool)
   (int_basis_funclos_funenv_ch44_funid_funclos_arg1
   ((int_basis_funclos_funenv_ch44_funid_funclos $1) $0))) $1)))))`),
 ((int_FUNENV_arg_DEF),
  [],
  `((! :(funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv ->
        bool) -> bool)
   (\(x1 :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv).
   (((= :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv ->
         funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv ->
         bool) (int_FUNENV_arg (int_FUNENV $0))) $0)))`),
 ((int_FUNCLOS_arg5_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int -> bool) -> bool) (\(x2 :int).
   ((! :(strexp -> bool) -> bool) (\(x3 :strexp).
   ((! :(int_option_basis_funclos_funenv -> bool) -> bool)
   (\(x4 :int_option_basis_funclos_funenv).
   ((! :(basis -> bool) -> bool) (\(x5 :basis).
   (((= :basis -> basis -> bool) (int_FUNCLOS_arg5 (((((int_FUNCLOS
   $4) $3) $2) $1) $0))) $0)))))))))))`),
 ((int_FUNCLOS_arg4_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int -> bool) -> bool) (\(x2 :int).
   ((! :(strexp -> bool) -> bool) (\(x3 :strexp).
   ((! :(int_option_basis_funclos_funenv -> bool) -> bool)
   (\(x4 :int_option_basis_funclos_funenv).
   ((! :(basis -> bool) -> bool) (\(x5 :basis).
   (((= :int_option_basis_funclos_funenv ->
         int_option_basis_funclos_funenv -> bool) (int_FUNCLOS_arg4
   (((((int_FUNCLOS $4) $3) $2) $1) $0))) $1)))))))))))`),
 ((int_FUNCLOS_arg3_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int -> bool) -> bool) (\(x2 :int).
   ((! :(strexp -> bool) -> bool) (\(x3 :strexp).
   ((! :(int_option_basis_funclos_funenv -> bool) -> bool)
   (\(x4 :int_option_basis_funclos_funenv).
   ((! :(basis -> bool) -> bool) (\(x5 :basis).
   (((= :strexp -> strexp -> bool) (int_FUNCLOS_arg3 (((((int_FUNCLOS
   $4) $3) $2) $1) $0))) $2)))))))))))`),
 ((int_FUNCLOS_arg2_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int -> bool) -> bool) (\(x2 :int).
   ((! :(strexp -> bool) -> bool) (\(x3 :strexp).
   ((! :(int_option_basis_funclos_funenv -> bool) -> bool)
   (\(x4 :int_option_basis_funclos_funenv).
   ((! :(basis -> bool) -> bool) (\(x5 :basis).
   (((= :int -> int -> bool) (int_FUNCLOS_arg2 (((((int_FUNCLOS $4)
   $3) $2) $1) $0))) $3)))))))))))`),
 ((int_FUNCLOS_arg1_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int -> bool) -> bool) (\(x2 :int).
   ((! :(strexp -> bool) -> bool) (\(x3 :strexp).
   ((! :(int_option_basis_funclos_funenv -> bool) -> bool)
   (\(x4 :int_option_basis_funclos_funenv).
   ((! :(basis -> bool) -> bool) (\(x5 :basis).
   (((= :strid -> strid -> bool) (int_FUNCLOS_arg1 (((((int_FUNCLOS
   $4) $3) $2) $1) $0))) $4)))))))))))`),
 ((int_BASIS_arg3_DEF),
  [],
  `((! :(funenv -> bool) -> bool) (\(x1 :funenv).
   ((! :(sigenv -> bool) -> bool) (\(x2 :sigenv).
   ((! :(env -> bool) -> bool) (\(x3 :env). (((= :env -> env -> bool)
   (int_BASIS_arg3 (((int_BASIS $2) $1) $0))) $0)))))))`),
 ((int_BASIS_arg2_DEF),
  [],
  `((! :(funenv -> bool) -> bool) (\(x1 :funenv).
   ((! :(sigenv -> bool) -> bool) (\(x2 :sigenv).
   ((! :(env -> bool) -> bool) (\(x3 :env).
   (((= :sigenv -> sigenv -> bool) (int_BASIS_arg2 (((int_BASIS $2)
   $1) $0))) $1)))))))`),
 ((int_BASIS_arg1_DEF),
  [],
  `((! :(funenv -> bool) -> bool) (\(x1 :funenv).
   ((! :(sigenv -> bool) -> bool) (\(x2 :sigenv).
   ((! :(env -> bool) -> bool) (\(x3 :env).
   (((= :funenv -> funenv -> bool) (int_BASIS_arg1 (((int_BASIS $2)
   $1) $0))) $2)))))))`),
 ((dist_aux_ftn_basis_DEF),
  [],
  `((/\ ((! :(funenv -> bool) -> bool) (\(x1 :funenv).
   ((! :(sigenv -> bool) -> bool) (\(x2 :sigenv).
   ((! :(env -> bool) -> bool) (\(x3 :env). (((= :num -> num -> bool)
   (dist_aux_ftn_basis (((int_BASIS $2) $1) $0))) 0)))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int -> bool) -> bool) (\(x2 :int).
   ((! :(strexp -> bool) -> bool) (\(x3 :strexp).
   ((! :(int_option_basis_funclos_funenv -> bool) -> bool)
   (\(x4 :int_option_basis_funclos_funenv).
   ((! :(basis -> bool) -> bool) (\(x5 :basis).
   (((= :num -> num -> bool) (dist_aux_ftn_funclos (((((int_FUNCLOS
   $4) $3) $2) $1) $0))) 1)))))))))))) ((/\
   ((! :(funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv ->
        bool) -> bool)
   (\(x1 :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv).
   (((= :num -> num -> bool) (dist_aux_ftn_funenv (int_FUNENV $0)))
   2)))) ((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funclos -> bool) -> bool) (\(x2 :funclos).
   (((= :num -> num -> bool)
   (dist_aux_ftn_funid_funclos_prod_basis_funclos_funenv
   ((int_basis_funclos_funenv_ch44_funid_funclos $1) $0))) 3))))))
   ((/\ (((= :num -> num -> bool)
   (dist_aux_ftn_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   int_basis_funclos_funenv_NIL_funid_funclos_prod_basis_funclos_funenv))
   4)) ((/\
   ((! :(funid_funclos_prod_basis_funclos_funenv -> bool) -> bool)
   (\(x1 :funid_funclos_prod_basis_funclos_funenv).
   ((! :(funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
        bool) -> bool)
   (\(x2 :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (dist_aux_ftn_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   ((int_basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv
   $1) $0))) 5)))))) ((/\
   ((! :(funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
        bool) -> bool)
   (\(x1 :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (dist_aux_ftn_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv
   (int_basis_funclos_funenv_FINMAP_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   $0))) 6)))) ((/\ (((= :num -> num -> bool)
   (dist_aux_ftn_int_option_basis_funclos_funenv
   int_basis_funclos_funenv_NONE_int)) 7)) ((! :(int -> bool) -> bool)
   (\(x1 :int). (((= :num -> num -> bool)
   (dist_aux_ftn_int_option_basis_funclos_funenv
   (int_basis_funclos_funenv_SOME_int $0))) 8)))))))))))`),
 ((FUNCLOS),
  [],
  `(((= :(strid -> int -> strexp -> int option -> basis -> funclos) ->
         (strid -> int -> strexp -> int option -> basis -> funclos) ->
         bool) FUNCLOS) (\(x0 :strid). (\(x1 :int). (\(x2 :strexp).
   (\(x3 :int option). (\(x4 :basis). (((((int_FUNCLOS $4) $3) $2)
   (int_inj_int_option_basis_funclos_funenv $1)) $0)))))))`),
 ((int_inv_int_option_basis_funclos_funenv),
  [],
  `((/\ (((= :int option -> int option -> bool)
   (int_inv_int_option_basis_funclos_funenv
   int_basis_funclos_funenv_NONE_int)) (NONE :int option)))
   ((! :(int -> bool) -> bool) (\(x1 :int).
   (((= :int option -> int option -> bool)
   (int_inv_int_option_basis_funclos_funenv
   (int_basis_funclos_funenv_SOME_int $0))) ((SOME :int -> int option)
   $0)))))`),
 ((int_inj_int_option_basis_funclos_funenv),
  [],
  `((/\
   (((= :int_option_basis_funclos_funenv ->
         int_option_basis_funclos_funenv -> bool)
   (int_inj_int_option_basis_funclos_funenv (NONE :int option)))
   int_basis_funclos_funenv_NONE_int)) ((! :(int -> bool) -> bool)
   (\(x0 :int).
   (((= :int_option_basis_funclos_funenv ->
         int_option_basis_funclos_funenv -> bool)
   (int_inj_int_option_basis_funclos_funenv ((SOME :int -> int option)
   $0))) (int_basis_funclos_funenv_SOME_int $0)))))`),
 ((FUNENV),
  [],
  `(((= :((funid # funclos) list finmap -> funenv) ->
         ((funid # funclos) list finmap -> funenv) -> bool) FUNENV)
   (\(x0 :(funid # funclos) list finmap). (int_FUNENV
   (int_inj_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv
   $0))))`),
 ((int_inv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv),
  [],
  `((! :(funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
        bool) -> bool)
   (\(x1 :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv).
   (((= :(funid # funclos) list finmap ->
         (funid # funclos) list finmap -> bool)
   (int_inv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv
   (int_basis_funclos_funenv_FINMAP_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   $0)))
   ((FINMAP :(funid # funclos) list -> (funid # funclos) list finmap)
   (int_inv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   $0)))))`),
 ((int_inj_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv),
  [],
  `((! :((funid # funclos) list -> bool) -> bool)
   (\(x0 :(funid # funclos) list).
   (((= :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv ->
         funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv ->
         bool)
   (int_inj_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv
   ((FINMAP :(funid # funclos) list -> (funid # funclos) list finmap)
   $0)))
   (int_basis_funclos_funenv_FINMAP_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   (int_inj_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   $0)))))`),
 ((int_inv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv),
  [],
  `((/\
   (((= :(funid # funclos) list -> (funid # funclos) list -> bool)
   (int_inv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   int_basis_funclos_funenv_NIL_funid_funclos_prod_basis_funclos_funenv))
   (NIL :(funid # funclos) list)))
   ((! :(funid_funclos_prod_basis_funclos_funenv -> bool) -> bool)
   (\(x1 :funid_funclos_prod_basis_funclos_funenv).
   ((! :(funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
        bool) -> bool)
   (\(x2 :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv).
   (((= :(funid # funclos) list -> (funid # funclos) list -> bool)
   (int_inv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   ((int_basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv
   $1) $0)))
   (((CONS :funid # funclos -> (funid # funclos) list ->
            (funid # funclos) list)
   (int_inv_funid_funclos_prod_basis_funclos_funenv $1))
   (int_inv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   $0))))))))`),
 ((int_inj_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv),
  [],
  `((/\
   (((= :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
         funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
         bool)
   (int_inj_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   (NIL :(funid # funclos) list)))
   int_basis_funclos_funenv_NIL_funid_funclos_prod_basis_funclos_funenv))
   ((! :((funid # funclos) list -> bool) -> bool)
   (\(x1 :(funid # funclos) list).
   ((! :(funid # funclos -> bool) -> bool) (\(x0 :funid # funclos).
   (((= :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
         funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
         bool)
   (int_inj_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   (((CONS :funid # funclos -> (funid # funclos) list ->
            (funid # funclos) list) $0) $1)))
   ((int_basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv
   (int_inj_funid_funclos_prod_basis_funclos_funenv $0))
   (int_inj_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   $1))))))))`),
 ((int_inv_funid_funclos_prod_basis_funclos_funenv),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funclos -> bool) -> bool) (\(x2 :funclos).
   (((= :funid # funclos -> funid # funclos -> bool)
   (int_inv_funid_funclos_prod_basis_funclos_funenv
   ((int_basis_funclos_funenv_ch44_funid_funclos $1) $0)))
   (((, :funid -> funclos -> funid # funclos) $1) $0))))))`),
 ((int_inj_funid_funclos_prod_basis_funclos_funenv),
  [],
  `((! :(funclos -> bool) -> bool) (\(x1 :funclos).
   ((! :(funid -> bool) -> bool) (\(x0 :funid).
   (((= :funid_funclos_prod_basis_funclos_funenv ->
         funid_funclos_prod_basis_funclos_funenv -> bool)
   (int_inj_funid_funclos_prod_basis_funclos_funenv
   (((, :funid -> funclos -> funid # funclos) $0) $1)))
   ((int_basis_funclos_funenv_ch44_funid_funclos $0) $1))))))`),
 ((BASIS),
  [],
  `(((= :(funenv -> sigenv -> env -> basis) ->
         (funenv -> sigenv -> env -> basis) -> bool) BASIS)
   (\(x0 :funenv). (\(x1 :sigenv). (\(x2 :env). (((int_BASIS $2) $1)
   $0)))))`),
 ((int_basis_funclos_funenv_SOME_int_DEF),
  [],
  `((! :(int -> bool) -> bool) (\(x1 :int).
   (((= :int_option_basis_funclos_funenv ->
         int_option_basis_funclos_funenv -> bool)
   (int_basis_funclos_funenv_SOME_int $0))
   (int_option_basis_funclos_funenv_abs
   (JOINT_int_basis_funclos_funenv_SOME_int $0)))))`),
 ((int_basis_funclos_funenv_NONE_int_DEF),
  [],
  `(((= :int_option_basis_funclos_funenv ->
         int_option_basis_funclos_funenv -> bool)
   int_basis_funclos_funenv_NONE_int)
   (int_option_basis_funclos_funenv_abs
   JOINT_int_basis_funclos_funenv_NONE_int))`),
 ((int_basis_funclos_funenv_FINMAP_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_DEF),
  [],
  `((! :(funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
        bool) -> bool)
   (\(x1 :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv).
   (((= :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv ->
         funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv ->
         bool)
   (int_basis_funclos_funenv_FINMAP_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   $0))
   (funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_abs
   (JOINT_int_basis_funclos_funenv_FINMAP_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   (funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_rep
   $0))))))`),
 ((int_basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv_DEF),
  [],
  `((! :(funid_funclos_prod_basis_funclos_funenv -> bool) -> bool)
   (\(x1 :funid_funclos_prod_basis_funclos_funenv).
   ((! :(funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
        bool) -> bool)
   (\(x2 :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv).
   (((= :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
         funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
         bool)
   ((int_basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv
   $1) $0))
   (funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_abs
   ((JOINT_int_basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv
   (funid_funclos_prod_basis_funclos_funenv_rep $1))
   (funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_rep
   $0))))))))`),
 ((int_basis_funclos_funenv_NIL_funid_funclos_prod_basis_funclos_funenv_DEF),
  [],
  `(((= :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
         funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
         bool)
   int_basis_funclos_funenv_NIL_funid_funclos_prod_basis_funclos_funenv)
   (funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_abs
   JOINT_int_basis_funclos_funenv_NIL_funid_funclos_prod_basis_funclos_funenv))`),
 ((int_basis_funclos_funenv_ch44_funid_funclos_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funclos -> bool) -> bool) (\(x2 :funclos).
   (((= :funid_funclos_prod_basis_funclos_funenv ->
         funid_funclos_prod_basis_funclos_funenv -> bool)
   ((int_basis_funclos_funenv_ch44_funid_funclos $1) $0))
   (funid_funclos_prod_basis_funclos_funenv_abs
   ((JOINT_int_basis_funclos_funenv_ch44_funid_funclos $1)
   (funclos_rep $0))))))))`),
 ((int_FUNENV_DEF),
  [],
  `((! :(funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv ->
        bool) -> bool)
   (\(x1 :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv).
   (((= :funenv -> funenv -> bool) (int_FUNENV $0)) (funenv_abs
   (JOINT_int_FUNENV
   (funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_rep
   $0))))))`),
 ((int_FUNCLOS_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int -> bool) -> bool) (\(x2 :int).
   ((! :(strexp -> bool) -> bool) (\(x3 :strexp).
   ((! :(int_option_basis_funclos_funenv -> bool) -> bool)
   (\(x4 :int_option_basis_funclos_funenv).
   ((! :(basis -> bool) -> bool) (\(x5 :basis).
   (((= :funclos -> funclos -> bool) (((((int_FUNCLOS $4) $3) $2) $1)
   $0)) (funclos_abs (((((JOINT_int_FUNCLOS $4) $3) $2)
   (int_option_basis_funclos_funenv_rep $1)) (basis_rep
   $0))))))))))))))`),
 ((int_BASIS_DEF),
  [],
  `((! :(funenv -> bool) -> bool) (\(x1 :funenv).
   ((! :(sigenv -> bool) -> bool) (\(x2 :sigenv).
   ((! :(env -> bool) -> bool) (\(x3 :env).
   (((= :basis -> basis -> bool) (((int_BASIS $2) $1) $0)) (basis_abs
   (((JOINT_int_BASIS (funenv_rep $2)) $1) $0)))))))))`),
 ((funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_REP_ABS),
  [],
  `((/\
   ((! :(funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
        bool) -> bool)
   (\(a :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv).
   (((= :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
         funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
         bool)
   (funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_abs
   (funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_rep
   $0))) $0))))
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(r :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 5)) $0))
   (((= :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         bool)
   (funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_rep
   (funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_abs
   $0))) $0)))))`),
 ((funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_TY_DEF),
  [],
  `((? :((funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv) ->
        bool) -> bool)
   (\(rep :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
           joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((TYPE_DEFINITION :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
                       bool) ->
                       (funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv ->
                       joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv) ->
                       bool)
   (\(x :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 5))) $0)))`),
 ((funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_REP_ABS),
  [],
  `((/\
   ((! :(funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv ->
        bool) -> bool)
   (\(a :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv).
   (((= :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv ->
         funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv ->
         bool)
   (funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_abs
   (funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_rep
   $0))) $0))))
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(r :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 6)) $0))
   (((= :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         bool)
   (funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_rep
   (funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_abs
   $0))) $0)))))`),
 ((funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_TY_DEF),
  [],
  `((? :((funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv) ->
        bool) -> bool)
   (\(rep :funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv ->
           joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((TYPE_DEFINITION :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
                       bool) ->
                       (funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv ->
                       joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv) ->
                       bool)
   (\(x :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 6))) $0)))`),
 ((int_option_basis_funclos_funenv_REP_ABS),
  [],
  `((/\ ((! :(int_option_basis_funclos_funenv -> bool) -> bool)
   (\(a :int_option_basis_funclos_funenv).
   (((= :int_option_basis_funclos_funenv ->
         int_option_basis_funclos_funenv -> bool)
   (int_option_basis_funclos_funenv_abs
   (int_option_basis_funclos_funenv_rep $0))) $0))))
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(r :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 7)) $0))
   (((= :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         bool) (int_option_basis_funclos_funenv_rep
   (int_option_basis_funclos_funenv_abs $0))) $0)))))`),
 ((int_option_basis_funclos_funenv_TY_DEF),
  [],
  `((? :((int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv) ->
        bool) -> bool)
   (\(rep :int_option_basis_funclos_funenv ->
           joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((TYPE_DEFINITION :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
                       bool) ->
                       (int_option_basis_funclos_funenv ->
                       joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv) ->
                       bool)
   (\(x :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 7))) $0)))`),
 ((funenv_REP_ABS),
  [],
  `((/\ ((! :(funenv -> bool) -> bool) (\(a :funenv).
   (((= :funenv -> funenv -> bool) (funenv_abs (funenv_rep $0)))
   $0))))
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(r :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 3)) $0))
   (((= :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         bool) (funenv_rep (funenv_abs $0))) $0)))))`),
 ((funenv_TY_DEF),
  [],
  `((? :((funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv) ->
        bool) -> bool)
   (\(rep :funenv ->
           joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((TYPE_DEFINITION :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
                       bool) ->
                       (funenv ->
                       joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv) ->
                       bool)
   (\(x :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 3))) $0)))`),
 ((basis_REP_ABS),
  [],
  `((/\ ((! :(basis -> bool) -> bool) (\(a :basis).
   (((= :basis -> basis -> bool) (basis_abs (basis_rep $0))) $0))))
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(r :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 1)) $0))
   (((= :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         bool) (basis_rep (basis_abs $0))) $0)))))`),
 ((basis_TY_DEF),
  [],
  `((? :((basis ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv) ->
        bool) -> bool)
   (\(rep :basis ->
           joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((TYPE_DEFINITION :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
                       bool) ->
                       (basis ->
                       joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv) ->
                       bool)
   (\(x :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 1))) $0)))`),
 ((funclos_REP_ABS),
  [],
  `((/\ ((! :(funclos -> bool) -> bool) (\(a :funclos).
   (((= :funclos -> funclos -> bool) (funclos_abs (funclos_rep $0)))
   $0))))
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(r :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 2)) $0))
   (((= :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         bool) (funclos_rep (funclos_abs $0))) $0)))))`),
 ((funclos_TY_DEF),
  [],
  `((? :((funclos ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv) ->
        bool) -> bool)
   (\(rep :funclos ->
           joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((TYPE_DEFINITION :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
                       bool) ->
                       (funclos ->
                       joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv) ->
                       bool)
   (\(x :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 2))) $0)))`),
 ((funid_funclos_prod_basis_funclos_funenv_REP_ABS),
  [],
  `((/\
   ((! :(funid_funclos_prod_basis_funclos_funenv -> bool) -> bool)
   (\(a :funid_funclos_prod_basis_funclos_funenv).
   (((= :funid_funclos_prod_basis_funclos_funenv ->
         funid_funclos_prod_basis_funclos_funenv -> bool)
   (funid_funclos_prod_basis_funclos_funenv_abs
   (funid_funclos_prod_basis_funclos_funenv_rep $0))) $0))))
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(r :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 4)) $0))
   (((= :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         bool) (funid_funclos_prod_basis_funclos_funenv_rep
   (funid_funclos_prod_basis_funclos_funenv_abs $0))) $0)))))`),
 ((funid_funclos_prod_basis_funclos_funenv_TY_DEF),
  [],
  `((? :((funid_funclos_prod_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv) ->
        bool) -> bool)
   (\(rep :funid_funclos_prod_basis_funclos_funenv ->
           joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((TYPE_DEFINITION :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
                       bool) ->
                       (funid_funclos_prod_basis_funclos_funenv ->
                       joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv) ->
                       bool)
   (\(x :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 4))) $0)))`),
 ((joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select_DEF),
  [],
  `((/\
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   ((! :(sigenv -> bool) -> bool) (\(s :sigenv).
   ((! :(env -> bool) -> bool) (\(e :env). (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   (((JOINT_int_BASIS $2) $1) $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $2)) 3)) 1) 0))))))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(s0 :strid). ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(strexp -> bool) -> bool) (\(s1 :strexp).
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j1 :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j2 :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   (((((JOINT_int_FUNCLOS $4) $3) $2) $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $1)) 7)) (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 1))) 2) 0))))))))))))) ((/\
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   (JOINT_int_FUNENV $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 6)) 3) 0))))) ((/\ ((! :(funid -> bool) -> bool)
   (\(f' :funid).
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   ((JOINT_int_basis_funclos_funenv_ch44_funid_funclos $1) $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 2)) 4) 0))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   JOINT_int_basis_funclos_funenv_NIL_funid_funclos_prod_basis_funclos_funenv))
   5)) ((/\
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j1 :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j2 :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   ((JOINT_int_basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv
   $1) $0))) ((((COND :bool -> num -> num -> num) ((/\
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $1)) 4)) (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 5))) 5) 0))))))) ((/\
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   (JOINT_int_basis_funclos_funenv_FINMAP_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   $0)) 5)) 6) 0))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   JOINT_int_basis_funclos_funenv_NONE_int)) 7))
   ((! :(int -> bool) -> bool) (\(i :int). (((= :num -> num -> bool)
   (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_select
   (JOINT_int_basis_funclos_funenv_SOME_int $0))) 7)))))))))))`),
 ((JOINT_int_basis_funclos_funenv_SOME_int_DEF),
  [],
  `((! :(int -> bool) -> bool) (\(i :int).
   (((= :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         bool) (JOINT_int_basis_funclos_funenv_SOME_int $0))
   (ABS_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   (((Node :sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INR :funid + one + one + one + one + int ->
          one + funid + one + one + one + one + int)
   ((INR :one + one + one + one + int ->
          funid + one + one + one + one + int)
   ((INR :one + one + one + int -> one + one + one + one + int)
   ((INR :one + one + int -> one + one + one + int)
   ((INR :one + int -> one + one + int) ((INR :int -> one + int)
   $0)))))))))
   (NIL :(sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int) ltree list))))))`),
 ((JOINT_int_basis_funclos_funenv_NONE_int_DEF),
  [],
  `(((= :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         bool) JOINT_int_basis_funclos_funenv_NONE_int)
   (ABS_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   (((Node :sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INR :funid + one + one + one + one + int ->
          one + funid + one + one + one + one + int)
   ((INR :one + one + one + one + int ->
          funid + one + one + one + one + int)
   ((INR :one + one + one + int -> one + one + one + one + int)
   ((INR :one + one + int -> one + one + one + int)
   ((INR :one + int -> one + one + int) ((INL :one -> one + int)
   one)))))))))
   (NIL :(sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int) ltree list))))`),
 ((JOINT_int_basis_funclos_funenv_FINMAP_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_DEF),
  [],
  `((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         bool)
   (JOINT_int_basis_funclos_funenv_FINMAP_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   $0))
   (ABS_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   (((Node :sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INR :funid + one + one + one + one + int ->
          one + funid + one + one + one + one + int)
   ((INR :one + one + one + one + int ->
          funid + one + one + one + one + int)
   ((INR :one + one + one + int -> one + one + one + one + int)
   ((INR :one + one + int -> one + one + one + int)
   ((INL :one -> one + one + int) one))))))))
   (((CONS :(sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list)
   (REP_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   $0))
   (NIL :(sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int) ltree list)))))))`),
 ((JOINT_int_basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv_DEF),
  [],
  `((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j1 :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j2 :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         bool)
   ((JOINT_int_basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv
   $1) $0))
   (ABS_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   (((Node :sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INR :funid + one + one + one + one + int ->
          one + funid + one + one + one + one + int)
   ((INR :one + one + one + one + int ->
          funid + one + one + one + one + int)
   ((INR :one + one + one + int -> one + one + one + one + int)
   ((INL :one -> one + one + one + int) one)))))))
   (((CONS :(sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list)
   (REP_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   $1))
   (((CONS :(sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list)
   (REP_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   $0))
   (NIL :(sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int) ltree list))))))))))`),
 ((JOINT_int_basis_funclos_funenv_NIL_funid_funclos_prod_basis_funclos_funenv_DEF),
  [],
  `(((= :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         bool)
   JOINT_int_basis_funclos_funenv_NIL_funid_funclos_prod_basis_funclos_funenv)
   (ABS_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   (((Node :sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INR :funid + one + one + one + one + int ->
          one + funid + one + one + one + one + int)
   ((INR :one + one + one + one + int ->
          funid + one + one + one + one + int)
   ((INL :one -> one + one + one + one + int) one))))))
   (NIL :(sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int) ltree list))))`),
 ((JOINT_int_basis_funclos_funenv_ch44_funid_funclos_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(f' :funid).
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         bool) ((JOINT_int_basis_funclos_funenv_ch44_funid_funclos $1)
   $0))
   (ABS_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   (((Node :sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INR :funid + one + one + one + one + int ->
          one + funid + one + one + one + one + int)
   ((INL :funid -> funid + one + one + one + one + int) $1)))))
   (((CONS :(sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list)
   (REP_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   $0))
   (NIL :(sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int) ltree list)))))))))`),
 ((JOINT_int_FUNENV_DEF),
  [],
  `((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         bool) (JOINT_int_FUNENV $0))
   (ABS_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   (((Node :sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INL :one -> one + funid + one + one + one + one + int) one))))
   (((CONS :(sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list)
   (REP_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   $0))
   (NIL :(sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int) ltree list)))))))`),
 ((JOINT_int_FUNCLOS_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(s0 :strid).
   ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(strexp -> bool) -> bool) (\(s1 :strexp).
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j1 :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j2 :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         bool) (((((JOINT_int_FUNCLOS $4) $3) $2) $1) $0))
   (ABS_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   (((Node :sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INL :strid # int # strexp ->
          strid # int # strexp + one + funid + one + one + one + one +
          int) (((, :strid -> int # strexp -> strid # int # strexp)
   $4) (((, :int -> strexp -> int # strexp) $3) $2)))))
   (((CONS :(sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list)
   (REP_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   $1))
   (((CONS :(sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list)
   (REP_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   $0))
   (NIL :(sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int) ltree list))))))))))))))))`),
 ((JOINT_int_BASIS_DEF),
  [],
  `((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   ((! :(sigenv -> bool) -> bool) (\(s :sigenv).
   ((! :(env -> bool) -> bool) (\(e :env).
   (((= :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         bool) (((JOINT_int_BASIS $2) $1) $0))
   (ABS_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   (((Node :sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree)
   ((INL :sigenv # env ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int) (((, :sigenv -> env -> sigenv # env)
   $1) $0)))
   (((CONS :(sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list ->
            (sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int) ltree list)
   (REP_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   $2))
   (NIL :(sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int) ltree list)))))))))))`),
 ((joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_ISO_DEF),
  [],
  `((/\
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(a :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         bool)
   (ABS_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   (REP_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   $0))) $0))))
   ((! :((sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int) ltree -> bool) -> bool)
   (\(r :(sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int) ltree). (((= :bool -> bool -> bool)
   (((TRP :(sigenv # env + strid # int # strexp + one + funid + one +
            one + one + one + int ->
           (sigenv # env + strid # int # strexp + one + funid + one +
           one + one + one + int) ltree list -> bool) ->
           (sigenv # env + strid # int # strexp + one + funid + one +
           one + one + one + int) ltree -> bool)
   (\(v :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int).
   (\(tl :(sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int) ltree list). ((\/ ((/\
   ((? :(sigenv -> bool) -> bool) (\(s :sigenv).
   ((? :(env -> bool) -> bool) (\(e :env).
   (((= :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int ->
         sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int -> bool) $3)
   ((INL :sigenv # env ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int) (((, :sigenv -> env -> sigenv # env)
   $1) $0)))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv # env + strid # int # strexp + one + funid +
             one + one + one + one + int) ltree list -> num) $0)) (SUC
   0)))) ((\/ ((/\ ((? :(strid -> bool) -> bool) (\(s0 :strid).
   ((? :(int -> bool) -> bool) (\(i :int).
   ((? :(strexp -> bool) -> bool) (\(s1 :strexp).
   (((= :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int ->
         sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int -> bool) $4)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INL :strid # int # strexp ->
          strid # int # strexp + one + funid + one + one + one + one +
          int) (((, :strid -> int # strexp -> strid # int # strexp)
   $2) (((, :int -> strexp -> int # strexp) $1) $0))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv # env + strid # int # strexp + one + funid +
             one + one + one + one + int) ltree list -> num) $0)) (SUC
   (SUC 0))))) ((\/ ((/\
   (((= :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int ->
         sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int -> bool) $1)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INL :one -> one + funid + one + one + one + one + int) one)))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv # env + strid # int # strexp + one + funid +
             one + one + one + one + int) ltree list -> num) $0)) (SUC
   0)))) ((\/ ((/\ ((? :(funid -> bool) -> bool) (\(f :funid).
   (((= :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int ->
         sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int -> bool) $2)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INR :funid + one + one + one + one + int ->
          one + funid + one + one + one + one + int)
   ((INL :funid -> funid + one + one + one + one + int) $0))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv # env + strid # int # strexp + one + funid +
             one + one + one + one + int) ltree list -> num) $0)) (SUC
   0)))) ((\/ ((/\
   (((= :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int ->
         sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int -> bool) $1)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INR :funid + one + one + one + one + int ->
          one + funid + one + one + one + one + int)
   ((INR :one + one + one + one + int ->
          funid + one + one + one + one + int)
   ((INL :one -> one + one + one + one + int) one)))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv # env + strid # int # strexp + one + funid +
             one + one + one + one + int) ltree list -> num) $0)) 0)))
   ((\/ ((/\
   (((= :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int ->
         sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int -> bool) $1)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INR :funid + one + one + one + one + int ->
          one + funid + one + one + one + one + int)
   ((INR :one + one + one + one + int ->
          funid + one + one + one + one + int)
   ((INR :one + one + one + int -> one + one + one + one + int)
   ((INL :one -> one + one + one + int) one))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv # env + strid # int # strexp + one + funid +
             one + one + one + one + int) ltree list -> num) $0)) (SUC
   (SUC 0))))) ((\/ ((/\
   (((= :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int ->
         sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int -> bool) $1)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INR :funid + one + one + one + one + int ->
          one + funid + one + one + one + one + int)
   ((INR :one + one + one + one + int ->
          funid + one + one + one + one + int)
   ((INR :one + one + one + int -> one + one + one + one + int)
   ((INR :one + one + int -> one + one + one + int)
   ((INL :one -> one + one + int) one)))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv # env + strid # int # strexp + one + funid +
             one + one + one + one + int) ltree list -> num) $0)) (SUC
   0)))) ((\/ ((/\
   (((= :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int ->
         sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int -> bool) $1)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INR :funid + one + one + one + one + int ->
          one + funid + one + one + one + one + int)
   ((INR :one + one + one + one + int ->
          funid + one + one + one + one + int)
   ((INR :one + one + one + int -> one + one + one + one + int)
   ((INR :one + one + int -> one + one + one + int)
   ((INR :one + int -> one + one + int) ((INL :one -> one + int)
   one)))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv # env + strid # int # strexp + one + funid +
             one + one + one + one + int) ltree list -> num) $0)) 0)))
   ((/\ ((? :(int -> bool) -> bool) (\(i :int).
   (((= :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int ->
         sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int -> bool) $2)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INR :funid + one + one + one + one + int ->
          one + funid + one + one + one + one + int)
   ((INR :one + one + one + one + int ->
          funid + one + one + one + one + int)
   ((INR :one + one + one + int -> one + one + one + one + int)
   ((INR :one + one + int -> one + one + one + int)
   ((INR :one + int -> one + one + int) ((INR :int -> one + int)
   $0)))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv # env + strid # int # strexp + one + funid +
             one + one + one + one + int) ltree list -> num) $0))
   0))))))))))))) $0))
   (((= :(sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int) ltree ->
         (sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int) ltree -> bool)
   (REP_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   (ABS_joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv
   $0))) $0)))))`),
 ((joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_TY_DEF),
  [],
  `((? :((joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         (sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int) ltree) -> bool) -> bool)
   (\(rep :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
           (sigenv # env + strid # int # strexp + one + funid + one +
           one + one + one + int) ltree).
   (((TYPE_DEFINITION :((sigenv # env + strid # int # strexp + one +
                        funid + one + one + one + one + int) ltree ->
                       bool) ->
                       (joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
                       (sigenv # env + strid # int # strexp + one +
                       funid + one + one + one + one + int) ltree) ->
                       bool)
   ((TRP :(sigenv # env + strid # int # strexp + one + funid + one +
           one + one + one + int ->
          (sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int) ltree list -> bool) ->
          (sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int) ltree -> bool)
   (\(v :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int).
   (\(tl :(sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int) ltree list). ((\/ ((/\
   ((? :(sigenv -> bool) -> bool) (\(s :sigenv).
   ((? :(env -> bool) -> bool) (\(e :env).
   (((= :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int ->
         sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int -> bool) $3)
   ((INL :sigenv # env ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int) (((, :sigenv -> env -> sigenv # env)
   $1) $0)))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv # env + strid # int # strexp + one + funid +
             one + one + one + one + int) ltree list -> num) $0)) (SUC
   0)))) ((\/ ((/\ ((? :(strid -> bool) -> bool) (\(s0 :strid).
   ((? :(int -> bool) -> bool) (\(i :int).
   ((? :(strexp -> bool) -> bool) (\(s1 :strexp).
   (((= :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int ->
         sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int -> bool) $4)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INL :strid # int # strexp ->
          strid # int # strexp + one + funid + one + one + one + one +
          int) (((, :strid -> int # strexp -> strid # int # strexp)
   $2) (((, :int -> strexp -> int # strexp) $1) $0))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv # env + strid # int # strexp + one + funid +
             one + one + one + one + int) ltree list -> num) $0)) (SUC
   (SUC 0))))) ((\/ ((/\
   (((= :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int ->
         sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int -> bool) $1)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INL :one -> one + funid + one + one + one + one + int) one)))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv # env + strid # int # strexp + one + funid +
             one + one + one + one + int) ltree list -> num) $0)) (SUC
   0)))) ((\/ ((/\ ((? :(funid -> bool) -> bool) (\(f :funid).
   (((= :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int ->
         sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int -> bool) $2)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INR :funid + one + one + one + one + int ->
          one + funid + one + one + one + one + int)
   ((INL :funid -> funid + one + one + one + one + int) $0))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv # env + strid # int # strexp + one + funid +
             one + one + one + one + int) ltree list -> num) $0)) (SUC
   0)))) ((\/ ((/\
   (((= :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int ->
         sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int -> bool) $1)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INR :funid + one + one + one + one + int ->
          one + funid + one + one + one + one + int)
   ((INR :one + one + one + one + int ->
          funid + one + one + one + one + int)
   ((INL :one -> one + one + one + one + int) one)))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv # env + strid # int # strexp + one + funid +
             one + one + one + one + int) ltree list -> num) $0)) 0)))
   ((\/ ((/\
   (((= :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int ->
         sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int -> bool) $1)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INR :funid + one + one + one + one + int ->
          one + funid + one + one + one + one + int)
   ((INR :one + one + one + one + int ->
          funid + one + one + one + one + int)
   ((INR :one + one + one + int -> one + one + one + one + int)
   ((INL :one -> one + one + one + int) one))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv # env + strid # int # strexp + one + funid +
             one + one + one + one + int) ltree list -> num) $0)) (SUC
   (SUC 0))))) ((\/ ((/\
   (((= :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int ->
         sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int -> bool) $1)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INR :funid + one + one + one + one + int ->
          one + funid + one + one + one + one + int)
   ((INR :one + one + one + one + int ->
          funid + one + one + one + one + int)
   ((INR :one + one + one + int -> one + one + one + one + int)
   ((INR :one + one + int -> one + one + one + int)
   ((INL :one -> one + one + int) one)))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv # env + strid # int # strexp + one + funid +
             one + one + one + one + int) ltree list -> num) $0)) (SUC
   0)))) ((\/ ((/\
   (((= :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int ->
         sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int -> bool) $1)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INR :funid + one + one + one + one + int ->
          one + funid + one + one + one + one + int)
   ((INR :one + one + one + one + int ->
          funid + one + one + one + one + int)
   ((INR :one + one + one + int -> one + one + one + one + int)
   ((INR :one + one + int -> one + one + one + int)
   ((INR :one + int -> one + one + int) ((INL :one -> one + int)
   one)))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv # env + strid # int # strexp + one + funid +
             one + one + one + one + int) ltree list -> num) $0)) 0)))
   ((/\ ((? :(int -> bool) -> bool) (\(i :int).
   (((= :sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int ->
         sigenv # env + strid # int # strexp + one + funid + one +
         one + one + one + int -> bool) $2)
   ((INR :strid # int # strexp + one + funid + one + one + one + one +
          int ->
          sigenv # env + strid # int # strexp + one + funid + one +
          one + one + one + int)
   ((INR :one + funid + one + one + one + one + int ->
          strid # int # strexp + one + funid + one + one + one + one +
          int)
   ((INR :funid + one + one + one + one + int ->
          one + funid + one + one + one + one + int)
   ((INR :one + one + one + one + int ->
          funid + one + one + one + one + int)
   ((INR :one + one + one + int -> one + one + one + one + int)
   ((INR :one + one + int -> one + one + one + int)
   ((INR :one + int -> one + one + int) ((INR :int -> one + int)
   $0)))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(sigenv # env + strid # int # strexp + one + funid +
             one + one + one + one + int) ltree list -> num) $0))
   0)))))))))))))) $0)))`),
 ((INTBASIS_DEF),
  [],
  `((! :(sigenv -> bool) -> bool) (\(s :sigenv).
   ((! :(intenv -> bool) -> bool) (\(i :intenv).
   (((= :intbasis -> intbasis -> bool) ((INTBASIS $1) $0))
   (ABS_intbasis
   (((Node :sigenv # intenv -> (sigenv # intenv) ltree list ->
            (sigenv # intenv) ltree)
   (((, :sigenv -> intenv -> sigenv # intenv) $1) $0))
   (NIL :(sigenv # intenv) ltree list))))))))`),
 ((intbasis_ISO_DEF),
  [],
  `((/\ ((! :(intbasis -> bool) -> bool) (\(a :intbasis).
   (((= :intbasis -> intbasis -> bool) (ABS_intbasis (REP_intbasis
   $0))) $0)))) ((! :((sigenv # intenv) ltree -> bool) -> bool)
   (\(r :(sigenv # intenv) ltree). (((= :bool -> bool -> bool)
   (((TRP :(sigenv # intenv -> (sigenv # intenv) ltree list ->
           bool) -> (sigenv # intenv) ltree -> bool)
   (\(v :sigenv # intenv). (\(tl :(sigenv # intenv) ltree list). ((/\
   ((? :(sigenv -> bool) -> bool) (\(s :sigenv).
   ((? :(intenv -> bool) -> bool) (\(i :intenv).
   (((= :sigenv # intenv -> sigenv # intenv -> bool) $3)
   (((, :sigenv -> intenv -> sigenv # intenv) $1) $0)))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv # intenv) ltree list -> num) $0)) 0))))) $0))
   (((= :(sigenv # intenv) ltree -> (sigenv # intenv) ltree -> bool)
   (REP_intbasis (ABS_intbasis $0))) $0)))))`),
 ((intbasis_TY_DEF),
  [],
  `((? :((intbasis -> (sigenv # intenv) ltree) -> bool) -> bool)
   (\(rep :intbasis -> (sigenv # intenv) ltree).
   (((TYPE_DEFINITION :((sigenv # intenv) ltree -> bool) ->
                       (intbasis -> (sigenv # intenv) ltree) -> bool)
   ((TRP :(sigenv # intenv -> (sigenv # intenv) ltree list -> bool) ->
          (sigenv # intenv) ltree -> bool) (\(v :sigenv # intenv).
   (\(tl :(sigenv # intenv) ltree list). ((/\
   ((? :(sigenv -> bool) -> bool) (\(s :sigenv).
   ((? :(intenv -> bool) -> bool) (\(i :intenv).
   (((= :sigenv # intenv -> sigenv # intenv -> bool) $3)
   (((, :sigenv -> intenv -> sigenv # intenv) $1) $0)))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigenv # intenv) ltree list -> num) $0)) 0))))))
   $0)))`),
 ((SIGENV_DEF),
  [],
  `((! :((sigid -> int lift) -> bool) -> bool)
   (\(f' :sigid -> int lift). (((= :sigenv -> sigenv -> bool) (SIGENV
   $0)) (ABS_sigenv
   (((Node :(sigid -> int lift) -> (sigid -> int lift) ltree list ->
            (sigid -> int lift) ltree) $0)
   (NIL :(sigid -> int lift) ltree list))))))`),
 ((sigenv_ISO_DEF),
  [],
  `((/\ ((! :(sigenv -> bool) -> bool) (\(a :sigenv).
   (((= :sigenv -> sigenv -> bool) (ABS_sigenv (REP_sigenv $0)))
   $0)))) ((! :((sigid -> int lift) ltree -> bool) -> bool)
   (\(r :(sigid -> int lift) ltree). (((= :bool -> bool -> bool)
   (((TRP :((sigid -> int lift) -> (sigid -> int lift) ltree list ->
           bool) -> (sigid -> int lift) ltree -> bool)
   (\(v :sigid -> int lift). (\(tl :(sigid -> int lift) ltree list).
   ((/\ ((? :((sigid -> int lift) -> bool) -> bool)
   (\(f :sigid -> int lift).
   (((= :(sigid -> int lift) -> (sigid -> int lift) -> bool) $2)
   $0)))) (((= :num -> num -> bool)
   ((LENGTH :(sigid -> int lift) ltree list -> num) $0)) 0))))) $0))
   (((= :(sigid -> int lift) ltree -> (sigid -> int lift) ltree ->
         bool) (REP_sigenv (ABS_sigenv $0))) $0)))))`),
 ((sigenv_TY_DEF),
  [],
  `((? :((sigenv -> (sigid -> int lift) ltree) -> bool) -> bool)
   (\(rep :sigenv -> (sigid -> int lift) ltree).
   (((TYPE_DEFINITION :((sigid -> int lift) ltree -> bool) ->
                       (sigenv -> (sigid -> int lift) ltree) -> bool)
   ((TRP :((sigid -> int lift) -> (sigid -> int lift) ltree list ->
          bool) -> (sigid -> int lift) ltree -> bool)
   (\(v :sigid -> int lift). (\(tl :(sigid -> int lift) ltree list).
   ((/\ ((? :((sigid -> int lift) -> bool) -> bool)
   (\(f :sigid -> int lift).
   (((= :(sigid -> int lift) -> (sigid -> int lift) -> bool) $2)
   $0)))) (((= :num -> num -> bool)
   ((LENGTH :(sigid -> int lift) ltree list -> num) $0)) 0))))))
   $0)))`),
 ((int_int_intenv_FINMAP_strid_int_prod_int_intenv_list_int_intenv_arg_DEF),
  [],
  `((! :(strid_int_prod_int_intenv_list_int_intenv -> bool) -> bool)
   (\(x1 :strid_int_prod_int_intenv_list_int_intenv).
   (((= :strid_int_prod_int_intenv_list_int_intenv ->
         strid_int_prod_int_intenv_list_int_intenv -> bool)
   (int_int_intenv_FINMAP_strid_int_prod_int_intenv_list_int_intenv_arg
   (int_int_intenv_FINMAP_strid_int_prod_int_intenv_list_int_intenv
   $0))) $0)))`),
 ((int_int_intenv_CONS_strid_int_prod_int_intenv_arg2_DEF),
  [],
  `((/\ ((! :(strid_int_prod_int_intenv -> bool) -> bool)
   (\(x1 :strid_int_prod_int_intenv).
   ((! :(strid_int_prod_int_intenv_list_int_intenv -> bool) -> bool)
   (\(x2 :strid_int_prod_int_intenv_list_int_intenv).
   (((= :strid_int_prod_int_intenv_list_int_intenv ->
         strid_int_prod_int_intenv_list_int_intenv -> bool)
   (int_int_intenv_CONS_strid_int_prod_int_intenv_arg2
   ((int_int_intenv_CONS_strid_int_prod_int_intenv $1) $0))) $0))))))
   (((= :strid_int_prod_int_intenv_list_int_intenv ->
         strid_int_prod_int_intenv_list_int_intenv -> bool)
   (int_int_intenv_CONS_strid_int_prod_int_intenv_arg2
   int_int_intenv_NIL_strid_int_prod_int_intenv))
   ((@ :(strid_int_prod_int_intenv_list_int_intenv -> bool) ->
        strid_int_prod_int_intenv_list_int_intenv)
   (\(x :strid_int_prod_int_intenv_list_int_intenv). T))))`),
 ((int_int_intenv_CONS_strid_int_prod_int_intenv_arg1_DEF),
  [],
  `((/\ ((! :(strid_int_prod_int_intenv -> bool) -> bool)
   (\(x1 :strid_int_prod_int_intenv).
   ((! :(strid_int_prod_int_intenv_list_int_intenv -> bool) -> bool)
   (\(x2 :strid_int_prod_int_intenv_list_int_intenv).
   (((= :strid_int_prod_int_intenv -> strid_int_prod_int_intenv ->
         bool) (int_int_intenv_CONS_strid_int_prod_int_intenv_arg1
   ((int_int_intenv_CONS_strid_int_prod_int_intenv $1) $0))) $1))))))
   (((= :strid_int_prod_int_intenv -> strid_int_prod_int_intenv ->
         bool) (int_int_intenv_CONS_strid_int_prod_int_intenv_arg1
   int_int_intenv_NIL_strid_int_prod_int_intenv))
   ((@ :(strid_int_prod_int_intenv -> bool) ->
        strid_int_prod_int_intenv) (\(x :strid_int_prod_int_intenv).
   T))))`),
 ((int_int_intenv_ch44_strid_int_arg2_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int -> bool) -> bool) (\(x2 :int). (((= :int -> int -> bool)
   (int_int_intenv_ch44_strid_int_arg2 ((int_int_intenv_ch44_strid_int
   $1) $0))) $0)))))`),
 ((int_int_intenv_ch44_strid_int_arg1_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int -> bool) -> bool) (\(x2 :int).
   (((= :strid -> strid -> bool) (int_int_intenv_ch44_strid_int_arg1
   ((int_int_intenv_ch44_strid_int $1) $0))) $1)))))`),
 ((int_INTENV_arg_DEF),
  [],
  `((! :(strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(x1 :strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         bool) (int_INTENV_arg (int_INTENV $0))) $0)))`),
 ((int_BASICint_arg3_DEF),
  [],
  `((! :(intenv -> bool) -> bool) (\(x1 :intenv).
   ((! :(var set -> bool) -> bool) (\(x2 :var set).
   ((! :(excon set -> bool) -> bool) (\(x3 :excon set).
   (((= :excon set -> excon set -> bool) (int_BASICint_arg3
   (((int_BASICint $2) $1) $0))) $0)))))))`),
 ((int_BASICint_arg2_DEF),
  [],
  `((! :(intenv -> bool) -> bool) (\(x1 :intenv).
   ((! :(var set -> bool) -> bool) (\(x2 :var set).
   ((! :(excon set -> bool) -> bool) (\(x3 :excon set).
   (((= :var set -> var set -> bool) (int_BASICint_arg2
   (((int_BASICint $2) $1) $0))) $1)))))))`),
 ((int_BASICint_arg1_DEF),
  [],
  `((! :(intenv -> bool) -> bool) (\(x1 :intenv).
   ((! :(var set -> bool) -> bool) (\(x2 :var set).
   ((! :(excon set -> bool) -> bool) (\(x3 :excon set).
   (((= :intenv -> intenv -> bool) (int_BASICint_arg1 (((int_BASICint
   $2) $1) $0))) $2)))))))`),
 ((dist_aux_ftn_int_DEF),
  [],
  `((/\ ((! :(intenv -> bool) -> bool) (\(x1 :intenv).
   ((! :(var set -> bool) -> bool) (\(x2 :var set).
   ((! :(excon set -> bool) -> bool) (\(x3 :excon set).
   (((= :num -> num -> bool) (dist_aux_ftn_int (((int_BASICint $2) $1)
   $0))) 0)))))))) ((/\
   ((! :(strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(x1 :strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :num -> num -> bool) (dist_aux_ftn_intenv (int_INTENV $0)))
   1)))) ((/\ ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int -> bool) -> bool) (\(x2 :int). (((= :num -> num -> bool)
   (dist_aux_ftn_strid_int_prod_int_intenv
   ((int_int_intenv_ch44_strid_int $1) $0))) 2)))))) ((/\
   (((= :num -> num -> bool)
   (dist_aux_ftn_strid_int_prod_int_intenv_list_int_intenv
   int_int_intenv_NIL_strid_int_prod_int_intenv)) 3)) ((/\
   ((! :(strid_int_prod_int_intenv -> bool) -> bool)
   (\(x1 :strid_int_prod_int_intenv).
   ((! :(strid_int_prod_int_intenv_list_int_intenv -> bool) -> bool)
   (\(x2 :strid_int_prod_int_intenv_list_int_intenv).
   (((= :num -> num -> bool)
   (dist_aux_ftn_strid_int_prod_int_intenv_list_int_intenv
   ((int_int_intenv_CONS_strid_int_prod_int_intenv $1) $0))) 4))))))
   ((! :(strid_int_prod_int_intenv_list_int_intenv -> bool) -> bool)
   (\(x1 :strid_int_prod_int_intenv_list_int_intenv).
   (((= :num -> num -> bool)
   (dist_aux_ftn_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   (int_int_intenv_FINMAP_strid_int_prod_int_intenv_list_int_intenv
   $0))) 5))))))))`),
 ((INTENV),
  [],
  `(((= :((strid # int) list finmap -> intenv) ->
         ((strid # int) list finmap -> intenv) -> bool) INTENV)
   (\(x0 :(strid # int) list finmap). (int_INTENV
   (int_inj_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   $0))))`),
 ((int_inv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv),
  [],
  `((! :(strid_int_prod_int_intenv_list_int_intenv -> bool) -> bool)
   (\(x1 :strid_int_prod_int_intenv_list_int_intenv).
   (((= :(strid # int) list finmap -> (strid # int) list finmap ->
         bool)
   (int_inv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   (int_int_intenv_FINMAP_strid_int_prod_int_intenv_list_int_intenv
   $0))) ((FINMAP :(strid # int) list -> (strid # int) list finmap)
   (int_inv_strid_int_prod_int_intenv_list_int_intenv $0)))))`),
 ((int_inj_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv),
  [],
  `((! :((strid # int) list -> bool) -> bool)
   (\(x0 :(strid # int) list).
   (((= :strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         bool)
   (int_inj_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   ((FINMAP :(strid # int) list -> (strid # int) list finmap) $0)))
   (int_int_intenv_FINMAP_strid_int_prod_int_intenv_list_int_intenv
   (int_inj_strid_int_prod_int_intenv_list_int_intenv $0)))))`),
 ((int_inv_strid_int_prod_int_intenv_list_int_intenv),
  [],
  `((/\ (((= :(strid # int) list -> (strid # int) list -> bool)
   (int_inv_strid_int_prod_int_intenv_list_int_intenv
   int_int_intenv_NIL_strid_int_prod_int_intenv))
   (NIL :(strid # int) list)))
   ((! :(strid_int_prod_int_intenv -> bool) -> bool)
   (\(x1 :strid_int_prod_int_intenv).
   ((! :(strid_int_prod_int_intenv_list_int_intenv -> bool) -> bool)
   (\(x2 :strid_int_prod_int_intenv_list_int_intenv).
   (((= :(strid # int) list -> (strid # int) list -> bool)
   (int_inv_strid_int_prod_int_intenv_list_int_intenv
   ((int_int_intenv_CONS_strid_int_prod_int_intenv $1) $0)))
   (((CONS :strid # int -> (strid # int) list -> (strid # int) list)
   (int_inv_strid_int_prod_int_intenv $1))
   (int_inv_strid_int_prod_int_intenv_list_int_intenv $0))))))))`),
 ((int_inj_strid_int_prod_int_intenv_list_int_intenv),
  [],
  `((/\
   (((= :strid_int_prod_int_intenv_list_int_intenv ->
         strid_int_prod_int_intenv_list_int_intenv -> bool)
   (int_inj_strid_int_prod_int_intenv_list_int_intenv
   (NIL :(strid # int) list)))
   int_int_intenv_NIL_strid_int_prod_int_intenv))
   ((! :((strid # int) list -> bool) -> bool)
   (\(x1 :(strid # int) list). ((! :(strid # int -> bool) -> bool)
   (\(x0 :strid # int).
   (((= :strid_int_prod_int_intenv_list_int_intenv ->
         strid_int_prod_int_intenv_list_int_intenv -> bool)
   (int_inj_strid_int_prod_int_intenv_list_int_intenv
   (((CONS :strid # int -> (strid # int) list -> (strid # int) list)
   $0) $1))) ((int_int_intenv_CONS_strid_int_prod_int_intenv
   (int_inj_strid_int_prod_int_intenv $0))
   (int_inj_strid_int_prod_int_intenv_list_int_intenv $1))))))))`),
 ((int_inv_strid_int_prod_int_intenv),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int -> bool) -> bool) (\(x2 :int).
   (((= :strid # int -> strid # int -> bool)
   (int_inv_strid_int_prod_int_intenv ((int_int_intenv_ch44_strid_int
   $1) $0))) (((, :strid -> int -> strid # int) $1) $0))))))`),
 ((int_inj_strid_int_prod_int_intenv),
  [],
  `((! :(int -> bool) -> bool) (\(x1 :int).
   ((! :(strid -> bool) -> bool) (\(x0 :strid).
   (((= :strid_int_prod_int_intenv -> strid_int_prod_int_intenv ->
         bool) (int_inj_strid_int_prod_int_intenv
   (((, :strid -> int -> strid # int) $0) $1)))
   ((int_int_intenv_ch44_strid_int $0) $1))))))`),
 ((BASICint),
  [],
  `(((= :(intenv -> var set -> excon set -> int) ->
         (intenv -> var set -> excon set -> int) -> bool) BASICint)
   (\(x0 :intenv). (\(x1 :var set). (\(x2 :excon set). (((int_BASICint
   $2) $1) $0)))))`),
 ((int_int_intenv_FINMAP_strid_int_prod_int_intenv_list_int_intenv_DEF),
  [],
  `((! :(strid_int_prod_int_intenv_list_int_intenv -> bool) -> bool)
   (\(x1 :strid_int_prod_int_intenv_list_int_intenv).
   (((= :strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         bool)
   (int_int_intenv_FINMAP_strid_int_prod_int_intenv_list_int_intenv
   $0))
   (strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_abs
   (JOINT_int_int_intenv_FINMAP_strid_int_prod_int_intenv_list_int_intenv
   (strid_int_prod_int_intenv_list_int_intenv_rep $0))))))`),
 ((int_int_intenv_CONS_strid_int_prod_int_intenv_DEF),
  [],
  `((! :(strid_int_prod_int_intenv -> bool) -> bool)
   (\(x1 :strid_int_prod_int_intenv).
   ((! :(strid_int_prod_int_intenv_list_int_intenv -> bool) -> bool)
   (\(x2 :strid_int_prod_int_intenv_list_int_intenv).
   (((= :strid_int_prod_int_intenv_list_int_intenv ->
         strid_int_prod_int_intenv_list_int_intenv -> bool)
   ((int_int_intenv_CONS_strid_int_prod_int_intenv $1) $0))
   (strid_int_prod_int_intenv_list_int_intenv_abs
   ((JOINT_int_int_intenv_CONS_strid_int_prod_int_intenv
   (strid_int_prod_int_intenv_rep $1))
   (strid_int_prod_int_intenv_list_int_intenv_rep $0))))))))`),
 ((int_int_intenv_NIL_strid_int_prod_int_intenv_DEF),
  [],
  `(((= :strid_int_prod_int_intenv_list_int_intenv ->
         strid_int_prod_int_intenv_list_int_intenv -> bool)
   int_int_intenv_NIL_strid_int_prod_int_intenv)
   (strid_int_prod_int_intenv_list_int_intenv_abs
   JOINT_int_int_intenv_NIL_strid_int_prod_int_intenv))`),
 ((int_int_intenv_ch44_strid_int_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int -> bool) -> bool) (\(x2 :int).
   (((= :strid_int_prod_int_intenv -> strid_int_prod_int_intenv ->
         bool) ((int_int_intenv_ch44_strid_int $1) $0))
   (strid_int_prod_int_intenv_abs
   ((JOINT_int_int_intenv_ch44_strid_int $1) (int_rep $0))))))))`),
 ((int_INTENV_DEF),
  [],
  `((! :(strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(x1 :strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :intenv -> intenv -> bool) (int_INTENV $0)) (intenv_abs
   (JOINT_int_INTENV
   (strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_rep
   $0))))))`),
 ((int_BASICint_DEF),
  [],
  `((! :(intenv -> bool) -> bool) (\(x1 :intenv).
   ((! :(var set -> bool) -> bool) (\(x2 :var set).
   ((! :(excon set -> bool) -> bool) (\(x3 :excon set).
   (((= :int -> int -> bool) (((int_BASICint $2) $1) $0)) (int_abs
   (((JOINT_int_BASICint (intenv_rep $2)) $1) $0)))))))))`),
 ((strid_int_prod_int_intenv_list_int_intenv_REP_ABS),
  [],
  `((/\
   ((! :(strid_int_prod_int_intenv_list_int_intenv -> bool) -> bool)
   (\(a :strid_int_prod_int_intenv_list_int_intenv).
   (((= :strid_int_prod_int_intenv_list_int_intenv ->
         strid_int_prod_int_intenv_list_int_intenv -> bool)
   (strid_int_prod_int_intenv_list_int_intenv_abs
   (strid_int_prod_int_intenv_list_int_intenv_rep $0))) $0))))
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(r :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   $0)) 4)) $0))
   (((= :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         bool) (strid_int_prod_int_intenv_list_int_intenv_rep
   (strid_int_prod_int_intenv_list_int_intenv_abs $0))) $0)))))`),
 ((strid_int_prod_int_intenv_list_int_intenv_TY_DEF),
  [],
  `((? :((strid_int_prod_int_intenv_list_int_intenv ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv) ->
        bool) -> bool)
   (\(rep :strid_int_prod_int_intenv_list_int_intenv ->
           joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((TYPE_DEFINITION :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
                       bool) ->
                       (strid_int_prod_int_intenv_list_int_intenv ->
                       joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv) ->
                       bool)
   (\(x :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   $0)) 4))) $0)))`),
 ((strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_REP_ABS),
  [],
  `((/\
   ((! :(strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(a :strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         bool)
   (strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_abs
   (strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_rep
   $0))) $0))))
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(r :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   $0)) 5)) $0))
   (((= :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         bool)
   (strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_rep
   (strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_abs
   $0))) $0)))))`),
 ((strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_TY_DEF),
  [],
  `((? :((strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv) ->
        bool) -> bool)
   (\(rep :strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
           joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((TYPE_DEFINITION :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
                       bool) ->
                       (strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
                       joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv) ->
                       bool)
   (\(x :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   $0)) 5))) $0)))`),
 ((intenv_REP_ABS),
  [],
  `((/\ ((! :(intenv -> bool) -> bool) (\(a :intenv).
   (((= :intenv -> intenv -> bool) (intenv_abs (intenv_rep $0)))
   $0))))
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(r :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   $0)) 2)) $0))
   (((= :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         bool) (intenv_rep (intenv_abs $0))) $0)))))`),
 ((intenv_TY_DEF),
  [],
  `((? :((intenv ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv) ->
        bool) -> bool)
   (\(rep :intenv ->
           joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((TYPE_DEFINITION :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
                       bool) ->
                       (intenv ->
                       joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv) ->
                       bool)
   (\(x :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   $0)) 2))) $0)))`),
 ((int_REP_ABS),
  [],
  `((/\ ((! :(int -> bool) -> bool) (\(a :int).
   (((= :int -> int -> bool) (int_abs (int_rep $0))) $0))))
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(r :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   $0)) 1)) $0))
   (((= :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         bool) (int_rep (int_abs $0))) $0)))))`),
 ((int_TY_DEF),
  [],
  `((? :((int ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv) ->
        bool) -> bool)
   (\(rep :int ->
           joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((TYPE_DEFINITION :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
                       bool) ->
                       (int ->
                       joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv) ->
                       bool)
   (\(x :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   $0)) 1))) $0)))`),
 ((strid_int_prod_int_intenv_REP_ABS),
  [],
  `((/\ ((! :(strid_int_prod_int_intenv -> bool) -> bool)
   (\(a :strid_int_prod_int_intenv).
   (((= :strid_int_prod_int_intenv -> strid_int_prod_int_intenv ->
         bool) (strid_int_prod_int_intenv_abs
   (strid_int_prod_int_intenv_rep $0))) $0))))
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(r :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   $0)) 3)) $0))
   (((= :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         bool) (strid_int_prod_int_intenv_rep
   (strid_int_prod_int_intenv_abs $0))) $0)))))`),
 ((strid_int_prod_int_intenv_TY_DEF),
  [],
  `((? :((strid_int_prod_int_intenv ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv) ->
        bool) -> bool)
   (\(rep :strid_int_prod_int_intenv ->
           joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((TYPE_DEFINITION :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
                       bool) ->
                       (strid_int_prod_int_intenv ->
                       joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv) ->
                       bool)
   (\(x :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   $0)) 3))) $0)))`),
 ((joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select_DEF),
  [],
  `((/\
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(j :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   ((! :(var set -> bool) -> bool) (\(s0 :var set).
   ((! :(excon set -> bool) -> bool) (\(s1 :excon set).
   (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   (((JOINT_int_BASICint $2) $1) $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   $2)) 2)) 1) 0))))))))) ((/\
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(j :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   (JOINT_int_INTENV $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   $0)) 5)) 2) 0))))) ((/\ ((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(j :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   ((JOINT_int_int_intenv_ch44_strid_int $1) $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   $0)) 1)) 3) 0))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   JOINT_int_int_intenv_NIL_strid_int_prod_int_intenv)) 4)) ((/\
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(j1 :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(j2 :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   ((JOINT_int_int_intenv_CONS_strid_int_prod_int_intenv $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   $1)) 3)) (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   $0)) 4))) 4) 0)))))))
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(j :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   (JOINT_int_int_intenv_FINMAP_strid_int_prod_int_intenv_list_int_intenv
   $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_select
   $0)) 4)) 5) 0)))))))))`),
 ((JOINT_int_int_intenv_FINMAP_strid_int_prod_int_intenv_list_int_intenv_DEF),
  [],
  `((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(j :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         bool)
   (JOINT_int_int_intenv_FINMAP_strid_int_prod_int_intenv_list_int_intenv
   $0))
   (ABS_joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   (((Node :var set # excon set + one + strid + one + one + one ->
            (var set # excon set + one + strid + one + one + one)
            ltree list ->
            (var set # excon set + one + strid + one + one + one)
            ltree)
   ((INR :one + strid + one + one + one ->
          var set # excon set + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INR :one + one + one -> strid + one + one + one)
   ((INR :one + one -> one + one + one) ((INR :one -> one + one)
   one))))))
   (((CONS :(var set # excon set + one + strid + one + one + one)
            ltree ->
            (var set # excon set + one + strid + one + one + one)
            ltree list ->
            (var set # excon set + one + strid + one + one + one)
            ltree list)
   (REP_joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   $0))
   (NIL :(var set # excon set + one + strid + one + one + one) ltree
         list)))))))`),
 ((JOINT_int_int_intenv_CONS_strid_int_prod_int_intenv_DEF),
  [],
  `((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(j1 :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(j2 :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         bool) ((JOINT_int_int_intenv_CONS_strid_int_prod_int_intenv
   $1) $0))
   (ABS_joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   (((Node :var set # excon set + one + strid + one + one + one ->
            (var set # excon set + one + strid + one + one + one)
            ltree list ->
            (var set # excon set + one + strid + one + one + one)
            ltree)
   ((INR :one + strid + one + one + one ->
          var set # excon set + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INR :one + one + one -> strid + one + one + one)
   ((INR :one + one -> one + one + one) ((INL :one -> one + one)
   one))))))
   (((CONS :(var set # excon set + one + strid + one + one + one)
            ltree ->
            (var set # excon set + one + strid + one + one + one)
            ltree list ->
            (var set # excon set + one + strid + one + one + one)
            ltree list)
   (REP_joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   $1))
   (((CONS :(var set # excon set + one + strid + one + one + one)
            ltree ->
            (var set # excon set + one + strid + one + one + one)
            ltree list ->
            (var set # excon set + one + strid + one + one + one)
            ltree list)
   (REP_joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   $0))
   (NIL :(var set # excon set + one + strid + one + one + one) ltree
         list))))))))))`),
 ((JOINT_int_int_intenv_NIL_strid_int_prod_int_intenv_DEF),
  [],
  `(((= :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         bool) JOINT_int_int_intenv_NIL_strid_int_prod_int_intenv)
   (ABS_joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   (((Node :var set # excon set + one + strid + one + one + one ->
            (var set # excon set + one + strid + one + one + one)
            ltree list ->
            (var set # excon set + one + strid + one + one + one)
            ltree)
   ((INR :one + strid + one + one + one ->
          var set # excon set + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INR :one + one + one -> strid + one + one + one)
   ((INL :one -> one + one + one) one)))))
   (NIL :(var set # excon set + one + strid + one + one + one) ltree
         list))))`),
 ((JOINT_int_int_intenv_ch44_strid_int_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(j :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         bool) ((JOINT_int_int_intenv_ch44_strid_int $1) $0))
   (ABS_joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   (((Node :var set # excon set + one + strid + one + one + one ->
            (var set # excon set + one + strid + one + one + one)
            ltree list ->
            (var set # excon set + one + strid + one + one + one)
            ltree)
   ((INR :one + strid + one + one + one ->
          var set # excon set + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INL :strid -> strid + one + one + one) $1))))
   (((CONS :(var set # excon set + one + strid + one + one + one)
            ltree ->
            (var set # excon set + one + strid + one + one + one)
            ltree list ->
            (var set # excon set + one + strid + one + one + one)
            ltree list)
   (REP_joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   $0))
   (NIL :(var set # excon set + one + strid + one + one + one) ltree
         list)))))))))`),
 ((JOINT_int_INTENV_DEF),
  [],
  `((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(j :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         bool) (JOINT_int_INTENV $0))
   (ABS_joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   (((Node :var set # excon set + one + strid + one + one + one ->
            (var set # excon set + one + strid + one + one + one)
            ltree list ->
            (var set # excon set + one + strid + one + one + one)
            ltree)
   ((INR :one + strid + one + one + one ->
          var set # excon set + one + strid + one + one + one)
   ((INL :one -> one + strid + one + one + one) one)))
   (((CONS :(var set # excon set + one + strid + one + one + one)
            ltree ->
            (var set # excon set + one + strid + one + one + one)
            ltree list ->
            (var set # excon set + one + strid + one + one + one)
            ltree list)
   (REP_joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   $0))
   (NIL :(var set # excon set + one + strid + one + one + one) ltree
         list)))))))`),
 ((JOINT_int_BASICint_DEF),
  [],
  `((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(j :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   ((! :(var set -> bool) -> bool) (\(s0 :var set).
   ((! :(excon set -> bool) -> bool) (\(s1 :excon set).
   (((= :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         bool) (((JOINT_int_BASICint $2) $1) $0))
   (ABS_joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   (((Node :var set # excon set + one + strid + one + one + one ->
            (var set # excon set + one + strid + one + one + one)
            ltree list ->
            (var set # excon set + one + strid + one + one + one)
            ltree)
   ((INL :var set # excon set ->
          var set # excon set + one + strid + one + one + one)
   (((, :var set -> excon set -> var set # excon set) $1) $0)))
   (((CONS :(var set # excon set + one + strid + one + one + one)
            ltree ->
            (var set # excon set + one + strid + one + one + one)
            ltree list ->
            (var set # excon set + one + strid + one + one + one)
            ltree list)
   (REP_joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   $2))
   (NIL :(var set # excon set + one + strid + one + one + one) ltree
         list)))))))))))`),
 ((joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_ISO_DEF),
  [],
  `((/\
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(a :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         bool)
   (ABS_joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   (REP_joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   $0))) $0))))
   ((! :((var set # excon set + one + strid + one + one + one)
         ltree -> bool) -> bool)
   (\(r :(var set # excon set + one + strid + one + one + one) ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(var set # excon set + one + strid + one + one + one ->
           (var set # excon set + one + strid + one + one + one) ltree
           list -> bool) ->
           (var set # excon set + one + strid + one + one + one)
           ltree -> bool)
   (\(v :var set # excon set + one + strid + one + one + one).
   (\(tl :(var set # excon set + one + strid + one + one + one) ltree
          list). ((\/ ((/\ ((? :(var set -> bool) -> bool)
   (\(s0 :var set). ((? :(excon set -> bool) -> bool)
   (\(s1 :excon set).
   (((= :var set # excon set + one + strid + one + one + one ->
         var set # excon set + one + strid + one + one + one -> bool)
   $3)
   ((INL :var set # excon set ->
          var set # excon set + one + strid + one + one + one)
   (((, :var set -> excon set -> var set # excon set) $1) $0))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(var set # excon set + one + strid + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :var set # excon set + one + strid + one + one + one ->
         var set # excon set + one + strid + one + one + one -> bool)
   $1)
   ((INR :one + strid + one + one + one ->
          var set # excon set + one + strid + one + one + one)
   ((INL :one -> one + strid + one + one + one) one))))
   (((= :num -> num -> bool)
   ((LENGTH :(var set # excon set + one + strid + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(strid -> bool) -> bool) (\(s :strid).
   (((= :var set # excon set + one + strid + one + one + one ->
         var set # excon set + one + strid + one + one + one -> bool)
   $2)
   ((INR :one + strid + one + one + one ->
          var set # excon set + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INL :strid -> strid + one + one + one) $0)))))))
   (((= :num -> num -> bool)
   ((LENGTH :(var set # excon set + one + strid + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :var set # excon set + one + strid + one + one + one ->
         var set # excon set + one + strid + one + one + one -> bool)
   $1)
   ((INR :one + strid + one + one + one ->
          var set # excon set + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INR :one + one + one -> strid + one + one + one)
   ((INL :one -> one + one + one) one)))))) (((= :num -> num -> bool)
   ((LENGTH :(var set # excon set + one + strid + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :var set # excon set + one + strid + one + one + one ->
         var set # excon set + one + strid + one + one + one -> bool)
   $1)
   ((INR :one + strid + one + one + one ->
          var set # excon set + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INR :one + one + one -> strid + one + one + one)
   ((INR :one + one -> one + one + one) ((INL :one -> one + one)
   one))))))) (((= :num -> num -> bool)
   ((LENGTH :(var set # excon set + one + strid + one + one + one)
             ltree list -> num) $0)) (SUC (SUC 0))))) ((/\
   (((= :var set # excon set + one + strid + one + one + one ->
         var set # excon set + one + strid + one + one + one -> bool)
   $1)
   ((INR :one + strid + one + one + one ->
          var set # excon set + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INR :one + one + one -> strid + one + one + one)
   ((INR :one + one -> one + one + one) ((INR :one -> one + one)
   one))))))) (((= :num -> num -> bool)
   ((LENGTH :(var set # excon set + one + strid + one + one + one)
             ltree list -> num) $0)) (SUC 0))))))))))) $0))
   (((= :(var set # excon set + one + strid + one + one + one)
         ltree ->
         (var set # excon set + one + strid + one + one + one)
         ltree -> bool)
   (REP_joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   (ABS_joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv
   $0))) $0)))))`),
 ((joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_TY_DEF),
  [],
  `((? :((joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         (var set # excon set + one + strid + one + one + one)
         ltree) -> bool) -> bool)
   (\(rep :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
           (var set # excon set + one + strid + one + one + one)
           ltree).
   (((TYPE_DEFINITION :((var set # excon set + one + strid + one +
                        one + one) ltree -> bool) ->
                       (joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
                       (var set # excon set + one + strid + one +
                       one + one) ltree) -> bool)
   ((TRP :(var set # excon set + one + strid + one + one + one ->
          (var set # excon set + one + strid + one + one + one) ltree
          list -> bool) ->
          (var set # excon set + one + strid + one + one + one)
          ltree -> bool)
   (\(v :var set # excon set + one + strid + one + one + one).
   (\(tl :(var set # excon set + one + strid + one + one + one) ltree
          list). ((\/ ((/\ ((? :(var set -> bool) -> bool)
   (\(s0 :var set). ((? :(excon set -> bool) -> bool)
   (\(s1 :excon set).
   (((= :var set # excon set + one + strid + one + one + one ->
         var set # excon set + one + strid + one + one + one -> bool)
   $3)
   ((INL :var set # excon set ->
          var set # excon set + one + strid + one + one + one)
   (((, :var set -> excon set -> var set # excon set) $1) $0))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(var set # excon set + one + strid + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :var set # excon set + one + strid + one + one + one ->
         var set # excon set + one + strid + one + one + one -> bool)
   $1)
   ((INR :one + strid + one + one + one ->
          var set # excon set + one + strid + one + one + one)
   ((INL :one -> one + strid + one + one + one) one))))
   (((= :num -> num -> bool)
   ((LENGTH :(var set # excon set + one + strid + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(strid -> bool) -> bool) (\(s :strid).
   (((= :var set # excon set + one + strid + one + one + one ->
         var set # excon set + one + strid + one + one + one -> bool)
   $2)
   ((INR :one + strid + one + one + one ->
          var set # excon set + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INL :strid -> strid + one + one + one) $0)))))))
   (((= :num -> num -> bool)
   ((LENGTH :(var set # excon set + one + strid + one + one + one)
             ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :var set # excon set + one + strid + one + one + one ->
         var set # excon set + one + strid + one + one + one -> bool)
   $1)
   ((INR :one + strid + one + one + one ->
          var set # excon set + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INR :one + one + one -> strid + one + one + one)
   ((INL :one -> one + one + one) one)))))) (((= :num -> num -> bool)
   ((LENGTH :(var set # excon set + one + strid + one + one + one)
             ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :var set # excon set + one + strid + one + one + one ->
         var set # excon set + one + strid + one + one + one -> bool)
   $1)
   ((INR :one + strid + one + one + one ->
          var set # excon set + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INR :one + one + one -> strid + one + one + one)
   ((INR :one + one -> one + one + one) ((INL :one -> one + one)
   one))))))) (((= :num -> num -> bool)
   ((LENGTH :(var set # excon set + one + strid + one + one + one)
             ltree list -> num) $0)) (SUC (SUC 0))))) ((/\
   (((= :var set # excon set + one + strid + one + one + one ->
         var set # excon set + one + strid + one + one + one -> bool)
   $1)
   ((INR :one + strid + one + one + one ->
          var set # excon set + one + strid + one + one + one)
   ((INR :strid + one + one + one -> one + strid + one + one + one)
   ((INR :one + one + one -> strid + one + one + one)
   ((INR :one + one -> one + one + one) ((INR :one -> one + one)
   one))))))) (((= :num -> num -> bool)
   ((LENGTH :(var set # excon set + one + strid + one + one + one)
             ltree list -> num) $0)) (SUC 0)))))))))))) $0)))`),
 ((PACKsp_DEF),
  [],
  `((! :(pack -> bool) -> bool) (\(p :pack).
   (((= :strenv_pack -> strenv_pack -> bool) (PACKsp $0))
   (ABS_strenv_pack
   (((Node :strenv + pack -> (strenv + pack) ltree list ->
            (strenv + pack) ltree) ((INR :pack -> strenv + pack) $0))
   (NIL :(strenv + pack) ltree list))))))`),
 ((STRENVsp_DEF),
  [],
  `((! :(strenv -> bool) -> bool) (\(s :strenv).
   (((= :strenv_pack -> strenv_pack -> bool) (STRENVsp $0))
   (ABS_strenv_pack
   (((Node :strenv + pack -> (strenv + pack) ltree list ->
            (strenv + pack) ltree) ((INL :strenv -> strenv + pack)
   $0)) (NIL :(strenv + pack) ltree list))))))`),
 ((strenv_pack_ISO_DEF),
  [],
  `((/\ ((! :(strenv_pack -> bool) -> bool) (\(a :strenv_pack).
   (((= :strenv_pack -> strenv_pack -> bool) (ABS_strenv_pack
   (REP_strenv_pack $0))) $0))))
   ((! :((strenv + pack) ltree -> bool) -> bool)
   (\(r :(strenv + pack) ltree). (((= :bool -> bool -> bool)
   (((TRP :(strenv + pack -> (strenv + pack) ltree list -> bool) ->
           (strenv + pack) ltree -> bool) (\(v :strenv + pack).
   (\(tl :(strenv + pack) ltree list). ((\/ ((/\
   ((? :(strenv -> bool) -> bool) (\(s :strenv).
   (((= :strenv + pack -> strenv + pack -> bool) $2)
   ((INL :strenv -> strenv + pack) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(strenv + pack) ltree list -> num) $0)) 0))) ((/\
   ((? :(pack -> bool) -> bool) (\(p :pack).
   (((= :strenv + pack -> strenv + pack -> bool) $2)
   ((INR :pack -> strenv + pack) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(strenv + pack) ltree list -> num) $0)) 0)))))) $0))
   (((= :(strenv + pack) ltree -> (strenv + pack) ltree -> bool)
   (REP_strenv_pack (ABS_strenv_pack $0))) $0)))))`),
 ((strenv_pack_TY_DEF),
  [],
  `((? :((strenv_pack -> (strenv + pack) ltree) -> bool) -> bool)
   (\(rep :strenv_pack -> (strenv + pack) ltree).
   (((TYPE_DEFINITION :((strenv + pack) ltree -> bool) ->
                       (strenv_pack -> (strenv + pack) ltree) -> bool)
   ((TRP :(strenv + pack -> (strenv + pack) ltree list -> bool) ->
          (strenv + pack) ltree -> bool) (\(v :strenv + pack).
   (\(tl :(strenv + pack) ltree list). ((\/ ((/\
   ((? :(strenv -> bool) -> bool) (\(s :strenv).
   (((= :strenv + pack -> strenv + pack -> bool) $2)
   ((INL :strenv -> strenv + pack) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(strenv + pack) ltree list -> num) $0)) 0))) ((/\
   ((? :(pack -> bool) -> bool) (\(p :pack).
   (((= :strenv + pack -> strenv + pack -> bool) $2)
   ((INR :pack -> strenv + pack) $0))))) (((= :num -> num -> bool)
   ((LENGTH :(strenv + pack) ltree list -> num) $0)) 0))))))) $0)))`),
 ((int_program_SOME_program_arg_DEF),
  [],
  `((/\ ((! :(program -> bool) -> bool) (\(x1 :program).
   (((= :program -> program -> bool) (int_program_SOME_program_arg
   (int_program_SOME_program $0))) $0))))
   (((= :program -> program -> bool) (int_program_SOME_program_arg
   int_program_NONE_program)) ((@ :(program -> bool) -> program)
   (\(x :program). T))))`),
 ((int_SEQprogram_arg2_DEF),
  [],
  `((! :(topdec -> bool) -> bool) (\(x1 :topdec).
   ((! :(program_option_program -> bool) -> bool)
   (\(x2 :program_option_program).
   (((= :program_option_program -> program_option_program -> bool)
   (int_SEQprogram_arg2 ((int_SEQprogram $1) $0))) $0)))))`),
 ((int_SEQprogram_arg1_DEF),
  [],
  `((! :(topdec -> bool) -> bool) (\(x1 :topdec).
   ((! :(program_option_program -> bool) -> bool)
   (\(x2 :program_option_program). (((= :topdec -> topdec -> bool)
   (int_SEQprogram_arg1 ((int_SEQprogram $1) $0))) $1)))))`),
 ((dist_aux_ftn_program_DEF),
  [],
  `((/\ ((! :(topdec -> bool) -> bool) (\(x1 :topdec).
   ((! :(program_option_program -> bool) -> bool)
   (\(x2 :program_option_program). (((= :num -> num -> bool)
   (dist_aux_ftn_program ((int_SEQprogram $1) $0))) 0)))))) ((/\
   (((= :num -> num -> bool) (dist_aux_ftn_program_option_program
   int_program_NONE_program)) 1)) ((! :(program -> bool) -> bool)
   (\(x1 :program). (((= :num -> num -> bool)
   (dist_aux_ftn_program_option_program (int_program_SOME_program
   $0))) 2)))))`),
 ((SEQprogram),
  [],
  `(((= :(topdec -> program option -> program) ->
         (topdec -> program option -> program) -> bool) SEQprogram)
   (\(x0 :topdec). (\(x1 :program option). ((int_SEQprogram $1)
   (int_inj_program_option_program $0)))))`),
 ((int_inv_program_option_program),
  [],
  `((/\ (((= :program option -> program option -> bool)
   (int_inv_program_option_program int_program_NONE_program))
   (NONE :program option))) ((! :(program -> bool) -> bool)
   (\(x1 :program). (((= :program option -> program option -> bool)
   (int_inv_program_option_program (int_program_SOME_program $0)))
   ((SOME :program -> program option) $0)))))`),
 ((int_inj_program_option_program),
  [],
  `((/\
   (((= :program_option_program -> program_option_program -> bool)
   (int_inj_program_option_program (NONE :program option)))
   int_program_NONE_program)) ((! :(program -> bool) -> bool)
   (\(x0 :program).
   (((= :program_option_program -> program_option_program -> bool)
   (int_inj_program_option_program ((SOME :program -> program option)
   $0))) (int_program_SOME_program $0)))))`),
 ((int_program_SOME_program_DEF),
  [],
  `((! :(program -> bool) -> bool) (\(x1 :program).
   (((= :program_option_program -> program_option_program -> bool)
   (int_program_SOME_program $0)) (program_option_program_abs
   (JOINT_int_program_SOME_program (program_rep $0))))))`),
 ((int_program_NONE_program_DEF),
  [],
  `(((= :program_option_program -> program_option_program -> bool)
   int_program_NONE_program) (program_option_program_abs
   JOINT_int_program_NONE_program))`),
 ((int_SEQprogram_DEF),
  [],
  `((! :(topdec -> bool) -> bool) (\(x1 :topdec).
   ((! :(program_option_program -> bool) -> bool)
   (\(x2 :program_option_program). (((= :program -> program -> bool)
   ((int_SEQprogram $1) $0)) (program_abs ((JOINT_int_SEQprogram $1)
   (program_option_program_rep $0))))))))`),
 ((program_option_program_REP_ABS),
  [],
  `((/\ ((! :(program_option_program -> bool) -> bool)
   (\(a :program_option_program).
   (((= :program_option_program -> program_option_program -> bool)
   (program_option_program_abs (program_option_program_rep $0)))
   $0))))
   ((! :(joint_ty_program_program_option_program -> bool) -> bool)
   (\(r :joint_ty_program_program_option_program).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_program_program_option_program).
   (((= :num -> num -> bool)
   (joint_ty_program_program_option_program_select $0)) 2)) $0))
   (((= :joint_ty_program_program_option_program ->
         joint_ty_program_program_option_program -> bool)
   (program_option_program_rep (program_option_program_abs $0)))
   $0)))))`),
 ((program_option_program_TY_DEF),
  [],
  `((? :((program_option_program ->
         joint_ty_program_program_option_program) -> bool) -> bool)
   (\(rep :program_option_program ->
           joint_ty_program_program_option_program).
   (((TYPE_DEFINITION :(joint_ty_program_program_option_program ->
                       bool) ->
                       (program_option_program ->
                       joint_ty_program_program_option_program) ->
                       bool)
   (\(x :joint_ty_program_program_option_program).
   (((= :num -> num -> bool)
   (joint_ty_program_program_option_program_select $0)) 2))) $0)))`),
 ((program_REP_ABS),
  [],
  `((/\ ((! :(program -> bool) -> bool) (\(a :program).
   (((= :program -> program -> bool) (program_abs (program_rep $0)))
   $0))))
   ((! :(joint_ty_program_program_option_program -> bool) -> bool)
   (\(r :joint_ty_program_program_option_program).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_program_program_option_program).
   (((= :num -> num -> bool)
   (joint_ty_program_program_option_program_select $0)) 1)) $0))
   (((= :joint_ty_program_program_option_program ->
         joint_ty_program_program_option_program -> bool) (program_rep
   (program_abs $0))) $0)))))`),
 ((program_TY_DEF),
  [],
  `((? :((program -> joint_ty_program_program_option_program) ->
        bool) -> bool)
   (\(rep :program -> joint_ty_program_program_option_program).
   (((TYPE_DEFINITION :(joint_ty_program_program_option_program ->
                       bool) ->
                       (program ->
                       joint_ty_program_program_option_program) ->
                       bool)
   (\(x :joint_ty_program_program_option_program).
   (((= :num -> num -> bool)
   (joint_ty_program_program_option_program_select $0)) 1))) $0)))`),
 ((joint_ty_program_program_option_program_select_DEF),
  [],
  `((/\ ((! :(topdec -> bool) -> bool) (\(t :topdec).
   ((! :(joint_ty_program_program_option_program -> bool) -> bool)
   (\(j :joint_ty_program_program_option_program).
   (((= :num -> num -> bool)
   (joint_ty_program_program_option_program_select
   ((JOINT_int_SEQprogram $1) $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_program_program_option_program_select $0)) 2)) 1)
   0))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_program_program_option_program_select
   JOINT_int_program_NONE_program)) 2))
   ((! :(joint_ty_program_program_option_program -> bool) -> bool)
   (\(j :joint_ty_program_program_option_program).
   (((= :num -> num -> bool)
   (joint_ty_program_program_option_program_select
   (JOINT_int_program_SOME_program $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_program_program_option_program_select $0)) 1)) 2)
   0))))))`),
 ((JOINT_int_program_SOME_program_DEF),
  [],
  `((! :(joint_ty_program_program_option_program -> bool) -> bool)
   (\(j :joint_ty_program_program_option_program).
   (((= :joint_ty_program_program_option_program ->
         joint_ty_program_program_option_program -> bool)
   (JOINT_int_program_SOME_program $0))
   (ABS_joint_ty_program_program_option_program
   (((Node :topdec + one + one -> (topdec + one + one) ltree list ->
            (topdec + one + one) ltree)
   ((INR :one + one -> topdec + one + one) ((INR :one -> one + one)
   one)))
   (((CONS :(topdec + one + one) ltree ->
            (topdec + one + one) ltree list ->
            (topdec + one + one) ltree list)
   (REP_joint_ty_program_program_option_program $0))
   (NIL :(topdec + one + one) ltree list)))))))`),
 ((JOINT_int_program_NONE_program_DEF),
  [],
  `(((= :joint_ty_program_program_option_program ->
         joint_ty_program_program_option_program -> bool)
   JOINT_int_program_NONE_program)
   (ABS_joint_ty_program_program_option_program
   (((Node :topdec + one + one -> (topdec + one + one) ltree list ->
            (topdec + one + one) ltree)
   ((INR :one + one -> topdec + one + one) ((INL :one -> one + one)
   one))) (NIL :(topdec + one + one) ltree list))))`),
 ((JOINT_int_SEQprogram_DEF),
  [],
  `((! :(topdec -> bool) -> bool) (\(t :topdec).
   ((! :(joint_ty_program_program_option_program -> bool) -> bool)
   (\(j :joint_ty_program_program_option_program).
   (((= :joint_ty_program_program_option_program ->
         joint_ty_program_program_option_program -> bool)
   ((JOINT_int_SEQprogram $1) $0))
   (ABS_joint_ty_program_program_option_program
   (((Node :topdec + one + one -> (topdec + one + one) ltree list ->
            (topdec + one + one) ltree)
   ((INL :topdec -> topdec + one + one) $1))
   (((CONS :(topdec + one + one) ltree ->
            (topdec + one + one) ltree list ->
            (topdec + one + one) ltree list)
   (REP_joint_ty_program_program_option_program $0))
   (NIL :(topdec + one + one) ltree list)))))))))`),
 ((joint_ty_program_program_option_program_ISO_DEF),
  [],
  `((/\
   ((! :(joint_ty_program_program_option_program -> bool) -> bool)
   (\(a :joint_ty_program_program_option_program).
   (((= :joint_ty_program_program_option_program ->
         joint_ty_program_program_option_program -> bool)
   (ABS_joint_ty_program_program_option_program
   (REP_joint_ty_program_program_option_program $0))) $0))))
   ((! :((topdec + one + one) ltree -> bool) -> bool)
   (\(r :(topdec + one + one) ltree). (((= :bool -> bool -> bool)
   (((TRP :(topdec + one + one -> (topdec + one + one) ltree list ->
           bool) -> (topdec + one + one) ltree -> bool)
   (\(v :topdec + one + one). (\(tl :(topdec + one + one) ltree list).
   ((\/ ((/\ ((? :(topdec -> bool) -> bool) (\(t :topdec).
   (((= :topdec + one + one -> topdec + one + one -> bool) $2)
   ((INL :topdec -> topdec + one + one) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(topdec + one + one) ltree list -> num) $0)) (SUC 0))))
   ((\/ ((/\ (((= :topdec + one + one -> topdec + one + one -> bool)
   $1) ((INR :one + one -> topdec + one + one)
   ((INL :one -> one + one) one)))) (((= :num -> num -> bool)
   ((LENGTH :(topdec + one + one) ltree list -> num) $0)) 0))) ((/\
   (((= :topdec + one + one -> topdec + one + one -> bool) $1)
   ((INR :one + one -> topdec + one + one) ((INR :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(topdec + one + one) ltree list -> num) $0)) (SUC
   0)))))))) $0))
   (((= :(topdec + one + one) ltree -> (topdec + one + one) ltree ->
         bool) (REP_joint_ty_program_program_option_program
   (ABS_joint_ty_program_program_option_program $0))) $0)))))`),
 ((joint_ty_program_program_option_program_TY_DEF),
  [],
  `((? :((joint_ty_program_program_option_program ->
         (topdec + one + one) ltree) -> bool) -> bool)
   (\(rep :joint_ty_program_program_option_program ->
           (topdec + one + one) ltree).
   (((TYPE_DEFINITION :((topdec + one + one) ltree -> bool) ->
                       (joint_ty_program_program_option_program ->
                       (topdec + one + one) ltree) -> bool)
   ((TRP :(topdec + one + one -> (topdec + one + one) ltree list ->
          bool) -> (topdec + one + one) ltree -> bool)
   (\(v :topdec + one + one). (\(tl :(topdec + one + one) ltree list).
   ((\/ ((/\ ((? :(topdec -> bool) -> bool) (\(t :topdec).
   (((= :topdec + one + one -> topdec + one + one -> bool) $2)
   ((INL :topdec -> topdec + one + one) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(topdec + one + one) ltree list -> num) $0)) (SUC 0))))
   ((\/ ((/\ (((= :topdec + one + one -> topdec + one + one -> bool)
   $1) ((INR :one + one -> topdec + one + one)
   ((INL :one -> one + one) one)))) (((= :num -> num -> bool)
   ((LENGTH :(topdec + one + one) ltree list -> num) $0)) 0))) ((/\
   (((= :topdec + one + one -> topdec + one + one -> bool) $1)
   ((INR :one + one -> topdec + one + one) ((INR :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(topdec + one + one) ltree list -> num) $0)) (SUC
   0))))))))) $0)))`),
 ((FUNDEC_DEF),
  [],
  `((! :(fundec -> bool) -> bool) (\(f' :fundec).
   (((= :topdec -> topdec -> bool) (FUNDEC $0)) (ABS_topdec
   (((Node :strdec + sigdec + fundec ->
            (strdec + sigdec + fundec) ltree list ->
            (strdec + sigdec + fundec) ltree)
   ((INR :sigdec + fundec -> strdec + sigdec + fundec)
   ((INR :fundec -> sigdec + fundec) $0)))
   (NIL :(strdec + sigdec + fundec) ltree list))))))`),
 ((SIGDEC_DEF),
  [],
  `((! :(sigdec -> bool) -> bool) (\(s :sigdec).
   (((= :topdec -> topdec -> bool) (SIGDEC $0)) (ABS_topdec
   (((Node :strdec + sigdec + fundec ->
            (strdec + sigdec + fundec) ltree list ->
            (strdec + sigdec + fundec) ltree)
   ((INR :sigdec + fundec -> strdec + sigdec + fundec)
   ((INL :sigdec -> sigdec + fundec) $0)))
   (NIL :(strdec + sigdec + fundec) ltree list))))))`),
 ((STRDEC_DEF),
  [],
  `((! :(strdec -> bool) -> bool) (\(s :strdec).
   (((= :topdec -> topdec -> bool) (STRDEC $0)) (ABS_topdec
   (((Node :strdec + sigdec + fundec ->
            (strdec + sigdec + fundec) ltree list ->
            (strdec + sigdec + fundec) ltree)
   ((INL :strdec -> strdec + sigdec + fundec) $0))
   (NIL :(strdec + sigdec + fundec) ltree list))))))`),
 ((topdec_ISO_DEF),
  [],
  `((/\ ((! :(topdec -> bool) -> bool) (\(a :topdec).
   (((= :topdec -> topdec -> bool) (ABS_topdec (REP_topdec $0)))
   $0)))) ((! :((strdec + sigdec + fundec) ltree -> bool) -> bool)
   (\(r :(strdec + sigdec + fundec) ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(strdec + sigdec + fundec ->
           (strdec + sigdec + fundec) ltree list -> bool) ->
           (strdec + sigdec + fundec) ltree -> bool)
   (\(v :strdec + sigdec + fundec).
   (\(tl :(strdec + sigdec + fundec) ltree list). ((\/ ((/\
   ((? :(strdec -> bool) -> bool) (\(s :strdec).
   (((= :strdec + sigdec + fundec -> strdec + sigdec + fundec -> bool)
   $2) ((INL :strdec -> strdec + sigdec + fundec) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(strdec + sigdec + fundec) ltree list -> num) $0)) 0)))
   ((\/ ((/\ ((? :(sigdec -> bool) -> bool) (\(s :sigdec).
   (((= :strdec + sigdec + fundec -> strdec + sigdec + fundec -> bool)
   $2) ((INR :sigdec + fundec -> strdec + sigdec + fundec)
   ((INL :sigdec -> sigdec + fundec) $0))))))
   (((= :num -> num -> bool)
   ((LENGTH :(strdec + sigdec + fundec) ltree list -> num) $0)) 0)))
   ((/\ ((? :(fundec -> bool) -> bool) (\(f :fundec).
   (((= :strdec + sigdec + fundec -> strdec + sigdec + fundec -> bool)
   $2) ((INR :sigdec + fundec -> strdec + sigdec + fundec)
   ((INR :fundec -> sigdec + fundec) $0))))))
   (((= :num -> num -> bool)
   ((LENGTH :(strdec + sigdec + fundec) ltree list -> num) $0))
   0))))))) $0))
   (((= :(strdec + sigdec + fundec) ltree ->
         (strdec + sigdec + fundec) ltree -> bool) (REP_topdec
   (ABS_topdec $0))) $0)))))`),
 ((topdec_TY_DEF),
  [],
  `((? :((topdec -> (strdec + sigdec + fundec) ltree) -> bool) ->
        bool) (\(rep :topdec -> (strdec + sigdec + fundec) ltree).
   (((TYPE_DEFINITION :((strdec + sigdec + fundec) ltree -> bool) ->
                       (topdec -> (strdec + sigdec + fundec) ltree) ->
                       bool)
   ((TRP :(strdec + sigdec + fundec ->
          (strdec + sigdec + fundec) ltree list -> bool) ->
          (strdec + sigdec + fundec) ltree -> bool)
   (\(v :strdec + sigdec + fundec).
   (\(tl :(strdec + sigdec + fundec) ltree list). ((\/ ((/\
   ((? :(strdec -> bool) -> bool) (\(s :strdec).
   (((= :strdec + sigdec + fundec -> strdec + sigdec + fundec -> bool)
   $2) ((INL :strdec -> strdec + sigdec + fundec) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(strdec + sigdec + fundec) ltree list -> num) $0)) 0)))
   ((\/ ((/\ ((? :(sigdec -> bool) -> bool) (\(s :sigdec).
   (((= :strdec + sigdec + fundec -> strdec + sigdec + fundec -> bool)
   $2) ((INR :sigdec + fundec -> strdec + sigdec + fundec)
   ((INL :sigdec -> sigdec + fundec) $0))))))
   (((= :num -> num -> bool)
   ((LENGTH :(strdec + sigdec + fundec) ltree list -> num) $0)) 0)))
   ((/\ ((? :(fundec -> bool) -> bool) (\(f :fundec).
   (((= :strdec + sigdec + fundec -> strdec + sigdec + fundec -> bool)
   $2) ((INR :sigdec + fundec -> strdec + sigdec + fundec)
   ((INR :fundec -> sigdec + fundec) $0))))))
   (((= :num -> num -> bool)
   ((LENGTH :(strdec + sigdec + fundec) ltree list -> num) $0))
   0)))))))) $0)))`),
 ((SEQfundec_DEF),
  [],
  `((! :(fundec -> bool) -> bool) (\(f1 :fundec).
   ((! :(fundec -> bool) -> bool) (\(f2 :fundec).
   (((= :fundec -> fundec -> bool) ((SEQfundec $1) $0)) (ABS_fundec
   (((Node :funbind + one + one -> (funbind + one + one) ltree list ->
            (funbind + one + one) ltree)
   ((INR :one + one -> funbind + one + one) ((INR :one -> one + one)
   one)))
   (((CONS :(funbind + one + one) ltree ->
            (funbind + one + one) ltree list ->
            (funbind + one + one) ltree list) (REP_fundec $1))
   (((CONS :(funbind + one + one) ltree ->
            (funbind + one + one) ltree list ->
            (funbind + one + one) ltree list) (REP_fundec $0))
   (NIL :(funbind + one + one) ltree list))))))))))`),
 ((EMPTYfundec_DEF),
  [],
  `(((= :fundec -> fundec -> bool) EMPTYfundec) (ABS_fundec
   (((Node :funbind + one + one -> (funbind + one + one) ltree list ->
            (funbind + one + one) ltree)
   ((INR :one + one -> funbind + one + one) ((INL :one -> one + one)
   one))) (NIL :(funbind + one + one) ltree list))))`),
 ((FUNCTORfundec_DEF),
  [],
  `((! :(funbind -> bool) -> bool) (\(f' :funbind).
   (((= :fundec -> fundec -> bool) (FUNCTORfundec $0)) (ABS_fundec
   (((Node :funbind + one + one -> (funbind + one + one) ltree list ->
            (funbind + one + one) ltree)
   ((INL :funbind -> funbind + one + one) $0))
   (NIL :(funbind + one + one) ltree list))))))`),
 ((fundec_ISO_DEF),
  [],
  `((/\ ((! :(fundec -> bool) -> bool) (\(a :fundec).
   (((= :fundec -> fundec -> bool) (ABS_fundec (REP_fundec $0)))
   $0)))) ((! :((funbind + one + one) ltree -> bool) -> bool)
   (\(r :(funbind + one + one) ltree). (((= :bool -> bool -> bool)
   (((TRP :(funbind + one + one -> (funbind + one + one) ltree list ->
           bool) -> (funbind + one + one) ltree -> bool)
   (\(v :funbind + one + one).
   (\(tl :(funbind + one + one) ltree list). ((\/ ((/\
   ((? :(funbind -> bool) -> bool) (\(f :funbind).
   (((= :funbind + one + one -> funbind + one + one -> bool) $2)
   ((INL :funbind -> funbind + one + one) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(funbind + one + one) ltree list -> num) $0)) 0))) ((\/
   ((/\ (((= :funbind + one + one -> funbind + one + one -> bool) $1)
   ((INR :one + one -> funbind + one + one) ((INL :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(funbind + one + one) ltree list -> num) $0)) 0))) ((/\
   (((= :funbind + one + one -> funbind + one + one -> bool) $1)
   ((INR :one + one -> funbind + one + one) ((INR :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(funbind + one + one) ltree list -> num) $0)) (SUC (SUC
   0))))))))) $0))
   (((= :(funbind + one + one) ltree -> (funbind + one + one) ltree ->
         bool) (REP_fundec (ABS_fundec $0))) $0)))))`),
 ((fundec_TY_DEF),
  [],
  `((? :((fundec -> (funbind + one + one) ltree) -> bool) -> bool)
   (\(rep :fundec -> (funbind + one + one) ltree).
   (((TYPE_DEFINITION :((funbind + one + one) ltree -> bool) ->
                       (fundec -> (funbind + one + one) ltree) ->
                       bool)
   ((TRP :(funbind + one + one -> (funbind + one + one) ltree list ->
          bool) -> (funbind + one + one) ltree -> bool)
   (\(v :funbind + one + one).
   (\(tl :(funbind + one + one) ltree list). ((\/ ((/\
   ((? :(funbind -> bool) -> bool) (\(f :funbind).
   (((= :funbind + one + one -> funbind + one + one -> bool) $2)
   ((INL :funbind -> funbind + one + one) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(funbind + one + one) ltree list -> num) $0)) 0))) ((\/
   ((/\ (((= :funbind + one + one -> funbind + one + one -> bool) $1)
   ((INR :one + one -> funbind + one + one) ((INL :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(funbind + one + one) ltree list -> num) $0)) 0))) ((/\
   (((= :funbind + one + one -> funbind + one + one -> bool) $1)
   ((INR :one + one -> funbind + one + one) ((INR :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(funbind + one + one) ltree list -> num) $0)) (SUC (SUC
   0)))))))))) $0)))`),
 ((int_funbind_SOME_sigexp_arg_DEF),
  [],
  `((/\ ((! :(sigexp -> bool) -> bool) (\(x1 :sigexp).
   (((= :sigexp -> sigexp -> bool) (int_funbind_SOME_sigexp_arg
   (int_funbind_SOME_sigexp $0))) $0))))
   (((= :sigexp -> sigexp -> bool) (int_funbind_SOME_sigexp_arg
   int_funbind_NONE_sigexp)) ((@ :(sigexp -> bool) -> sigexp)
   (\(x :sigexp). T))))`),
 ((int_funbind_SOME_funbind_arg_DEF),
  [],
  `((/\ ((! :(funbind -> bool) -> bool) (\(x1 :funbind).
   (((= :funbind -> funbind -> bool) (int_funbind_SOME_funbind_arg
   (int_funbind_SOME_funbind $0))) $0))))
   (((= :funbind -> funbind -> bool) (int_funbind_SOME_funbind_arg
   int_funbind_NONE_funbind)) ((@ :(funbind -> bool) -> funbind)
   (\(x :funbind). T))))`),
 ((int_BINDfunbind_arg6_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp -> bool) -> bool) (\(x3 :sigexp).
   ((! :(sigexp_option_funbind -> bool) -> bool)
   (\(x4 :sigexp_option_funbind). ((! :(strexp -> bool) -> bool)
   (\(x5 :strexp). ((! :(funbind_option_funbind -> bool) -> bool)
   (\(x6 :funbind_option_funbind).
   (((= :funbind_option_funbind -> funbind_option_funbind -> bool)
   (int_BINDfunbind_arg6 ((((((int_BINDfunbind $5) $4) $3) $2) $1)
   $0))) $0)))))))))))))`),
 ((int_BINDfunbind_arg5_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp -> bool) -> bool) (\(x3 :sigexp).
   ((! :(sigexp_option_funbind -> bool) -> bool)
   (\(x4 :sigexp_option_funbind). ((! :(strexp -> bool) -> bool)
   (\(x5 :strexp). ((! :(funbind_option_funbind -> bool) -> bool)
   (\(x6 :funbind_option_funbind). (((= :strexp -> strexp -> bool)
   (int_BINDfunbind_arg5 ((((((int_BINDfunbind $5) $4) $3) $2) $1)
   $0))) $1)))))))))))))`),
 ((int_BINDfunbind_arg4_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp -> bool) -> bool) (\(x3 :sigexp).
   ((! :(sigexp_option_funbind -> bool) -> bool)
   (\(x4 :sigexp_option_funbind). ((! :(strexp -> bool) -> bool)
   (\(x5 :strexp). ((! :(funbind_option_funbind -> bool) -> bool)
   (\(x6 :funbind_option_funbind).
   (((= :sigexp_option_funbind -> sigexp_option_funbind -> bool)
   (int_BINDfunbind_arg4 ((((((int_BINDfunbind $5) $4) $3) $2) $1)
   $0))) $2)))))))))))))`),
 ((int_BINDfunbind_arg3_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp -> bool) -> bool) (\(x3 :sigexp).
   ((! :(sigexp_option_funbind -> bool) -> bool)
   (\(x4 :sigexp_option_funbind). ((! :(strexp -> bool) -> bool)
   (\(x5 :strexp). ((! :(funbind_option_funbind -> bool) -> bool)
   (\(x6 :funbind_option_funbind). (((= :sigexp -> sigexp -> bool)
   (int_BINDfunbind_arg3 ((((((int_BINDfunbind $5) $4) $3) $2) $1)
   $0))) $3)))))))))))))`),
 ((int_BINDfunbind_arg2_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp -> bool) -> bool) (\(x3 :sigexp).
   ((! :(sigexp_option_funbind -> bool) -> bool)
   (\(x4 :sigexp_option_funbind). ((! :(strexp -> bool) -> bool)
   (\(x5 :strexp). ((! :(funbind_option_funbind -> bool) -> bool)
   (\(x6 :funbind_option_funbind). (((= :strid -> strid -> bool)
   (int_BINDfunbind_arg2 ((((((int_BINDfunbind $5) $4) $3) $2) $1)
   $0))) $4)))))))))))))`),
 ((int_BINDfunbind_arg1_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp -> bool) -> bool) (\(x3 :sigexp).
   ((! :(sigexp_option_funbind -> bool) -> bool)
   (\(x4 :sigexp_option_funbind). ((! :(strexp -> bool) -> bool)
   (\(x5 :strexp). ((! :(funbind_option_funbind -> bool) -> bool)
   (\(x6 :funbind_option_funbind). (((= :funid -> funid -> bool)
   (int_BINDfunbind_arg1 ((((((int_BINDfunbind $5) $4) $3) $2) $1)
   $0))) $5)))))))))))))`),
 ((dist_aux_ftn_funbind_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp -> bool) -> bool) (\(x3 :sigexp).
   ((! :(sigexp_option_funbind -> bool) -> bool)
   (\(x4 :sigexp_option_funbind). ((! :(strexp -> bool) -> bool)
   (\(x5 :strexp). ((! :(funbind_option_funbind -> bool) -> bool)
   (\(x6 :funbind_option_funbind). (((= :num -> num -> bool)
   (dist_aux_ftn_funbind ((((((int_BINDfunbind $5) $4) $3) $2) $1)
   $0))) 0)))))))))))))) ((/\ (((= :num -> num -> bool)
   (dist_aux_ftn_funbind_option_funbind int_funbind_NONE_funbind)) 1))
   ((/\ ((! :(funbind -> bool) -> bool) (\(x1 :funbind).
   (((= :num -> num -> bool) (dist_aux_ftn_funbind_option_funbind
   (int_funbind_SOME_funbind $0))) 2)))) ((/\
   (((= :num -> num -> bool) (dist_aux_ftn_sigexp_option_funbind
   int_funbind_NONE_sigexp)) 3)) ((! :(sigexp -> bool) -> bool)
   (\(x1 :sigexp). (((= :num -> num -> bool)
   (dist_aux_ftn_sigexp_option_funbind (int_funbind_SOME_sigexp $0)))
   4)))))))`),
 ((BINDfunbind),
  [],
  `(((= :(funid -> strid -> sigexp -> sigexp option -> strexp ->
         funbind option -> funbind) ->
         (funid -> strid -> sigexp -> sigexp option -> strexp ->
         funbind option -> funbind) -> bool) BINDfunbind)
   (\(x0 :funid). (\(x1 :strid). (\(x2 :sigexp).
   (\(x3 :sigexp option). (\(x4 :strexp). (\(x5 :funbind option).
   ((((((int_BINDfunbind $5) $4) $3) (int_inj_sigexp_option_funbind
   $2)) $1) (int_inj_funbind_option_funbind $0)))))))))`),
 ((int_inv_sigexp_option_funbind),
  [],
  `((/\ (((= :sigexp option -> sigexp option -> bool)
   (int_inv_sigexp_option_funbind int_funbind_NONE_sigexp))
   (NONE :sigexp option))) ((! :(sigexp -> bool) -> bool)
   (\(x1 :sigexp). (((= :sigexp option -> sigexp option -> bool)
   (int_inv_sigexp_option_funbind (int_funbind_SOME_sigexp $0)))
   ((SOME :sigexp -> sigexp option) $0)))))`),
 ((int_inj_sigexp_option_funbind),
  [],
  `((/\ (((= :sigexp_option_funbind -> sigexp_option_funbind -> bool)
   (int_inj_sigexp_option_funbind (NONE :sigexp option)))
   int_funbind_NONE_sigexp)) ((! :(sigexp -> bool) -> bool)
   (\(x0 :sigexp).
   (((= :sigexp_option_funbind -> sigexp_option_funbind -> bool)
   (int_inj_sigexp_option_funbind ((SOME :sigexp -> sigexp option)
   $0))) (int_funbind_SOME_sigexp $0)))))`),
 ((int_inv_funbind_option_funbind),
  [],
  `((/\ (((= :funbind option -> funbind option -> bool)
   (int_inv_funbind_option_funbind int_funbind_NONE_funbind))
   (NONE :funbind option))) ((! :(funbind -> bool) -> bool)
   (\(x1 :funbind). (((= :funbind option -> funbind option -> bool)
   (int_inv_funbind_option_funbind (int_funbind_SOME_funbind $0)))
   ((SOME :funbind -> funbind option) $0)))))`),
 ((int_inj_funbind_option_funbind),
  [],
  `((/\
   (((= :funbind_option_funbind -> funbind_option_funbind -> bool)
   (int_inj_funbind_option_funbind (NONE :funbind option)))
   int_funbind_NONE_funbind)) ((! :(funbind -> bool) -> bool)
   (\(x0 :funbind).
   (((= :funbind_option_funbind -> funbind_option_funbind -> bool)
   (int_inj_funbind_option_funbind ((SOME :funbind -> funbind option)
   $0))) (int_funbind_SOME_funbind $0)))))`),
 ((int_funbind_SOME_sigexp_DEF),
  [],
  `((! :(sigexp -> bool) -> bool) (\(x1 :sigexp).
   (((= :sigexp_option_funbind -> sigexp_option_funbind -> bool)
   (int_funbind_SOME_sigexp $0)) (sigexp_option_funbind_abs
   (JOINT_int_funbind_SOME_sigexp $0)))))`),
 ((int_funbind_NONE_sigexp_DEF),
  [],
  `(((= :sigexp_option_funbind -> sigexp_option_funbind -> bool)
   int_funbind_NONE_sigexp) (sigexp_option_funbind_abs
   JOINT_int_funbind_NONE_sigexp))`),
 ((int_funbind_SOME_funbind_DEF),
  [],
  `((! :(funbind -> bool) -> bool) (\(x1 :funbind).
   (((= :funbind_option_funbind -> funbind_option_funbind -> bool)
   (int_funbind_SOME_funbind $0)) (funbind_option_funbind_abs
   (JOINT_int_funbind_SOME_funbind (funbind_rep $0))))))`),
 ((int_funbind_NONE_funbind_DEF),
  [],
  `(((= :funbind_option_funbind -> funbind_option_funbind -> bool)
   int_funbind_NONE_funbind) (funbind_option_funbind_abs
   JOINT_int_funbind_NONE_funbind))`),
 ((int_BINDfunbind_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp -> bool) -> bool) (\(x3 :sigexp).
   ((! :(sigexp_option_funbind -> bool) -> bool)
   (\(x4 :sigexp_option_funbind). ((! :(strexp -> bool) -> bool)
   (\(x5 :strexp). ((! :(funbind_option_funbind -> bool) -> bool)
   (\(x6 :funbind_option_funbind). (((= :funbind -> funbind -> bool)
   ((((((int_BINDfunbind $5) $4) $3) $2) $1) $0)) (funbind_abs
   ((((((JOINT_int_BINDfunbind $5) $4) $3) (sigexp_option_funbind_rep
   $2)) $1) (funbind_option_funbind_rep $0))))))))))))))))`),
 ((funbind_option_funbind_REP_ABS),
  [],
  `((/\ ((! :(funbind_option_funbind -> bool) -> bool)
   (\(a :funbind_option_funbind).
   (((= :funbind_option_funbind -> funbind_option_funbind -> bool)
   (funbind_option_funbind_abs (funbind_option_funbind_rep $0)))
   $0))))
   ((! :(joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
        bool) -> bool)
   (\(r :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((= :num -> num -> bool)
   (joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind_select
   $0)) 2)) $0))
   (((= :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         bool) (funbind_option_funbind_rep (funbind_option_funbind_abs
   $0))) $0)))))`),
 ((funbind_option_funbind_TY_DEF),
  [],
  `((? :((funbind_option_funbind ->
         joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind) ->
        bool) -> bool)
   (\(rep :funbind_option_funbind ->
           joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((TYPE_DEFINITION :(joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
                       bool) ->
                       (funbind_option_funbind ->
                       joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind) ->
                       bool)
   (\(x :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((= :num -> num -> bool)
   (joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind_select
   $0)) 2))) $0)))`),
 ((sigexp_option_funbind_REP_ABS),
  [],
  `((/\ ((! :(sigexp_option_funbind -> bool) -> bool)
   (\(a :sigexp_option_funbind).
   (((= :sigexp_option_funbind -> sigexp_option_funbind -> bool)
   (sigexp_option_funbind_abs (sigexp_option_funbind_rep $0))) $0))))
   ((! :(joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
        bool) -> bool)
   (\(r :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((= :num -> num -> bool)
   (joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind_select
   $0)) 3)) $0))
   (((= :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         bool) (sigexp_option_funbind_rep (sigexp_option_funbind_abs
   $0))) $0)))))`),
 ((sigexp_option_funbind_TY_DEF),
  [],
  `((? :((sigexp_option_funbind ->
         joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind) ->
        bool) -> bool)
   (\(rep :sigexp_option_funbind ->
           joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((TYPE_DEFINITION :(joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
                       bool) ->
                       (sigexp_option_funbind ->
                       joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind) ->
                       bool)
   (\(x :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((= :num -> num -> bool)
   (joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind_select
   $0)) 3))) $0)))`),
 ((funbind_REP_ABS),
  [],
  `((/\ ((! :(funbind -> bool) -> bool) (\(a :funbind).
   (((= :funbind -> funbind -> bool) (funbind_abs (funbind_rep $0)))
   $0))))
   ((! :(joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
        bool) -> bool)
   (\(r :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((= :num -> num -> bool)
   (joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind_select
   $0)) 1)) $0))
   (((= :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         bool) (funbind_rep (funbind_abs $0))) $0)))))`),
 ((funbind_TY_DEF),
  [],
  `((? :((funbind ->
         joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind) ->
        bool) -> bool)
   (\(rep :funbind ->
           joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((TYPE_DEFINITION :(joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
                       bool) ->
                       (funbind ->
                       joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind) ->
                       bool)
   (\(x :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((= :num -> num -> bool)
   (joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind_select
   $0)) 1))) $0)))`),
 ((joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind_select_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(f' :funid).
   ((! :(strid -> bool) -> bool) (\(s0 :strid).
   ((! :(sigexp -> bool) -> bool) (\(s1 :sigexp).
   ((! :(joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
        bool) -> bool)
   (\(j1 :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   ((! :(strexp -> bool) -> bool) (\(s2 :strexp).
   ((! :(joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
        bool) -> bool)
   (\(j2 :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((= :num -> num -> bool)
   (joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind_select
   ((((((JOINT_int_BINDfunbind $5) $4) $3) $2) $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind_select
   $2)) 3)) (((= :num -> num -> bool)
   (joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind_select
   $0)) 2))) 1) 0))))))))))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind_select
   JOINT_int_funbind_NONE_funbind)) 2)) ((/\
   ((! :(joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
        bool) -> bool)
   (\(j :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((= :num -> num -> bool)
   (joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind_select
   (JOINT_int_funbind_SOME_funbind $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind_select
   $0)) 1)) 2) 0))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind_select
   JOINT_int_funbind_NONE_sigexp)) 3)) ((! :(sigexp -> bool) -> bool)
   (\(s :sigexp). (((= :num -> num -> bool)
   (joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind_select
   (JOINT_int_funbind_SOME_sigexp $0))) 3)))))))`),
 ((JOINT_int_funbind_SOME_sigexp_DEF),
  [],
  `((! :(sigexp -> bool) -> bool) (\(s :sigexp).
   (((= :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         bool) (JOINT_int_funbind_SOME_sigexp $0))
   (ABS_joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind
   (((Node :funid # strid # sigexp # strexp + one + one + one +
            sigexp ->
            (funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree list ->
            (funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree)
   ((INR :one + one + one + sigexp ->
          funid # strid # sigexp # strexp + one + one + one + sigexp)
   ((INR :one + one + sigexp -> one + one + one + sigexp)
   ((INR :one + sigexp -> one + one + sigexp)
   ((INR :sigexp -> one + sigexp) $0)))))
   (NIL :(funid # strid # sigexp # strexp + one + one + one + sigexp)
         ltree list))))))`),
 ((JOINT_int_funbind_NONE_sigexp_DEF),
  [],
  `(((= :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         bool) JOINT_int_funbind_NONE_sigexp)
   (ABS_joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind
   (((Node :funid # strid # sigexp # strexp + one + one + one +
            sigexp ->
            (funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree list ->
            (funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree)
   ((INR :one + one + one + sigexp ->
          funid # strid # sigexp # strexp + one + one + one + sigexp)
   ((INR :one + one + sigexp -> one + one + one + sigexp)
   ((INR :one + sigexp -> one + one + sigexp)
   ((INL :one -> one + sigexp) one)))))
   (NIL :(funid # strid # sigexp # strexp + one + one + one + sigexp)
         ltree list))))`),
 ((JOINT_int_funbind_SOME_funbind_DEF),
  [],
  `((! :(joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
        bool) -> bool)
   (\(j :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((= :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         bool) (JOINT_int_funbind_SOME_funbind $0))
   (ABS_joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind
   (((Node :funid # strid # sigexp # strexp + one + one + one +
            sigexp ->
            (funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree list ->
            (funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree)
   ((INR :one + one + one + sigexp ->
          funid # strid # sigexp # strexp + one + one + one + sigexp)
   ((INR :one + one + sigexp -> one + one + one + sigexp)
   ((INL :one -> one + one + sigexp) one))))
   (((CONS :(funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree ->
            (funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree list ->
            (funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree list)
   (REP_joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind
   $0))
   (NIL :(funid # strid # sigexp # strexp + one + one + one + sigexp)
         ltree list)))))))`),
 ((JOINT_int_funbind_NONE_funbind_DEF),
  [],
  `(((= :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         bool) JOINT_int_funbind_NONE_funbind)
   (ABS_joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind
   (((Node :funid # strid # sigexp # strexp + one + one + one +
            sigexp ->
            (funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree list ->
            (funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree)
   ((INR :one + one + one + sigexp ->
          funid # strid # sigexp # strexp + one + one + one + sigexp)
   ((INL :one -> one + one + one + sigexp) one)))
   (NIL :(funid # strid # sigexp # strexp + one + one + one + sigexp)
         ltree list))))`),
 ((JOINT_int_BINDfunbind_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(f' :funid).
   ((! :(strid -> bool) -> bool) (\(s0 :strid).
   ((! :(sigexp -> bool) -> bool) (\(s1 :sigexp).
   ((! :(joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
        bool) -> bool)
   (\(j1 :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   ((! :(strexp -> bool) -> bool) (\(s2 :strexp).
   ((! :(joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
        bool) -> bool)
   (\(j2 :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((= :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         bool) ((((((JOINT_int_BINDfunbind $5) $4) $3) $2) $1) $0))
   (ABS_joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind
   (((Node :funid # strid # sigexp # strexp + one + one + one +
            sigexp ->
            (funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree list ->
            (funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree)
   ((INL :funid # strid # sigexp # strexp ->
          funid # strid # sigexp # strexp + one + one + one + sigexp)
   (((, :funid -> strid # sigexp # strexp ->
         funid # strid # sigexp # strexp) $5)
   (((, :strid -> sigexp # strexp -> strid # sigexp # strexp) $4)
   (((, :sigexp -> strexp -> sigexp # strexp) $3) $1)))))
   (((CONS :(funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree ->
            (funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree list ->
            (funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree list)
   (REP_joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind
   $2))
   (((CONS :(funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree ->
            (funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree list ->
            (funid # strid # sigexp # strexp + one + one + one +
            sigexp) ltree list)
   (REP_joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind
   $0))
   (NIL :(funid # strid # sigexp # strexp + one + one + one + sigexp)
         ltree list))))))))))))))))))`),
 ((joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind_ISO_DEF),
  [],
  `((/\
   ((! :(joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
        bool) -> bool)
   (\(a :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((= :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         bool)
   (ABS_joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind
   (REP_joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind
   $0))) $0))))
   ((! :((funid # strid # sigexp # strexp + one + one + one + sigexp)
         ltree -> bool) -> bool)
   (\(r :(funid # strid # sigexp # strexp + one + one + one + sigexp)
         ltree). (((= :bool -> bool -> bool)
   (((TRP :(funid # strid # sigexp # strexp + one + one + one +
            sigexp ->
           (funid # strid # sigexp # strexp + one + one + one +
           sigexp) ltree list -> bool) ->
           (funid # strid # sigexp # strexp + one + one + one +
           sigexp) ltree -> bool)
   (\(v :funid # strid # sigexp # strexp + one + one + one + sigexp).
   (\(tl :(funid # strid # sigexp # strexp + one + one + one + sigexp)
          ltree list). ((\/ ((/\ ((? :(funid -> bool) -> bool)
   (\(f :funid). ((? :(strid -> bool) -> bool) (\(s0 :strid).
   ((? :(sigexp -> bool) -> bool) (\(s1 :sigexp).
   ((? :(strexp -> bool) -> bool) (\(s2 :strexp).
   (((= :funid # strid # sigexp # strexp + one + one + one + sigexp ->
         funid # strid # sigexp # strexp + one + one + one + sigexp ->
         bool) $5)
   ((INL :funid # strid # sigexp # strexp ->
          funid # strid # sigexp # strexp + one + one + one + sigexp)
   (((, :funid -> strid # sigexp # strexp ->
         funid # strid # sigexp # strexp) $3)
   (((, :strid -> sigexp # strexp -> strid # sigexp # strexp) $2)
   (((, :sigexp -> strexp -> sigexp # strexp) $1) $0))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp # strexp + one + one + one +
             sigexp) ltree list -> num) $0)) (SUC (SUC 0))))) ((\/
   ((/\
   (((= :funid # strid # sigexp # strexp + one + one + one + sigexp ->
         funid # strid # sigexp # strexp + one + one + one + sigexp ->
         bool) $1)
   ((INR :one + one + one + sigexp ->
          funid # strid # sigexp # strexp + one + one + one + sigexp)
   ((INL :one -> one + one + one + sigexp) one))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp # strexp + one + one + one +
             sigexp) ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :funid # strid # sigexp # strexp + one + one + one + sigexp ->
         funid # strid # sigexp # strexp + one + one + one + sigexp ->
         bool) $1)
   ((INR :one + one + one + sigexp ->
          funid # strid # sigexp # strexp + one + one + one + sigexp)
   ((INR :one + one + sigexp -> one + one + one + sigexp)
   ((INL :one -> one + one + sigexp) one)))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp # strexp + one + one + one +
             sigexp) ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :funid # strid # sigexp # strexp + one + one + one + sigexp ->
         funid # strid # sigexp # strexp + one + one + one + sigexp ->
         bool) $1)
   ((INR :one + one + one + sigexp ->
          funid # strid # sigexp # strexp + one + one + one + sigexp)
   ((INR :one + one + sigexp -> one + one + one + sigexp)
   ((INR :one + sigexp -> one + one + sigexp)
   ((INL :one -> one + sigexp) one)))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp # strexp + one + one + one +
             sigexp) ltree list -> num) $0)) 0))) ((/\
   ((? :(sigexp -> bool) -> bool) (\(s :sigexp).
   (((= :funid # strid # sigexp # strexp + one + one + one + sigexp ->
         funid # strid # sigexp # strexp + one + one + one + sigexp ->
         bool) $2)
   ((INR :one + one + one + sigexp ->
          funid # strid # sigexp # strexp + one + one + one + sigexp)
   ((INR :one + one + sigexp -> one + one + one + sigexp)
   ((INR :one + sigexp -> one + one + sigexp)
   ((INR :sigexp -> one + sigexp) $0)))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp # strexp + one + one + one +
             sigexp) ltree list -> num) $0)) 0))))))))) $0))
   (((= :(funid # strid # sigexp # strexp + one + one + one + sigexp)
         ltree ->
         (funid # strid # sigexp # strexp + one + one + one + sigexp)
         ltree -> bool)
   (REP_joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind
   (ABS_joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind
   $0))) $0)))))`),
 ((joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind_TY_DEF),
  [],
  `((? :((joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         (funid # strid # sigexp # strexp + one + one + one + sigexp)
         ltree) -> bool) -> bool)
   (\(rep :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
           (funid # strid # sigexp # strexp + one + one + one +
           sigexp) ltree).
   (((TYPE_DEFINITION :((funid # strid # sigexp # strexp + one + one +
                        one + sigexp) ltree -> bool) ->
                       (joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
                       (funid # strid # sigexp # strexp + one + one +
                       one + sigexp) ltree) -> bool)
   ((TRP :(funid # strid # sigexp # strexp + one + one + one +
           sigexp ->
          (funid # strid # sigexp # strexp + one + one + one + sigexp)
          ltree list -> bool) ->
          (funid # strid # sigexp # strexp + one + one + one + sigexp)
          ltree -> bool)
   (\(v :funid # strid # sigexp # strexp + one + one + one + sigexp).
   (\(tl :(funid # strid # sigexp # strexp + one + one + one + sigexp)
          ltree list). ((\/ ((/\ ((? :(funid -> bool) -> bool)
   (\(f :funid). ((? :(strid -> bool) -> bool) (\(s0 :strid).
   ((? :(sigexp -> bool) -> bool) (\(s1 :sigexp).
   ((? :(strexp -> bool) -> bool) (\(s2 :strexp).
   (((= :funid # strid # sigexp # strexp + one + one + one + sigexp ->
         funid # strid # sigexp # strexp + one + one + one + sigexp ->
         bool) $5)
   ((INL :funid # strid # sigexp # strexp ->
          funid # strid # sigexp # strexp + one + one + one + sigexp)
   (((, :funid -> strid # sigexp # strexp ->
         funid # strid # sigexp # strexp) $3)
   (((, :strid -> sigexp # strexp -> strid # sigexp # strexp) $2)
   (((, :sigexp -> strexp -> sigexp # strexp) $1) $0))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp # strexp + one + one + one +
             sigexp) ltree list -> num) $0)) (SUC (SUC 0))))) ((\/
   ((/\
   (((= :funid # strid # sigexp # strexp + one + one + one + sigexp ->
         funid # strid # sigexp # strexp + one + one + one + sigexp ->
         bool) $1)
   ((INR :one + one + one + sigexp ->
          funid # strid # sigexp # strexp + one + one + one + sigexp)
   ((INL :one -> one + one + one + sigexp) one))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp # strexp + one + one + one +
             sigexp) ltree list -> num) $0)) 0))) ((\/ ((/\
   (((= :funid # strid # sigexp # strexp + one + one + one + sigexp ->
         funid # strid # sigexp # strexp + one + one + one + sigexp ->
         bool) $1)
   ((INR :one + one + one + sigexp ->
          funid # strid # sigexp # strexp + one + one + one + sigexp)
   ((INR :one + one + sigexp -> one + one + one + sigexp)
   ((INL :one -> one + one + sigexp) one)))))
   (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp # strexp + one + one + one +
             sigexp) ltree list -> num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :funid # strid # sigexp # strexp + one + one + one + sigexp ->
         funid # strid # sigexp # strexp + one + one + one + sigexp ->
         bool) $1)
   ((INR :one + one + one + sigexp ->
          funid # strid # sigexp # strexp + one + one + one + sigexp)
   ((INR :one + one + sigexp -> one + one + one + sigexp)
   ((INR :one + sigexp -> one + one + sigexp)
   ((INL :one -> one + sigexp) one)))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp # strexp + one + one + one +
             sigexp) ltree list -> num) $0)) 0))) ((/\
   ((? :(sigexp -> bool) -> bool) (\(s :sigexp).
   (((= :funid # strid # sigexp # strexp + one + one + one + sigexp ->
         funid # strid # sigexp # strexp + one + one + one + sigexp ->
         bool) $2)
   ((INR :one + one + one + sigexp ->
          funid # strid # sigexp # strexp + one + one + one + sigexp)
   ((INR :one + one + sigexp -> one + one + one + sigexp)
   ((INR :one + sigexp -> one + one + sigexp)
   ((INR :sigexp -> one + sigexp) $0)))))))) (((= :num -> num -> bool)
   ((LENGTH :(funid # strid # sigexp # strexp + one + one + one +
             sigexp) ltree list -> num) $0)) 0)))))))))) $0)))`),
 ((int_LETstrexp_arg2_DEF),
  [],
  `((/\ ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   (((= :strexp -> strexp -> bool) (int_LETstrexp_arg2 ((int_LETstrexp
   $1) $0))) $0)))))) ((/\ ((! :(strdec -> bool) -> bool)
   (\(x1 :strdec). (((= :strexp -> strexp -> bool) (int_LETstrexp_arg2
   (int_STRUCTstrexp $0))) ((@ :(strexp -> bool) -> strexp)
   (\(x :strexp). T)))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(x1 :strid long). (((= :strexp -> strexp -> bool)
   (int_LETstrexp_arg2 (int_LONGSTRIDstrexp $0)))
   ((@ :(strexp -> bool) -> strexp) (\(x :strexp). T))))))
   ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   (((= :strexp -> strexp -> bool) (int_LETstrexp_arg2 ((int_APPstrexp
   $1) $0))) ((@ :(strexp -> bool) -> strexp) (\(x :strexp).
   T))))))))))`),
 ((int_LETstrexp_arg1_DEF),
  [],
  `((/\ ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   (((= :strdec -> strdec -> bool) (int_LETstrexp_arg1 ((int_LETstrexp
   $1) $0))) $1)))))) ((/\ ((! :(strdec -> bool) -> bool)
   (\(x1 :strdec). (((= :strdec -> strdec -> bool) (int_LETstrexp_arg1
   (int_STRUCTstrexp $0))) ((@ :(strdec -> bool) -> strdec)
   (\(x :strdec). T)))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(x1 :strid long). (((= :strdec -> strdec -> bool)
   (int_LETstrexp_arg1 (int_LONGSTRIDstrexp $0)))
   ((@ :(strdec -> bool) -> strdec) (\(x :strdec). T))))))
   ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   (((= :strdec -> strdec -> bool) (int_LETstrexp_arg1 ((int_APPstrexp
   $1) $0))) ((@ :(strdec -> bool) -> strdec) (\(x :strdec).
   T))))))))))`),
 ((int_APPstrexp_arg2_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   (((= :strexp -> strexp -> bool) (int_APPstrexp_arg2 ((int_APPstrexp
   $1) $0))) $0)))))) ((/\ ((! :(strdec -> bool) -> bool)
   (\(x1 :strdec). (((= :strexp -> strexp -> bool) (int_APPstrexp_arg2
   (int_STRUCTstrexp $0))) ((@ :(strexp -> bool) -> strexp)
   (\(x :strexp). T)))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(x1 :strid long). (((= :strexp -> strexp -> bool)
   (int_APPstrexp_arg2 (int_LONGSTRIDstrexp $0)))
   ((@ :(strexp -> bool) -> strexp) (\(x :strexp). T))))))
   ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   (((= :strexp -> strexp -> bool) (int_APPstrexp_arg2 ((int_LETstrexp
   $1) $0))) ((@ :(strexp -> bool) -> strexp) (\(x :strexp).
   T))))))))))`),
 ((int_APPstrexp_arg1_DEF),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   (((= :funid -> funid -> bool) (int_APPstrexp_arg1 ((int_APPstrexp
   $1) $0))) $1)))))) ((/\ ((! :(strdec -> bool) -> bool)
   (\(x1 :strdec). (((= :funid -> funid -> bool) (int_APPstrexp_arg1
   (int_STRUCTstrexp $0))) ((@ :(funid -> bool) -> funid)
   (\(x :funid). T)))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(x1 :strid long). (((= :funid -> funid -> bool)
   (int_APPstrexp_arg1 (int_LONGSTRIDstrexp $0)))
   ((@ :(funid -> bool) -> funid) (\(x :funid). T))))))
   ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   (((= :funid -> funid -> bool) (int_APPstrexp_arg1 ((int_LETstrexp
   $1) $0))) ((@ :(funid -> bool) -> funid) (\(x :funid).
   T))))))))))`),
 ((int_LONGSTRIDstrexp_arg_DEF),
  [],
  `((/\ ((! :(strid long -> bool) -> bool) (\(x1 :strid long).
   (((= :strid long -> strid long -> bool) (int_LONGSTRIDstrexp_arg
   (int_LONGSTRIDstrexp $0))) $0)))) ((/\
   ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   (((= :strid long -> strid long -> bool) (int_LONGSTRIDstrexp_arg
   (int_STRUCTstrexp $0))) ((@ :(strid long -> bool) -> strid long)
   (\(x :strid long). T)))))) ((/\ ((! :(funid -> bool) -> bool)
   (\(x1 :funid). ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   (((= :strid long -> strid long -> bool) (int_LONGSTRIDstrexp_arg
   ((int_APPstrexp $1) $0))) ((@ :(strid long -> bool) -> strid long)
   (\(x :strid long). T)))))))) ((! :(strdec -> bool) -> bool)
   (\(x1 :strdec). ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   (((= :strid long -> strid long -> bool) (int_LONGSTRIDstrexp_arg
   ((int_LETstrexp $1) $0))) ((@ :(strid long -> bool) -> strid long)
   (\(x :strid long). T))))))))))`),
 ((int_STRUCTstrexp_arg_DEF),
  [],
  `((/\ ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   (((= :strdec -> strdec -> bool) (int_STRUCTstrexp_arg
   (int_STRUCTstrexp $0))) $0)))) ((/\
   ((! :(strid long -> bool) -> bool) (\(x1 :strid long).
   (((= :strdec -> strdec -> bool) (int_STRUCTstrexp_arg
   (int_LONGSTRIDstrexp $0))) ((@ :(strdec -> bool) -> strdec)
   (\(x :strdec). T)))))) ((/\ ((! :(funid -> bool) -> bool)
   (\(x1 :funid). ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   (((= :strdec -> strdec -> bool) (int_STRUCTstrexp_arg
   ((int_APPstrexp $1) $0))) ((@ :(strdec -> bool) -> strdec)
   (\(x :strdec). T)))))))) ((! :(strdec -> bool) -> bool)
   (\(x1 :strdec). ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   (((= :strdec -> strdec -> bool) (int_STRUCTstrexp_arg
   ((int_LETstrexp $1) $0))) ((@ :(strdec -> bool) -> strdec)
   (\(x :strdec). T))))))))))`),
 ((int_SEQstrdec_arg2_DEF),
  [],
  `((/\ ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   (((= :strdec -> strdec -> bool) (int_SEQstrdec_arg2 ((int_SEQstrdec
   $1) $0))) $0)))))) ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   (((= :strdec -> strdec -> bool) (int_SEQstrdec_arg2 (int_DECstrdec
   $0))) ((@ :(strdec -> bool) -> strdec) (\(x :strdec). T)))))) ((/\
   ((! :(strbind -> bool) -> bool) (\(x1 :strbind).
   (((= :strdec -> strdec -> bool) (int_SEQstrdec_arg2
   (int_STRUCTUREstrdec $0))) ((@ :(strdec -> bool) -> strdec)
   (\(x :strdec). T)))))) ((/\ ((! :(strdec -> bool) -> bool)
   (\(x1 :strdec). ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   (((= :strdec -> strdec -> bool) (int_SEQstrdec_arg2
   ((int_LOCALstrdec $1) $0))) ((@ :(strdec -> bool) -> strdec)
   (\(x :strdec). T)))))))) (((= :strdec -> strdec -> bool)
   (int_SEQstrdec_arg2 int_EMPTYstrdec))
   ((@ :(strdec -> bool) -> strdec) (\(x :strdec). T)))))))`),
 ((int_SEQstrdec_arg1_DEF),
  [],
  `((/\ ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   (((= :strdec -> strdec -> bool) (int_SEQstrdec_arg1 ((int_SEQstrdec
   $1) $0))) $1)))))) ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   (((= :strdec -> strdec -> bool) (int_SEQstrdec_arg1 (int_DECstrdec
   $0))) ((@ :(strdec -> bool) -> strdec) (\(x :strdec). T)))))) ((/\
   ((! :(strbind -> bool) -> bool) (\(x1 :strbind).
   (((= :strdec -> strdec -> bool) (int_SEQstrdec_arg1
   (int_STRUCTUREstrdec $0))) ((@ :(strdec -> bool) -> strdec)
   (\(x :strdec). T)))))) ((/\ ((! :(strdec -> bool) -> bool)
   (\(x1 :strdec). ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   (((= :strdec -> strdec -> bool) (int_SEQstrdec_arg1
   ((int_LOCALstrdec $1) $0))) ((@ :(strdec -> bool) -> strdec)
   (\(x :strdec). T)))))))) (((= :strdec -> strdec -> bool)
   (int_SEQstrdec_arg1 int_EMPTYstrdec))
   ((@ :(strdec -> bool) -> strdec) (\(x :strdec). T)))))))`),
 ((int_LOCALstrdec_arg2_DEF),
  [],
  `((/\ ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   (((= :strdec -> strdec -> bool) (int_LOCALstrdec_arg2
   ((int_LOCALstrdec $1) $0))) $0)))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   (((= :strdec -> strdec -> bool) (int_LOCALstrdec_arg2
   (int_DECstrdec $0))) ((@ :(strdec -> bool) -> strdec)
   (\(x :strdec). T)))))) ((/\ ((! :(strbind -> bool) -> bool)
   (\(x1 :strbind). (((= :strdec -> strdec -> bool)
   (int_LOCALstrdec_arg2 (int_STRUCTUREstrdec $0)))
   ((@ :(strdec -> bool) -> strdec) (\(x :strdec). T)))))) ((/\
   (((= :strdec -> strdec -> bool) (int_LOCALstrdec_arg2
   int_EMPTYstrdec)) ((@ :(strdec -> bool) -> strdec) (\(x :strdec).
   T)))) ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   (((= :strdec -> strdec -> bool) (int_LOCALstrdec_arg2
   ((int_SEQstrdec $1) $0))) ((@ :(strdec -> bool) -> strdec)
   (\(x :strdec). T)))))))))))`),
 ((int_LOCALstrdec_arg1_DEF),
  [],
  `((/\ ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   (((= :strdec -> strdec -> bool) (int_LOCALstrdec_arg1
   ((int_LOCALstrdec $1) $0))) $1)))))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   (((= :strdec -> strdec -> bool) (int_LOCALstrdec_arg1
   (int_DECstrdec $0))) ((@ :(strdec -> bool) -> strdec)
   (\(x :strdec). T)))))) ((/\ ((! :(strbind -> bool) -> bool)
   (\(x1 :strbind). (((= :strdec -> strdec -> bool)
   (int_LOCALstrdec_arg1 (int_STRUCTUREstrdec $0)))
   ((@ :(strdec -> bool) -> strdec) (\(x :strdec). T)))))) ((/\
   (((= :strdec -> strdec -> bool) (int_LOCALstrdec_arg1
   int_EMPTYstrdec)) ((@ :(strdec -> bool) -> strdec) (\(x :strdec).
   T)))) ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   (((= :strdec -> strdec -> bool) (int_LOCALstrdec_arg1
   ((int_SEQstrdec $1) $0))) ((@ :(strdec -> bool) -> strdec)
   (\(x :strdec). T)))))))))))`),
 ((int_STRUCTUREstrdec_arg_DEF),
  [],
  `((/\ ((! :(strbind -> bool) -> bool) (\(x1 :strbind).
   (((= :strbind -> strbind -> bool) (int_STRUCTUREstrdec_arg
   (int_STRUCTUREstrdec $0))) $0)))) ((/\ ((! :(dec -> bool) -> bool)
   (\(x1 :dec). (((= :strbind -> strbind -> bool)
   (int_STRUCTUREstrdec_arg (int_DECstrdec $0)))
   ((@ :(strbind -> bool) -> strbind) (\(x :strbind). T)))))) ((/\
   ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   (((= :strbind -> strbind -> bool) (int_STRUCTUREstrdec_arg
   ((int_LOCALstrdec $1) $0))) ((@ :(strbind -> bool) -> strbind)
   (\(x :strbind). T)))))))) ((/\ (((= :strbind -> strbind -> bool)
   (int_STRUCTUREstrdec_arg int_EMPTYstrdec))
   ((@ :(strbind -> bool) -> strbind) (\(x :strbind). T))))
   ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   (((= :strbind -> strbind -> bool) (int_STRUCTUREstrdec_arg
   ((int_SEQstrdec $1) $0))) ((@ :(strbind -> bool) -> strbind)
   (\(x :strbind). T)))))))))))`),
 ((int_DECstrdec_arg_DEF),
  [],
  `((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   (((= :dec -> dec -> bool) (int_DECstrdec_arg (int_DECstrdec $0)))
   $0)))) ((/\ ((! :(strbind -> bool) -> bool) (\(x1 :strbind).
   (((= :dec -> dec -> bool) (int_DECstrdec_arg (int_STRUCTUREstrdec
   $0))) ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))) ((/\
   ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   (((= :dec -> dec -> bool) (int_DECstrdec_arg ((int_LOCALstrdec $1)
   $0))) ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))))) ((/\
   (((= :dec -> dec -> bool) (int_DECstrdec_arg int_EMPTYstrdec))
   ((@ :(dec -> bool) -> dec) (\(x :dec). T))))
   ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   (((= :dec -> dec -> bool) (int_DECstrdec_arg ((int_SEQstrdec $1)
   $0))) ((@ :(dec -> bool) -> dec) (\(x :dec). T)))))))))))`),
 ((int_strbind_strdec_strexp_SOME_strbind_arg_DEF),
  [],
  `((/\ ((! :(strbind -> bool) -> bool) (\(x1 :strbind).
   (((= :strbind -> strbind -> bool)
   (int_strbind_strdec_strexp_SOME_strbind_arg
   (int_strbind_strdec_strexp_SOME_strbind $0))) $0))))
   (((= :strbind -> strbind -> bool)
   (int_strbind_strdec_strexp_SOME_strbind_arg
   int_strbind_strdec_strexp_NONE_strbind))
   ((@ :(strbind -> bool) -> strbind) (\(x :strbind). T))))`),
 ((int_BINDstrbind_arg4_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_option_strbind_strdec_strexp -> bool) -> bool)
   (\(x2 :sigexp_option_strbind_strdec_strexp).
   ((! :(strexp -> bool) -> bool) (\(x3 :strexp).
   ((! :(strbind_option_strbind_strdec_strexp -> bool) -> bool)
   (\(x4 :strbind_option_strbind_strdec_strexp).
   (((= :strbind_option_strbind_strdec_strexp ->
         strbind_option_strbind_strdec_strexp -> bool)
   (int_BINDstrbind_arg4 ((((int_BINDstrbind $3) $2) $1) $0)))
   $0)))))))))`),
 ((int_BINDstrbind_arg3_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_option_strbind_strdec_strexp -> bool) -> bool)
   (\(x2 :sigexp_option_strbind_strdec_strexp).
   ((! :(strexp -> bool) -> bool) (\(x3 :strexp).
   ((! :(strbind_option_strbind_strdec_strexp -> bool) -> bool)
   (\(x4 :strbind_option_strbind_strdec_strexp).
   (((= :strexp -> strexp -> bool) (int_BINDstrbind_arg3
   ((((int_BINDstrbind $3) $2) $1) $0))) $1)))))))))`),
 ((int_BINDstrbind_arg2_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_option_strbind_strdec_strexp -> bool) -> bool)
   (\(x2 :sigexp_option_strbind_strdec_strexp).
   ((! :(strexp -> bool) -> bool) (\(x3 :strexp).
   ((! :(strbind_option_strbind_strdec_strexp -> bool) -> bool)
   (\(x4 :strbind_option_strbind_strdec_strexp).
   (((= :sigexp_option_strbind_strdec_strexp ->
         sigexp_option_strbind_strdec_strexp -> bool)
   (int_BINDstrbind_arg2 ((((int_BINDstrbind $3) $2) $1) $0)))
   $2)))))))))`),
 ((int_BINDstrbind_arg1_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_option_strbind_strdec_strexp -> bool) -> bool)
   (\(x2 :sigexp_option_strbind_strdec_strexp).
   ((! :(strexp -> bool) -> bool) (\(x3 :strexp).
   ((! :(strbind_option_strbind_strdec_strexp -> bool) -> bool)
   (\(x4 :strbind_option_strbind_strdec_strexp).
   (((= :strid -> strid -> bool) (int_BINDstrbind_arg1
   ((((int_BINDstrbind $3) $2) $1) $0))) $3)))))))))`),
 ((int_strbind_strdec_strexp_SOME_sigexp_arg_DEF),
  [],
  `((/\ ((! :(sigexp -> bool) -> bool) (\(x1 :sigexp).
   (((= :sigexp -> sigexp -> bool)
   (int_strbind_strdec_strexp_SOME_sigexp_arg
   (int_strbind_strdec_strexp_SOME_sigexp $0))) $0))))
   (((= :sigexp -> sigexp -> bool)
   (int_strbind_strdec_strexp_SOME_sigexp_arg
   int_strbind_strdec_strexp_NONE_sigexp))
   ((@ :(sigexp -> bool) -> sigexp) (\(x :sigexp). T))))`),
 ((dist_aux_ftn_sigexp_option_strbind_strdec_strexp_DEF),
  [],
  `((/\ (((= :num -> num -> bool)
   (dist_aux_ftn_sigexp_option_strbind_strdec_strexp
   int_strbind_strdec_strexp_NONE_sigexp)) 0)) ((/\
   ((! :(sigexp -> bool) -> bool) (\(x1 :sigexp).
   (((= :num -> num -> bool)
   (dist_aux_ftn_sigexp_option_strbind_strdec_strexp
   (int_strbind_strdec_strexp_SOME_sigexp $0))) 1)))) ((/\
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_option_strbind_strdec_strexp -> bool) -> bool)
   (\(x2 :sigexp_option_strbind_strdec_strexp).
   ((! :(strexp -> bool) -> bool) (\(x3 :strexp).
   ((! :(strbind_option_strbind_strdec_strexp -> bool) -> bool)
   (\(x4 :strbind_option_strbind_strdec_strexp).
   (((= :num -> num -> bool) (dist_aux_ftn_strbind ((((int_BINDstrbind
   $3) $2) $1) $0))) 2)))))))))) ((/\ (((= :num -> num -> bool)
   (dist_aux_ftn_strbind_option_strbind_strdec_strexp
   int_strbind_strdec_strexp_NONE_strbind)) 3)) ((/\
   ((! :(strbind -> bool) -> bool) (\(x1 :strbind).
   (((= :num -> num -> bool)
   (dist_aux_ftn_strbind_option_strbind_strdec_strexp
   (int_strbind_strdec_strexp_SOME_strbind $0))) 4)))) ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec). (((= :num -> num -> bool)
   (dist_aux_ftn_strdec (int_DECstrdec $0))) 5)))) ((/\
   ((! :(strbind -> bool) -> bool) (\(x1 :strbind).
   (((= :num -> num -> bool) (dist_aux_ftn_strdec (int_STRUCTUREstrdec
   $0))) 6)))) ((/\ ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   (((= :num -> num -> bool) (dist_aux_ftn_strdec ((int_LOCALstrdec
   $1) $0))) 7)))))) ((/\ (((= :num -> num -> bool)
   (dist_aux_ftn_strdec int_EMPTYstrdec)) 8)) ((/\
   ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   (((= :num -> num -> bool) (dist_aux_ftn_strdec ((int_SEQstrdec $1)
   $0))) 9)))))) ((/\ ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   (((= :num -> num -> bool) (dist_aux_ftn_strexp (int_STRUCTstrexp
   $0))) 10)))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(x1 :strid long). (((= :num -> num -> bool) (dist_aux_ftn_strexp
   (int_LONGSTRIDstrexp $0))) 11)))) ((/\
   ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   (((= :num -> num -> bool) (dist_aux_ftn_strexp ((int_APPstrexp $1)
   $0))) 12)))))) ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   (((= :num -> num -> bool) (dist_aux_ftn_strexp ((int_LETstrexp $1)
   $0))) 13))))))))))))))))))`),
 ((LETstrexp),
  [],
  `(((= :(strdec -> strexp -> strexp) ->
         (strdec -> strexp -> strexp) -> bool) LETstrexp)
   (\(x0 :strdec). (\(x1 :strexp). ((int_LETstrexp $1) $0))))`),
 ((APPstrexp),
  [],
  `(((= :(funid -> strexp -> strexp) -> (funid -> strexp -> strexp) ->
         bool) APPstrexp) (\(x0 :funid). (\(x1 :strexp).
   ((int_APPstrexp $1) $0))))`),
 ((LONGSTRIDstrexp),
  [],
  `(((= :(strid long -> strexp) -> (strid long -> strexp) -> bool)
   LONGSTRIDstrexp) (\(x0 :strid long). (int_LONGSTRIDstrexp $0)))`),
 ((STRUCTstrexp),
  [],
  `(((= :(strdec -> strexp) -> (strdec -> strexp) -> bool)
   STRUCTstrexp) (\(x0 :strdec). (int_STRUCTstrexp $0)))`),
 ((SEQstrdec),
  [],
  `(((= :(strdec -> strdec -> strdec) ->
         (strdec -> strdec -> strdec) -> bool) SEQstrdec)
   (\(x0 :strdec). (\(x1 :strdec). ((int_SEQstrdec $1) $0))))`),
 ((EMPTYstrdec),
  [],
  `(((= :strdec -> strdec -> bool) EMPTYstrdec) int_EMPTYstrdec)`),
 ((LOCALstrdec),
  [],
  `(((= :(strdec -> strdec -> strdec) ->
         (strdec -> strdec -> strdec) -> bool) LOCALstrdec)
   (\(x0 :strdec). (\(x1 :strdec). ((int_LOCALstrdec $1) $0))))`),
 ((STRUCTUREstrdec),
  [],
  `(((= :(strbind -> strdec) -> (strbind -> strdec) -> bool)
   STRUCTUREstrdec) (\(x0 :strbind). (int_STRUCTUREstrdec $0)))`),
 ((DECstrdec),
  [],
  `(((= :(dec -> strdec) -> (dec -> strdec) -> bool) DECstrdec)
   (\(x0 :dec). (int_DECstrdec $0)))`),
 ((BINDstrbind),
  [],
  `(((= :(strid -> sigexp option -> strexp -> strbind option ->
         strbind) ->
         (strid -> sigexp option -> strexp -> strbind option ->
         strbind) -> bool) BINDstrbind) (\(x0 :strid).
   (\(x1 :sigexp option). (\(x2 :strexp). (\(x3 :strbind option).
   ((((int_BINDstrbind $3)
   (int_inj_sigexp_option_strbind_strdec_strexp $2)) $1)
   (int_inj_strbind_option_strbind_strdec_strexp $0)))))))`),
 ((int_inv_strbind_option_strbind_strdec_strexp),
  [],
  `((/\ (((= :strbind option -> strbind option -> bool)
   (int_inv_strbind_option_strbind_strdec_strexp
   int_strbind_strdec_strexp_NONE_strbind)) (NONE :strbind option)))
   ((! :(strbind -> bool) -> bool) (\(x1 :strbind).
   (((= :strbind option -> strbind option -> bool)
   (int_inv_strbind_option_strbind_strdec_strexp
   (int_strbind_strdec_strexp_SOME_strbind $0)))
   ((SOME :strbind -> strbind option) $0)))))`),
 ((int_inj_strbind_option_strbind_strdec_strexp),
  [],
  `((/\
   (((= :strbind_option_strbind_strdec_strexp ->
         strbind_option_strbind_strdec_strexp -> bool)
   (int_inj_strbind_option_strbind_strdec_strexp
   (NONE :strbind option))) int_strbind_strdec_strexp_NONE_strbind))
   ((! :(strbind -> bool) -> bool) (\(x0 :strbind).
   (((= :strbind_option_strbind_strdec_strexp ->
         strbind_option_strbind_strdec_strexp -> bool)
   (int_inj_strbind_option_strbind_strdec_strexp
   ((SOME :strbind -> strbind option) $0)))
   (int_strbind_strdec_strexp_SOME_strbind $0)))))`),
 ((int_inv_sigexp_option_strbind_strdec_strexp),
  [],
  `((/\ (((= :sigexp option -> sigexp option -> bool)
   (int_inv_sigexp_option_strbind_strdec_strexp
   int_strbind_strdec_strexp_NONE_sigexp)) (NONE :sigexp option)))
   ((! :(sigexp -> bool) -> bool) (\(x1 :sigexp).
   (((= :sigexp option -> sigexp option -> bool)
   (int_inv_sigexp_option_strbind_strdec_strexp
   (int_strbind_strdec_strexp_SOME_sigexp $0)))
   ((SOME :sigexp -> sigexp option) $0)))))`),
 ((int_inj_sigexp_option_strbind_strdec_strexp),
  [],
  `((/\
   (((= :sigexp_option_strbind_strdec_strexp ->
         sigexp_option_strbind_strdec_strexp -> bool)
   (int_inj_sigexp_option_strbind_strdec_strexp
   (NONE :sigexp option))) int_strbind_strdec_strexp_NONE_sigexp))
   ((! :(sigexp -> bool) -> bool) (\(x0 :sigexp).
   (((= :sigexp_option_strbind_strdec_strexp ->
         sigexp_option_strbind_strdec_strexp -> bool)
   (int_inj_sigexp_option_strbind_strdec_strexp
   ((SOME :sigexp -> sigexp option) $0)))
   (int_strbind_strdec_strexp_SOME_sigexp $0)))))`),
 ((int_LETstrexp_DEF),
  [],
  `((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   (((= :strexp -> strexp -> bool) ((int_LETstrexp $1) $0))
   (strexp_abs ((JOINT_int_LETstrexp (strdec_rep $1)) (strexp_rep
   $0))))))))`),
 ((int_APPstrexp_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   (((= :strexp -> strexp -> bool) ((int_APPstrexp $1) $0))
   (strexp_abs ((JOINT_int_APPstrexp $1) (strexp_rep $0))))))))`),
 ((int_LONGSTRIDstrexp_DEF),
  [],
  `((! :(strid long -> bool) -> bool) (\(x1 :strid long).
   (((= :strexp -> strexp -> bool) (int_LONGSTRIDstrexp $0))
   (strexp_abs (JOINT_int_LONGSTRIDstrexp $0)))))`),
 ((int_STRUCTstrexp_DEF),
  [],
  `((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   (((= :strexp -> strexp -> bool) (int_STRUCTstrexp $0)) (strexp_abs
   (JOINT_int_STRUCTstrexp (strdec_rep $0))))))`),
 ((int_SEQstrdec_DEF),
  [],
  `((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   (((= :strdec -> strdec -> bool) ((int_SEQstrdec $1) $0))
   (strdec_abs ((JOINT_int_SEQstrdec (strdec_rep $1)) (strdec_rep
   $0))))))))`),
 ((int_EMPTYstrdec_DEF),
  [],
  `(((= :strdec -> strdec -> bool) int_EMPTYstrdec) (strdec_abs
   JOINT_int_EMPTYstrdec))`),
 ((int_LOCALstrdec_DEF),
  [],
  `((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   (((= :strdec -> strdec -> bool) ((int_LOCALstrdec $1) $0))
   (strdec_abs ((JOINT_int_LOCALstrdec (strdec_rep $1)) (strdec_rep
   $0))))))))`),
 ((int_STRUCTUREstrdec_DEF),
  [],
  `((! :(strbind -> bool) -> bool) (\(x1 :strbind).
   (((= :strdec -> strdec -> bool) (int_STRUCTUREstrdec $0))
   (strdec_abs (JOINT_int_STRUCTUREstrdec (strbind_rep $0))))))`),
 ((int_DECstrdec_DEF),
  [],
  `((! :(dec -> bool) -> bool) (\(x1 :dec).
   (((= :strdec -> strdec -> bool) (int_DECstrdec $0)) (strdec_abs
   (JOINT_int_DECstrdec $0)))))`),
 ((int_strbind_strdec_strexp_SOME_strbind_DEF),
  [],
  `((! :(strbind -> bool) -> bool) (\(x1 :strbind).
   (((= :strbind_option_strbind_strdec_strexp ->
         strbind_option_strbind_strdec_strexp -> bool)
   (int_strbind_strdec_strexp_SOME_strbind $0))
   (strbind_option_strbind_strdec_strexp_abs
   (JOINT_int_strbind_strdec_strexp_SOME_strbind (strbind_rep
   $0))))))`),
 ((int_strbind_strdec_strexp_NONE_strbind_DEF),
  [],
  `(((= :strbind_option_strbind_strdec_strexp ->
         strbind_option_strbind_strdec_strexp -> bool)
   int_strbind_strdec_strexp_NONE_strbind)
   (strbind_option_strbind_strdec_strexp_abs
   JOINT_int_strbind_strdec_strexp_NONE_strbind))`),
 ((int_BINDstrbind_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp_option_strbind_strdec_strexp -> bool) -> bool)
   (\(x2 :sigexp_option_strbind_strdec_strexp).
   ((! :(strexp -> bool) -> bool) (\(x3 :strexp).
   ((! :(strbind_option_strbind_strdec_strexp -> bool) -> bool)
   (\(x4 :strbind_option_strbind_strdec_strexp).
   (((= :strbind -> strbind -> bool) ((((int_BINDstrbind $3) $2) $1)
   $0)) (strbind_abs ((((JOINT_int_BINDstrbind $3)
   (sigexp_option_strbind_strdec_strexp_rep $2)) (strexp_rep $1))
   (strbind_option_strbind_strdec_strexp_rep $0))))))))))))`),
 ((int_strbind_strdec_strexp_SOME_sigexp_DEF),
  [],
  `((! :(sigexp -> bool) -> bool) (\(x1 :sigexp).
   (((= :sigexp_option_strbind_strdec_strexp ->
         sigexp_option_strbind_strdec_strexp -> bool)
   (int_strbind_strdec_strexp_SOME_sigexp $0))
   (sigexp_option_strbind_strdec_strexp_abs
   (JOINT_int_strbind_strdec_strexp_SOME_sigexp $0)))))`),
 ((int_strbind_strdec_strexp_NONE_sigexp_DEF),
  [],
  `(((= :sigexp_option_strbind_strdec_strexp ->
         sigexp_option_strbind_strdec_strexp -> bool)
   int_strbind_strdec_strexp_NONE_sigexp)
   (sigexp_option_strbind_strdec_strexp_abs
   JOINT_int_strbind_strdec_strexp_NONE_sigexp))`),
 ((sigexp_option_strbind_strdec_strexp_REP_ABS),
  [],
  `((/\ ((! :(sigexp_option_strbind_strdec_strexp -> bool) -> bool)
   (\(a :sigexp_option_strbind_strdec_strexp).
   (((= :sigexp_option_strbind_strdec_strexp ->
         sigexp_option_strbind_strdec_strexp -> bool)
   (sigexp_option_strbind_strdec_strexp_abs
   (sigexp_option_strbind_strdec_strexp_rep $0))) $0))))
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(r :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $0)) 1)) $0))
   (((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) (sigexp_option_strbind_strdec_strexp_rep
   (sigexp_option_strbind_strdec_strexp_abs $0))) $0)))))`),
 ((sigexp_option_strbind_strdec_strexp_TY_DEF),
  [],
  `((? :((sigexp_option_strbind_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp) ->
        bool) -> bool)
   (\(rep :sigexp_option_strbind_strdec_strexp ->
           joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((TYPE_DEFINITION :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
                       bool) ->
                       (sigexp_option_strbind_strdec_strexp ->
                       joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp) ->
                       bool)
   (\(x :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $0)) 1))) $0)))`),
 ((strbind_option_strbind_strdec_strexp_REP_ABS),
  [],
  `((/\ ((! :(strbind_option_strbind_strdec_strexp -> bool) -> bool)
   (\(a :strbind_option_strbind_strdec_strexp).
   (((= :strbind_option_strbind_strdec_strexp ->
         strbind_option_strbind_strdec_strexp -> bool)
   (strbind_option_strbind_strdec_strexp_abs
   (strbind_option_strbind_strdec_strexp_rep $0))) $0))))
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(r :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $0)) 3)) $0))
   (((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) (strbind_option_strbind_strdec_strexp_rep
   (strbind_option_strbind_strdec_strexp_abs $0))) $0)))))`),
 ((strbind_option_strbind_strdec_strexp_TY_DEF),
  [],
  `((? :((strbind_option_strbind_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp) ->
        bool) -> bool)
   (\(rep :strbind_option_strbind_strdec_strexp ->
           joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((TYPE_DEFINITION :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
                       bool) ->
                       (strbind_option_strbind_strdec_strexp ->
                       joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp) ->
                       bool)
   (\(x :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $0)) 3))) $0)))`),
 ((strdec_REP_ABS),
  [],
  `((/\ ((! :(strdec -> bool) -> bool) (\(a :strdec).
   (((= :strdec -> strdec -> bool) (strdec_abs (strdec_rep $0)))
   $0))))
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(r :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $0)) 4)) $0))
   (((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) (strdec_rep (strdec_abs $0))) $0)))))`),
 ((strdec_TY_DEF),
  [],
  `((? :((strdec ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp) ->
        bool) -> bool)
   (\(rep :strdec ->
           joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((TYPE_DEFINITION :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
                       bool) ->
                       (strdec ->
                       joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp) ->
                       bool)
   (\(x :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $0)) 4))) $0)))`),
 ((strexp_REP_ABS),
  [],
  `((/\ ((! :(strexp -> bool) -> bool) (\(a :strexp).
   (((= :strexp -> strexp -> bool) (strexp_abs (strexp_rep $0)))
   $0))))
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(r :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $0)) 5)) $0))
   (((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) (strexp_rep (strexp_abs $0))) $0)))))`),
 ((strexp_TY_DEF),
  [],
  `((? :((strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp) ->
        bool) -> bool)
   (\(rep :strexp ->
           joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((TYPE_DEFINITION :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
                       bool) ->
                       (strexp ->
                       joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp) ->
                       bool)
   (\(x :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $0)) 5))) $0)))`),
 ((strbind_REP_ABS),
  [],
  `((/\ ((! :(strbind -> bool) -> bool) (\(a :strbind).
   (((= :strbind -> strbind -> bool) (strbind_abs (strbind_rep $0)))
   $0))))
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(r :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $0)) 2)) $0))
   (((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) (strbind_rep (strbind_abs $0))) $0)))))`),
 ((strbind_TY_DEF),
  [],
  `((? :((strbind ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp) ->
        bool) -> bool)
   (\(rep :strbind ->
           joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((TYPE_DEFINITION :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
                       bool) ->
                       (strbind ->
                       joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp) ->
                       bool)
   (\(x :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $0)) 2))) $0)))`),
 ((joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select_DEF),
  [],
  `((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   JOINT_int_strbind_strdec_strexp_NONE_sigexp)) 1)) ((/\
   ((! :(sigexp -> bool) -> bool) (\(s :sigexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   (JOINT_int_strbind_strdec_strexp_SOME_sigexp $0))) 1)))) ((/\
   ((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j3 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   ((((JOINT_int_BINDstrbind $3) $2) $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $2)) 1)) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $1)) 5)) (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $0)) 3)))) 2) 0))))))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   JOINT_int_strbind_strdec_strexp_NONE_strbind)) 3)) ((/\
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   (JOINT_int_strbind_strdec_strexp_SOME_strbind $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $0)) 2)) 3) 0))))) ((/\ ((! :(dec -> bool) -> bool) (\(d :dec).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   (JOINT_int_DECstrdec $0))) 4)))) ((/\
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   (JOINT_int_STRUCTUREstrdec $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $0)) 2)) 4) 0))))) ((/\
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   ((JOINT_int_LOCALstrdec $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $1)) 4)) (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $0)) 4))) 4) 0))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   JOINT_int_EMPTYstrdec)) 4)) ((/\
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   ((JOINT_int_SEQstrdec $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $1)) 4)) (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $0)) 4))) 4) 0))))))) ((/\
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   (JOINT_int_STRUCTstrexp $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $0)) 4)) 5) 0))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(l :strid long). (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   (JOINT_int_LONGSTRIDstrexp $0))) 5)))) ((/\
   ((! :(funid -> bool) -> bool) (\(f' :funid).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   ((JOINT_int_APPstrexp $1) $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $0)) 5)) 5) 0)))))))
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   ((JOINT_int_LETstrexp $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $1)) 4)) (((= :num -> num -> bool)
   (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_select
   $0)) 5))) 5) 0)))))))))))))))))))`),
 ((JOINT_int_LETstrexp_DEF),
  [],
  `((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) ((JOINT_int_LETstrexp $1) $0))
   (ABS_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   (((Node :one + sigexp + strid + one + one + dec + one + one + one +
            one + one + strid long + funid + one ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INR :one + one + one + strid long + funid + one ->
          one + one + one + one + strid long + funid + one)
   ((INR :one + one + strid long + funid + one ->
          one + one + one + strid long + funid + one)
   ((INR :one + strid long + funid + one ->
          one + one + strid long + funid + one)
   ((INR :strid long + funid + one -> one + strid long + funid + one)
   ((INR :funid + one -> strid long + funid + one)
   ((INR :one -> funid + one) one))))))))))))))
   (((CONS :(one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list)
   (REP_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   $1))
   (((CONS :(one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list)
   (REP_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   $0))
   (NIL :(one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree list))))))))))`),
 ((JOINT_int_APPstrexp_DEF),
  [],
  `((! :(funid -> bool) -> bool) (\(f' :funid).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) ((JOINT_int_APPstrexp $1) $0))
   (ABS_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   (((Node :one + sigexp + strid + one + one + dec + one + one + one +
            one + one + strid long + funid + one ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INR :one + one + one + strid long + funid + one ->
          one + one + one + one + strid long + funid + one)
   ((INR :one + one + strid long + funid + one ->
          one + one + one + strid long + funid + one)
   ((INR :one + strid long + funid + one ->
          one + one + strid long + funid + one)
   ((INR :strid long + funid + one -> one + strid long + funid + one)
   ((INR :funid + one -> strid long + funid + one)
   ((INL :funid -> funid + one) $1))))))))))))))
   (((CONS :(one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list)
   (REP_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   $0))
   (NIL :(one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree list)))))))))`),
 ((JOINT_int_LONGSTRIDstrexp_DEF),
  [],
  `((! :(strid long -> bool) -> bool) (\(l :strid long).
   (((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) (JOINT_int_LONGSTRIDstrexp $0))
   (ABS_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   (((Node :one + sigexp + strid + one + one + dec + one + one + one +
            one + one + strid long + funid + one ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INR :one + one + one + strid long + funid + one ->
          one + one + one + one + strid long + funid + one)
   ((INR :one + one + strid long + funid + one ->
          one + one + one + strid long + funid + one)
   ((INR :one + strid long + funid + one ->
          one + one + strid long + funid + one)
   ((INR :strid long + funid + one -> one + strid long + funid + one)
   ((INL :strid long -> strid long + funid + one) $0)))))))))))))
   (NIL :(one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree list))))))`),
 ((JOINT_int_STRUCTstrexp_DEF),
  [],
  `((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) (JOINT_int_STRUCTstrexp $0))
   (ABS_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   (((Node :one + sigexp + strid + one + one + dec + one + one + one +
            one + one + strid long + funid + one ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INR :one + one + one + strid long + funid + one ->
          one + one + one + one + strid long + funid + one)
   ((INR :one + one + strid long + funid + one ->
          one + one + one + strid long + funid + one)
   ((INR :one + strid long + funid + one ->
          one + one + strid long + funid + one)
   ((INL :one -> one + strid long + funid + one) one))))))))))))
   (((CONS :(one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list)
   (REP_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   $0))
   (NIL :(one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree list)))))))`),
 ((JOINT_int_SEQstrdec_DEF),
  [],
  `((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) ((JOINT_int_SEQstrdec $1) $0))
   (ABS_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   (((Node :one + sigexp + strid + one + one + dec + one + one + one +
            one + one + strid long + funid + one ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INR :one + one + one + strid long + funid + one ->
          one + one + one + one + strid long + funid + one)
   ((INR :one + one + strid long + funid + one ->
          one + one + one + strid long + funid + one)
   ((INL :one -> one + one + strid long + funid + one) one)))))))))))
   (((CONS :(one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list)
   (REP_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   $1))
   (((CONS :(one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list)
   (REP_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   $0))
   (NIL :(one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree list))))))))))`),
 ((JOINT_int_EMPTYstrdec_DEF),
  [],
  `(((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) JOINT_int_EMPTYstrdec)
   (ABS_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   (((Node :one + sigexp + strid + one + one + dec + one + one + one +
            one + one + strid long + funid + one ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INR :one + one + one + strid long + funid + one ->
          one + one + one + one + strid long + funid + one)
   ((INL :one -> one + one + one + strid long + funid + one)
   one))))))))))
   (NIL :(one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree list))))`),
 ((JOINT_int_LOCALstrdec_DEF),
  [],
  `((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) ((JOINT_int_LOCALstrdec $1) $0))
   (ABS_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   (((Node :one + sigexp + strid + one + one + dec + one + one + one +
            one + one + strid long + funid + one ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INL :one -> one + one + one + one + strid long + funid + one)
   one)))))))))
   (((CONS :(one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list)
   (REP_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   $1))
   (((CONS :(one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list)
   (REP_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   $0))
   (NIL :(one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree list))))))))))`),
 ((JOINT_int_STRUCTUREstrdec_DEF),
  [],
  `((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) (JOINT_int_STRUCTUREstrdec $0))
   (ABS_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   (((Node :one + sigexp + strid + one + one + dec + one + one + one +
            one + one + strid long + funid + one ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INL :one ->
          one + one + one + one + one + strid long + funid + one)
   one))))))))
   (((CONS :(one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list)
   (REP_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   $0))
   (NIL :(one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree list)))))))`),
 ((JOINT_int_DECstrdec_DEF),
  [],
  `((! :(dec -> bool) -> bool) (\(d :dec).
   (((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) (JOINT_int_DECstrdec $0))
   (ABS_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   (((Node :one + sigexp + strid + one + one + dec + one + one + one +
            one + one + strid long + funid + one ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INL :dec ->
          dec + one + one + one + one + one + strid long + funid +
          one) $0)))))))
   (NIL :(one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree list))))))`),
 ((JOINT_int_strbind_strdec_strexp_SOME_strbind_DEF),
  [],
  `((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) (JOINT_int_strbind_strdec_strexp_SOME_strbind $0))
   (ABS_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   (((Node :one + sigexp + strid + one + one + dec + one + one + one +
            one + one + strid long + funid + one ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INL :one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one) one))))))
   (((CONS :(one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list)
   (REP_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   $0))
   (NIL :(one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree list)))))))`),
 ((JOINT_int_strbind_strdec_strexp_NONE_strbind_DEF),
  [],
  `(((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) JOINT_int_strbind_strdec_strexp_NONE_strbind)
   (ABS_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   (((Node :one + sigexp + strid + one + one + dec + one + one + one +
            one + one + strid long + funid + one ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INL :one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one) one)))))
   (NIL :(one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree list))))`),
 ((JOINT_int_BINDstrbind_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j3 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) ((((JOINT_int_BINDstrbind $3) $2) $1) $0))
   (ABS_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   (((Node :one + sigexp + strid + one + one + dec + one + one + one +
            one + one + strid long + funid + one ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INL :strid ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one) $3))))
   (((CONS :(one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list)
   (REP_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   $2))
   (((CONS :(one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list)
   (REP_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   $1))
   (((CONS :(one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list)
   (REP_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   $0))
   (NIL :(one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree
         list)))))))))))))))`),
 ((JOINT_int_strbind_strdec_strexp_SOME_sigexp_DEF),
  [],
  `((! :(sigexp -> bool) -> bool) (\(s :sigexp).
   (((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) (JOINT_int_strbind_strdec_strexp_SOME_sigexp $0))
   (ABS_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   (((Node :one + sigexp + strid + one + one + dec + one + one + one +
            one + one + strid long + funid + one ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INL :sigexp ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one) $0)))
   (NIL :(one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree list))))))`),
 ((JOINT_int_strbind_strdec_strexp_NONE_sigexp_DEF),
  [],
  `(((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool) JOINT_int_strbind_strdec_strexp_NONE_sigexp)
   (ABS_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   (((Node :one + sigexp + strid + one + one + dec + one + one + one +
            one + one + strid long + funid + one ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree list ->
            (one + sigexp + strid + one + one + dec + one + one +
            one + one + one + strid long + funid + one) ltree)
   ((INL :one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one) one))
   (NIL :(one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree list))))`),
 ((joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_ISO_DEF),
  [],
  `((/\
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(a :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         bool)
   (ABS_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   (REP_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   $0))) $0))))
   ((! :((one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree -> bool) -> bool)
   (\(r :(one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(one + sigexp + strid + one + one + dec + one + one + one +
            one + one + strid long + funid + one ->
           (one + sigexp + strid + one + one + dec + one + one + one +
           one + one + strid long + funid + one) ltree list ->
           bool) ->
           (one + sigexp + strid + one + one + dec + one + one + one +
           one + one + strid long + funid + one) ltree -> bool)
   (\(v :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one).
   (\(tl :(one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one) ltree list). ((\/ ((/\
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $1)
   ((INL :one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one) one)))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\ ((? :(sigexp -> bool) -> bool)
   (\(s :sigexp).
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $2)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INL :sigexp ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one) $0))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\ ((? :(strid -> bool) -> bool)
   (\(s :strid).
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $2)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INL :strid ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one) $0)))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) (SUC (SUC (SUC 0)))))) ((\/ ((/\
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $1)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INL :one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one) one)))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $1)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INL :one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one) one))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(dec -> bool) -> bool) (\(d :dec).
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $2)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INL :dec ->
          dec + one + one + one + one + one + strid long + funid +
          one) $0)))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $1)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INL :one ->
          one + one + one + one + one + strid long + funid + one)
   one))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $1)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INL :one -> one + one + one + one + strid long + funid + one)
   one)))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $1)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INR :one + one + one + strid long + funid + one ->
          one + one + one + one + strid long + funid + one)
   ((INL :one -> one + one + one + strid long + funid + one)
   one))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $1)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INR :one + one + one + strid long + funid + one ->
          one + one + one + one + strid long + funid + one)
   ((INR :one + one + strid long + funid + one ->
          one + one + one + strid long + funid + one)
   ((INL :one -> one + one + strid long + funid + one) one))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $1)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INR :one + one + one + strid long + funid + one ->
          one + one + one + one + strid long + funid + one)
   ((INR :one + one + strid long + funid + one ->
          one + one + one + strid long + funid + one)
   ((INR :one + strid long + funid + one ->
          one + one + strid long + funid + one)
   ((INL :one -> one + strid long + funid + one) one)))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(strid long -> bool) -> bool) (\(l :strid long).
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $2)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INR :one + one + one + strid long + funid + one ->
          one + one + one + one + strid long + funid + one)
   ((INR :one + one + strid long + funid + one ->
          one + one + one + strid long + funid + one)
   ((INR :one + strid long + funid + one ->
          one + one + strid long + funid + one)
   ((INR :strid long + funid + one -> one + strid long + funid + one)
   ((INL :strid long -> strid long + funid + one) $0))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\ ((? :(funid -> bool) -> bool)
   (\(f :funid).
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $2)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INR :one + one + one + strid long + funid + one ->
          one + one + one + one + strid long + funid + one)
   ((INR :one + one + strid long + funid + one ->
          one + one + one + strid long + funid + one)
   ((INR :one + strid long + funid + one ->
          one + one + strid long + funid + one)
   ((INR :strid long + funid + one -> one + strid long + funid + one)
   ((INR :funid + one -> strid long + funid + one)
   ((INL :funid -> funid + one) $0)))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) (SUC 0)))) ((/\
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $1)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INR :one + one + one + strid long + funid + one ->
          one + one + one + one + strid long + funid + one)
   ((INR :one + one + strid long + funid + one ->
          one + one + one + strid long + funid + one)
   ((INR :one + strid long + funid + one ->
          one + one + strid long + funid + one)
   ((INR :strid long + funid + one -> one + strid long + funid + one)
   ((INR :funid + one -> strid long + funid + one)
   ((INR :one -> funid + one) one)))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) (SUC (SUC 0)))))))))))))))))))) $0))
   (((= :(one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree ->
         (one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree -> bool)
   (REP_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   (ABS_joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp
   $0))) $0)))))`),
 ((joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_TY_DEF),
  [],
  `((? :((joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         (one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one) ltree) -> bool) ->
        bool)
   (\(rep :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
           (one + sigexp + strid + one + one + dec + one + one + one +
           one + one + strid long + funid + one) ltree).
   (((TYPE_DEFINITION :((one + sigexp + strid + one + one + dec +
                        one + one + one + one + one + strid long +
                        funid + one) ltree -> bool) ->
                       (joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
                       (one + sigexp + strid + one + one + dec + one +
                       one + one + one + one + strid long + funid +
                       one) ltree) -> bool)
   ((TRP :(one + sigexp + strid + one + one + dec + one + one + one +
           one + one + strid long + funid + one ->
          (one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one) ltree list -> bool) ->
          (one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one) ltree -> bool)
   (\(v :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one).
   (\(tl :(one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one) ltree list). ((\/ ((/\
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $1)
   ((INL :one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one) one)))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\ ((? :(sigexp -> bool) -> bool)
   (\(s :sigexp).
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $2)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INL :sigexp ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one) $0))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\ ((? :(strid -> bool) -> bool)
   (\(s :strid).
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $2)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INL :strid ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one) $0)))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) (SUC (SUC (SUC 0)))))) ((\/ ((/\
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $1)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INL :one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one) one)))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $1)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INL :one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one) one))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(dec -> bool) -> bool) (\(d :dec).
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $2)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INL :dec ->
          dec + one + one + one + one + one + strid long + funid +
          one) $0)))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $1)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INL :one ->
          one + one + one + one + one + strid long + funid + one)
   one))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) (SUC 0)))) ((\/ ((/\
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $1)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INL :one -> one + one + one + one + strid long + funid + one)
   one)))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $1)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INR :one + one + one + strid long + funid + one ->
          one + one + one + one + strid long + funid + one)
   ((INL :one -> one + one + one + strid long + funid + one)
   one))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $1)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INR :one + one + one + strid long + funid + one ->
          one + one + one + one + strid long + funid + one)
   ((INR :one + one + strid long + funid + one ->
          one + one + one + strid long + funid + one)
   ((INL :one -> one + one + strid long + funid + one) one))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) (SUC (SUC 0))))) ((\/ ((/\
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $1)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INR :one + one + one + strid long + funid + one ->
          one + one + one + one + strid long + funid + one)
   ((INR :one + one + strid long + funid + one ->
          one + one + one + strid long + funid + one)
   ((INR :one + strid long + funid + one ->
          one + one + strid long + funid + one)
   ((INL :one -> one + strid long + funid + one) one)))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) (SUC 0)))) ((\/ ((/\
   ((? :(strid long -> bool) -> bool) (\(l :strid long).
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $2)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INR :one + one + one + strid long + funid + one ->
          one + one + one + one + strid long + funid + one)
   ((INR :one + one + strid long + funid + one ->
          one + one + one + strid long + funid + one)
   ((INR :one + strid long + funid + one ->
          one + one + strid long + funid + one)
   ((INR :strid long + funid + one -> one + strid long + funid + one)
   ((INL :strid long -> strid long + funid + one) $0))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) 0))) ((\/ ((/\ ((? :(funid -> bool) -> bool)
   (\(f :funid).
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $2)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INR :one + one + one + strid long + funid + one ->
          one + one + one + one + strid long + funid + one)
   ((INR :one + one + strid long + funid + one ->
          one + one + one + strid long + funid + one)
   ((INR :one + strid long + funid + one ->
          one + one + strid long + funid + one)
   ((INR :strid long + funid + one -> one + strid long + funid + one)
   ((INR :funid + one -> strid long + funid + one)
   ((INL :funid -> funid + one) $0)))))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) (SUC 0)))) ((/\
   (((= :one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one ->
         one + sigexp + strid + one + one + dec + one + one + one +
         one + one + strid long + funid + one -> bool) $1)
   ((INR :sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one ->
          one + sigexp + strid + one + one + dec + one + one + one +
          one + one + strid long + funid + one)
   ((INR :strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one ->
          sigexp + strid + one + one + dec + one + one + one + one +
          one + strid long + funid + one)
   ((INR :one + one + dec + one + one + one + one + one + strid long +
          funid + one ->
          strid + one + one + dec + one + one + one + one + one +
          strid long + funid + one)
   ((INR :one + dec + one + one + one + one + one + strid long +
          funid + one ->
          one + one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :dec + one + one + one + one + one + strid long + funid +
          one ->
          one + dec + one + one + one + one + one + strid long +
          funid + one)
   ((INR :one + one + one + one + one + strid long + funid + one ->
          dec + one + one + one + one + one + strid long + funid +
          one)
   ((INR :one + one + one + one + strid long + funid + one ->
          one + one + one + one + one + strid long + funid + one)
   ((INR :one + one + one + strid long + funid + one ->
          one + one + one + one + strid long + funid + one)
   ((INR :one + one + strid long + funid + one ->
          one + one + one + strid long + funid + one)
   ((INR :one + strid long + funid + one ->
          one + one + strid long + funid + one)
   ((INR :strid long + funid + one -> one + strid long + funid + one)
   ((INR :funid + one -> strid long + funid + one)
   ((INR :one -> funid + one) one)))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigexp + strid + one + one + dec + one + one +
             one + one + one + strid long + funid + one) ltree list ->
             num) $0)) (SUC (SUC 0))))))))))))))))))))) $0)))`),
 ((SEQsigdec_DEF),
  [],
  `((! :(sigdec -> bool) -> bool) (\(s1 :sigdec).
   ((! :(sigdec -> bool) -> bool) (\(s2 :sigdec).
   (((= :sigdec -> sigdec -> bool) ((SEQsigdec $1) $0)) (ABS_sigdec
   (((Node :sigbind + one + one -> (sigbind + one + one) ltree list ->
            (sigbind + one + one) ltree)
   ((INR :one + one -> sigbind + one + one) ((INR :one -> one + one)
   one)))
   (((CONS :(sigbind + one + one) ltree ->
            (sigbind + one + one) ltree list ->
            (sigbind + one + one) ltree list) (REP_sigdec $1))
   (((CONS :(sigbind + one + one) ltree ->
            (sigbind + one + one) ltree list ->
            (sigbind + one + one) ltree list) (REP_sigdec $0))
   (NIL :(sigbind + one + one) ltree list))))))))))`),
 ((EMPTYsigdec_DEF),
  [],
  `(((= :sigdec -> sigdec -> bool) EMPTYsigdec) (ABS_sigdec
   (((Node :sigbind + one + one -> (sigbind + one + one) ltree list ->
            (sigbind + one + one) ltree)
   ((INR :one + one -> sigbind + one + one) ((INL :one -> one + one)
   one))) (NIL :(sigbind + one + one) ltree list))))`),
 ((SIGNATUREsigdec_DEF),
  [],
  `((! :(sigbind -> bool) -> bool) (\(s :sigbind).
   (((= :sigdec -> sigdec -> bool) (SIGNATUREsigdec $0)) (ABS_sigdec
   (((Node :sigbind + one + one -> (sigbind + one + one) ltree list ->
            (sigbind + one + one) ltree)
   ((INL :sigbind -> sigbind + one + one) $0))
   (NIL :(sigbind + one + one) ltree list))))))`),
 ((sigdec_ISO_DEF),
  [],
  `((/\ ((! :(sigdec -> bool) -> bool) (\(a :sigdec).
   (((= :sigdec -> sigdec -> bool) (ABS_sigdec (REP_sigdec $0)))
   $0)))) ((! :((sigbind + one + one) ltree -> bool) -> bool)
   (\(r :(sigbind + one + one) ltree). (((= :bool -> bool -> bool)
   (((TRP :(sigbind + one + one -> (sigbind + one + one) ltree list ->
           bool) -> (sigbind + one + one) ltree -> bool)
   (\(v :sigbind + one + one).
   (\(tl :(sigbind + one + one) ltree list). ((\/ ((/\
   ((? :(sigbind -> bool) -> bool) (\(s :sigbind).
   (((= :sigbind + one + one -> sigbind + one + one -> bool) $2)
   ((INL :sigbind -> sigbind + one + one) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigbind + one + one) ltree list -> num) $0)) 0))) ((\/
   ((/\ (((= :sigbind + one + one -> sigbind + one + one -> bool) $1)
   ((INR :one + one -> sigbind + one + one) ((INL :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(sigbind + one + one) ltree list -> num) $0)) 0))) ((/\
   (((= :sigbind + one + one -> sigbind + one + one -> bool) $1)
   ((INR :one + one -> sigbind + one + one) ((INR :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(sigbind + one + one) ltree list -> num) $0)) (SUC (SUC
   0))))))))) $0))
   (((= :(sigbind + one + one) ltree -> (sigbind + one + one) ltree ->
         bool) (REP_sigdec (ABS_sigdec $0))) $0)))))`),
 ((sigdec_TY_DEF),
  [],
  `((? :((sigdec -> (sigbind + one + one) ltree) -> bool) -> bool)
   (\(rep :sigdec -> (sigbind + one + one) ltree).
   (((TYPE_DEFINITION :((sigbind + one + one) ltree -> bool) ->
                       (sigdec -> (sigbind + one + one) ltree) ->
                       bool)
   ((TRP :(sigbind + one + one -> (sigbind + one + one) ltree list ->
          bool) -> (sigbind + one + one) ltree -> bool)
   (\(v :sigbind + one + one).
   (\(tl :(sigbind + one + one) ltree list). ((\/ ((/\
   ((? :(sigbind -> bool) -> bool) (\(s :sigbind).
   (((= :sigbind + one + one -> sigbind + one + one -> bool) $2)
   ((INL :sigbind -> sigbind + one + one) $0)))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigbind + one + one) ltree list -> num) $0)) 0))) ((\/
   ((/\ (((= :sigbind + one + one -> sigbind + one + one -> bool) $1)
   ((INR :one + one -> sigbind + one + one) ((INL :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(sigbind + one + one) ltree list -> num) $0)) 0))) ((/\
   (((= :sigbind + one + one -> sigbind + one + one -> bool) $1)
   ((INR :one + one -> sigbind + one + one) ((INR :one -> one + one)
   one)))) (((= :num -> num -> bool)
   ((LENGTH :(sigbind + one + one) ltree list -> num) $0)) (SUC (SUC
   0)))))))))) $0)))`),
 ((int_sigbind_SOME_sigbind_arg_DEF),
  [],
  `((/\ ((! :(sigbind -> bool) -> bool) (\(x1 :sigbind).
   (((= :sigbind -> sigbind -> bool) (int_sigbind_SOME_sigbind_arg
   (int_sigbind_SOME_sigbind $0))) $0))))
   (((= :sigbind -> sigbind -> bool) (int_sigbind_SOME_sigbind_arg
   int_sigbind_NONE_sigbind)) ((@ :(sigbind -> bool) -> sigbind)
   (\(x :sigbind). T))))`),
 ((int_BINDsigbind_arg3_DEF),
  [],
  `((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   ((! :(sigexp -> bool) -> bool) (\(x2 :sigexp).
   ((! :(sigbind_option_sigbind -> bool) -> bool)
   (\(x3 :sigbind_option_sigbind).
   (((= :sigbind_option_sigbind -> sigbind_option_sigbind -> bool)
   (int_BINDsigbind_arg3 (((int_BINDsigbind $2) $1) $0))) $0)))))))`),
 ((int_BINDsigbind_arg2_DEF),
  [],
  `((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   ((! :(sigexp -> bool) -> bool) (\(x2 :sigexp).
   ((! :(sigbind_option_sigbind -> bool) -> bool)
   (\(x3 :sigbind_option_sigbind). (((= :sigexp -> sigexp -> bool)
   (int_BINDsigbind_arg2 (((int_BINDsigbind $2) $1) $0))) $1)))))))`),
 ((int_BINDsigbind_arg1_DEF),
  [],
  `((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   ((! :(sigexp -> bool) -> bool) (\(x2 :sigexp).
   ((! :(sigbind_option_sigbind -> bool) -> bool)
   (\(x3 :sigbind_option_sigbind). (((= :sigid -> sigid -> bool)
   (int_BINDsigbind_arg1 (((int_BINDsigbind $2) $1) $0))) $2)))))))`),
 ((dist_aux_ftn_sigbind_DEF),
  [],
  `((/\ ((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   ((! :(sigexp -> bool) -> bool) (\(x2 :sigexp).
   ((! :(sigbind_option_sigbind -> bool) -> bool)
   (\(x3 :sigbind_option_sigbind). (((= :num -> num -> bool)
   (dist_aux_ftn_sigbind (((int_BINDsigbind $2) $1) $0))) 0))))))))
   ((/\ (((= :num -> num -> bool) (dist_aux_ftn_sigbind_option_sigbind
   int_sigbind_NONE_sigbind)) 1)) ((! :(sigbind -> bool) -> bool)
   (\(x1 :sigbind). (((= :num -> num -> bool)
   (dist_aux_ftn_sigbind_option_sigbind (int_sigbind_SOME_sigbind
   $0))) 2)))))`),
 ((BINDsigbind),
  [],
  `(((= :(sigid -> sigexp -> sigbind option -> sigbind) ->
         (sigid -> sigexp -> sigbind option -> sigbind) -> bool)
   BINDsigbind) (\(x0 :sigid). (\(x1 :sigexp). (\(x2 :sigbind option).
   (((int_BINDsigbind $2) $1) (int_inj_sigbind_option_sigbind
   $0))))))`),
 ((int_inv_sigbind_option_sigbind),
  [],
  `((/\ (((= :sigbind option -> sigbind option -> bool)
   (int_inv_sigbind_option_sigbind int_sigbind_NONE_sigbind))
   (NONE :sigbind option))) ((! :(sigbind -> bool) -> bool)
   (\(x1 :sigbind). (((= :sigbind option -> sigbind option -> bool)
   (int_inv_sigbind_option_sigbind (int_sigbind_SOME_sigbind $0)))
   ((SOME :sigbind -> sigbind option) $0)))))`),
 ((int_inj_sigbind_option_sigbind),
  [],
  `((/\
   (((= :sigbind_option_sigbind -> sigbind_option_sigbind -> bool)
   (int_inj_sigbind_option_sigbind (NONE :sigbind option)))
   int_sigbind_NONE_sigbind)) ((! :(sigbind -> bool) -> bool)
   (\(x0 :sigbind).
   (((= :sigbind_option_sigbind -> sigbind_option_sigbind -> bool)
   (int_inj_sigbind_option_sigbind ((SOME :sigbind -> sigbind option)
   $0))) (int_sigbind_SOME_sigbind $0)))))`),
 ((int_sigbind_SOME_sigbind_DEF),
  [],
  `((! :(sigbind -> bool) -> bool) (\(x1 :sigbind).
   (((= :sigbind_option_sigbind -> sigbind_option_sigbind -> bool)
   (int_sigbind_SOME_sigbind $0)) (sigbind_option_sigbind_abs
   (JOINT_int_sigbind_SOME_sigbind (sigbind_rep $0))))))`),
 ((int_sigbind_NONE_sigbind_DEF),
  [],
  `(((= :sigbind_option_sigbind -> sigbind_option_sigbind -> bool)
   int_sigbind_NONE_sigbind) (sigbind_option_sigbind_abs
   JOINT_int_sigbind_NONE_sigbind))`),
 ((int_BINDsigbind_DEF),
  [],
  `((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   ((! :(sigexp -> bool) -> bool) (\(x2 :sigexp).
   ((! :(sigbind_option_sigbind -> bool) -> bool)
   (\(x3 :sigbind_option_sigbind). (((= :sigbind -> sigbind -> bool)
   (((int_BINDsigbind $2) $1) $0)) (sigbind_abs
   (((JOINT_int_BINDsigbind $2) $1) (sigbind_option_sigbind_rep
   $0))))))))))`),
 ((sigbind_option_sigbind_REP_ABS),
  [],
  `((/\ ((! :(sigbind_option_sigbind -> bool) -> bool)
   (\(a :sigbind_option_sigbind).
   (((= :sigbind_option_sigbind -> sigbind_option_sigbind -> bool)
   (sigbind_option_sigbind_abs (sigbind_option_sigbind_rep $0)))
   $0))))
   ((! :(joint_ty_sigbind_sigbind_option_sigbind -> bool) -> bool)
   (\(r :joint_ty_sigbind_sigbind_option_sigbind).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_sigbind_sigbind_option_sigbind).
   (((= :num -> num -> bool)
   (joint_ty_sigbind_sigbind_option_sigbind_select $0)) 2)) $0))
   (((= :joint_ty_sigbind_sigbind_option_sigbind ->
         joint_ty_sigbind_sigbind_option_sigbind -> bool)
   (sigbind_option_sigbind_rep (sigbind_option_sigbind_abs $0)))
   $0)))))`),
 ((sigbind_option_sigbind_TY_DEF),
  [],
  `((? :((sigbind_option_sigbind ->
         joint_ty_sigbind_sigbind_option_sigbind) -> bool) -> bool)
   (\(rep :sigbind_option_sigbind ->
           joint_ty_sigbind_sigbind_option_sigbind).
   (((TYPE_DEFINITION :(joint_ty_sigbind_sigbind_option_sigbind ->
                       bool) ->
                       (sigbind_option_sigbind ->
                       joint_ty_sigbind_sigbind_option_sigbind) ->
                       bool)
   (\(x :joint_ty_sigbind_sigbind_option_sigbind).
   (((= :num -> num -> bool)
   (joint_ty_sigbind_sigbind_option_sigbind_select $0)) 2))) $0)))`),
 ((sigbind_REP_ABS),
  [],
  `((/\ ((! :(sigbind -> bool) -> bool) (\(a :sigbind).
   (((= :sigbind -> sigbind -> bool) (sigbind_abs (sigbind_rep $0)))
   $0))))
   ((! :(joint_ty_sigbind_sigbind_option_sigbind -> bool) -> bool)
   (\(r :joint_ty_sigbind_sigbind_option_sigbind).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_sigbind_sigbind_option_sigbind).
   (((= :num -> num -> bool)
   (joint_ty_sigbind_sigbind_option_sigbind_select $0)) 1)) $0))
   (((= :joint_ty_sigbind_sigbind_option_sigbind ->
         joint_ty_sigbind_sigbind_option_sigbind -> bool) (sigbind_rep
   (sigbind_abs $0))) $0)))))`),
 ((sigbind_TY_DEF),
  [],
  `((? :((sigbind -> joint_ty_sigbind_sigbind_option_sigbind) ->
        bool) -> bool)
   (\(rep :sigbind -> joint_ty_sigbind_sigbind_option_sigbind).
   (((TYPE_DEFINITION :(joint_ty_sigbind_sigbind_option_sigbind ->
                       bool) ->
                       (sigbind ->
                       joint_ty_sigbind_sigbind_option_sigbind) ->
                       bool)
   (\(x :joint_ty_sigbind_sigbind_option_sigbind).
   (((= :num -> num -> bool)
   (joint_ty_sigbind_sigbind_option_sigbind_select $0)) 1))) $0)))`),
 ((joint_ty_sigbind_sigbind_option_sigbind_select_DEF),
  [],
  `((/\ ((! :(sigid -> bool) -> bool) (\(s0 :sigid).
   ((! :(sigexp -> bool) -> bool) (\(s1 :sigexp).
   ((! :(joint_ty_sigbind_sigbind_option_sigbind -> bool) -> bool)
   (\(j :joint_ty_sigbind_sigbind_option_sigbind).
   (((= :num -> num -> bool)
   (joint_ty_sigbind_sigbind_option_sigbind_select
   (((JOINT_int_BINDsigbind $2) $1) $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_sigbind_sigbind_option_sigbind_select $0)) 2)) 1)
   0))))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigbind_sigbind_option_sigbind_select
   JOINT_int_sigbind_NONE_sigbind)) 2))
   ((! :(joint_ty_sigbind_sigbind_option_sigbind -> bool) -> bool)
   (\(j :joint_ty_sigbind_sigbind_option_sigbind).
   (((= :num -> num -> bool)
   (joint_ty_sigbind_sigbind_option_sigbind_select
   (JOINT_int_sigbind_SOME_sigbind $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_sigbind_sigbind_option_sigbind_select $0)) 1)) 2)
   0))))))`),
 ((JOINT_int_sigbind_SOME_sigbind_DEF),
  [],
  `((! :(joint_ty_sigbind_sigbind_option_sigbind -> bool) -> bool)
   (\(j :joint_ty_sigbind_sigbind_option_sigbind).
   (((= :joint_ty_sigbind_sigbind_option_sigbind ->
         joint_ty_sigbind_sigbind_option_sigbind -> bool)
   (JOINT_int_sigbind_SOME_sigbind $0))
   (ABS_joint_ty_sigbind_sigbind_option_sigbind
   (((Node :sigid # sigexp + one + one ->
            (sigid # sigexp + one + one) ltree list ->
            (sigid # sigexp + one + one) ltree)
   ((INR :one + one -> sigid # sigexp + one + one)
   ((INR :one -> one + one) one)))
   (((CONS :(sigid # sigexp + one + one) ltree ->
            (sigid # sigexp + one + one) ltree list ->
            (sigid # sigexp + one + one) ltree list)
   (REP_joint_ty_sigbind_sigbind_option_sigbind $0))
   (NIL :(sigid # sigexp + one + one) ltree list)))))))`),
 ((JOINT_int_sigbind_NONE_sigbind_DEF),
  [],
  `(((= :joint_ty_sigbind_sigbind_option_sigbind ->
         joint_ty_sigbind_sigbind_option_sigbind -> bool)
   JOINT_int_sigbind_NONE_sigbind)
   (ABS_joint_ty_sigbind_sigbind_option_sigbind
   (((Node :sigid # sigexp + one + one ->
            (sigid # sigexp + one + one) ltree list ->
            (sigid # sigexp + one + one) ltree)
   ((INR :one + one -> sigid # sigexp + one + one)
   ((INL :one -> one + one) one)))
   (NIL :(sigid # sigexp + one + one) ltree list))))`),
 ((JOINT_int_BINDsigbind_DEF),
  [],
  `((! :(sigid -> bool) -> bool) (\(s0 :sigid).
   ((! :(sigexp -> bool) -> bool) (\(s1 :sigexp).
   ((! :(joint_ty_sigbind_sigbind_option_sigbind -> bool) -> bool)
   (\(j :joint_ty_sigbind_sigbind_option_sigbind).
   (((= :joint_ty_sigbind_sigbind_option_sigbind ->
         joint_ty_sigbind_sigbind_option_sigbind -> bool)
   (((JOINT_int_BINDsigbind $2) $1) $0))
   (ABS_joint_ty_sigbind_sigbind_option_sigbind
   (((Node :sigid # sigexp + one + one ->
            (sigid # sigexp + one + one) ltree list ->
            (sigid # sigexp + one + one) ltree)
   ((INL :sigid # sigexp -> sigid # sigexp + one + one)
   (((, :sigid -> sigexp -> sigid # sigexp) $2) $1)))
   (((CONS :(sigid # sigexp + one + one) ltree ->
            (sigid # sigexp + one + one) ltree list ->
            (sigid # sigexp + one + one) ltree list)
   (REP_joint_ty_sigbind_sigbind_option_sigbind $0))
   (NIL :(sigid # sigexp + one + one) ltree list)))))))))))`),
 ((joint_ty_sigbind_sigbind_option_sigbind_ISO_DEF),
  [],
  `((/\
   ((! :(joint_ty_sigbind_sigbind_option_sigbind -> bool) -> bool)
   (\(a :joint_ty_sigbind_sigbind_option_sigbind).
   (((= :joint_ty_sigbind_sigbind_option_sigbind ->
         joint_ty_sigbind_sigbind_option_sigbind -> bool)
   (ABS_joint_ty_sigbind_sigbind_option_sigbind
   (REP_joint_ty_sigbind_sigbind_option_sigbind $0))) $0))))
   ((! :((sigid # sigexp + one + one) ltree -> bool) -> bool)
   (\(r :(sigid # sigexp + one + one) ltree).
   (((= :bool -> bool -> bool)
   (((TRP :(sigid # sigexp + one + one ->
           (sigid # sigexp + one + one) ltree list -> bool) ->
           (sigid # sigexp + one + one) ltree -> bool)
   (\(v :sigid # sigexp + one + one).
   (\(tl :(sigid # sigexp + one + one) ltree list). ((\/ ((/\
   ((? :(sigid -> bool) -> bool) (\(s0 :sigid).
   ((? :(sigexp -> bool) -> bool) (\(s1 :sigexp).
   (((= :sigid # sigexp + one + one -> sigid # sigexp + one + one ->
         bool) $3)
   ((INL :sigid # sigexp -> sigid # sigexp + one + one)
   (((, :sigid -> sigexp -> sigid # sigexp) $1) $0))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigid # sigexp + one + one) ltree list -> num) $0)) (SUC
   0)))) ((\/ ((/\
   (((= :sigid # sigexp + one + one -> sigid # sigexp + one + one ->
         bool) $1) ((INR :one + one -> sigid # sigexp + one + one)
   ((INL :one -> one + one) one)))) (((= :num -> num -> bool)
   ((LENGTH :(sigid # sigexp + one + one) ltree list -> num) $0)) 0)))
   ((/\
   (((= :sigid # sigexp + one + one -> sigid # sigexp + one + one ->
         bool) $1) ((INR :one + one -> sigid # sigexp + one + one)
   ((INR :one -> one + one) one)))) (((= :num -> num -> bool)
   ((LENGTH :(sigid # sigexp + one + one) ltree list -> num) $0)) (SUC
   0)))))))) $0))
   (((= :(sigid # sigexp + one + one) ltree ->
         (sigid # sigexp + one + one) ltree -> bool)
   (REP_joint_ty_sigbind_sigbind_option_sigbind
   (ABS_joint_ty_sigbind_sigbind_option_sigbind $0))) $0)))))`),
 ((joint_ty_sigbind_sigbind_option_sigbind_TY_DEF),
  [],
  `((? :((joint_ty_sigbind_sigbind_option_sigbind ->
         (sigid # sigexp + one + one) ltree) -> bool) -> bool)
   (\(rep :joint_ty_sigbind_sigbind_option_sigbind ->
           (sigid # sigexp + one + one) ltree).
   (((TYPE_DEFINITION :((sigid # sigexp + one + one) ltree -> bool) ->
                       (joint_ty_sigbind_sigbind_option_sigbind ->
                       (sigid # sigexp + one + one) ltree) -> bool)
   ((TRP :(sigid # sigexp + one + one ->
          (sigid # sigexp + one + one) ltree list -> bool) ->
          (sigid # sigexp + one + one) ltree -> bool)
   (\(v :sigid # sigexp + one + one).
   (\(tl :(sigid # sigexp + one + one) ltree list). ((\/ ((/\
   ((? :(sigid -> bool) -> bool) (\(s0 :sigid).
   ((? :(sigexp -> bool) -> bool) (\(s1 :sigexp).
   (((= :sigid # sigexp + one + one -> sigid # sigexp + one + one ->
         bool) $3)
   ((INL :sigid # sigexp -> sigid # sigexp + one + one)
   (((, :sigid -> sigexp -> sigid # sigexp) $1) $0))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(sigid # sigexp + one + one) ltree list -> num) $0)) (SUC
   0)))) ((\/ ((/\
   (((= :sigid # sigexp + one + one -> sigid # sigexp + one + one ->
         bool) $1) ((INR :one + one -> sigid # sigexp + one + one)
   ((INL :one -> one + one) one)))) (((= :num -> num -> bool)
   ((LENGTH :(sigid # sigexp + one + one) ltree list -> num) $0)) 0)))
   ((/\
   (((= :sigid # sigexp + one + one -> sigid # sigexp + one + one ->
         bool) $1) ((INR :one + one -> sigid # sigexp + one + one)
   ((INR :one -> one + one) one)))) (((= :num -> num -> bool)
   ((LENGTH :(sigid # sigexp + one + one) ltree list -> num) $0)) (SUC
   0))))))))) $0)))`),
 ((int_sigexp_spec_strdesc_SOME_strdesc_arg_DEF),
  [],
  `((/\ ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   (((= :strdesc -> strdesc -> bool)
   (int_sigexp_spec_strdesc_SOME_strdesc_arg
   (int_sigexp_spec_strdesc_SOME_strdesc $0))) $0))))
   (((= :strdesc -> strdesc -> bool)
   (int_sigexp_spec_strdesc_SOME_strdesc_arg
   int_sigexp_spec_strdesc_NONE_strdesc))
   ((@ :(strdesc -> bool) -> strdesc) (\(x :strdesc). T))))`),
 ((int_STRIDstrdesc_arg3_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp -> bool) -> bool) (\(x2 :sigexp).
   ((! :(strdesc_option_sigexp_spec_strdesc -> bool) -> bool)
   (\(x3 :strdesc_option_sigexp_spec_strdesc).
   (((= :strdesc_option_sigexp_spec_strdesc ->
         strdesc_option_sigexp_spec_strdesc -> bool)
   (int_STRIDstrdesc_arg3 (((int_STRIDstrdesc $2) $1) $0)))
   $0)))))))`),
 ((int_STRIDstrdesc_arg2_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp -> bool) -> bool) (\(x2 :sigexp).
   ((! :(strdesc_option_sigexp_spec_strdesc -> bool) -> bool)
   (\(x3 :strdesc_option_sigexp_spec_strdesc).
   (((= :sigexp -> sigexp -> bool) (int_STRIDstrdesc_arg2
   (((int_STRIDstrdesc $2) $1) $0))) $1)))))))`),
 ((int_STRIDstrdesc_arg1_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp -> bool) -> bool) (\(x2 :sigexp).
   ((! :(strdesc_option_sigexp_spec_strdesc -> bool) -> bool)
   (\(x3 :strdesc_option_sigexp_spec_strdesc).
   (((= :strid -> strid -> bool) (int_STRIDstrdesc_arg1
   (((int_STRIDstrdesc $2) $1) $0))) $2)))))))`),
 ((int_SEQspec_arg2_DEF),
  [],
  `((/\ ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :spec -> spec -> bool) (int_SEQspec_arg2 ((int_SEQspec $1)
   $0))) $0)))))) ((/\ ((! :(valdesc -> bool) -> bool)
   (\(x1 :valdesc). (((= :spec -> spec -> bool) (int_SEQspec_arg2
   (int_VALspec $0))) ((@ :(spec -> bool) -> spec) (\(x :spec).
   T)))))) ((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :spec -> spec -> bool) (int_SEQspec_arg2 (int_EXCEPTIONspec
   $0))) ((@ :(spec -> bool) -> spec) (\(x :spec). T)))))) ((/\
   ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   (((= :spec -> spec -> bool) (int_SEQspec_arg2 (int_STRUCTUREspec
   $0))) ((@ :(spec -> bool) -> spec) (\(x :spec). T)))))) ((/\
   ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :spec -> spec -> bool) (int_SEQspec_arg2 ((int_LOCALspec $1)
   $0))) ((@ :(spec -> bool) -> spec) (\(x :spec). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :spec -> spec -> bool)
   (int_SEQspec_arg2 (int_OPENspec $0))) ((@ :(spec -> bool) -> spec)
   (\(x :spec). T)))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :spec -> spec -> bool)
   (int_SEQspec_arg2 (int_INCLUDEspec $0)))
   ((@ :(spec -> bool) -> spec) (\(x :spec). T))))))
   (((= :spec -> spec -> bool) (int_SEQspec_arg2 int_EMPTYspec))
   ((@ :(spec -> bool) -> spec) (\(x :spec). T))))))))))`),
 ((int_SEQspec_arg1_DEF),
  [],
  `((/\ ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :spec -> spec -> bool) (int_SEQspec_arg1 ((int_SEQspec $1)
   $0))) $1)))))) ((/\ ((! :(valdesc -> bool) -> bool)
   (\(x1 :valdesc). (((= :spec -> spec -> bool) (int_SEQspec_arg1
   (int_VALspec $0))) ((@ :(spec -> bool) -> spec) (\(x :spec).
   T)))))) ((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :spec -> spec -> bool) (int_SEQspec_arg1 (int_EXCEPTIONspec
   $0))) ((@ :(spec -> bool) -> spec) (\(x :spec). T)))))) ((/\
   ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   (((= :spec -> spec -> bool) (int_SEQspec_arg1 (int_STRUCTUREspec
   $0))) ((@ :(spec -> bool) -> spec) (\(x :spec). T)))))) ((/\
   ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :spec -> spec -> bool) (int_SEQspec_arg1 ((int_LOCALspec $1)
   $0))) ((@ :(spec -> bool) -> spec) (\(x :spec). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :spec -> spec -> bool)
   (int_SEQspec_arg1 (int_OPENspec $0))) ((@ :(spec -> bool) -> spec)
   (\(x :spec). T)))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :spec -> spec -> bool)
   (int_SEQspec_arg1 (int_INCLUDEspec $0)))
   ((@ :(spec -> bool) -> spec) (\(x :spec). T))))))
   (((= :spec -> spec -> bool) (int_SEQspec_arg1 int_EMPTYspec))
   ((@ :(spec -> bool) -> spec) (\(x :spec). T))))))))))`),
 ((int_INCLUDEspec_arg_DEF),
  [],
  `((/\ ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist).
   (((= :sigid nonemptylist -> sigid nonemptylist -> bool)
   (int_INCLUDEspec_arg (int_INCLUDEspec $0))) $0)))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :sigid nonemptylist -> sigid nonemptylist -> bool)
   (int_INCLUDEspec_arg (int_VALspec $0)))
   ((@ :(sigid nonemptylist -> bool) -> sigid nonemptylist)
   (\(x :sigid nonemptylist). T)))))) ((/\
   ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :sigid nonemptylist -> sigid nonemptylist -> bool)
   (int_INCLUDEspec_arg (int_EXCEPTIONspec $0)))
   ((@ :(sigid nonemptylist -> bool) -> sigid nonemptylist)
   (\(x :sigid nonemptylist). T)))))) ((/\
   ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   (((= :sigid nonemptylist -> sigid nonemptylist -> bool)
   (int_INCLUDEspec_arg (int_STRUCTUREspec $0)))
   ((@ :(sigid nonemptylist -> bool) -> sigid nonemptylist)
   (\(x :sigid nonemptylist). T)))))) ((/\
   ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :sigid nonemptylist -> sigid nonemptylist -> bool)
   (int_INCLUDEspec_arg ((int_LOCALspec $1) $0)))
   ((@ :(sigid nonemptylist -> bool) -> sigid nonemptylist)
   (\(x :sigid nonemptylist). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :sigid nonemptylist -> sigid nonemptylist -> bool)
   (int_INCLUDEspec_arg (int_OPENspec $0)))
   ((@ :(sigid nonemptylist -> bool) -> sigid nonemptylist)
   (\(x :sigid nonemptylist). T)))))) ((/\
   (((= :sigid nonemptylist -> sigid nonemptylist -> bool)
   (int_INCLUDEspec_arg int_EMPTYspec))
   ((@ :(sigid nonemptylist -> bool) -> sigid nonemptylist)
   (\(x :sigid nonemptylist). T)))) ((! :(spec -> bool) -> bool)
   (\(x1 :spec). ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :sigid nonemptylist -> sigid nonemptylist -> bool)
   (int_INCLUDEspec_arg ((int_SEQspec $1) $0)))
   ((@ :(sigid nonemptylist -> bool) -> sigid nonemptylist)
   (\(x :sigid nonemptylist). T))))))))))))))`),
 ((int_OPENspec_arg_DEF),
  [],
  `((/\ ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENspec_arg (int_OPENspec $0))) $0)))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENspec_arg (int_VALspec $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))))) ((/\
   ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENspec_arg (int_EXCEPTIONspec $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))))) ((/\
   ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENspec_arg (int_STRUCTUREspec $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))))) ((/\
   ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENspec_arg ((int_LOCALspec $1) $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENspec_arg (int_INCLUDEspec $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))))) ((/\
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENspec_arg int_EMPTYspec))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T)))) ((! :(spec -> bool) -> bool)
   (\(x1 :spec). ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   (int_OPENspec_arg ((int_SEQspec $1) $0)))
   ((@ :(strid long nonemptylist -> bool) -> strid long nonemptylist)
   (\(x :strid long nonemptylist). T))))))))))))))`),
 ((int_LOCALspec_arg2_DEF),
  [],
  `((/\ ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :spec -> spec -> bool) (int_LOCALspec_arg2 ((int_LOCALspec $1)
   $0))) $0)))))) ((/\ ((! :(valdesc -> bool) -> bool)
   (\(x1 :valdesc). (((= :spec -> spec -> bool) (int_LOCALspec_arg2
   (int_VALspec $0))) ((@ :(spec -> bool) -> spec) (\(x :spec).
   T)))))) ((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :spec -> spec -> bool) (int_LOCALspec_arg2 (int_EXCEPTIONspec
   $0))) ((@ :(spec -> bool) -> spec) (\(x :spec). T)))))) ((/\
   ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   (((= :spec -> spec -> bool) (int_LOCALspec_arg2 (int_STRUCTUREspec
   $0))) ((@ :(spec -> bool) -> spec) (\(x :spec). T)))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :spec -> spec -> bool)
   (int_LOCALspec_arg2 (int_OPENspec $0)))
   ((@ :(spec -> bool) -> spec) (\(x :spec). T)))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :spec -> spec -> bool)
   (int_LOCALspec_arg2 (int_INCLUDEspec $0)))
   ((@ :(spec -> bool) -> spec) (\(x :spec). T)))))) ((/\
   (((= :spec -> spec -> bool) (int_LOCALspec_arg2 int_EMPTYspec))
   ((@ :(spec -> bool) -> spec) (\(x :spec). T))))
   ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :spec -> spec -> bool) (int_LOCALspec_arg2 ((int_SEQspec $1)
   $0))) ((@ :(spec -> bool) -> spec) (\(x :spec). T))))))))))))))`),
 ((int_LOCALspec_arg1_DEF),
  [],
  `((/\ ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :spec -> spec -> bool) (int_LOCALspec_arg1 ((int_LOCALspec $1)
   $0))) $1)))))) ((/\ ((! :(valdesc -> bool) -> bool)
   (\(x1 :valdesc). (((= :spec -> spec -> bool) (int_LOCALspec_arg1
   (int_VALspec $0))) ((@ :(spec -> bool) -> spec) (\(x :spec).
   T)))))) ((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :spec -> spec -> bool) (int_LOCALspec_arg1 (int_EXCEPTIONspec
   $0))) ((@ :(spec -> bool) -> spec) (\(x :spec). T)))))) ((/\
   ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   (((= :spec -> spec -> bool) (int_LOCALspec_arg1 (int_STRUCTUREspec
   $0))) ((@ :(spec -> bool) -> spec) (\(x :spec). T)))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :spec -> spec -> bool)
   (int_LOCALspec_arg1 (int_OPENspec $0)))
   ((@ :(spec -> bool) -> spec) (\(x :spec). T)))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :spec -> spec -> bool)
   (int_LOCALspec_arg1 (int_INCLUDEspec $0)))
   ((@ :(spec -> bool) -> spec) (\(x :spec). T)))))) ((/\
   (((= :spec -> spec -> bool) (int_LOCALspec_arg1 int_EMPTYspec))
   ((@ :(spec -> bool) -> spec) (\(x :spec). T))))
   ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :spec -> spec -> bool) (int_LOCALspec_arg1 ((int_SEQspec $1)
   $0))) ((@ :(spec -> bool) -> spec) (\(x :spec). T))))))))))))))`),
 ((int_STRUCTUREspec_arg_DEF),
  [],
  `((/\ ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   (((= :strdesc -> strdesc -> bool) (int_STRUCTUREspec_arg
   (int_STRUCTUREspec $0))) $0)))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :strdesc -> strdesc -> bool) (int_STRUCTUREspec_arg
   (int_VALspec $0))) ((@ :(strdesc -> bool) -> strdesc)
   (\(x :strdesc). T)))))) ((/\ ((! :(exdesc -> bool) -> bool)
   (\(x1 :exdesc). (((= :strdesc -> strdesc -> bool)
   (int_STRUCTUREspec_arg (int_EXCEPTIONspec $0)))
   ((@ :(strdesc -> bool) -> strdesc) (\(x :strdesc). T)))))) ((/\
   ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :strdesc -> strdesc -> bool) (int_STRUCTUREspec_arg
   ((int_LOCALspec $1) $0))) ((@ :(strdesc -> bool) -> strdesc)
   (\(x :strdesc). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :strdesc -> strdesc -> bool)
   (int_STRUCTUREspec_arg (int_OPENspec $0)))
   ((@ :(strdesc -> bool) -> strdesc) (\(x :strdesc). T)))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :strdesc -> strdesc -> bool)
   (int_STRUCTUREspec_arg (int_INCLUDEspec $0)))
   ((@ :(strdesc -> bool) -> strdesc) (\(x :strdesc). T)))))) ((/\
   (((= :strdesc -> strdesc -> bool) (int_STRUCTUREspec_arg
   int_EMPTYspec)) ((@ :(strdesc -> bool) -> strdesc) (\(x :strdesc).
   T)))) ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :strdesc -> strdesc -> bool) (int_STRUCTUREspec_arg
   ((int_SEQspec $1) $0))) ((@ :(strdesc -> bool) -> strdesc)
   (\(x :strdesc). T))))))))))))))`),
 ((int_EXCEPTIONspec_arg_DEF),
  [],
  `((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :exdesc -> exdesc -> bool) (int_EXCEPTIONspec_arg
   (int_EXCEPTIONspec $0))) $0)))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :exdesc -> exdesc -> bool) (int_EXCEPTIONspec_arg (int_VALspec
   $0))) ((@ :(exdesc -> bool) -> exdesc) (\(x :exdesc). T)))))) ((/\
   ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   (((= :exdesc -> exdesc -> bool) (int_EXCEPTIONspec_arg
   (int_STRUCTUREspec $0))) ((@ :(exdesc -> bool) -> exdesc)
   (\(x :exdesc). T)))))) ((/\ ((! :(spec -> bool) -> bool)
   (\(x1 :spec). ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :exdesc -> exdesc -> bool) (int_EXCEPTIONspec_arg
   ((int_LOCALspec $1) $0))) ((@ :(exdesc -> bool) -> exdesc)
   (\(x :exdesc). T)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :exdesc -> exdesc -> bool)
   (int_EXCEPTIONspec_arg (int_OPENspec $0)))
   ((@ :(exdesc -> bool) -> exdesc) (\(x :exdesc). T)))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :exdesc -> exdesc -> bool)
   (int_EXCEPTIONspec_arg (int_INCLUDEspec $0)))
   ((@ :(exdesc -> bool) -> exdesc) (\(x :exdesc). T)))))) ((/\
   (((= :exdesc -> exdesc -> bool) (int_EXCEPTIONspec_arg
   int_EMPTYspec)) ((@ :(exdesc -> bool) -> exdesc) (\(x :exdesc).
   T)))) ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :exdesc -> exdesc -> bool) (int_EXCEPTIONspec_arg
   ((int_SEQspec $1) $0))) ((@ :(exdesc -> bool) -> exdesc)
   (\(x :exdesc). T))))))))))))))`),
 ((int_VALspec_arg_DEF),
  [],
  `((/\ ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :valdesc -> valdesc -> bool) (int_VALspec_arg (int_VALspec
   $0))) $0)))) ((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :valdesc -> valdesc -> bool) (int_VALspec_arg
   (int_EXCEPTIONspec $0))) ((@ :(valdesc -> bool) -> valdesc)
   (\(x :valdesc). T)))))) ((/\ ((! :(strdesc -> bool) -> bool)
   (\(x1 :strdesc). (((= :valdesc -> valdesc -> bool) (int_VALspec_arg
   (int_STRUCTUREspec $0))) ((@ :(valdesc -> bool) -> valdesc)
   (\(x :valdesc). T)))))) ((/\ ((! :(spec -> bool) -> bool)
   (\(x1 :spec). ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :valdesc -> valdesc -> bool) (int_VALspec_arg ((int_LOCALspec
   $1) $0))) ((@ :(valdesc -> bool) -> valdesc) (\(x :valdesc).
   T)))))))) ((/\ ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :valdesc -> valdesc -> bool)
   (int_VALspec_arg (int_OPENspec $0)))
   ((@ :(valdesc -> bool) -> valdesc) (\(x :valdesc). T)))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :valdesc -> valdesc -> bool)
   (int_VALspec_arg (int_INCLUDEspec $0)))
   ((@ :(valdesc -> bool) -> valdesc) (\(x :valdesc). T)))))) ((/\
   (((= :valdesc -> valdesc -> bool) (int_VALspec_arg int_EMPTYspec))
   ((@ :(valdesc -> bool) -> valdesc) (\(x :valdesc). T))))
   ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :valdesc -> valdesc -> bool) (int_VALspec_arg ((int_SEQspec
   $1) $0))) ((@ :(valdesc -> bool) -> valdesc) (\(x :valdesc).
   T))))))))))))))`),
 ((int_SIGIDsigexp_arg_DEF),
  [],
  `((/\ ((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   (((= :sigid -> sigid -> bool) (int_SIGIDsigexp_arg (int_SIGIDsigexp
   $0))) $0)))) ((! :(spec -> bool) -> bool) (\(x1 :spec).
   (((= :sigid -> sigid -> bool) (int_SIGIDsigexp_arg (int_SIGsigexp
   $0))) ((@ :(sigid -> bool) -> sigid) (\(x :sigid). T))))))`),
 ((int_SIGsigexp_arg_DEF),
  [],
  `((/\ ((! :(spec -> bool) -> bool) (\(x1 :spec).
   (((= :spec -> spec -> bool) (int_SIGsigexp_arg (int_SIGsigexp $0)))
   $0)))) ((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   (((= :spec -> spec -> bool) (int_SIGsigexp_arg (int_SIGIDsigexp
   $0))) ((@ :(spec -> bool) -> spec) (\(x :spec). T))))))`),
 ((dist_aux_ftn_sigexp_DEF),
  [],
  `((/\ ((! :(spec -> bool) -> bool) (\(x1 :spec).
   (((= :num -> num -> bool) (dist_aux_ftn_sigexp (int_SIGsigexp $0)))
   0)))) ((/\ ((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   (((= :num -> num -> bool) (dist_aux_ftn_sigexp (int_SIGIDsigexp
   $0))) 1)))) ((/\ ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :num -> num -> bool) (dist_aux_ftn_spec (int_VALspec $0)))
   2)))) ((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :num -> num -> bool) (dist_aux_ftn_spec (int_EXCEPTIONspec
   $0))) 3)))) ((/\ ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   (((= :num -> num -> bool) (dist_aux_ftn_spec (int_STRUCTUREspec
   $0))) 4)))) ((/\ ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :num -> num -> bool) (dist_aux_ftn_spec ((int_LOCALspec $1)
   $0))) 5)))))) ((/\ ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :num -> num -> bool)
   (dist_aux_ftn_spec (int_OPENspec $0))) 6)))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :num -> num -> bool)
   (dist_aux_ftn_spec (int_INCLUDEspec $0))) 7)))) ((/\
   (((= :num -> num -> bool) (dist_aux_ftn_spec int_EMPTYspec)) 8))
   ((/\ ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :num -> num -> bool) (dist_aux_ftn_spec ((int_SEQspec $1)
   $0))) 9)))))) ((/\ ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp -> bool) -> bool) (\(x2 :sigexp).
   ((! :(strdesc_option_sigexp_spec_strdesc -> bool) -> bool)
   (\(x3 :strdesc_option_sigexp_spec_strdesc).
   (((= :num -> num -> bool) (dist_aux_ftn_strdesc (((int_STRIDstrdesc
   $2) $1) $0))) 10)))))))) ((/\ (((= :num -> num -> bool)
   (dist_aux_ftn_strdesc_option_sigexp_spec_strdesc
   int_sigexp_spec_strdesc_NONE_strdesc)) 11))
   ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   (((= :num -> num -> bool)
   (dist_aux_ftn_strdesc_option_sigexp_spec_strdesc
   (int_sigexp_spec_strdesc_SOME_strdesc $0))) 12)))))))))))))))`),
 ((STRIDstrdesc),
  [],
  `(((= :(strid -> sigexp -> strdesc option -> strdesc) ->
         (strid -> sigexp -> strdesc option -> strdesc) -> bool)
   STRIDstrdesc) (\(x0 :strid). (\(x1 :sigexp).
   (\(x2 :strdesc option). (((int_STRIDstrdesc $2) $1)
   (int_inj_strdesc_option_sigexp_spec_strdesc $0))))))`),
 ((int_inv_strdesc_option_sigexp_spec_strdesc),
  [],
  `((/\ (((= :strdesc option -> strdesc option -> bool)
   (int_inv_strdesc_option_sigexp_spec_strdesc
   int_sigexp_spec_strdesc_NONE_strdesc)) (NONE :strdesc option)))
   ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   (((= :strdesc option -> strdesc option -> bool)
   (int_inv_strdesc_option_sigexp_spec_strdesc
   (int_sigexp_spec_strdesc_SOME_strdesc $0)))
   ((SOME :strdesc -> strdesc option) $0)))))`),
 ((int_inj_strdesc_option_sigexp_spec_strdesc),
  [],
  `((/\
   (((= :strdesc_option_sigexp_spec_strdesc ->
         strdesc_option_sigexp_spec_strdesc -> bool)
   (int_inj_strdesc_option_sigexp_spec_strdesc
   (NONE :strdesc option))) int_sigexp_spec_strdesc_NONE_strdesc))
   ((! :(strdesc -> bool) -> bool) (\(x0 :strdesc).
   (((= :strdesc_option_sigexp_spec_strdesc ->
         strdesc_option_sigexp_spec_strdesc -> bool)
   (int_inj_strdesc_option_sigexp_spec_strdesc
   ((SOME :strdesc -> strdesc option) $0)))
   (int_sigexp_spec_strdesc_SOME_strdesc $0)))))`),
 ((SEQspec),
  [],
  `(((= :(spec -> spec -> spec) -> (spec -> spec -> spec) -> bool)
   SEQspec) (\(x0 :spec). (\(x1 :spec). ((int_SEQspec $1) $0))))`),
 ((EMPTYspec),
  [],
  `(((= :spec -> spec -> bool) EMPTYspec) int_EMPTYspec)`),
 ((INCLUDEspec),
  [],
  `(((= :(sigid nonemptylist -> spec) ->
         (sigid nonemptylist -> spec) -> bool) INCLUDEspec)
   (\(x0 :sigid nonemptylist). (int_INCLUDEspec $0)))`),
 ((OPENspec),
  [],
  `(((= :(strid long nonemptylist -> spec) ->
         (strid long nonemptylist -> spec) -> bool) OPENspec)
   (\(x0 :strid long nonemptylist). (int_OPENspec $0)))`),
 ((LOCALspec),
  [],
  `(((= :(spec -> spec -> spec) -> (spec -> spec -> spec) -> bool)
   LOCALspec) (\(x0 :spec). (\(x1 :spec). ((int_LOCALspec $1)
   $0))))`),
 ((STRUCTUREspec),
  [],
  `(((= :(strdesc -> spec) -> (strdesc -> spec) -> bool)
   STRUCTUREspec) (\(x0 :strdesc). (int_STRUCTUREspec $0)))`),
 ((EXCEPTIONspec),
  [],
  `(((= :(exdesc -> spec) -> (exdesc -> spec) -> bool) EXCEPTIONspec)
   (\(x0 :exdesc). (int_EXCEPTIONspec $0)))`),
 ((VALspec),
  [],
  `(((= :(valdesc -> spec) -> (valdesc -> spec) -> bool) VALspec)
   (\(x0 :valdesc). (int_VALspec $0)))`),
 ((SIGIDsigexp),
  [],
  `(((= :(sigid -> sigexp) -> (sigid -> sigexp) -> bool) SIGIDsigexp)
   (\(x0 :sigid). (int_SIGIDsigexp $0)))`),
 ((SIGsigexp),
  [],
  `(((= :(spec -> sigexp) -> (spec -> sigexp) -> bool) SIGsigexp)
   (\(x0 :spec). (int_SIGsigexp $0)))`),
 ((int_sigexp_spec_strdesc_SOME_strdesc_DEF),
  [],
  `((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   (((= :strdesc_option_sigexp_spec_strdesc ->
         strdesc_option_sigexp_spec_strdesc -> bool)
   (int_sigexp_spec_strdesc_SOME_strdesc $0))
   (strdesc_option_sigexp_spec_strdesc_abs
   (JOINT_int_sigexp_spec_strdesc_SOME_strdesc (strdesc_rep
   $0))))))`),
 ((int_sigexp_spec_strdesc_NONE_strdesc_DEF),
  [],
  `(((= :strdesc_option_sigexp_spec_strdesc ->
         strdesc_option_sigexp_spec_strdesc -> bool)
   int_sigexp_spec_strdesc_NONE_strdesc)
   (strdesc_option_sigexp_spec_strdesc_abs
   JOINT_int_sigexp_spec_strdesc_NONE_strdesc))`),
 ((int_STRIDstrdesc_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp -> bool) -> bool) (\(x2 :sigexp).
   ((! :(strdesc_option_sigexp_spec_strdesc -> bool) -> bool)
   (\(x3 :strdesc_option_sigexp_spec_strdesc).
   (((= :strdesc -> strdesc -> bool) (((int_STRIDstrdesc $2) $1) $0))
   (strdesc_abs (((JOINT_int_STRIDstrdesc $2) (sigexp_rep $1))
   (strdesc_option_sigexp_spec_strdesc_rep $0))))))))))`),
 ((int_SEQspec_DEF),
  [],
  `((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :spec -> spec -> bool) ((int_SEQspec $1) $0)) (spec_abs
   ((JOINT_int_SEQspec (spec_rep $1)) (spec_rep $0))))))))`),
 ((int_EMPTYspec_DEF),
  [],
  `(((= :spec -> spec -> bool) int_EMPTYspec) (spec_abs
   JOINT_int_EMPTYspec))`),
 ((int_INCLUDEspec_DEF),
  [],
  `((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :spec -> spec -> bool)
   (int_INCLUDEspec $0)) (spec_abs (JOINT_int_INCLUDEspec $0)))))`),
 ((int_OPENspec_DEF),
  [],
  `((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :spec -> spec -> bool)
   (int_OPENspec $0)) (spec_abs (JOINT_int_OPENspec $0)))))`),
 ((int_LOCALspec_DEF),
  [],
  `((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   (((= :spec -> spec -> bool) ((int_LOCALspec $1) $0)) (spec_abs
   ((JOINT_int_LOCALspec (spec_rep $1)) (spec_rep $0))))))))`),
 ((int_STRUCTUREspec_DEF),
  [],
  `((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   (((= :spec -> spec -> bool) (int_STRUCTUREspec $0)) (spec_abs
   (JOINT_int_STRUCTUREspec (strdesc_rep $0))))))`),
 ((int_EXCEPTIONspec_DEF),
  [],
  `((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :spec -> spec -> bool) (int_EXCEPTIONspec $0)) (spec_abs
   (JOINT_int_EXCEPTIONspec $0)))))`),
 ((int_VALspec_DEF),
  [],
  `((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :spec -> spec -> bool) (int_VALspec $0)) (spec_abs
   (JOINT_int_VALspec $0)))))`),
 ((int_SIGIDsigexp_DEF),
  [],
  `((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   (((= :sigexp -> sigexp -> bool) (int_SIGIDsigexp $0)) (sigexp_abs
   (JOINT_int_SIGIDsigexp $0)))))`),
 ((int_SIGsigexp_DEF),
  [],
  `((! :(spec -> bool) -> bool) (\(x1 :spec).
   (((= :sigexp -> sigexp -> bool) (int_SIGsigexp $0)) (sigexp_abs
   (JOINT_int_SIGsigexp (spec_rep $0))))))`),
 ((sigexp_REP_ABS),
  [],
  `((/\ ((! :(sigexp -> bool) -> bool) (\(a :sigexp).
   (((= :sigexp -> sigexp -> bool) (sigexp_abs (sigexp_rep $0)))
   $0))))
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(r :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   $0)) 1)) $0))
   (((= :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         bool) (sigexp_rep (sigexp_abs $0))) $0)))))`),
 ((sigexp_TY_DEF),
  [],
  `((? :((sigexp ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc) ->
        bool) -> bool)
   (\(rep :sigexp ->
           joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((TYPE_DEFINITION :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
                       bool) ->
                       (sigexp ->
                       joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc) ->
                       bool)
   (\(x :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   $0)) 1))) $0)))`),
 ((spec_REP_ABS),
  [],
  `((/\ ((! :(spec -> bool) -> bool) (\(a :spec).
   (((= :spec -> spec -> bool) (spec_abs (spec_rep $0))) $0))))
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(r :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   $0)) 2)) $0))
   (((= :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         bool) (spec_rep (spec_abs $0))) $0)))))`),
 ((spec_TY_DEF),
  [],
  `((? :((spec ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc) ->
        bool) -> bool)
   (\(rep :spec ->
           joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((TYPE_DEFINITION :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
                       bool) ->
                       (spec ->
                       joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc) ->
                       bool)
   (\(x :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   $0)) 2))) $0)))`),
 ((strdesc_option_sigexp_spec_strdesc_REP_ABS),
  [],
  `((/\ ((! :(strdesc_option_sigexp_spec_strdesc -> bool) -> bool)
   (\(a :strdesc_option_sigexp_spec_strdesc).
   (((= :strdesc_option_sigexp_spec_strdesc ->
         strdesc_option_sigexp_spec_strdesc -> bool)
   (strdesc_option_sigexp_spec_strdesc_abs
   (strdesc_option_sigexp_spec_strdesc_rep $0))) $0))))
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(r :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   $0)) 4)) $0))
   (((= :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         bool) (strdesc_option_sigexp_spec_strdesc_rep
   (strdesc_option_sigexp_spec_strdesc_abs $0))) $0)))))`),
 ((strdesc_option_sigexp_spec_strdesc_TY_DEF),
  [],
  `((? :((strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc) ->
        bool) -> bool)
   (\(rep :strdesc_option_sigexp_spec_strdesc ->
           joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((TYPE_DEFINITION :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
                       bool) ->
                       (strdesc_option_sigexp_spec_strdesc ->
                       joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc) ->
                       bool)
   (\(x :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   $0)) 4))) $0)))`),
 ((strdesc_REP_ABS),
  [],
  `((/\ ((! :(strdesc -> bool) -> bool) (\(a :strdesc).
   (((= :strdesc -> strdesc -> bool) (strdesc_abs (strdesc_rep $0)))
   $0))))
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(r :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :bool -> bool -> bool)
   ((\(x :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   $0)) 3)) $0))
   (((= :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         bool) (strdesc_rep (strdesc_abs $0))) $0)))))`),
 ((strdesc_TY_DEF),
  [],
  `((? :((strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc) ->
        bool) -> bool)
   (\(rep :strdesc ->
           joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((TYPE_DEFINITION :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
                       bool) ->
                       (strdesc ->
                       joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc) ->
                       bool)
   (\(x :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   $0)) 3))) $0)))`),
 ((joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select_DEF),
  [],
  `((/\
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   (JOINT_int_SIGsigexp $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   $0)) 2)) 1) 0))))) ((/\ ((! :(sigid -> bool) -> bool) (\(s :sigid).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   (JOINT_int_SIGIDsigexp $0))) 1)))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(v' :valdesc).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   (JOINT_int_VALspec $0))) 2)))) ((/\ ((! :(exdesc -> bool) -> bool)
   (\(e :exdesc). (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   (JOINT_int_EXCEPTIONspec $0))) 2)))) ((/\
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   (JOINT_int_STRUCTUREspec $0))) ((((COND :bool -> num -> num -> num)
   (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   $0)) 3)) 2) 0))))) ((/\
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   ((JOINT_int_LOCALspec $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   $1)) 2)) (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   $0)) 2))) 2) 0))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist). (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   (JOINT_int_OPENspec $0))) 2)))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(n :sigid nonemptylist). (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   (JOINT_int_INCLUDEspec $0))) 2)))) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   JOINT_int_EMPTYspec)) 2)) ((/\
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   ((JOINT_int_SEQspec $1) $0))) ((((COND :bool -> num -> num -> num)
   ((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   $1)) 2)) (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   $0)) 2))) 2) 0))))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(s :strid).
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   (((JOINT_int_STRIDstrdesc $2) $1) $0)))
   ((((COND :bool -> num -> num -> num) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   $1)) 1)) (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   $0)) 4))) 3) 0))))))))) ((/\ (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   JOINT_int_sigexp_spec_strdesc_NONE_strdesc)) 4))
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   (JOINT_int_sigexp_spec_strdesc_SOME_strdesc $0)))
   ((((COND :bool -> num -> num -> num) (((= :num -> num -> bool)
   (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_select
   $0)) 3)) 4) 0))))))))))))))))`),
 ((JOINT_int_sigexp_spec_strdesc_SOME_strdesc_DEF),
  [],
  `((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         bool) (JOINT_int_sigexp_spec_strdesc_SOME_strdesc $0))
   (ABS_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INR :sigid nonemptylist + one + one + strid + one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :one + one + strid + one + one ->
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid + one + one -> one + one + strid + one + one)
   ((INR :strid + one + one -> one + strid + one + one)
   ((INR :one + one -> strid + one + one) ((INR :one -> one + one)
   one)))))))))))))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list)
   (REP_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   $0))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one) ltree list)))))))`),
 ((JOINT_int_sigexp_spec_strdesc_NONE_strdesc_DEF),
  [],
  `(((= :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         bool) JOINT_int_sigexp_spec_strdesc_NONE_strdesc)
   (ABS_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INR :sigid nonemptylist + one + one + strid + one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :one + one + strid + one + one ->
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid + one + one -> one + one + strid + one + one)
   ((INR :strid + one + one -> one + strid + one + one)
   ((INR :one + one -> strid + one + one) ((INL :one -> one + one)
   one)))))))))))))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one) ltree list))))`),
 ((JOINT_int_STRIDstrdesc_DEF),
  [],
  `((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         bool) (((JOINT_int_STRIDstrdesc $2) $1) $0))
   (ABS_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INR :sigid nonemptylist + one + one + strid + one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :one + one + strid + one + one ->
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid + one + one -> one + one + strid + one + one)
   ((INR :strid + one + one -> one + strid + one + one)
   ((INL :strid -> strid + one + one) $2))))))))))))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list)
   (REP_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   $1))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list)
   (REP_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   $0))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one) ltree list))))))))))))`),
 ((JOINT_int_SEQspec_DEF),
  [],
  `((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         bool) ((JOINT_int_SEQspec $1) $0))
   (ABS_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INR :sigid nonemptylist + one + one + strid + one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :one + one + strid + one + one ->
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid + one + one -> one + one + strid + one + one)
   ((INL :one -> one + strid + one + one) one)))))))))))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list)
   (REP_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   $1))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list)
   (REP_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   $0))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one) ltree list))))))))))`),
 ((JOINT_int_EMPTYspec_DEF),
  [],
  `(((= :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         bool) JOINT_int_EMPTYspec)
   (ABS_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INR :sigid nonemptylist + one + one + strid + one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :one + one + strid + one + one ->
          sigid nonemptylist + one + one + strid + one + one)
   ((INL :one -> one + one + strid + one + one) one))))))))))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one) ltree list))))`),
 ((JOINT_int_INCLUDEspec_DEF),
  [],
  `((! :(sigid nonemptylist -> bool) -> bool)
   (\(n :sigid nonemptylist).
   (((= :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         bool) (JOINT_int_INCLUDEspec $0))
   (ABS_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INR :sigid nonemptylist + one + one + strid + one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INL :sigid nonemptylist ->
          sigid nonemptylist + one + one + strid + one + one)
   $0)))))))))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one) ltree list))))))`),
 ((JOINT_int_OPENspec_DEF),
  [],
  `((! :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist).
   (((= :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         bool) (JOINT_int_OPENspec $0))
   (ABS_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INL :strid long nonemptylist ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one) $0))))))))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one) ltree list))))))`),
 ((JOINT_int_LOCALspec_DEF),
  [],
  `((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         bool) ((JOINT_int_LOCALspec $1) $0))
   (ABS_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INL :one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one) one)))))))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list)
   (REP_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   $1))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list)
   (REP_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   $0))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one) ltree list))))))))))`),
 ((JOINT_int_STRUCTUREspec_DEF),
  [],
  `((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         bool) (JOINT_int_STRUCTUREspec $0))
   (ABS_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INL :one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one) one))))))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list)
   (REP_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   $0))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one) ltree list)))))))`),
 ((JOINT_int_EXCEPTIONspec_DEF),
  [],
  `((! :(exdesc -> bool) -> bool) (\(e :exdesc).
   (((= :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         bool) (JOINT_int_EXCEPTIONspec $0))
   (ABS_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INL :exdesc ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one) $0)))))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one) ltree list))))))`),
 ((JOINT_int_VALspec_DEF),
  [],
  `((! :(valdesc -> bool) -> bool) (\(v' :valdesc).
   (((= :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         bool) (JOINT_int_VALspec $0))
   (ABS_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INL :valdesc ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one) $0))))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one) ltree list))))))`),
 ((JOINT_int_SIGIDsigexp_DEF),
  [],
  `((! :(sigid -> bool) -> bool) (\(s :sigid).
   (((= :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         bool) (JOINT_int_SIGIDsigexp $0))
   (ABS_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INL :sigid ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one) $0)))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one) ltree list))))))`),
 ((JOINT_int_SIGsigexp_DEF),
  [],
  `((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         bool) (JOINT_int_SIGsigexp $0))
   (ABS_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   (((Node :one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree)
   ((INL :one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one) one))
   (((CONS :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list ->
            (one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one) ltree list)
   (REP_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   $0))
   (NIL :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one) ltree list)))))))`),
 ((joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_ISO_DEF),
  [],
  `((/\
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(a :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         bool)
   (ABS_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   (REP_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   $0))) $0))))
   ((! :((one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one) ltree -> bool) -> bool)
   (\(r :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one) ltree). (((= :bool -> bool -> bool)
   (((TRP :(one + sigid + valdesc + exdesc + one + one +
            strid long nonemptylist + sigid nonemptylist + one + one +
            strid + one + one ->
           (one + sigid + valdesc + exdesc + one + one +
           strid long nonemptylist + sigid nonemptylist + one + one +
           strid + one + one) ltree list -> bool) ->
           (one + sigid + valdesc + exdesc + one + one +
           strid long nonemptylist + sigid nonemptylist + one + one +
           strid + one + one) ltree -> bool)
   (\(v :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one).
   (\(tl :(one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one) ltree list). ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $1)
   ((INL :one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one) one))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) (SUC
   0)))) ((\/ ((/\ ((? :(sigid -> bool) -> bool) (\(s :sigid).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INL :sigid ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one) $0)))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) 0)))
   ((\/ ((/\ ((? :(valdesc -> bool) -> bool) (\(v :valdesc).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INL :valdesc ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   $0))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) 0)))
   ((\/ ((/\ ((? :(exdesc -> bool) -> bool) (\(e :exdesc).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INL :exdesc ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   $0)))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) 0)))
   ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INL :one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one) one)))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) (SUC
   0)))) ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INL :one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one) one))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) (SUC
   (SUC 0))))) ((\/ ((/\
   ((? :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INL :strid long nonemptylist ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one) $0))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) 0)))
   ((\/ ((/\ ((? :(sigid nonemptylist -> bool) -> bool)
   (\(n :sigid nonemptylist).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INR :sigid nonemptylist + one + one + strid + one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INL :sigid nonemptylist ->
          sigid nonemptylist + one + one + strid + one + one)
   $0)))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) 0)))
   ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INR :sigid nonemptylist + one + one + strid + one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :one + one + strid + one + one ->
          sigid nonemptylist + one + one + strid + one + one)
   ((INL :one -> one + one + strid + one + one) one)))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) 0)))
   ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INR :sigid nonemptylist + one + one + strid + one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :one + one + strid + one + one ->
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid + one + one -> one + one + strid + one + one)
   ((INL :one -> one + strid + one + one) one))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) (SUC
   (SUC 0))))) ((\/ ((/\ ((? :(strid -> bool) -> bool) (\(s :strid).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INR :sigid nonemptylist + one + one + strid + one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :one + one + strid + one + one ->
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid + one + one -> one + one + strid + one + one)
   ((INR :strid + one + one -> one + strid + one + one)
   ((INL :strid -> strid + one + one) $0)))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) (SUC
   (SUC 0))))) ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INR :sigid nonemptylist + one + one + strid + one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :one + one + strid + one + one ->
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid + one + one -> one + one + strid + one + one)
   ((INR :strid + one + one -> one + strid + one + one)
   ((INR :one + one -> strid + one + one) ((INL :one -> one + one)
   one)))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) 0)))
   ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INR :sigid nonemptylist + one + one + strid + one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :one + one + strid + one + one ->
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid + one + one -> one + one + strid + one + one)
   ((INR :strid + one + one -> one + strid + one + one)
   ((INR :one + one -> strid + one + one) ((INR :one -> one + one)
   one)))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) (SUC
   0)))))))))))))))))) $0))
   (((= :(one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one) ltree ->
         (one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one) ltree -> bool)
   (REP_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   (ABS_joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc
   $0))) $0)))))`),
 ((joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_TY_DEF),
  [],
  `((? :((joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         (one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one) ltree) -> bool) -> bool)
   (\(rep :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
           (one + sigid + valdesc + exdesc + one + one +
           strid long nonemptylist + sigid nonemptylist + one + one +
           strid + one + one) ltree).
   (((TYPE_DEFINITION :((one + sigid + valdesc + exdesc + one + one +
                        strid long nonemptylist + sigid nonemptylist +
                        one + one + strid + one + one) ltree ->
                       bool) ->
                       (joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
                       (one + sigid + valdesc + exdesc + one + one +
                       strid long nonemptylist + sigid nonemptylist +
                       one + one + strid + one + one) ltree) -> bool)
   ((TRP :(one + sigid + valdesc + exdesc + one + one +
           strid long nonemptylist + sigid nonemptylist + one + one +
           strid + one + one ->
          (one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one) ltree list -> bool) ->
          (one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one) ltree -> bool)
   (\(v :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one).
   (\(tl :(one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one) ltree list). ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $1)
   ((INL :one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one) one))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) (SUC
   0)))) ((\/ ((/\ ((? :(sigid -> bool) -> bool) (\(s :sigid).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INL :sigid ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one) $0)))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) 0)))
   ((\/ ((/\ ((? :(valdesc -> bool) -> bool) (\(v :valdesc).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INL :valdesc ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   $0))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) 0)))
   ((\/ ((/\ ((? :(exdesc -> bool) -> bool) (\(e :exdesc).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INL :exdesc ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   $0)))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) 0)))
   ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INL :one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one) one)))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) (SUC
   0)))) ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INL :one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one) one))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) (SUC
   (SUC 0))))) ((\/ ((/\
   ((? :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INL :strid long nonemptylist ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one) $0))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) 0)))
   ((\/ ((/\ ((? :(sigid nonemptylist -> bool) -> bool)
   (\(n :sigid nonemptylist).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INR :sigid nonemptylist + one + one + strid + one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INL :sigid nonemptylist ->
          sigid nonemptylist + one + one + strid + one + one)
   $0)))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) 0)))
   ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INR :sigid nonemptylist + one + one + strid + one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :one + one + strid + one + one ->
          sigid nonemptylist + one + one + strid + one + one)
   ((INL :one -> one + one + strid + one + one) one)))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) 0)))
   ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INR :sigid nonemptylist + one + one + strid + one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :one + one + strid + one + one ->
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid + one + one -> one + one + strid + one + one)
   ((INL :one -> one + strid + one + one) one))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) (SUC
   (SUC 0))))) ((\/ ((/\ ((? :(strid -> bool) -> bool) (\(s :strid).
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $2)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INR :sigid nonemptylist + one + one + strid + one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :one + one + strid + one + one ->
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid + one + one -> one + one + strid + one + one)
   ((INR :strid + one + one -> one + strid + one + one)
   ((INL :strid -> strid + one + one) $0)))))))))))))))
   (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) (SUC
   (SUC 0))))) ((\/ ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INR :sigid nonemptylist + one + one + strid + one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :one + one + strid + one + one ->
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid + one + one -> one + one + strid + one + one)
   ((INR :strid + one + one -> one + strid + one + one)
   ((INR :one + one -> strid + one + one) ((INL :one -> one + one)
   one)))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) 0)))
   ((/\
   (((= :one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one ->
         one + sigid + valdesc + exdesc + one + one +
         strid long nonemptylist + sigid nonemptylist + one + one +
         strid + one + one -> bool) $1)
   ((INR :sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          sigid + valdesc + exdesc + one + one +
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one ->
          valdesc + exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one ->
          exdesc + one + one + strid long nonemptylist +
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one ->
          one + one + strid long nonemptylist + sigid nonemptylist +
          one + one + strid + one + one)
   ((INR :strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one ->
          one + strid long nonemptylist + sigid nonemptylist + one +
          one + strid + one + one)
   ((INR :sigid nonemptylist + one + one + strid + one + one ->
          strid long nonemptylist + sigid nonemptylist + one + one +
          strid + one + one)
   ((INR :one + one + strid + one + one ->
          sigid nonemptylist + one + one + strid + one + one)
   ((INR :one + strid + one + one -> one + one + strid + one + one)
   ((INR :strid + one + one -> one + strid + one + one)
   ((INR :one + one -> strid + one + one) ((INR :one -> one + one)
   one)))))))))))))) (((= :num -> num -> bool)
   ((LENGTH :(one + sigid + valdesc + exdesc + one + one +
             strid long nonemptylist + sigid nonemptylist + one +
             one + strid + one + one) ltree list -> num) $0)) (SUC
   0))))))))))))))))))) $0)))`)]
theorems =
[((eval_topdec_induction_thm),
  [],
  `((! :((topdec -> state -> basis -> state -> basis_pack -> bool) ->
        bool) -> bool)
   (\(P :topdec -> state -> basis -> state -> basis_pack -> bool).
   ((==> ((/\ ((! :(strdec -> bool) -> bool) (\(strdec :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(env -> bool) -> bool) (\(E :env). ((==> (((((eval_strdec $4)
   $3) $2) $1) (ENVep $0))) ((((($5 (STRDEC $4)) $3) $2) $1) (BASISbp
   (env_in_basis $0))))))))))))))) ((/\ ((! :(strdec -> bool) -> bool)
   (\(strdec :strdec). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(pack -> bool) -> bool) (\(p :pack). ((==> (((((eval_strdec
   $4) $3) $2) $1) (PACKep $0))) ((((($5 (STRDEC $4)) $3) $2) $1)
   (PACKbp $0)))))))))))))) ((/\ ((! :(sigdec -> bool) -> bool)
   (\(sigdec :sigdec). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv -> bool) -> bool) (\(G :sigenv). ((==>
   (((((eval_sigdec $4) $3) (Inter_basis $2)) $1) $0)) ((((($5 (SIGDEC
   $4)) $3) $2) $1) (BASISbp (sigenv_in_basis $0)))))))))))))))
   ((! :(fundec -> bool) -> bool) (\(fundec :fundec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(funenv -> bool) -> bool) (\(f :funenv). ((==>
   (((((eval_fundec $4) $3) $2) $1) $0)) ((((($5 (FUNDEC $4)) $3) $2)
   $1) (BASISbp (funenv_in_basis $0))))))))))))))))))
   ((! :(topdec -> bool) -> bool) (\(topdec :topdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(basis_pack -> bool) -> bool) (\(bp :basis_pack). ((==>
   (((((eval_topdec $4) $3) $2) $1) $0)) ((((($5 $4) $3) $2) $1)
   $0)))))))))))))))`),
 ((Rule193),
  [],
  `((! :(fundec -> bool) -> bool) (\(fundec :fundec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(funenv -> bool) -> bool) (\(f :funenv). ((==>
   (((((eval_fundec $4) $3) $2) $1) $0)) (((((eval_topdec (FUNDEC $4))
   $3) $2) $1) (BASISbp (funenv_in_basis $0))))))))))))))`),
 ((Rule192b),
  [],
  `((! :(sigdec -> bool) -> bool) (\(sigdec :sigdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv -> bool) -> bool) (\(G :sigenv). ((==>
   (((((eval_sigdec $4) $3) (Inter_basis $2)) $1) $0))
   (((((eval_topdec (SIGDEC $4)) $3) $2) $1) (BASISbp (sigenv_in_basis
   $0))))))))))))))`),
 ((Rule192),
  [],
  `((! :(strdec -> bool) -> bool) (\(strdec :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(pack -> bool) -> bool) (\(p :pack). ((==> (((((eval_strdec
   $4) $3) $2) $1) (PACKep $0))) (((((eval_topdec (STRDEC $4)) $3) $2)
   $1) (PACKbp $0)))))))))))))`),
 ((Rule191),
  [],
  `((! :(strdec -> bool) -> bool) (\(strdec :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(env -> bool) -> bool) (\(E :env). ((==> (((((eval_strdec $4)
   $3) $2) $1) (ENVep $0))) (((((eval_topdec (STRDEC $4)) $3) $2) $1)
   (BASISbp (env_in_basis $0))))))))))))))`),
 ((eval_fundec_induction_thm),
  [],
  `((! :((fundec -> state -> basis -> state -> funenv -> bool) ->
        bool) -> bool)
   (\(P :fundec -> state -> basis -> state -> funenv -> bool). ((==>
   ((/\ ((! :(funbind -> bool) -> bool) (\(funbind :funbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(funenv -> bool) -> bool) (\(f :funenv). ((==>
   (((((eval_funbind $4) $3) $2) $1) $0)) ((((($5 (FUNCTORfundec $4))
   $3) $2) $1) $0))))))))))))) ((/\ ((! :(state -> bool) -> bool)
   (\(s :state). ((! :(basis -> bool) -> bool) (\(B :basis). ((((($2
   EMPTYfundec) $1) $0) $1) empty_funenv))))))
   ((! :(fundec -> bool) -> bool) (\(fundec1 :fundec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(funenv -> bool) -> bool) (\(F1 :funenv).
   ((! :(fundec -> bool) -> bool) (\(fundec2 :fundec).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(funenv -> bool) -> bool) (\(F2 :funenv). ((==>
   ((? :(state -> bool) -> bool) (\(s2 :state). ((/\ ((((($8 $7) $6)
   $5) $0) $4)) ((((($8 $3) $0) ((add_funenv_to_basis $5) $4)) $2)
   $1))))) ((((($7 ((SEQfundec $6) $2)) $5) $4) $1) ((add_funenv $3)
   $0)))))))))))))))))))) ((! :(fundec -> bool) -> bool)
   (\(fundec :fundec). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(funenv -> bool) -> bool) (\(f :funenv). ((==>
   (((((eval_fundec $4) $3) $2) $1) $0)) ((((($5 $4) $3) $2) $1)
   $0)))))))))))))))`),
 ((Rule190),
  [],
  `((! :(fundec -> bool) -> bool) (\(fundec1 :fundec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(funenv -> bool) -> bool) (\(F1 :funenv).
   ((! :(fundec -> bool) -> bool) (\(fundec2 :fundec).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(funenv -> bool) -> bool) (\(F2 :funenv). ((==>
   ((? :(state -> bool) -> bool) (\(s2 :state). ((/\ (((((eval_fundec
   $7) $6) $5) $0) $4)) (((((eval_fundec $3) $0) ((add_funenv_to_basis
   $5) $4)) $2) $1))))) (((((eval_fundec ((SEQfundec $6) $2)) $5) $4)
   $1) ((add_funenv $3) $0)))))))))))))))))`),
 ((Rule189),
  [],
  `((! :(state -> bool) -> bool) (\(s :state).
   ((! :(basis -> bool) -> bool) (\(B :basis). (((((eval_fundec
   EMPTYfundec) $1) $0) $1) empty_funenv)))))`),
 ((Rule188),
  [],
  `((! :(funbind -> bool) -> bool) (\(funbind :funbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(funenv -> bool) -> bool) (\(f :funenv). ((==>
   (((((eval_funbind $4) $3) $2) $1) $0)) (((((eval_fundec
   (FUNCTORfundec $4)) $3) $2) $1) $0))))))))))))`),
 ((ModML_eval_funbind_induction),
  [],
  `((! :((funbind -> state -> basis -> state -> funenv -> bool) ->
        bool) -> bool)
   (\(P_funbind :funbind -> state -> basis -> state -> funenv ->
                 bool). ((==> ((/\ ((! :(sigexp -> bool) -> bool)
   (\(sigexp :sigexp). ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> (((((eval_sigexp
   $7) $1) (Inter_basis $6)) $0) $5)) ((((($8 ((((((BINDfunbind $4)
   $3) $7) (NONE :sigexp option)) $2) (NONE :funbind option))) $1) $6)
   $0) ((funenv_map $4) (((((FUNCLOS $3) $5) $2) (NONE :int option))
   $6))))))))))))))))))))) ((/\ ((! :(sigexp -> bool) -> bool)
   (\(sigexp :sigexp). ((! :(sigexp -> bool) -> bool)
   (\(sigexp' :sigexp). ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(int -> bool) -> bool) (\(i :int). ((! :(int -> bool) -> bool)
   (\(i' :int). ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((((eval_sigexp $10) $2) (Inter_basis $8)) $1) $7))
   (((((eval_sigexp $9) $1) ((add_intenv_to_intbasis (Inter_basis $8))
   ((intenv_map $4) $7))) $0) $6))) ((((($11 ((((((BINDfunbind $5) $4)
   $10) ((SOME :sigexp -> sigexp option) $9)) $3)
   (NONE :funbind option))) $2) $8) $0) ((funenv_map $5) (((((FUNCLOS
   $4) $7) $3) ((SOME :int -> int option) $6))
   $8))))))))))))))))))))))))))) ((/\ ((! :(sigexp -> bool) -> bool)
   (\(sigexp :sigexp). ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(funbind -> bool) -> bool) (\(funbind :funbind).
   ((! :(funenv -> bool) -> bool) (\(f :funenv).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((((eval_sigexp $10) $2) (Inter_basis $9)) $1) $8)) ((((($11 $7)
   $1) $9) $0) $6))) ((((($11 ((((((BINDfunbind $5) $4) $10)
   (NONE :sigexp option)) $3) ((SOME :funbind -> funbind option) $7)))
   $2) $9) $0) ((add_funenv ((funenv_map $5) (((((FUNCLOS $4) $8) $3)
   (NONE :int option)) $9))) $6))))))))))))))))))))))))))
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(sigexp -> bool) -> bool) (\(sigexp' :sigexp).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(int -> bool) -> bool) (\(i :int). ((! :(int -> bool) -> bool)
   (\(i' :int). ((! :(funbind -> bool) -> bool) (\(funbind :funbind).
   ((! :(funenv -> bool) -> bool) (\(f :funenv).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(state -> bool) -> bool) (\(s4 :state). ((==> ((/\
   (((((eval_sigexp $13) $3) (Inter_basis $11)) $2) $10)) ((/\
   (((((eval_sigexp $12) $2) ((add_intenv_to_intbasis (Inter_basis
   $11)) ((intenv_map $5) $10))) $1) $9)) ((((($14 $8) $1) $11) $0)
   $7)))) ((((($14 ((((((BINDfunbind $6) $5) $13)
   ((SOME :sigexp -> sigexp option) $12)) $4)
   ((SOME :funbind -> funbind option) $8))) $3) $11) $0) ((add_funenv
   ((funenv_map $6) (((((FUNCLOS $5) $10) $4)
   ((SOME :int -> int option) $9)) $11)))
   $7)))))))))))))))))))))))))))))))))))
   ((! :(funbind -> bool) -> bool) (\(funbind :funbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(funenv -> bool) -> bool) (\(f :funenv). ((==>
   (((((eval_funbind $4) $3) $2) $1) $0)) ((((($5 $4) $3) $2) $1)
   $0)))))))))))))))`),
 ((EVAL_FUNBIND_RULES_SATISFIED),
  [],
  `(ModML_eval_funbind_pred eval_funbind)`),
 ((ModML_eval_structures_induction),
  [],
  `((! :((strexp -> state -> basis -> state -> env_pack -> bool) ->
        bool) -> bool)
   (\(P_strexp :strexp -> state -> basis -> state -> env_pack ->
                bool).
   ((! :((strdec -> state -> basis -> state -> env_pack -> bool) ->
        bool) -> bool)
   (\(P_strdec :strdec -> state -> basis -> state -> env_pack ->
                bool).
   ((! :((strbind -> state -> basis -> state -> strenv_pack ->
         bool) -> bool) -> bool)
   (\(P_strbind :strbind -> state -> basis -> state -> strenv_pack ->
                 bool). ((==> ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(strdec -> bool) -> bool) (\(strdec :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($6 $2) $1)
   $4) $0) (ENVep $3))) ((((($7 (STRUCTstrexp $2)) $1) $4) $0) (ENVep
   $3)))))))))))))) ((/\ ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strdec -> bool) -> bool) (\(strdec :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($6 $2) $1)
   $4) $0) (PACKep $3))) ((((($7 (STRUCTstrexp $2)) $1) $4) $0)
   (PACKep $3)))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(strid long -> bool) -> bool) (\(longstrid :strid long).
   ((! :(state -> bool) -> bool) (\(s :state). ((==>
   (((= :env lift -> env lift -> bool) ((lift :env -> env lift) $2))
   ((lookup_longstrid_basis $3) $1))) ((((($6 (LONGSTRIDstrexp $1))
   $0) $3) $0) (ENVep $2)))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(basis -> bool) -> bool) (\(B' :basis).
   ((! :(env -> bool) -> bool) (\(E :env). ((! :(env -> bool) -> bool)
   (\(E' :env). ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strexp -> bool) -> bool) (\(strexp' :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((= :funclos lift -> funclos lift -> bool)
   ((lift :funclos -> funclos lift) (((((FUNCLOS $3) $7) $4)
   (NONE :int option)) $10))) ((lookup_funid_basis $11) $6))) ((/\
   ((((($14 $5) $2) $11) $1) (ENVep $9))) ((((($14 $4) $1) ((add_basis
   $10) (strenv_in_basis ((strenv_map $3) ((cut_env $9) $7))))) $0)
   (ENVep $8))))) ((((($14 ((APPstrexp $6) $5)) $2) $11) $0) (ENVep
   $8)))))))))))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(basis -> bool) -> bool) (\(B' :basis).
   ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strexp -> bool) -> bool) (\(strexp' :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((/\
   (((= :funclos lift -> funclos lift -> bool)
   ((lift :funclos -> funclos lift) (((((FUNCLOS $2) $7) $3)
   (NONE :int option)) $8))) ((lookup_funid_basis $9) $6))) ((((($12
   $4) $1) $9) $0) (PACKep $5)))) ((((($12 ((APPstrexp $6) $4)) $1)
   $9) $0) (PACKep $5)))))))))))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(basis -> bool) -> bool) (\(B' :basis).
   ((! :(env -> bool) -> bool) (\(E :env). ((! :(int -> bool) -> bool)
   (\(i :int). ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strexp -> bool) -> bool) (\(strexp' :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((= :funclos lift -> funclos lift -> bool)
   ((lift :funclos -> funclos lift) (((((FUNCLOS $3) $8) $4)
   (NONE :int option)) $10))) ((lookup_funid_basis $11) $7))) ((/\
   ((((($14 $5) $2) $11) $1) (ENVep $9))) ((((($14 $4) $1) ((add_basis
   $10) (strenv_in_basis ((strenv_map $3) ((cut_env $9) $8))))) $0)
   (PACKep $6))))) ((((($14 ((APPstrexp $7) $5)) $2) $11) $0) (PACKep
   $6)))))))))))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(basis -> bool) -> bool) (\(B' :basis).
   ((! :(env -> bool) -> bool) (\(E :env). ((! :(env -> bool) -> bool)
   (\(E' :env). ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(int -> bool) -> bool) (\(i' :int).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strexp -> bool) -> bool) (\(strexp' :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((= :funclos lift -> funclos lift -> bool)
   ((lift :funclos -> funclos lift) (((((FUNCLOS $3) $8) $4)
   ((SOME :int -> int option) $7)) $11))) ((lookup_funid_basis $12)
   $6))) ((/\ ((((($15 $5) $2) $12) $1) (ENVep $10))) ((((($15 $4) $1)
   ((add_basis $11) (strenv_in_basis ((strenv_map $3) ((cut_env $10)
   $8))))) $0) (ENVep $9))))) ((((($15 ((APPstrexp $6) $5)) $2) $12)
   $0) (ENVep ((cut_env $9) $7))))))))))))))))))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(basis -> bool) -> bool) (\(B' :basis).
   ((! :(int -> bool) -> bool) (\(i :int). ((! :(int -> bool) -> bool)
   (\(i' :int). ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strexp -> bool) -> bool) (\(strexp' :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((/\
   (((= :funclos lift -> funclos lift -> bool)
   ((lift :funclos -> funclos lift) (((((FUNCLOS $2) $8) $3)
   ((SOME :int -> int option) $7)) $9))) ((lookup_funid_basis $10)
   $6))) ((((($13 $4) $1) $10) $0) (PACKep $5)))) ((((($13 ((APPstrexp
   $6) $4)) $1) $10) $0) (PACKep $5)))))))))))))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(basis -> bool) -> bool) (\(B' :basis).
   ((! :(env -> bool) -> bool) (\(E :env). ((! :(int -> bool) -> bool)
   (\(i :int). ((! :(int -> bool) -> bool) (\(i' :int).
   ((! :(funid -> bool) -> bool) (\(funid :funid).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strexp -> bool) -> bool) (\(strexp' :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\
   (((= :funclos lift -> funclos lift -> bool)
   ((lift :funclos -> funclos lift) (((((FUNCLOS $3) $9) $4)
   ((SOME :int -> int option) $8)) $11))) ((lookup_funid_basis $12)
   $7))) ((/\ ((((($15 $5) $2) $12) $1) (ENVep $10))) ((((($15 $4) $1)
   ((add_basis $11) (strenv_in_basis ((strenv_map $3) ((cut_env $10)
   $9))))) $0) (PACKep $6))))) ((((($15 ((APPstrexp $7) $5)) $2) $12)
   $0) (PACKep $6)))))))))))))))))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(env -> bool) -> bool) (\(E :env). ((! :(env -> bool) -> bool)
   (\(E' :env). ((! :(strdec -> bool) -> bool) (\(strdec :strdec).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) (ENVep $6))) ((((($10 $3) $1) ((add_env_to_basis $7)
   $6)) $0) (ENVep $5)))) ((((($10 ((LETstrexp $4) $3)) $2) $7) $0)
   (ENVep $5)))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strdec -> bool) -> bool) (\(strdec :strdec).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($7 $3) $1)
   $5) $0) (PACKep $4))) ((((($8 ((LETstrexp $3) $2)) $1) $5) $0)
   (PACKep $4)))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strdec -> bool) -> bool) (\(strdec :strdec).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) (ENVep $6))) ((((($10 $3) $1) ((add_env_to_basis $7)
   $6)) $0) (PACKep $5)))) ((((($10 ((LETstrexp $4) $3)) $2) $7) $0)
   (PACKep $5)))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E' :env).
   ((! :(dec -> bool) -> bool) (\(dec :dec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> (((((eval_dec
   $2) $1) (env_of_basis $4)) $0) (ENVep $3))) ((((($6 (DECstrdec $2))
   $1) $4) $0) (ENVep $3)))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(dec -> bool) -> bool) (\(dec :dec).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> (((((eval_dec
   $3) $1) (env_of_basis $4)) $0) (PACKep $2))) ((((($6 (DECstrdec
   $3)) $1) $4) $0) (PACKep $2)))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(strenv -> bool) -> bool) (\(SE :strenv).
   ((! :(strbind -> bool) -> bool) (\(strbind :strbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($5 $2) $1)
   $4) $0) (STRENVsp $3))) ((((($6 (STRUCTUREstrdec $2)) $1) $4) $0)
   (ENVep (strenv_in_env $3))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strbind -> bool) -> bool) (\(strbind :strbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($5 $2) $1)
   $4) $0) (PACKsp $3))) ((((($6 (STRUCTUREstrdec $2)) $1) $4) $0)
   (PACKep $3)))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E1 :env).
   ((! :(env -> bool) -> bool) (\(E2 :env).
   ((! :(strdec -> bool) -> bool) (\(strdec1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(strdec2 :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) (ENVep $6))) ((((($9 $3) $1) ((add_env_to_basis $7)
   $6)) $0) (ENVep $5)))) ((((($9 ((LOCALstrdec $4) $3)) $2) $7) $0)
   (ENVep $5)))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strdec -> bool) -> bool) (\(strdec1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(strdec2 :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($7 $3) $1)
   $5) $0) (PACKep $4))) ((((($7 ((LOCALstrdec $3) $2)) $1) $5) $0)
   (PACKep $4)))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strdec -> bool) -> bool) (\(strdec1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(strdec2 :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) (ENVep $6))) ((((($9 $3) $1) ((add_env_to_basis $7)
   $6)) $0) (PACKep $5)))) ((((($9 ((LOCALstrdec $4) $3)) $2) $7) $0)
   (PACKep $5)))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(state -> bool) -> bool) (\(s :state). ((((($3
   EMPTYstrdec) $0) $1) $0) (ENVep empty_env))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(env -> bool) -> bool) (\(E1 :env).
   ((! :(env -> bool) -> bool) (\(E2 :env).
   ((! :(strdec -> bool) -> bool) (\(strdec1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(strdec2 :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) (ENVep $6))) ((((($9 $3) $1) ((add_env_to_basis $7)
   $6)) $0) (ENVep $5)))) ((((($9 ((SEQstrdec $4) $3)) $2) $7) $0)
   (ENVep ((add_env $6) $5))))))))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strdec -> bool) -> bool) (\(strdec1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(strdec2 :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($7 $3) $1)
   $5) $0) (PACKep $4))) ((((($7 ((SEQstrdec $3) $2)) $1) $5) $0)
   (PACKep $4)))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strdec -> bool) -> bool) (\(strdec1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(strdec2 :strdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) (ENVep $6))) ((((($9 $3) $1) ((add_env_to_basis $7)
   $6)) $0) (PACKep $5)))) ((((($9 ((SEQstrdec $4) $3)) $2) $7) $0)
   (PACKep $5)))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($8 $3) $1)
   $5) $0) (ENVep $4))) ((((($6 ((((BINDstrbind $2)
   (NONE :sigexp option)) $3) (NONE :strbind option))) $1) $5) $0)
   (STRENVsp ((strenv_map $2) $4))))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($8 $3) $1)
   $5) $0) (PACKep $4))) ((((($6 ((((BINDstrbind $2)
   (NONE :sigexp option)) $3) (NONE :strbind option))) $1) $5) $0)
   (PACKsp $4)))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($11
   $4) $2) $8) $1) (ENVep $7))) (((((eval_sigexp $5) $1) (Inter_basis
   $8)) $0) $6))) ((((($9 ((((BINDstrbind $3)
   ((SOME :sigexp -> sigexp option) $5)) $4) (NONE :strbind option)))
   $2) $8) $0) (STRENVsp ((strenv_map $3) ((cut_env $7)
   $6)))))))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($9 $3) $1)
   $6) $0) (PACKep $5))) ((((($7 ((((BINDstrbind $2)
   ((SOME :sigexp -> sigexp option) $4)) $3) (NONE :strbind option)))
   $1) $6) $0) (PACKsp $5)))))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(strenv -> bool) -> bool) (\(SE :strenv).
   ((! :(strbind -> bool) -> bool) (\(strbind :strbind).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($11
   $4) $2) $8) $1) (ENVep $7))) ((((($9 $5) $1) $8) $0) (STRENVsp
   $6)))) ((((($9 ((((BINDstrbind $3) (NONE :sigexp option)) $4)
   ((SOME :strbind -> strbind option) $5))) $2) $8) $0) (STRENVsp
   ((add_strenv ((strenv_map $3) $7)) $6))))))))))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strbind -> bool) -> bool) (\(strbind :strbind).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($9 $3) $1)
   $6) $0) (PACKep $5))) ((((($7 ((((BINDstrbind $2)
   (NONE :sigexp option)) $3) ((SOME :strbind -> strbind option) $4)))
   $1) $6) $0) (PACKsp $5)))))))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strbind -> bool) -> bool) (\(strbind :strbind).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($11
   $4) $2) $8) $1) (ENVep $7))) ((((($9 $5) $1) $8) $0) (PACKsp $6))))
   ((((($9 ((((BINDstrbind $3) (NONE :sigexp option)) $4)
   ((SOME :strbind -> strbind option) $5))) $2) $8) $0) (PACKsp
   $6)))))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(env -> bool) -> bool) (\(E :env).
   ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(strenv -> bool) -> bool) (\(SE :strenv).
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(strbind -> bool) -> bool) (\(strbind :strbind).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(state -> bool) -> bool) (\(s4 :state). ((==> ((/\ ((((($14
   $5) $3) $11) $2) (ENVep $10))) ((/\ (((((eval_sigexp $7) $2)
   (Inter_basis $11)) $1) $9)) ((((($12 $6) $1) $11) $0) (STRENVsp
   $8))))) ((((($12 ((((BINDstrbind $4)
   ((SOME :sigexp -> sigexp option) $7)) $5)
   ((SOME :strbind -> strbind option) $6))) $3) $11) $0) (STRENVsp
   ((add_strenv ((strenv_map $4) ((cut_env $10) $9)))
   $8))))))))))))))))))))))))))))) ((/\ ((! :(basis -> bool) -> bool)
   (\(B :basis). ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(strbind -> bool) -> bool) (\(strbind :strbind).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($10 $3) $1)
   $7) $0) (PACKep $6))) ((((($8 ((((BINDstrbind $2)
   ((SOME :sigexp -> sigexp option) $5)) $3)
   ((SOME :strbind -> strbind option) $4))) $1) $7) $0) (PACKsp
   $6)))))))))))))))))))) ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(env -> bool) -> bool) (\(E :env). ((! :(int -> bool) -> bool)
   (\(i :int). ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(strbind -> bool) -> bool) (\(strbind :strbind).
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(state -> bool) -> bool) (\(s4 :state). ((==> ((/\ ((((($14
   $5) $3) $11) $2) (ENVep $10))) ((/\ (((((eval_sigexp $7) $2)
   (Inter_basis $11)) $1) $9)) ((((($12 $6) $1) $11) $0) (PACKsp
   $8))))) ((((($12 ((((BINDstrbind $4)
   ((SOME :sigexp -> sigexp option) $7)) $5)
   ((SOME :strbind -> strbind option) $6))) $3) $11) $0) (PACKsp
   $8)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ((/\
   ((! :(strexp -> bool) -> bool) (\(strexp :strexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(env_pack -> bool) -> bool) (\(ep :env_pack). ((==>
   (((((eval_strexp $4) $3) $2) $1) $0)) ((((($7 $4) $3) $2) $1)
   $0))))))))))))) ((/\ ((! :(strdec -> bool) -> bool)
   (\(strdec :strdec). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(env_pack -> bool) -> bool) (\(ep :env_pack). ((==>
   (((((eval_strdec $4) $3) $2) $1) $0)) ((((($6 $4) $3) $2) $1)
   $0))))))))))))) ((! :(strbind -> bool) -> bool)
   (\(strbind :strbind). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(basis -> bool) -> bool) (\(B :basis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(strenv_pack -> bool) -> bool) (\(sep :strenv_pack). ((==>
   (((((eval_strbind $4) $3) $2) $1) $0)) ((((($5 $4) $3) $2) $1)
   $0)))))))))))))))))))))`),
 ((EVAL_STRUCT_RULES_SATISFIED),
  [],
  `(((ModML_eval_structures_pred eval_strexp) eval_strdec)
   eval_strbind)`),
 ((eval_sigdec_induction_thm),
  [],
  `((! :((sigdec -> state -> intbasis -> state -> sigenv -> bool) ->
        bool) -> bool)
   (\(P :sigdec -> state -> intbasis -> state -> sigenv -> bool).
   ((==> ((/\ ((! :(sigbind -> bool) -> bool) (\(sigbind :sigbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv -> bool) -> bool) (\(G :sigenv). ((==>
   (((((eval_sigbind $4) $3) $2) $1) $0)) ((((($5 (SIGNATUREsigdec
   $4)) $3) $2) $1) $0))))))))))))) ((/\ ((! :(state -> bool) -> bool)
   (\(s :state). ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((((($2 EMPTYsigdec) $1) $0) $1) empty_sigenv))))))
   ((! :(sigdec -> bool) -> bool) (\(sigdec1 :sigdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(sigenv -> bool) -> bool) (\(G1 :sigenv).
   ((! :(sigdec -> bool) -> bool) (\(sigdec2 :sigdec).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(sigenv -> bool) -> bool) (\(G2 :sigenv). ((==>
   ((? :(state -> bool) -> bool) (\(s2 :state). ((/\ ((((($8 $7) $6)
   $5) $0) $4)) ((((($8 $3) $0) ((add_sigenv_to_intbasis $5) $4)) $2)
   $1))))) ((((($7 ((SEQsigdec $6) $2)) $5) $4) $1) ((add_sigenv $3)
   $0)))))))))))))))))))) ((! :(sigdec -> bool) -> bool)
   (\(sigdec :sigdec). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv -> bool) -> bool) (\(G :sigenv). ((==>
   (((((eval_sigdec $4) $3) $2) $1) $0)) ((((($5 $4) $3) $2) $1)
   $0)))))))))))))))`),
 ((Rule174),
  [],
  `((! :(sigdec -> bool) -> bool) (\(sigdec1 :sigdec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(sigenv -> bool) -> bool) (\(G1 :sigenv).
   ((! :(sigdec -> bool) -> bool) (\(sigdec2 :sigdec).
   ((! :(state -> bool) -> bool) (\(s3 :state).
   ((! :(sigenv -> bool) -> bool) (\(G2 :sigenv). ((==>
   ((? :(state -> bool) -> bool) (\(s2 :state). ((/\ (((((eval_sigdec
   $7) $6) $5) $0) $4)) (((((eval_sigdec $3) $0)
   ((add_sigenv_to_intbasis $5) $4)) $2) $1))))) (((((eval_sigdec
   ((SEQsigdec $6) $2)) $5) $4) $1) ((add_sigenv $3)
   $0)))))))))))))))))`),
 ((Rule173),
  [],
  `((! :(state -> bool) -> bool) (\(s :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis). (((((eval_sigdec
   EMPTYsigdec) $1) $0) $1) empty_sigenv)))))`),
 ((Rule172),
  [],
  `((! :(sigbind -> bool) -> bool) (\(sigbind :sigbind).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv -> bool) -> bool) (\(G :sigenv). ((==>
   (((((eval_sigbind $4) $3) $2) $1) $0)) (((((eval_sigdec
   (SIGNATUREsigdec $4)) $3) $2) $1) $0))))))))))))`),
 ((ModML_eval_sigbind_induction),
  [],
  `((! :((sigbind -> state -> intbasis -> state -> sigenv -> bool) ->
        bool) -> bool)
   (\(P_sigbind :sigbind -> state -> intbasis -> state -> sigenv ->
                 bool). ((==> ((/\ ((! :(sigexp -> bool) -> bool)
   (\(sigexp :sigexp). ((! :(intbasis -> bool) -> bool)
   (\(IB :intbasis). ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(sigid -> bool) -> bool) (\(sigid :sigid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> (((((eval_sigexp
   $5) $1) $4) $0) $3)) ((((($6 (((BINDsigbind $2) $5)
   (NONE :sigbind option))) $1) $4) $0) ((sigenv_map $2)
   $3)))))))))))))))) ((! :(sigbind -> bool) -> bool)
   (\(sigbind :sigbind). ((! :(intbasis -> bool) -> bool)
   (\(IB :intbasis). ((! :(sigenv -> bool) -> bool) (\(G :sigenv).
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(sigid -> bool) -> bool) (\(sigid :sigid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $8)
   $1) $7) $0) $6)) (((((eval_sigexp $5) $2) $7) $1) $4))) ((((($9
   (((BINDsigbind $3) $5) ((SOME :sigbind -> sigbind option) $8))) $2)
   $7) $0) ((add_sigenv ((sigenv_map $3) $4))
   $6))))))))))))))))))))))) ((! :(sigbind -> bool) -> bool)
   (\(sigbind :sigbind). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(sigenv -> bool) -> bool) (\(G :sigenv). ((==>
   (((((eval_sigbind $4) $3) $2) $1) $0)) ((((($5 $4) $3) $2) $1)
   $0)))))))))))))))`),
 ((EVAL_SIGBIND_RULES_SATISFIED),
  [],
  `(ModML_eval_sigbind_pred eval_sigbind)`),
 (( ModML_eval_signatures_induction),
  [],
  `((! :((sigexp -> state -> intbasis -> state -> int -> bool) ->
        bool) -> bool)
   (\(P_sigexp :sigexp -> state -> intbasis -> state -> int -> bool).
   ((! :((spec -> state -> intbasis -> state -> int -> bool) ->
        bool) -> bool)
   (\(P_spec :spec -> state -> intbasis -> state -> int -> bool).
   ((! :((strdesc -> state -> intbasis -> state -> intenv -> bool) ->
        bool) -> bool)
   (\(P_strdesc :strdesc -> state -> intbasis -> state -> intenv ->
                 bool). ((==> ((/\ ((! :(int -> bool) -> bool)
   (\(i :int). ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(spec -> bool) -> bool) (\(spec :spec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($6 $2) $1)
   $3) $0) $4)) ((((($7 (SIGsigexp $2)) $1) $3) $0) $4)))))))))))))
   ((/\ ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(state -> bool) -> bool) (\(s :state).
   ((! :(sigid -> bool) -> bool) (\(sigid :sigid). ((==>
   (((= :int lift -> int lift -> bool) ((lookup_sigid_intbasis $2)
   $0)) ((lift :int -> int lift) $3))) ((((($6 (SIGIDsigexp $0)) $1)
   $2) $1) $3))))))))))) ((/\ ((! :(intbasis -> bool) -> bool)
   (\(IB :intbasis). ((! :(valdesc -> bool) -> bool)
   (\(valdesc :valdesc). ((! :(var set -> bool) -> bool)
   (\(vars :var set). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((eval_valdesc
   $3) $1) $0) $2)) ((((($6 (VALspec $3)) $1) $4) $0) (vars_in_int
   $2)))))))))))))) ((/\ ((! :(intbasis -> bool) -> bool)
   (\(IB :intbasis). ((! :(excon set -> bool) -> bool)
   (\(excons :excon set). ((! :(exdesc -> bool) -> bool)
   (\(exdesc :exdesc). ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((eval_exdesc
   $2) $1) $0) $3)) ((((($6 (EXCEPTIONspec $2)) $1) $4) $0)
   (excons_in_int $3)))))))))))))) ((/\
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(intenv -> bool) -> bool) (\(IE :intenv).
   ((! :(strdesc -> bool) -> bool) (\(strdesc :strdesc).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($5 $2) $1)
   $4) $0) $3)) ((((($6 (STRUCTUREspec $2)) $1) $4) $0) (intenv_in_int
   $3)))))))))))))) ((/\ ((! :(intbasis -> bool) -> bool)
   (\(IB :intbasis). ((! :(int -> bool) -> bool) (\(I1 :int).
   ((! :(int -> bool) -> bool) (\(I2 :int).
   ((! :(spec -> bool) -> bool) (\(spec1 :spec).
   ((! :(spec -> bool) -> bool) (\(spec2 :spec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) $6)) ((((($9 $3) $1) ((add_intenv_to_intbasis $7)
   (intenv_of_int $6))) $0) $5))) ((((($9 ((LOCALspec $4) $3)) $2) $7)
   $0) $5))))))))))))))))))) ((/\ ((! :(intbasis -> bool) -> bool)
   (\(IB :intbasis). ((! :(int nonemptylist -> bool) -> bool)
   (\(nonempty_int_list :int nonemptylist).
   ((! :(int lift nonemptylist -> bool) -> bool)
   (\(nonempty_lift_int_list :int lift nonemptylist).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(nonempty_longstrid_list :strid long nonemptylist).
   ((! :(state -> bool) -> bool) (\(s :state). ((==> ((/\
   (((= :int lift nonemptylist -> int lift nonemptylist -> bool)
   (((nonempty_MAP :(strid long -> int lift) ->
                    strid long nonemptylist -> int lift nonemptylist)
   (lookup_longstrid_intbasis $4)) $1)) $2))
   (((= :int lift nonemptylist -> int lift nonemptylist -> bool)
   (((nonempty_MAP :(int -> int lift) -> int nonemptylist ->
                    int lift nonemptylist) (lift :int -> int lift))
   $3)) $2))) ((((($6 (OPENspec $1)) $0) $4) $0)
   (((nonempty_FOLDL_WITH_INIT :(int -> int -> int) ->
                                int nonemptylist -> int) add_int)
   $3)))))))))))))) ((/\ ((! :(intbasis -> bool) -> bool)
   (\(IB :intbasis). ((! :(int nonemptylist -> bool) -> bool)
   (\(nonempty_int_list :int nonemptylist).
   ((! :(int lift nonemptylist -> bool) -> bool)
   (\(nonempty_lift_int_list :int lift nonemptylist).
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(nonempty_sigid_list :sigid nonemptylist).
   ((! :(state -> bool) -> bool) (\(s :state). ((==> ((/\
   (((= :int lift nonemptylist -> int lift nonemptylist -> bool)
   (((nonempty_MAP :(sigid -> int lift) -> sigid nonemptylist ->
                    int lift nonemptylist) (lookup_sigid_intbasis $4))
   $1)) $2))
   (((= :int lift nonemptylist -> int lift nonemptylist -> bool)
   (((nonempty_MAP :(int -> int lift) -> int nonemptylist ->
                    int lift nonemptylist) (lift :int -> int lift))
   $3)) $2))) ((((($6 (INCLUDEspec $1)) $0) $4) $0)
   (((nonempty_FOLDL_WITH_INIT :(int -> int -> int) ->
                                int nonemptylist -> int) add_int)
   $3)))))))))))))) ((/\ ((! :(intbasis -> bool) -> bool)
   (\(IB :intbasis). ((! :(state -> bool) -> bool) (\(s :state).
   ((((($3 EMPTYspec) $0) $1) $0) empty_int)))))) ((/\
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(int -> bool) -> bool) (\(I1 :int).
   ((! :(int -> bool) -> bool) (\(I2 :int).
   ((! :(spec -> bool) -> bool) (\(spec1 :spec).
   ((! :(spec -> bool) -> bool) (\(spec2 :spec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($9 $4)
   $2) $7) $1) $6)) ((((($9 $3) $1) ((add_intenv_to_intbasis $7)
   (intenv_of_int $6))) $0) $5))) ((((($9 ((SEQspec $4) $3)) $2) $7)
   $0) ((add_int $6) $5)))))))))))))))))))) ((/\
   ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state). ((==> ((((($8 $3) $1)
   $4) $0) $5)) ((((($6 (((STRIDstrdesc $2) $3)
   (NONE :strdesc option))) $1) $4) $0) ((intenv_map $2)
   $5)))))))))))))))) ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(intenv -> bool) -> bool) (\(IE :intenv).
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(strdesc -> bool) -> bool) (\(strdesc :strdesc).
   ((! :(strid -> bool) -> bool) (\(strid :strid).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(state -> bool) -> bool) (\(s3 :state). ((==> ((/\ ((((($11
   $5) $2) $7) $1) $8)) ((((($9 $4) $1) $7) $0) $6))) ((((($9
   (((STRIDstrdesc $3) $5) ((SOME :strdesc -> strdesc option) $4)))
   $2) $7) $0) ((add_intenv ((intenv_map $3) $8))
   $6))))))))))))))))))))))))))))))))) ((/\
   ((! :(sigexp -> bool) -> bool) (\(sigexp :sigexp).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(int -> bool) -> bool) (\(i :int). ((==> (((((eval_sigexp $4)
   $3) $2) $1) $0)) ((((($7 $4) $3) $2) $1) $0))))))))))))) ((/\
   ((! :(spec -> bool) -> bool) (\(spec :spec).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(int -> bool) -> bool) (\(i :int). ((==> (((((eval_spec $4)
   $3) $2) $1) $0)) ((((($6 $4) $3) $2) $1) $0)))))))))))))
   ((! :(strdesc -> bool) -> bool) (\(strdesc :strdesc).
   ((! :(state -> bool) -> bool) (\(s1 :state).
   ((! :(intbasis -> bool) -> bool) (\(IB :intbasis).
   ((! :(state -> bool) -> bool) (\(s2 :state).
   ((! :(intenv -> bool) -> bool) (\(int :intenv). ((==>
   (((((eval_strdesc $4) $3) $2) $1) $0)) ((((($5 $4) $3) $2) $1)
   $0)))))))))))))))))))))`),
 ((EVAL_SIG_RULES_SATISFIED),
  [],
  `(((ModML_eval_signatures_pred eval_sigexp) eval_spec)
   eval_strdesc)`),
 ((basis_pack_constructors_distinct),
  [],
  `((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(basis -> bool) -> bool) (\(b :basis). (~
   (((= :basis_pack -> basis_pack -> bool) (BASISbp $0)) (PACKbp
   $1)))))))`),
 ((basis_pack_constructors_one_one),
  [],
  `((/\ ((! :(basis -> bool) -> bool) (\(b :basis).
   ((! :(basis -> bool) -> bool) (\(b' :basis).
   (((= :bool -> bool -> bool) (((= :basis_pack -> basis_pack -> bool)
   (BASISbp $1)) (BASISbp $0))) (((= :basis -> basis -> bool) $1)
   $0))))))) ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(pack -> bool) -> bool) (\(p' :pack).
   (((= :bool -> bool -> bool) (((= :basis_pack -> basis_pack -> bool)
   (PACKbp $1)) (PACKbp $0))) (((= :pack -> pack -> bool) $1)
   $0)))))))`),
 ((basis_pack_cases_thm),
  [],
  `((! :(basis_pack -> bool) -> bool) (\(b :basis_pack). ((\/
   ((? :(basis -> bool) -> bool) (\(b' :basis).
   (((= :basis_pack -> basis_pack -> bool) $1) (BASISbp $0)))))
   ((? :(pack -> bool) -> bool) (\(p :pack).
   (((= :basis_pack -> basis_pack -> bool) $1) (PACKbp $0)))))))`),
 ((basis_pack_induction_thm),
  [],
  `((! :((basis_pack -> bool) -> bool) -> bool)
   (\(P :basis_pack -> bool). ((==> ((/\ ((! :(basis -> bool) -> bool)
   (\(b :basis). ($1 (BASISbp $0))))) ((! :(pack -> bool) -> bool)
   (\(p :pack). ($1 (PACKbp $0))))))
   ((! :(basis_pack -> bool) -> bool) (\(b :basis_pack). ($1
   $0))))))`),
 ((basis_pack_Axiom),
  [],
  `((! :((basis -> 'a) -> bool) -> bool) (\(f0 :basis -> 'a).
   ((! :((pack -> 'a) -> bool) -> bool) (\(f1 :pack -> 'a).
   ((?! :((basis_pack -> 'a) -> bool) -> bool)
   (\(fn :basis_pack -> 'a). ((/\ ((! :(basis -> bool) -> bool)
   (\(b :basis). (((= :'a -> 'a -> bool) ($1 (BASISbp $0))) ($3
   $0))))) ((! :(pack -> bool) -> bool) (\(p :pack).
   (((= :'a -> 'a -> bool) ($1 (PACKbp $0))) ($2 $0)))))))))))`),
 ((ModMLBases_cases_thm),
  [],
  `((/\ ((! :(basis -> bool) -> bool) (\(x1 :basis).
   ((? :(funenv -> bool) -> bool) (\(y :funenv).
   ((? :(sigenv -> bool) -> bool) (\(y'' :sigenv).
   ((? :(env -> bool) -> bool) (\(y' :env).
   (((= :basis -> basis -> bool) $3) (((BASIS $2) $1) $0)))))))))))
   ((/\ ((! :(funclos -> bool) -> bool) (\(x2 :funclos).
   ((? :(strid -> bool) -> bool) (\(y :strid).
   ((? :(int -> bool) -> bool) (\(y'''' :int).
   ((? :(strexp -> bool) -> bool) (\(y''' :strexp).
   ((? :(int option -> bool) -> bool) (\(y'' :int option).
   ((? :(basis -> bool) -> bool) (\(y' :basis).
   (((= :funclos -> funclos -> bool) $5) (((((FUNCLOS $4) $3) $2) $1)
   $0))))))))))))))) ((/\ ((! :(funenv -> bool) -> bool)
   (\(x3 :funenv).
   ((? :((funid # funclos) list finmap -> bool) -> bool)
   (\(y :(funid # funclos) list finmap).
   (((= :funenv -> funenv -> bool) $1) (FUNENV $0))))))) ((/\
   ((! :(funid # funclos -> bool) -> bool) (\(x4 :funid # funclos).
   ((? :(funid -> bool) -> bool) (\(y :funid).
   ((? :(funclos -> bool) -> bool) (\(y' :funclos).
   (((= :funid # funclos -> funid # funclos -> bool) $2)
   (((, :funid -> funclos -> funid # funclos) $1) $0))))))))) ((/\
   ((! :((funid # funclos) list -> bool) -> bool)
   (\(x5 :(funid # funclos) list). ((\/
   (((= :(funid # funclos) list -> (funid # funclos) list -> bool) $0)
   (NIL :(funid # funclos) list)))
   ((? :(funid # funclos -> bool) -> bool) (\(y :funid # funclos).
   ((? :((funid # funclos) list -> bool) -> bool)
   (\(y' :(funid # funclos) list).
   (((= :(funid # funclos) list -> (funid # funclos) list -> bool) $2)
   (((CONS :funid # funclos -> (funid # funclos) list ->
            (funid # funclos) list) $1) $0)))))))))) ((/\
   ((! :((funid # funclos) list finmap -> bool) -> bool)
   (\(x6 :(funid # funclos) list finmap).
   ((? :((funid # funclos) list -> bool) -> bool)
   (\(y :(funid # funclos) list).
   (((= :(funid # funclos) list finmap ->
         (funid # funclos) list finmap -> bool) $1)
   ((FINMAP :(funid # funclos) list -> (funid # funclos) list finmap)
   $0))))))) ((! :(int option -> bool) -> bool) (\(x7 :int option).
   ((\/ (((= :int option -> int option -> bool) $0)
   (NONE :int option))) ((? :(int -> bool) -> bool) (\(y :int).
   (((= :int option -> int option -> bool) $1)
   ((SOME :int -> int option) $0)))))))))))))`),
 ((ModMLBases_one_one_thm),
  [],
  `((/\ ((! :(funenv -> bool) -> bool) (\(x1 :funenv).
   ((! :(sigenv -> bool) -> bool) (\(x2 :sigenv).
   ((! :(env -> bool) -> bool) (\(x3 :env).
   ((! :(funenv -> bool) -> bool) (\(x1' :funenv).
   ((! :(sigenv -> bool) -> bool) (\(x2' :sigenv).
   ((! :(env -> bool) -> bool) (\(x3' :env).
   (((= :bool -> bool -> bool) (((= :basis -> basis -> bool) (((BASIS
   $5) $4) $3)) (((BASIS $2) $1) $0))) ((/\
   (((= :funenv -> funenv -> bool) $5) $2)) ((/\
   (((= :sigenv -> sigenv -> bool) $4) $1)) (((= :env -> env -> bool)
   $3) $0))))))))))))))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(x1 :strid). ((! :(int -> bool) -> bool) (\(x2 :int).
   ((! :(strexp -> bool) -> bool) (\(x3 :strexp).
   ((! :(int option -> bool) -> bool) (\(x4 :int option).
   ((! :(basis -> bool) -> bool) (\(x5 :basis).
   ((! :(strid -> bool) -> bool) (\(x1' :strid).
   ((! :(int -> bool) -> bool) (\(x2' :int).
   ((! :(strexp -> bool) -> bool) (\(x3' :strexp).
   ((! :(int option -> bool) -> bool) (\(x4' :int option).
   ((! :(basis -> bool) -> bool) (\(x5' :basis).
   (((= :bool -> bool -> bool) (((= :funclos -> funclos -> bool)
   (((((FUNCLOS $9) $8) $7) $6) $5)) (((((FUNCLOS $4) $3) $2) $1)
   $0))) ((/\ (((= :strid -> strid -> bool) $9) $4)) ((/\
   (((= :int -> int -> bool) $8) $3)) ((/\
   (((= :strexp -> strexp -> bool) $7) $2)) ((/\
   (((= :int option -> int option -> bool) $6) $1))
   (((= :basis -> basis -> bool) $5) $0)))))))))))))))))))))))))))
   ((/\ ((! :((funid # funclos) list finmap -> bool) -> bool)
   (\(x1 :(funid # funclos) list finmap).
   ((! :((funid # funclos) list finmap -> bool) -> bool)
   (\(x1' :(funid # funclos) list finmap). (((= :bool -> bool -> bool)
   (((= :funenv -> funenv -> bool) (FUNENV $1)) (FUNENV $0)))
   (((= :(funid # funclos) list finmap ->
         (funid # funclos) list finmap -> bool) $1) $0))))))) ((/\
   ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funclos -> bool) -> bool) (\(x2 :funclos).
   ((! :(funid -> bool) -> bool) (\(x1' :funid).
   ((! :(funclos -> bool) -> bool) (\(x2' :funclos).
   (((= :bool -> bool -> bool)
   (((= :funid # funclos -> funid # funclos -> bool)
   (((, :funid -> funclos -> funid # funclos) $3) $2))
   (((, :funid -> funclos -> funid # funclos) $1) $0))) ((/\
   (((= :funid -> funid -> bool) $3) $1))
   (((= :funclos -> funclos -> bool) $2) $0)))))))))))) ((/\
   ((! :(funid # funclos -> bool) -> bool) (\(x1 :funid # funclos).
   ((! :((funid # funclos) list -> bool) -> bool)
   (\(x2 :(funid # funclos) list).
   ((! :(funid # funclos -> bool) -> bool) (\(x1' :funid # funclos).
   ((! :((funid # funclos) list -> bool) -> bool)
   (\(x2' :(funid # funclos) list). (((= :bool -> bool -> bool)
   (((= :(funid # funclos) list -> (funid # funclos) list -> bool)
   (((CONS :funid # funclos -> (funid # funclos) list ->
            (funid # funclos) list) $3) $2))
   (((CONS :funid # funclos -> (funid # funclos) list ->
            (funid # funclos) list) $1) $0))) ((/\
   (((= :funid # funclos -> funid # funclos -> bool) $3) $1))
   (((= :(funid # funclos) list -> (funid # funclos) list -> bool) $2)
   $0)))))))))))) ((/\ ((! :((funid # funclos) list -> bool) -> bool)
   (\(x1 :(funid # funclos) list).
   ((! :((funid # funclos) list -> bool) -> bool)
   (\(x1' :(funid # funclos) list). (((= :bool -> bool -> bool)
   (((= :(funid # funclos) list finmap ->
         (funid # funclos) list finmap -> bool)
   ((FINMAP :(funid # funclos) list -> (funid # funclos) list finmap)
   $1))
   ((FINMAP :(funid # funclos) list -> (funid # funclos) list finmap)
   $0)))
   (((= :(funid # funclos) list -> (funid # funclos) list -> bool) $1)
   $0))))))) ((! :(int -> bool) -> bool) (\(x1 :int).
   ((! :(int -> bool) -> bool) (\(x1' :int).
   (((= :bool -> bool -> bool) (((= :int option -> int option -> bool)
   ((SOME :int -> int option) $1)) ((SOME :int -> int option) $0)))
   (((= :int -> int -> bool) $1) $0))))))))))))`),
 ((ModMLBases_distinct_thm),
  [],
  `((/\ ((! :(funid # funclos -> bool) -> bool)
   (\(x1' :funid # funclos).
   ((! :((funid # funclos) list -> bool) -> bool)
   (\(x2' :(funid # funclos) list). (~
   (((= :(funid # funclos) list -> (funid # funclos) list -> bool)
   (NIL :(funid # funclos) list))
   (((CONS :funid # funclos -> (funid # funclos) list ->
            (funid # funclos) list) $1) $0))))))))
   ((! :(int -> bool) -> bool) (\(x1' :int). (~
   (((= :int option -> int option -> bool) (NONE :int option))
   ((SOME :int -> int option) $0))))))`),
 ((ModMLBases_unique_thm),
  [],
  `((! :(('c -> sigenv -> env -> funenv -> 'a) -> bool) -> bool)
   (\(BASIS_case :'c -> sigenv -> env -> funenv -> 'a).
   ((! :(('g -> 'a -> strid -> int -> strexp -> int option -> basis ->
         'b) -> bool) -> bool)
   (\(FUNCLOS_case :'g -> 'a -> strid -> int -> strexp ->
                    int option -> basis -> 'b).
   ((! :(('f -> (funid # funclos) list finmap -> 'c) -> bool) -> bool)
   (\(FUNENV_case :'f -> (funid # funclos) list finmap -> 'c).
   ((! :(('b -> funid -> funclos -> 'd) -> bool) -> bool)
   (\(basis_funclos_funenv_ch44_funid_funclos_case :'b -> funid ->
                                                    funclos -> 'd).
   ((! :('e -> bool) -> bool)
   (\(basis_funclos_funenv_NIL_funid_funclos_prod_basis_funclos_funenv_case :'e).
   ((! :(('d -> 'e -> funid # funclos -> (funid # funclos) list ->
         'e) -> bool) -> bool)
   (\(basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv_case :'d ->
                                                                              'e ->
                                                                              funid #
                                                                              funclos ->
                                                                              (funid #
                                                                              funclos)
                                                                              list ->
                                                                              'e).
   ((! :(('e -> (funid # funclos) list -> 'f) -> bool) -> bool)
   (\(basis_funclos_funenv_FINMAP_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_case :'e ->
                                                                                                          (funid #
                                                                                                          funclos)
                                                                                                          list ->
                                                                                                          'f).
   ((! :('g -> bool) -> bool)
   (\(basis_funclos_funenv_NONE_int_case :'g).
   ((! :((int -> 'g) -> bool) -> bool)
   (\(basis_funclos_funenv_SOME_int_case :int -> 'g).
   ((! :((basis -> 'a) -> bool) -> bool) (\(fn1 :basis -> 'a).
   ((! :((funclos -> 'b) -> bool) -> bool) (\(fn2 :funclos -> 'b).
   ((! :((funenv -> 'c) -> bool) -> bool) (\(fn3 :funenv -> 'c).
   ((! :((funid # funclos -> 'd) -> bool) -> bool)
   (\(fn4 :funid # funclos -> 'd).
   ((! :(((funid # funclos) list -> 'e) -> bool) -> bool)
   (\(fn5 :(funid # funclos) list -> 'e).
   ((! :(((funid # funclos) list finmap -> 'f) -> bool) -> bool)
   (\(fn6 :(funid # funclos) list finmap -> 'f).
   ((! :((int option -> 'g) -> bool) -> bool)
   (\(fn7 :int option -> 'g). ((! :((basis -> 'a) -> bool) -> bool)
   (\(fn1' :basis -> 'a). ((! :((funclos -> 'b) -> bool) -> bool)
   (\(fn2' :funclos -> 'b). ((! :((funenv -> 'c) -> bool) -> bool)
   (\(fn3' :funenv -> 'c).
   ((! :((funid # funclos -> 'd) -> bool) -> bool)
   (\(fn4' :funid # funclos -> 'd).
   ((! :(((funid # funclos) list -> 'e) -> bool) -> bool)
   (\(fn5' :(funid # funclos) list -> 'e).
   ((! :(((funid # funclos) list finmap -> 'f) -> bool) -> bool)
   (\(fn6' :(funid # funclos) list finmap -> 'f).
   ((! :((int option -> 'g) -> bool) -> bool)
   (\(fn7' :int option -> 'g). ((==> ((/\
   ((! :(funenv -> bool) -> bool) (\(y :funenv).
   ((! :(sigenv -> bool) -> bool) (\(y'''''''' :sigenv).
   ((! :(env -> bool) -> bool) (\(y''''''' :env).
   (((= :'a -> 'a -> bool) ($16 (((BASIS $2) $1) $0))) (((($25 ($14
   $2)) $1) $0) $2))))))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(y :strid). ((! :(int -> bool) -> bool) (\(y'''''' :int).
   ((! :(strexp -> bool) -> bool) (\(y''''' :strexp).
   ((! :(int option -> bool) -> bool) (\(y'''' :int option).
   ((! :(basis -> bool) -> bool) (\(y''' :basis).
   (((= :'b -> 'b -> bool) ($17 (((((FUNCLOS $4) $3) $2) $1) $0)))
   ((((((($26 ($12 $1)) ($18 $0)) $4) $3) $2) $1) $0))))))))))))) ((/\
   ((! :((funid # funclos) list finmap -> bool) -> bool)
   (\(y :(funid # funclos) list finmap). (((= :'c -> 'c -> bool) ($12
   (FUNENV $0))) (($21 ($9 $0)) $0))))) ((/\
   ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(funclos -> bool) -> bool) (\(y'' :funclos).
   (((= :'d -> 'd -> bool) ($12
   (((, :funid -> funclos -> funid # funclos) $1) $0))) ((($21 ($14
   $0)) $1) $0))))))) ((/\ (((= :'e -> 'e -> bool) ($9
   (NIL :(funid # funclos) list))) $18)) ((/\
   ((! :(funid # funclos -> bool) -> bool) (\(y :funid # funclos).
   ((! :((funid # funclos) list -> bool) -> bool)
   (\(y' :(funid # funclos) list). (((= :'e -> 'e -> bool) ($11
   (((CONS :funid # funclos -> (funid # funclos) list ->
            (funid # funclos) list) $1) $0))) (((($19 ($12 $1)) ($11
   $0)) $1) $0))))))) ((/\
   ((! :((funid # funclos) list -> bool) -> bool)
   (\(y :(funid # funclos) list). (((= :'f -> 'f -> bool) ($9
   ((FINMAP :(funid # funclos) list -> (funid # funclos) list finmap)
   $0))) (($17 ($10 $0)) $0))))) ((/\ (((= :'g -> 'g -> bool) ($7
   (NONE :int option))) $15)) ((! :(int -> bool) -> bool) (\(y :int).
   (((= :'g -> 'g -> bool) ($8 ((SOME :int -> int option) $0))) ($15
   $0))))))))))))) ((==> ((/\ ((! :(funenv -> bool) -> bool)
   (\(y :funenv). ((! :(sigenv -> bool) -> bool)
   (\(y'''''''' :sigenv). ((! :(env -> bool) -> bool)
   (\(y''''''' :env). (((= :'a -> 'a -> bool) ($9 (((BASIS $2) $1)
   $0))) (((($25 ($7 $2)) $1) $0) $2))))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(int -> bool) -> bool) (\(y'''''' :int).
   ((! :(strexp -> bool) -> bool) (\(y''''' :strexp).
   ((! :(int option -> bool) -> bool) (\(y'''' :int option).
   ((! :(basis -> bool) -> bool) (\(y''' :basis).
   (((= :'b -> 'b -> bool) ($10 (((((FUNCLOS $4) $3) $2) $1) $0)))
   ((((((($26 ($5 $1)) ($11 $0)) $4) $3) $2) $1) $0))))))))))))) ((/\
   ((! :((funid # funclos) list finmap -> bool) -> bool)
   (\(y :(funid # funclos) list finmap). (((= :'c -> 'c -> bool) ($5
   (FUNENV $0))) (($21 ($2 $0)) $0))))) ((/\
   ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(funclos -> bool) -> bool) (\(y'' :funclos).
   (((= :'d -> 'd -> bool) ($5
   (((, :funid -> funclos -> funid # funclos) $1) $0))) ((($21 ($7
   $0)) $1) $0))))))) ((/\ (((= :'e -> 'e -> bool) ($2
   (NIL :(funid # funclos) list))) $18)) ((/\
   ((! :(funid # funclos -> bool) -> bool) (\(y :funid # funclos).
   ((! :((funid # funclos) list -> bool) -> bool)
   (\(y' :(funid # funclos) list). (((= :'e -> 'e -> bool) ($4
   (((CONS :funid # funclos -> (funid # funclos) list ->
            (funid # funclos) list) $1) $0))) (((($19 ($5 $1)) ($4
   $0)) $1) $0))))))) ((/\
   ((! :((funid # funclos) list -> bool) -> bool)
   (\(y :(funid # funclos) list). (((= :'f -> 'f -> bool) ($2
   ((FINMAP :(funid # funclos) list -> (funid # funclos) list finmap)
   $0))) (($17 ($3 $0)) $0))))) ((/\ (((= :'g -> 'g -> bool) ($0
   (NONE :int option))) $15)) ((! :(int -> bool) -> bool) (\(y :int).
   (((= :'g -> 'g -> bool) ($1 ((SOME :int -> int option) $0))) ($15
   $0))))))))))))) ((/\ (((= :(basis -> 'a) -> (basis -> 'a) -> bool)
   $13) $6)) ((/\ (((= :(funclos -> 'b) -> (funclos -> 'b) -> bool)
   $12) $5)) ((/\ (((= :(funenv -> 'c) -> (funenv -> 'c) -> bool) $11)
   $4)) ((/\
   (((= :(funid # funclos -> 'd) -> (funid # funclos -> 'd) -> bool)
   $10) $3)) ((/\
   (((= :((funid # funclos) list -> 'e) ->
         ((funid # funclos) list -> 'e) -> bool) $9) $2)) ((/\
   (((= :((funid # funclos) list finmap -> 'f) ->
         ((funid # funclos) list finmap -> 'f) -> bool) $8) $1))
   (((= :(int option -> 'g) -> (int option -> 'g) -> bool) $7)
   $0)))))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((ModMLBases_induction_thm),
  [],
  `((! :((basis -> bool) -> bool) -> bool)
   (\(basis_Prop :basis -> bool).
   ((! :((funclos -> bool) -> bool) -> bool)
   (\(funclos_Prop :funclos -> bool).
   ((! :((funenv -> bool) -> bool) -> bool)
   (\(funenv_Prop :funenv -> bool).
   ((! :((funid # funclos -> bool) -> bool) -> bool)
   (\(funid_funclos_prod_basis_funclos_funenv_Prop :funid # funclos ->
                                                    bool).
   ((! :(((funid # funclos) list -> bool) -> bool) -> bool)
   (\(funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_Prop :(funid #
                                                                              funclos)
                                                                              list ->
                                                                              bool).
   ((! :(((funid # funclos) list finmap -> bool) -> bool) -> bool)
   (\(funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_Prop :(funid #
                                                                                                          funclos)
                                                                                                          list
                                                                                                          finmap ->
                                                                                                          bool).
   ((! :((int option -> bool) -> bool) -> bool)
   (\(option_basis_funclos_funenv_Prop :int option -> bool). ((==>
   ((/\ ((! :(funenv -> bool) -> bool) (\(y :funenv).
   ((! :(sigenv -> bool) -> bool) (\(y'''''''' :sigenv).
   ((! :(env -> bool) -> bool) (\(y''''''' :env). ((==> ($7 $2)) ($9
   (((BASIS $2) $1) $0)))))))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(y :strid). ((! :(int -> bool) -> bool) (\(y'''''' :int).
   ((! :(strexp -> bool) -> bool) (\(y''''' :strexp).
   ((! :(int option -> bool) -> bool) (\(y'''' :int option).
   ((! :(basis -> bool) -> bool) (\(y''' :basis). ((==> ($5 $1)) ((==>
   ($11 $0)) ($10 (((((FUNCLOS $4) $3) $2) $1) $0))))))))))))))) ((/\
   ((! :((funid # funclos) list finmap -> bool) -> bool)
   (\(y :(funid # funclos) list finmap). ((==> ($2 $0)) ($5 (FUNENV
   $0)))))) ((/\ ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(funclos -> bool) -> bool) (\(y'' :funclos). ((==> ($7 $0))
   ($5 (((, :funid -> funclos -> funid # funclos) $1) $0)))))))) ((/\
   ($2 (NIL :(funid # funclos) list))) ((/\
   ((! :(funid # funclos -> bool) -> bool) (\(y :funid # funclos).
   ((! :((funid # funclos) list -> bool) -> bool)
   (\(y' :(funid # funclos) list). ((==> ($5 $1)) ((==> ($4 $0)) ($4
   (((CONS :funid # funclos -> (funid # funclos) list ->
            (funid # funclos) list) $1) $0))))))))) ((/\
   ((! :((funid # funclos) list -> bool) -> bool)
   (\(y :(funid # funclos) list). ((==> ($3 $0)) ($2
   ((FINMAP :(funid # funclos) list -> (funid # funclos) list finmap)
   $0)))))) ((/\ ($0 (NONE :int option))) ((! :(int -> bool) -> bool)
   (\(y :int). ($1 ((SOME :int -> int option) $0))))))))))))) ((/\
   ((! :(basis -> bool) -> bool) (\(x1 :basis). ($7 $0)))) ((/\
   ((! :(funclos -> bool) -> bool) (\(x2 :funclos). ($6 $0)))) ((/\
   ((! :(funenv -> bool) -> bool) (\(x3 :funenv). ($5 $0)))) ((/\
   ((! :(funid # funclos -> bool) -> bool) (\(x4 :funid # funclos).
   ($4 $0)))) ((/\ ((! :((funid # funclos) list -> bool) -> bool)
   (\(x5 :(funid # funclos) list). ($3 $0)))) ((/\
   ((! :((funid # funclos) list finmap -> bool) -> bool)
   (\(x6 :(funid # funclos) list finmap). ($2 $0))))
   ((! :(int option -> bool) -> bool) (\(x7 :int option). ($1
   $0))))))))))))))))))))))))`),
 ((ModMLBases_rec_thm),
  [],
  `((! :(('c -> sigenv -> env -> funenv -> 'a) -> bool) -> bool)
   (\(BASIS_case :'c -> sigenv -> env -> funenv -> 'a).
   ((! :(('g -> 'a -> strid -> int -> strexp -> int option -> basis ->
         'b) -> bool) -> bool)
   (\(FUNCLOS_case :'g -> 'a -> strid -> int -> strexp ->
                    int option -> basis -> 'b).
   ((! :(('f -> (funid # funclos) list finmap -> 'c) -> bool) -> bool)
   (\(FUNENV_case :'f -> (funid # funclos) list finmap -> 'c).
   ((! :(('b -> funid -> funclos -> 'd) -> bool) -> bool)
   (\(basis_funclos_funenv_ch44_funid_funclos_case :'b -> funid ->
                                                    funclos -> 'd).
   ((! :('e -> bool) -> bool)
   (\(basis_funclos_funenv_NIL_funid_funclos_prod_basis_funclos_funenv_case :'e).
   ((! :(('d -> 'e -> funid # funclos -> (funid # funclos) list ->
         'e) -> bool) -> bool)
   (\(basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv_case :'d ->
                                                                              'e ->
                                                                              funid #
                                                                              funclos ->
                                                                              (funid #
                                                                              funclos)
                                                                              list ->
                                                                              'e).
   ((! :(('e -> (funid # funclos) list -> 'f) -> bool) -> bool)
   (\(basis_funclos_funenv_FINMAP_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_case :'e ->
                                                                                                          (funid #
                                                                                                          funclos)
                                                                                                          list ->
                                                                                                          'f).
   ((! :('g -> bool) -> bool)
   (\(basis_funclos_funenv_NONE_int_case :'g).
   ((! :((int -> 'g) -> bool) -> bool)
   (\(basis_funclos_funenv_SOME_int_case :int -> 'g).
   ((? :((basis -> 'a) -> bool) -> bool) (\(y :basis -> 'a).
   ((? :((funclos -> 'b) -> bool) -> bool) (\(y'''''' :funclos -> 'b).
   ((? :((funenv -> 'c) -> bool) -> bool) (\(y''''' :funenv -> 'c).
   ((? :((funid # funclos -> 'd) -> bool) -> bool)
   (\(y'''' :funid # funclos -> 'd).
   ((? :(((funid # funclos) list -> 'e) -> bool) -> bool)
   (\(y''' :(funid # funclos) list -> 'e).
   ((? :(((funid # funclos) list finmap -> 'f) -> bool) -> bool)
   (\(y'' :(funid # funclos) list finmap -> 'f).
   ((? :((int option -> 'g) -> bool) -> bool)
   (\(y' :int option -> 'g). ((/\ ((! :(funenv -> bool) -> bool)
   (\(x1 :funenv). ((! :(sigenv -> bool) -> bool) (\(x2 :sigenv).
   ((! :(env -> bool) -> bool) (\(x3 :env). (((= :'a -> 'a -> bool)
   ($9 (((BASIS $2) $1) $0))) (((($18 ($7 $2)) $1) $0) $2)))))))))
   ((/\ ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int -> bool) -> bool) (\(x2 :int).
   ((! :(strexp -> bool) -> bool) (\(x3 :strexp).
   ((! :(int option -> bool) -> bool) (\(x4 :int option).
   ((! :(basis -> bool) -> bool) (\(x5 :basis).
   (((= :'b -> 'b -> bool) ($10 (((((FUNCLOS $4) $3) $2) $1) $0)))
   ((((((($19 ($5 $1)) ($11 $0)) $4) $3) $2) $1) $0))))))))))))) ((/\
   ((! :((funid # funclos) list finmap -> bool) -> bool)
   (\(x1 :(funid # funclos) list finmap). (((= :'c -> 'c -> bool) ($5
   (FUNENV $0))) (($14 ($2 $0)) $0))))) ((/\
   ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(funclos -> bool) -> bool) (\(x2 :funclos).
   (((= :'d -> 'd -> bool) ($5
   (((, :funid -> funclos -> funid # funclos) $1) $0))) ((($14 ($7
   $0)) $1) $0))))))) ((/\ (((= :'e -> 'e -> bool) ($2
   (NIL :(funid # funclos) list))) $11)) ((/\
   ((! :(funid # funclos -> bool) -> bool) (\(x1 :funid # funclos).
   ((! :((funid # funclos) list -> bool) -> bool)
   (\(x2 :(funid # funclos) list). (((= :'e -> 'e -> bool) ($4
   (((CONS :funid # funclos -> (funid # funclos) list ->
            (funid # funclos) list) $1) $0))) (((($12 ($5 $1)) ($4
   $0)) $1) $0))))))) ((/\
   ((! :((funid # funclos) list -> bool) -> bool)
   (\(x1 :(funid # funclos) list). (((= :'f -> 'f -> bool) ($2
   ((FINMAP :(funid # funclos) list -> (funid # funclos) list finmap)
   $0))) (($10 ($3 $0)) $0))))) ((/\ (((= :'g -> 'g -> bool) ($0
   (NONE :int option))) $8)) ((! :(int -> bool) -> bool) (\(x1 :int).
   (((= :'g -> 'g -> bool) ($1 ((SOME :int -> int option) $0))) ($8
   $0))))))))))))))))))))))))))))))))))))))))))))`),
 ((joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv_Axiom),
  [],
  `((! :(('a -> sigenv -> env ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         'a) -> bool) -> bool)
   (\(f0 :'a -> sigenv -> env ->
          joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
          'a).
   ((! :(('a -> 'a -> strid -> int -> strexp ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         'a) -> bool) -> bool)
   (\(f1 :'a -> 'a -> strid -> int -> strexp ->
          joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
          joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
          'a).
   ((! :(('a ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         'a) -> bool) -> bool)
   (\(f2 :'a ->
          joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
          'a).
   ((! :(('a -> funid ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         'a) -> bool) -> bool)
   (\(f3 :'a -> funid ->
          joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
          'a). ((! :('a -> bool) -> bool) (\(e0 :'a).
   ((! :(('a -> 'a ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         'a) -> bool) -> bool)
   (\(f4 :'a -> 'a ->
          joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
          joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
          'a).
   ((! :(('a ->
         joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
         'a) -> bool) -> bool)
   (\(f5 :'a ->
          joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
          'a). ((! :('a -> bool) -> bool) (\(e1 :'a).
   ((! :((int -> 'a) -> bool) -> bool) (\(f6 :int -> 'a).
   ((?! :((joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
          'a) -> bool) -> bool)
   (\(fn :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
          'a). ((/\
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   ((! :(sigenv -> bool) -> bool) (\(s :sigenv).
   ((! :(env -> bool) -> bool) (\(e :env). (((= :'a -> 'a -> bool) ($3
   (((JOINT_int_BASIS $2) $1) $0))) (((($12 ($3 $2)) $1) $0)
   $2))))))))) ((/\ ((! :(strid -> bool) -> bool) (\(s0 :strid).
   ((! :(int -> bool) -> bool) (\(i :int).
   ((! :(strexp -> bool) -> bool) (\(s1 :strexp).
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j1 :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j2 :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :'a -> 'a -> bool) ($5 (((((JOINT_int_FUNCLOS $4) $3) $2) $1)
   $0))) ((((((($13 ($5 $1)) ($5 $0)) $4) $3) $2) $1) $0)))))))))))))
   ((/\
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_FUNENV $0))) (($8 ($1 $0))
   $0))))) ((/\ ((! :(funid -> bool) -> bool) (\(f' :funid).
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :'a -> 'a -> bool) ($2
   ((JOINT_int_basis_funclos_funenv_ch44_funid_funclos $1) $0))) ((($8
   ($2 $0)) $1) $0))))))) ((/\ (((= :'a -> 'a -> bool) ($0
   JOINT_int_basis_funclos_funenv_NIL_funid_funclos_prod_basis_funclos_funenv))
   $5)) ((/\
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j1 :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j2 :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :'a -> 'a -> bool) ($2
   ((JOINT_int_basis_funclos_funenv_CONS_funid_funclos_prod_basis_funclos_funenv
   $1) $0))) (((($6 ($2 $1)) ($2 $0)) $1) $0))))))) ((/\
   ((! :(joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv ->
        bool) -> bool)
   (\(j :joint_ty_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv_finmap_basis_funclos_funenv_int_option_basis_funclos_funenv).
   (((= :'a -> 'a -> bool) ($1
   (JOINT_int_basis_funclos_funenv_FINMAP_funid_funclos_prod_basis_funclos_funenv_list_basis_funclos_funenv
   $0))) (($4 ($1 $0)) $0))))) ((/\ (((= :'a -> 'a -> bool) ($0
   JOINT_int_basis_funclos_funenv_NONE_int)) $2))
   ((! :(int -> bool) -> bool) (\(i :int). (((= :'a -> 'a -> bool) ($1
   (JOINT_int_basis_funclos_funenv_SOME_int $0))) ($2
   $0))))))))))))))))))))))))))))))))`),
 ((intbasis_constructors_one_one),
  [],
  `((! :(sigenv -> bool) -> bool) (\(s :sigenv).
   ((! :(intenv -> bool) -> bool) (\(i :intenv).
   ((! :(sigenv -> bool) -> bool) (\(s' :sigenv).
   ((! :(intenv -> bool) -> bool) (\(i' :intenv).
   (((= :bool -> bool -> bool) (((= :intbasis -> intbasis -> bool)
   ((INTBASIS $3) $2)) ((INTBASIS $1) $0))) ((/\
   (((= :sigenv -> sigenv -> bool) $3) $1))
   (((= :intenv -> intenv -> bool) $2) $0)))))))))))`),
 ((intbasis_cases_thm),
  [],
  `((! :(intbasis -> bool) -> bool) (\(i :intbasis).
   ((? :(sigenv -> bool) -> bool) (\(s :sigenv).
   ((? :(intenv -> bool) -> bool) (\(i' :intenv).
   (((= :intbasis -> intbasis -> bool) $2) ((INTBASIS $1)
   $0))))))))`),
 ((intbasis_induction_thm),
  [],
  `((! :((intbasis -> bool) -> bool) -> bool) (\(P :intbasis -> bool).
   ((==> ((! :(sigenv -> bool) -> bool) (\(s :sigenv).
   ((! :(intenv -> bool) -> bool) (\(i :intenv). ($2 ((INTBASIS $1)
   $0))))))) ((! :(intbasis -> bool) -> bool) (\(i :intbasis). ($1
   $0))))))`),
 ((intbasis),
  [],
  `((! :((sigenv -> intenv -> 'a) -> bool) -> bool)
   (\(f :sigenv -> intenv -> 'a).
   ((?! :((intbasis -> 'a) -> bool) -> bool) (\(fn :intbasis -> 'a).
   ((! :(sigenv -> bool) -> bool) (\(s :sigenv).
   ((! :(intenv -> bool) -> bool) (\(i :intenv).
   (((= :'a -> 'a -> bool) ($2 ((INTBASIS $1) $0))) (($3 $1)
   $0))))))))))`),
 ((sigenv_constructors_one_one),
  [],
  `((! :((sigid -> int lift) -> bool) -> bool)
   (\(f' :sigid -> int lift).
   ((! :((sigid -> int lift) -> bool) -> bool)
   (\(f'' :sigid -> int lift). (((= :bool -> bool -> bool)
   (((= :sigenv -> sigenv -> bool) (SIGENV $1)) (SIGENV $0)))
   (((= :(sigid -> int lift) -> (sigid -> int lift) -> bool) $1)
   $0))))))`),
 ((sigenv_cases_thm),
  [],
  `((! :(sigenv -> bool) -> bool) (\(s :sigenv).
   ((? :((sigid -> int lift) -> bool) -> bool)
   (\(f' :sigid -> int lift). (((= :sigenv -> sigenv -> bool) $1)
   (SIGENV $0))))))`),
 ((sigenv_induction_thm),
  [],
  `((! :((sigenv -> bool) -> bool) -> bool) (\(P :sigenv -> bool).
   ((==> ((! :((sigid -> int lift) -> bool) -> bool)
   (\(f' :sigid -> int lift). ($1 (SIGENV $0)))))
   ((! :(sigenv -> bool) -> bool) (\(s :sigenv). ($1 $0))))))`),
 ((sigenv),
  [],
  `((! :(((sigid -> int lift) -> 'a) -> bool) -> bool)
   (\(f :(sigid -> int lift) -> 'a).
   ((?! :((sigenv -> 'a) -> bool) -> bool) (\(fn :sigenv -> 'a).
   ((! :((sigid -> int lift) -> bool) -> bool)
   (\(f' :sigid -> int lift). (((= :'a -> 'a -> bool) ($1 (SIGENV
   $0))) ($2 $0))))))))`),
 ((ModMLInterfaces_cases_thm),
  [],
  `((/\ ((! :(int -> bool) -> bool) (\(x1 :int).
   ((? :(intenv -> bool) -> bool) (\(y :intenv).
   ((? :(var set -> bool) -> bool) (\(y'' :var set).
   ((? :(excon set -> bool) -> bool) (\(y' :excon set).
   (((= :int -> int -> bool) $3) (((BASICint $2) $1) $0)))))))))))
   ((/\ ((! :(intenv -> bool) -> bool) (\(x2 :intenv).
   ((? :((strid # int) list finmap -> bool) -> bool)
   (\(y :(strid # int) list finmap). (((= :intenv -> intenv -> bool)
   $1) (INTENV $0))))))) ((/\ ((! :(strid # int -> bool) -> bool)
   (\(x3 :strid # int). ((? :(strid -> bool) -> bool) (\(y :strid).
   ((? :(int -> bool) -> bool) (\(y' :int).
   (((= :strid # int -> strid # int -> bool) $2)
   (((, :strid -> int -> strid # int) $1) $0))))))))) ((/\
   ((! :((strid # int) list -> bool) -> bool)
   (\(x4 :(strid # int) list). ((\/
   (((= :(strid # int) list -> (strid # int) list -> bool) $0)
   (NIL :(strid # int) list))) ((? :(strid # int -> bool) -> bool)
   (\(y :strid # int). ((? :((strid # int) list -> bool) -> bool)
   (\(y' :(strid # int) list).
   (((= :(strid # int) list -> (strid # int) list -> bool) $2)
   (((CONS :strid # int -> (strid # int) list -> (strid # int) list)
   $1) $0)))))))))) ((! :((strid # int) list finmap -> bool) -> bool)
   (\(x5 :(strid # int) list finmap).
   ((? :((strid # int) list -> bool) -> bool)
   (\(y :(strid # int) list).
   (((= :(strid # int) list finmap -> (strid # int) list finmap ->
         bool) $1)
   ((FINMAP :(strid # int) list -> (strid # int) list finmap)
   $0))))))))))`),
 ((ModMLInterfaces_one_one_thm),
  [],
  `((/\ ((! :(intenv -> bool) -> bool) (\(x1 :intenv).
   ((! :(var set -> bool) -> bool) (\(x2 :var set).
   ((! :(excon set -> bool) -> bool) (\(x3 :excon set).
   ((! :(intenv -> bool) -> bool) (\(x1' :intenv).
   ((! :(var set -> bool) -> bool) (\(x2' :var set).
   ((! :(excon set -> bool) -> bool) (\(x3' :excon set).
   (((= :bool -> bool -> bool) (((= :int -> int -> bool) (((BASICint
   $5) $4) $3)) (((BASICint $2) $1) $0))) ((/\
   (((= :intenv -> intenv -> bool) $5) $2)) ((/\
   (((= :var set -> var set -> bool) $4) $1))
   (((= :excon set -> excon set -> bool) $3) $0))))))))))))))))) ((/\
   ((! :((strid # int) list finmap -> bool) -> bool)
   (\(x1 :(strid # int) list finmap).
   ((! :((strid # int) list finmap -> bool) -> bool)
   (\(x1' :(strid # int) list finmap). (((= :bool -> bool -> bool)
   (((= :intenv -> intenv -> bool) (INTENV $1)) (INTENV $0)))
   (((= :(strid # int) list finmap -> (strid # int) list finmap ->
         bool) $1) $0))))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(x1 :strid). ((! :(int -> bool) -> bool) (\(x2 :int).
   ((! :(strid -> bool) -> bool) (\(x1' :strid).
   ((! :(int -> bool) -> bool) (\(x2' :int).
   (((= :bool -> bool -> bool)
   (((= :strid # int -> strid # int -> bool)
   (((, :strid -> int -> strid # int) $3) $2))
   (((, :strid -> int -> strid # int) $1) $0))) ((/\
   (((= :strid -> strid -> bool) $3) $1)) (((= :int -> int -> bool)
   $2) $0)))))))))))) ((/\ ((! :(strid # int -> bool) -> bool)
   (\(x1 :strid # int). ((! :((strid # int) list -> bool) -> bool)
   (\(x2 :(strid # int) list). ((! :(strid # int -> bool) -> bool)
   (\(x1' :strid # int). ((! :((strid # int) list -> bool) -> bool)
   (\(x2' :(strid # int) list). (((= :bool -> bool -> bool)
   (((= :(strid # int) list -> (strid # int) list -> bool)
   (((CONS :strid # int -> (strid # int) list -> (strid # int) list)
   $3) $2))
   (((CONS :strid # int -> (strid # int) list -> (strid # int) list)
   $1) $0))) ((/\ (((= :strid # int -> strid # int -> bool) $3) $1))
   (((= :(strid # int) list -> (strid # int) list -> bool) $2)
   $0)))))))))))) ((! :((strid # int) list -> bool) -> bool)
   (\(x1 :(strid # int) list).
   ((! :((strid # int) list -> bool) -> bool)
   (\(x1' :(strid # int) list). (((= :bool -> bool -> bool)
   (((= :(strid # int) list finmap -> (strid # int) list finmap ->
         bool)
   ((FINMAP :(strid # int) list -> (strid # int) list finmap) $1))
   ((FINMAP :(strid # int) list -> (strid # int) list finmap) $0)))
   (((= :(strid # int) list -> (strid # int) list -> bool) $1)
   $0))))))))))`),
 ((ModMLInterfaces_distinct_thm),
  [],
  `((! :(strid # int -> bool) -> bool) (\(x1' :strid # int).
   ((! :((strid # int) list -> bool) -> bool)
   (\(x2' :(strid # int) list). (~
   (((= :(strid # int) list -> (strid # int) list -> bool)
   (NIL :(strid # int) list))
   (((CONS :strid # int -> (strid # int) list -> (strid # int) list)
   $1) $0)))))))`),
 ((ModMLInterfaces_unique_thm),
  [],
  `((! :(('b -> var set -> excon set -> intenv -> 'a) -> bool) ->
        bool)
   (\(BASICint_case :'b -> var set -> excon set -> intenv -> 'a).
   ((! :(('e -> (strid # int) list finmap -> 'b) -> bool) -> bool)
   (\(INTENV_case :'e -> (strid # int) list finmap -> 'b).
   ((! :(('a -> strid -> int -> 'c) -> bool) -> bool)
   (\(int_intenv_ch44_strid_int_case :'a -> strid -> int -> 'c).
   ((! :('d -> bool) -> bool)
   (\(int_intenv_NIL_strid_int_prod_int_intenv_case :'d).
   ((! :(('c -> 'd -> strid # int -> (strid # int) list -> 'd) ->
        bool) -> bool)
   (\(int_intenv_CONS_strid_int_prod_int_intenv_case :'c -> 'd ->
                                                      strid # int ->
                                                      (strid # int)
                                                      list -> 'd).
   ((! :(('d -> (strid # int) list -> 'e) -> bool) -> bool)
   (\(int_intenv_FINMAP_strid_int_prod_int_intenv_list_int_intenv_case :'d ->
                                                                        (strid #
                                                                        int)
                                                                        list ->
                                                                        'e).
   ((! :((int -> 'a) -> bool) -> bool) (\(fn1 :int -> 'a).
   ((! :((intenv -> 'b) -> bool) -> bool) (\(fn2 :intenv -> 'b).
   ((! :((strid # int -> 'c) -> bool) -> bool)
   (\(fn3 :strid # int -> 'c).
   ((! :(((strid # int) list -> 'd) -> bool) -> bool)
   (\(fn4 :(strid # int) list -> 'd).
   ((! :(((strid # int) list finmap -> 'e) -> bool) -> bool)
   (\(fn5 :(strid # int) list finmap -> 'e).
   ((! :((int -> 'a) -> bool) -> bool) (\(fn1' :int -> 'a).
   ((! :((intenv -> 'b) -> bool) -> bool) (\(fn2' :intenv -> 'b).
   ((! :((strid # int -> 'c) -> bool) -> bool)
   (\(fn3' :strid # int -> 'c).
   ((! :(((strid # int) list -> 'd) -> bool) -> bool)
   (\(fn4' :(strid # int) list -> 'd).
   ((! :(((strid # int) list finmap -> 'e) -> bool) -> bool)
   (\(fn5' :(strid # int) list finmap -> 'e). ((==> ((/\
   ((! :(intenv -> bool) -> bool) (\(y :intenv).
   ((! :(var set -> bool) -> bool) (\(y'''' :var set).
   ((! :(excon set -> bool) -> bool) (\(y''' :excon set).
   (((= :'a -> 'a -> bool) ($12 (((BASICint $2) $1) $0))) (((($18 ($11
   $2)) $1) $0) $2))))))))) ((/\
   ((! :((strid # int) list finmap -> bool) -> bool)
   (\(y :(strid # int) list finmap). (((= :'b -> 'b -> bool) ($9
   (INTENV $0))) (($15 ($6 $0)) $0))))) ((/\
   ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(int -> bool) -> bool) (\(y'' :int). (((= :'c -> 'c -> bool)
   ($9 (((, :strid -> int -> strid # int) $1) $0))) ((($15 ($11 $0))
   $1) $0))))))) ((/\ (((= :'d -> 'd -> bool) ($6
   (NIL :(strid # int) list))) $12)) ((/\
   ((! :(strid # int -> bool) -> bool) (\(y :strid # int).
   ((! :((strid # int) list -> bool) -> bool)
   (\(y' :(strid # int) list). (((= :'d -> 'd -> bool) ($8
   (((CONS :strid # int -> (strid # int) list -> (strid # int) list)
   $1) $0))) (((($13 ($9 $1)) ($8 $0)) $1) $0)))))))
   ((! :((strid # int) list -> bool) -> bool)
   (\(y :(strid # int) list). (((= :'e -> 'e -> bool) ($6
   ((FINMAP :(strid # int) list -> (strid # int) list finmap) $0)))
   (($11 ($7 $0)) $0)))))))))) ((==> ((/\
   ((! :(intenv -> bool) -> bool) (\(y :intenv).
   ((! :(var set -> bool) -> bool) (\(y'''' :var set).
   ((! :(excon set -> bool) -> bool) (\(y''' :excon set).
   (((= :'a -> 'a -> bool) ($7 (((BASICint $2) $1) $0))) (((($18 ($6
   $2)) $1) $0) $2))))))))) ((/\
   ((! :((strid # int) list finmap -> bool) -> bool)
   (\(y :(strid # int) list finmap). (((= :'b -> 'b -> bool) ($4
   (INTENV $0))) (($15 ($1 $0)) $0))))) ((/\
   ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(int -> bool) -> bool) (\(y'' :int). (((= :'c -> 'c -> bool)
   ($4 (((, :strid -> int -> strid # int) $1) $0))) ((($15 ($6 $0))
   $1) $0))))))) ((/\ (((= :'d -> 'd -> bool) ($1
   (NIL :(strid # int) list))) $12)) ((/\
   ((! :(strid # int -> bool) -> bool) (\(y :strid # int).
   ((! :((strid # int) list -> bool) -> bool)
   (\(y' :(strid # int) list). (((= :'d -> 'd -> bool) ($3
   (((CONS :strid # int -> (strid # int) list -> (strid # int) list)
   $1) $0))) (((($13 ($4 $1)) ($3 $0)) $1) $0)))))))
   ((! :((strid # int) list -> bool) -> bool)
   (\(y :(strid # int) list). (((= :'e -> 'e -> bool) ($1
   ((FINMAP :(strid # int) list -> (strid # int) list finmap) $0)))
   (($11 ($2 $0)) $0)))))))))) ((/\
   (((= :(int -> 'a) -> (int -> 'a) -> bool) $9) $4)) ((/\
   (((= :(intenv -> 'b) -> (intenv -> 'b) -> bool) $8) $3)) ((/\
   (((= :(strid # int -> 'c) -> (strid # int -> 'c) -> bool) $7) $2))
   ((/\
   (((= :((strid # int) list -> 'd) -> ((strid # int) list -> 'd) ->
         bool) $6) $1))
   (((= :((strid # int) list finmap -> 'e) ->
         ((strid # int) list finmap -> 'e) -> bool) $5)
   $0)))))))))))))))))))))))))))))))))))))))`),
 ((ModMLInterfaces_induction_thm),
  [],
  `((! :((int -> bool) -> bool) -> bool) (\(Prop :int -> bool).
   ((! :((intenv -> bool) -> bool) -> bool)
   (\(intenv_Prop :intenv -> bool).
   ((! :((strid # int -> bool) -> bool) -> bool)
   (\(strid_int_prod_int_intenv_Prop :strid # int -> bool).
   ((! :(((strid # int) list -> bool) -> bool) -> bool)
   (\(strid_int_prod_int_intenv_list_int_intenv_Prop :(strid # int)
                                                      list -> bool).
   ((! :(((strid # int) list finmap -> bool) -> bool) -> bool)
   (\(strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_Prop :(strid #
                                                                        int)
                                                                        list
                                                                        finmap ->
                                                                        bool).
   ((==> ((/\ ((! :(intenv -> bool) -> bool) (\(y :intenv).
   ((! :(var set -> bool) -> bool) (\(y'''' :var set).
   ((! :(excon set -> bool) -> bool) (\(y''' :excon set). ((==> ($6
   $2)) ($7 (((BASICint $2) $1) $0)))))))))) ((/\
   ((! :((strid # int) list finmap -> bool) -> bool)
   (\(y :(strid # int) list finmap). ((==> ($1 $0)) ($4 (INTENV
   $0)))))) ((/\ ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(int -> bool) -> bool) (\(y'' :int). ((==> ($6 $0)) ($4
   (((, :strid -> int -> strid # int) $1) $0)))))))) ((/\ ($1
   (NIL :(strid # int) list))) ((/\
   ((! :(strid # int -> bool) -> bool) (\(y :strid # int).
   ((! :((strid # int) list -> bool) -> bool)
   (\(y' :(strid # int) list). ((==> ($4 $1)) ((==> ($3 $0)) ($3
   (((CONS :strid # int -> (strid # int) list -> (strid # int) list)
   $1) $0))))))))) ((! :((strid # int) list -> bool) -> bool)
   (\(y :(strid # int) list). ((==> ($2 $0)) ($1
   ((FINMAP :(strid # int) list -> (strid # int) list finmap)
   $0))))))))))) ((/\ ((! :(int -> bool) -> bool) (\(x1 :int). ($5
   $0)))) ((/\ ((! :(intenv -> bool) -> bool) (\(x2 :intenv). ($4
   $0)))) ((/\ ((! :(strid # int -> bool) -> bool)
   (\(x3 :strid # int). ($3 $0)))) ((/\
   ((! :((strid # int) list -> bool) -> bool)
   (\(x4 :(strid # int) list). ($2 $0))))
   ((! :((strid # int) list finmap -> bool) -> bool)
   (\(x5 :(strid # int) list finmap). ($1 $0))))))))))))))))))`),
 ((ModMLInterfaces_rec_thm),
  [],
  `((! :(('b -> var set -> excon set -> intenv -> 'a) -> bool) ->
        bool)
   (\(BASICint_case :'b -> var set -> excon set -> intenv -> 'a).
   ((! :(('e -> (strid # int) list finmap -> 'b) -> bool) -> bool)
   (\(INTENV_case :'e -> (strid # int) list finmap -> 'b).
   ((! :(('a -> strid -> int -> 'c) -> bool) -> bool)
   (\(int_intenv_ch44_strid_int_case :'a -> strid -> int -> 'c).
   ((! :('d -> bool) -> bool)
   (\(int_intenv_NIL_strid_int_prod_int_intenv_case :'d).
   ((! :(('c -> 'd -> strid # int -> (strid # int) list -> 'd) ->
        bool) -> bool)
   (\(int_intenv_CONS_strid_int_prod_int_intenv_case :'c -> 'd ->
                                                      strid # int ->
                                                      (strid # int)
                                                      list -> 'd).
   ((! :(('d -> (strid # int) list -> 'e) -> bool) -> bool)
   (\(int_intenv_FINMAP_strid_int_prod_int_intenv_list_int_intenv_case :'d ->
                                                                        (strid #
                                                                        int)
                                                                        list ->
                                                                        'e).
   ((? :((int -> 'a) -> bool) -> bool) (\(y :int -> 'a).
   ((? :((intenv -> 'b) -> bool) -> bool) (\(y'''' :intenv -> 'b).
   ((? :((strid # int -> 'c) -> bool) -> bool)
   (\(y''' :strid # int -> 'c).
   ((? :(((strid # int) list -> 'd) -> bool) -> bool)
   (\(y'' :(strid # int) list -> 'd).
   ((? :(((strid # int) list finmap -> 'e) -> bool) -> bool)
   (\(y' :(strid # int) list finmap -> 'e). ((/\
   ((! :(intenv -> bool) -> bool) (\(x1 :intenv).
   ((! :(var set -> bool) -> bool) (\(x2 :var set).
   ((! :(excon set -> bool) -> bool) (\(x3 :excon set).
   (((= :'a -> 'a -> bool) ($7 (((BASICint $2) $1) $0))) (((($13 ($6
   $2)) $1) $0) $2))))))))) ((/\
   ((! :((strid # int) list finmap -> bool) -> bool)
   (\(x1 :(strid # int) list finmap). (((= :'b -> 'b -> bool) ($4
   (INTENV $0))) (($10 ($1 $0)) $0))))) ((/\
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(int -> bool) -> bool) (\(x2 :int). (((= :'c -> 'c -> bool)
   ($4 (((, :strid -> int -> strid # int) $1) $0))) ((($10 ($6 $0))
   $1) $0))))))) ((/\ (((= :'d -> 'd -> bool) ($1
   (NIL :(strid # int) list))) $7)) ((/\
   ((! :(strid # int -> bool) -> bool) (\(x1 :strid # int).
   ((! :((strid # int) list -> bool) -> bool)
   (\(x2 :(strid # int) list). (((= :'d -> 'd -> bool) ($3
   (((CONS :strid # int -> (strid # int) list -> (strid # int) list)
   $1) $0))) (((($8 ($4 $1)) ($3 $0)) $1) $0)))))))
   ((! :((strid # int) list -> bool) -> bool)
   (\(x1 :(strid # int) list). (((= :'e -> 'e -> bool) ($1
   ((FINMAP :(strid # int) list -> (strid # int) list finmap) $0)))
   (($6 ($2 $0)) $0)))))))))))))))))))))))))))))))`),
 ((joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv_Axiom),
  [],
  `((! :(('a -> var set -> excon set ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         'a) -> bool) -> bool)
   (\(f0 :'a -> var set -> excon set ->
          joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
          'a).
   ((! :(('a ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         'a) -> bool) -> bool)
   (\(f1 :'a ->
          joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
          'a).
   ((! :(('a -> strid ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         'a) -> bool) -> bool)
   (\(f2 :'a -> strid ->
          joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
          'a). ((! :('a -> bool) -> bool) (\(e :'a).
   ((! :(('a -> 'a ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         'a) -> bool) -> bool)
   (\(f3 :'a -> 'a ->
          joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
          joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
          'a).
   ((! :(('a ->
         joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
         'a) -> bool) -> bool)
   (\(f4 :'a ->
          joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
          'a).
   ((?! :((joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
          'a) -> bool) -> bool)
   (\(fn :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
          'a). ((/\
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(j :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   ((! :(var set -> bool) -> bool) (\(s0 :var set).
   ((! :(excon set -> bool) -> bool) (\(s1 :excon set).
   (((= :'a -> 'a -> bool) ($3 (((JOINT_int_BASICint $2) $1) $0)))
   (((($9 ($3 $2)) $1) $0) $2))))))))) ((/\
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(j :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_INTENV $0))) (($6 ($1 $0))
   $0))))) ((/\ ((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(j :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_int_intenv_ch44_strid_int
   $1) $0))) ((($6 ($2 $0)) $1) $0))))))) ((/\ (((= :'a -> 'a -> bool)
   ($0 JOINT_int_int_intenv_NIL_strid_int_prod_int_intenv)) $3)) ((/\
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(j1 :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(j2 :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :'a -> 'a -> bool) ($2
   ((JOINT_int_int_intenv_CONS_strid_int_prod_int_intenv $1) $0)))
   (((($4 ($2 $1)) ($2 $0)) $1) $0)))))))
   ((! :(joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv ->
        bool) -> bool)
   (\(j :joint_ty_int_intenv_strid_int_prod_int_intenv_strid_int_prod_int_intenv_list_int_intenv_strid_int_prod_int_intenv_list_int_intenv_finmap_int_intenv).
   (((= :'a -> 'a -> bool) ($1
   (JOINT_int_int_intenv_FINMAP_strid_int_prod_int_intenv_list_int_intenv
   $0))) (($2 ($1 $0)) $0)))))))))))))))))))))))`),
 ((strenv_pack_constructors_distinct),
  [],
  `((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(strenv -> bool) -> bool) (\(s :strenv). (~
   (((= :strenv_pack -> strenv_pack -> bool) (STRENVsp $0)) (PACKsp
   $1)))))))`),
 ((strenv_pack_constructors_one_one),
  [],
  `((/\ ((! :(strenv -> bool) -> bool) (\(s :strenv).
   ((! :(strenv -> bool) -> bool) (\(s' :strenv).
   (((= :bool -> bool -> bool)
   (((= :strenv_pack -> strenv_pack -> bool) (STRENVsp $1)) (STRENVsp
   $0))) (((= :strenv -> strenv -> bool) $1) $0)))))))
   ((! :(pack -> bool) -> bool) (\(p :pack).
   ((! :(pack -> bool) -> bool) (\(p' :pack).
   (((= :bool -> bool -> bool)
   (((= :strenv_pack -> strenv_pack -> bool) (PACKsp $1)) (PACKsp
   $0))) (((= :pack -> pack -> bool) $1) $0)))))))`),
 ((strenv_pack_cases_thm),
  [],
  `((! :(strenv_pack -> bool) -> bool) (\(s :strenv_pack). ((\/
   ((? :(strenv -> bool) -> bool) (\(s' :strenv).
   (((= :strenv_pack -> strenv_pack -> bool) $1) (STRENVsp $0)))))
   ((? :(pack -> bool) -> bool) (\(p :pack).
   (((= :strenv_pack -> strenv_pack -> bool) $1) (PACKsp $0)))))))`),
 ((strenv_pack_induction_thm),
  [],
  `((! :((strenv_pack -> bool) -> bool) -> bool)
   (\(P :strenv_pack -> bool). ((==> ((/\
   ((! :(strenv -> bool) -> bool) (\(s :strenv). ($1 (STRENVsp $0)))))
   ((! :(pack -> bool) -> bool) (\(p :pack). ($1 (PACKsp $0))))))
   ((! :(strenv_pack -> bool) -> bool) (\(s :strenv_pack). ($1
   $0))))))`),
 ((strenv_pack_Axiom),
  [],
  `((! :((strenv -> 'a) -> bool) -> bool) (\(f0 :strenv -> 'a).
   ((! :((pack -> 'a) -> bool) -> bool) (\(f1 :pack -> 'a).
   ((?! :((strenv_pack -> 'a) -> bool) -> bool)
   (\(fn :strenv_pack -> 'a). ((/\ ((! :(strenv -> bool) -> bool)
   (\(s :strenv). (((= :'a -> 'a -> bool) ($1 (STRENVsp $0))) ($3
   $0))))) ((! :(pack -> bool) -> bool) (\(p :pack).
   (((= :'a -> 'a -> bool) ($1 (PACKsp $0))) ($2 $0)))))))))))`),
 ((program_cases_thm),
  [],
  `((/\ ((! :(program -> bool) -> bool) (\(x1 :program).
   ((? :(topdec -> bool) -> bool) (\(y :topdec).
   ((? :(program option -> bool) -> bool) (\(y' :program option).
   (((= :program -> program -> bool) $2) ((SEQprogram $1) $0)))))))))
   ((! :(program option -> bool) -> bool) (\(x2 :program option). ((\/
   (((= :program option -> program option -> bool) $0)
   (NONE :program option))) ((? :(program -> bool) -> bool)
   (\(y :program). (((= :program option -> program option -> bool) $1)
   ((SOME :program -> program option) $0))))))))`),
 ((program_constructors_one_one),
  [],
  `((/\ ((! :(topdec -> bool) -> bool) (\(x1 :topdec).
   ((! :(program option -> bool) -> bool) (\(x2 :program option).
   ((! :(topdec -> bool) -> bool) (\(x1' :topdec).
   ((! :(program option -> bool) -> bool) (\(x2' :program option).
   (((= :bool -> bool -> bool) (((= :program -> program -> bool)
   ((SEQprogram $3) $2)) ((SEQprogram $1) $0))) ((/\
   (((= :topdec -> topdec -> bool) $3) $1))
   (((= :program option -> program option -> bool) $2) $0))))))))))))
   ((! :(program -> bool) -> bool) (\(x1 :program).
   ((! :(program -> bool) -> bool) (\(x1' :program).
   (((= :bool -> bool -> bool)
   (((= :program option -> program option -> bool)
   ((SOME :program -> program option) $1))
   ((SOME :program -> program option) $0)))
   (((= :program -> program -> bool) $1) $0)))))))`),
 ((program_constructors_distinct),
  [],
  `((! :(program -> bool) -> bool) (\(x1' :program). (~
   (((= :program option -> program option -> bool)
   (NONE :program option)) ((SOME :program -> program option)
   $0)))))`),
 ((program_unique_thm),
  [],
  `((! :(('b -> topdec -> program option -> 'a) -> bool) -> bool)
   (\(SEQprogram_case :'b -> topdec -> program option -> 'a).
   ((! :('b -> bool) -> bool) (\(program_NONE_program_case :'b).
   ((! :(('a -> program -> 'b) -> bool) -> bool)
   (\(program_SOME_program_case :'a -> program -> 'b).
   ((! :((program -> 'a) -> bool) -> bool) (\(fn1 :program -> 'a).
   ((! :((program option -> 'b) -> bool) -> bool)
   (\(fn2 :program option -> 'b).
   ((! :((program -> 'a) -> bool) -> bool) (\(fn1' :program -> 'a).
   ((! :((program option -> 'b) -> bool) -> bool)
   (\(fn2' :program option -> 'b). ((==> ((/\
   ((! :(topdec -> bool) -> bool) (\(y :topdec).
   ((! :(program option -> bool) -> bool) (\(y' :program option).
   (((= :'a -> 'a -> bool) ($5 ((SEQprogram $1) $0))) ((($8 ($4 $0))
   $1) $0))))))) ((/\ (((= :'b -> 'b -> bool) ($2
   (NONE :program option))) $5)) ((! :(program -> bool) -> bool)
   (\(y :program). (((= :'b -> 'b -> bool) ($3
   ((SOME :program -> program option) $0))) (($5 ($4 $0)) $0)))))))
   ((==> ((/\ ((! :(topdec -> bool) -> bool) (\(y :topdec).
   ((! :(program option -> bool) -> bool) (\(y' :program option).
   (((= :'a -> 'a -> bool) ($3 ((SEQprogram $1) $0))) ((($8 ($2 $0))
   $1) $0))))))) ((/\ (((= :'b -> 'b -> bool) ($0
   (NONE :program option))) $5)) ((! :(program -> bool) -> bool)
   (\(y :program). (((= :'b -> 'b -> bool) ($1
   ((SOME :program -> program option) $0))) (($5 ($2 $0)) $0)))))))
   ((/\ (((= :(program -> 'a) -> (program -> 'a) -> bool) $3) $1))
   (((= :(program option -> 'b) -> (program option -> 'b) -> bool) $2)
   $0))))))))))))))))))`),
 ((program_induction_thm),
  [],
  `((! :((program -> bool) -> bool) -> bool)
   (\(program_Prop :program -> bool).
   ((! :((program option -> bool) -> bool) -> bool)
   (\(program_option_program_Prop :program option -> bool). ((==> ((/\
   ((! :(topdec -> bool) -> bool) (\(y :topdec).
   ((! :(program option -> bool) -> bool) (\(y' :program option).
   ((==> ($2 $0)) ($3 ((SEQprogram $1) $0)))))))) ((/\ ($0
   (NONE :program option))) ((! :(program -> bool) -> bool)
   (\(y :program). ((==> ($2 $0)) ($1
   ((SOME :program -> program option) $0)))))))) ((/\
   ((! :(program -> bool) -> bool) (\(x1 :program). ($2 $0))))
   ((! :(program option -> bool) -> bool) (\(x2 :program option). ($1
   $0)))))))))`),
 ((program_rec_thm),
  [],
  `((! :(('b -> topdec -> program option -> 'a) -> bool) -> bool)
   (\(SEQprogram_case :'b -> topdec -> program option -> 'a).
   ((! :('b -> bool) -> bool) (\(program_NONE_program_case :'b).
   ((! :(('a -> program -> 'b) -> bool) -> bool)
   (\(program_SOME_program_case :'a -> program -> 'b).
   ((? :((program -> 'a) -> bool) -> bool) (\(y :program -> 'a).
   ((? :((program option -> 'b) -> bool) -> bool)
   (\(y' :program option -> 'b). ((/\ ((! :(topdec -> bool) -> bool)
   (\(x1 :topdec). ((! :(program option -> bool) -> bool)
   (\(x2 :program option). (((= :'a -> 'a -> bool) ($3 ((SEQprogram
   $1) $0))) ((($6 ($2 $0)) $1) $0))))))) ((/\ (((= :'b -> 'b -> bool)
   ($0 (NONE :program option))) $3)) ((! :(program -> bool) -> bool)
   (\(x1 :program). (((= :'b -> 'b -> bool) ($1
   ((SOME :program -> program option) $0))) (($3 ($2 $0))
   $0))))))))))))))))`),
 ((joint_ty_program_program_option_program_Axiom),
  [],
  `((! :(('a -> topdec -> joint_ty_program_program_option_program ->
         'a) -> bool) -> bool)
   (\(f0 :'a -> topdec -> joint_ty_program_program_option_program ->
          'a). ((! :('a -> bool) -> bool) (\(e :'a).
   ((! :(('a -> joint_ty_program_program_option_program -> 'a) ->
        bool) -> bool)
   (\(f1 :'a -> joint_ty_program_program_option_program -> 'a).
   ((?! :((joint_ty_program_program_option_program -> 'a) -> bool) ->
         bool) (\(fn :joint_ty_program_program_option_program -> 'a).
   ((/\ ((! :(topdec -> bool) -> bool) (\(t :topdec).
   ((! :(joint_ty_program_program_option_program -> bool) -> bool)
   (\(j :joint_ty_program_program_option_program).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_SEQprogram $1) $0))) ((($5
   ($2 $0)) $1) $0))))))) ((/\ (((= :'a -> 'a -> bool) ($0
   JOINT_int_program_NONE_program)) $2))
   ((! :(joint_ty_program_program_option_program -> bool) -> bool)
   (\(j :joint_ty_program_program_option_program).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_program_SOME_program $0)))
   (($2 ($1 $0)) $0))))))))))))))`),
 ((topdec_constructors_distinct),
  [],
  `((/\ ((! :(sigdec -> bool) -> bool) (\(s' :sigdec).
   ((! :(strdec -> bool) -> bool) (\(s :strdec). (~
   (((= :topdec -> topdec -> bool) (STRDEC $0)) (SIGDEC $1))))))))
   ((/\ ((! :(fundec -> bool) -> bool) (\(f' :fundec).
   ((! :(strdec -> bool) -> bool) (\(s :strdec). (~
   (((= :topdec -> topdec -> bool) (STRDEC $0)) (FUNDEC $1))))))))
   ((! :(fundec -> bool) -> bool) (\(f' :fundec).
   ((! :(sigdec -> bool) -> bool) (\(s :sigdec). (~
   (((= :topdec -> topdec -> bool) (SIGDEC $0)) (FUNDEC $1)))))))))`),
 ((topdec_constructors_one_one),
  [],
  `((/\ ((! :(strdec -> bool) -> bool) (\(s :strdec).
   ((! :(strdec -> bool) -> bool) (\(s' :strdec).
   (((= :bool -> bool -> bool) (((= :topdec -> topdec -> bool) (STRDEC
   $1)) (STRDEC $0))) (((= :strdec -> strdec -> bool) $1) $0)))))))
   ((/\ ((! :(sigdec -> bool) -> bool) (\(s :sigdec).
   ((! :(sigdec -> bool) -> bool) (\(s' :sigdec).
   (((= :bool -> bool -> bool) (((= :topdec -> topdec -> bool) (SIGDEC
   $1)) (SIGDEC $0))) (((= :sigdec -> sigdec -> bool) $1) $0)))))))
   ((! :(fundec -> bool) -> bool) (\(f' :fundec).
   ((! :(fundec -> bool) -> bool) (\(f'' :fundec).
   (((= :bool -> bool -> bool) (((= :topdec -> topdec -> bool) (FUNDEC
   $1)) (FUNDEC $0))) (((= :fundec -> fundec -> bool) $1)
   $0))))))))`),
 ((topdec_cases_thm),
  [],
  `((! :(topdec -> bool) -> bool) (\(t :topdec). ((\/
   ((? :(strdec -> bool) -> bool) (\(s :strdec).
   (((= :topdec -> topdec -> bool) $1) (STRDEC $0))))) ((\/
   ((? :(sigdec -> bool) -> bool) (\(s :sigdec).
   (((= :topdec -> topdec -> bool) $1) (SIGDEC $0)))))
   ((? :(fundec -> bool) -> bool) (\(f' :fundec).
   (((= :topdec -> topdec -> bool) $1) (FUNDEC $0))))))))`),
 ((topdec_induction_thm),
  [],
  `((! :((topdec -> bool) -> bool) -> bool) (\(P :topdec -> bool).
   ((==> ((/\ ((! :(strdec -> bool) -> bool) (\(s :strdec). ($1
   (STRDEC $0))))) ((/\ ((! :(sigdec -> bool) -> bool) (\(s :sigdec).
   ($1 (SIGDEC $0))))) ((! :(fundec -> bool) -> bool) (\(f' :fundec).
   ($1 (FUNDEC $0))))))) ((! :(topdec -> bool) -> bool) (\(t :topdec).
   ($1 $0))))))`),
 ((topdec_Axiom),
  [],
  `((! :((strdec -> 'a) -> bool) -> bool) (\(f0 :strdec -> 'a).
   ((! :((sigdec -> 'a) -> bool) -> bool) (\(f1 :sigdec -> 'a).
   ((! :((fundec -> 'a) -> bool) -> bool) (\(f2 :fundec -> 'a).
   ((?! :((topdec -> 'a) -> bool) -> bool) (\(fn :topdec -> 'a). ((/\
   ((! :(strdec -> bool) -> bool) (\(s :strdec).
   (((= :'a -> 'a -> bool) ($1 (STRDEC $0))) ($4 $0))))) ((/\
   ((! :(sigdec -> bool) -> bool) (\(s :sigdec).
   (((= :'a -> 'a -> bool) ($1 (SIGDEC $0))) ($3 $0)))))
   ((! :(fundec -> bool) -> bool) (\(f' :fundec).
   (((= :'a -> 'a -> bool) ($1 (FUNDEC $0))) ($2 $0))))))))))))))`),
 ((fundec_constructors_distinct),
  [],
  `((/\ ((! :(funbind -> bool) -> bool) (\(f' :funbind). (~
   (((= :fundec -> fundec -> bool) (FUNCTORfundec $0))
   EMPTYfundec))))) ((/\ ((! :(fundec -> bool) -> bool)
   (\(f2 :fundec). ((! :(fundec -> bool) -> bool) (\(f1' :fundec).
   ((! :(funbind -> bool) -> bool) (\(f' :funbind). (~
   (((= :fundec -> fundec -> bool) (FUNCTORfundec $0)) ((SEQfundec $1)
   $2)))))))))) ((! :(fundec -> bool) -> bool) (\(f2 :fundec).
   ((! :(fundec -> bool) -> bool) (\(f1' :fundec). (~
   (((= :fundec -> fundec -> bool) EMPTYfundec) ((SEQfundec $0)
   $1)))))))))`),
 ((fundec_constructors_one_one),
  [],
  `((/\ ((! :(funbind -> bool) -> bool) (\(f' :funbind).
   ((! :(funbind -> bool) -> bool) (\(f'' :funbind).
   (((= :bool -> bool -> bool) (((= :fundec -> fundec -> bool)
   (FUNCTORfundec $1)) (FUNCTORfundec $0)))
   (((= :funbind -> funbind -> bool) $1) $0)))))))
   ((! :(fundec -> bool) -> bool) (\(f1' :fundec).
   ((! :(fundec -> bool) -> bool) (\(f2 :fundec).
   ((! :(fundec -> bool) -> bool) (\(f1'' :fundec).
   ((! :(fundec -> bool) -> bool) (\(f2' :fundec).
   (((= :bool -> bool -> bool) (((= :fundec -> fundec -> bool)
   ((SEQfundec $3) $2)) ((SEQfundec $1) $0))) ((/\
   (((= :fundec -> fundec -> bool) $3) $1))
   (((= :fundec -> fundec -> bool) $2) $0))))))))))))`),
 ((fundec_cases_thm),
  [],
  `((! :(fundec -> bool) -> bool) (\(f :fundec). ((\/
   ((? :(funbind -> bool) -> bool) (\(f' :funbind).
   (((= :fundec -> fundec -> bool) $1) (FUNCTORfundec $0))))) ((\/
   (((= :fundec -> fundec -> bool) $0) EMPTYfundec))
   ((? :(fundec -> bool) -> bool) (\(f1' :fundec).
   ((? :(fundec -> bool) -> bool) (\(f2 :fundec).
   (((= :fundec -> fundec -> bool) $2) ((SEQfundec $1) $0))))))))))`),
 ((fundec_induction_thm),
  [],
  `((! :((fundec -> bool) -> bool) -> bool) (\(P :fundec -> bool).
   ((==> ((/\ ((! :(funbind -> bool) -> bool) (\(f' :funbind). ($1
   (FUNCTORfundec $0))))) ((/\ ($0 EMPTYfundec))
   ((! :(fundec -> bool) -> bool) (\(f1' :fundec).
   ((! :(fundec -> bool) -> bool) (\(f2 :fundec). ((==> ((/\ ($2 $1))
   ($2 $0))) ($2 ((SEQfundec $1) $0))))))))))
   ((! :(fundec -> bool) -> bool) (\(f :fundec). ($1 $0))))))`),
 ((fundec_Axiom),
  [],
  `((! :((funbind -> 'a) -> bool) -> bool) (\(f0 :funbind -> 'a).
   ((! :('a -> bool) -> bool) (\(e :'a).
   ((! :(('a -> 'a -> fundec -> fundec -> 'a) -> bool) -> bool)
   (\(f1 :'a -> 'a -> fundec -> fundec -> 'a).
   ((?! :((fundec -> 'a) -> bool) -> bool) (\(fn :fundec -> 'a). ((/\
   ((! :(funbind -> bool) -> bool) (\(f' :funbind).
   (((= :'a -> 'a -> bool) ($1 (FUNCTORfundec $0))) ($4 $0))))) ((/\
   (((= :'a -> 'a -> bool) ($0 EMPTYfundec)) $2))
   ((! :(fundec -> bool) -> bool) (\(f1' :fundec).
   ((! :(fundec -> bool) -> bool) (\(f2 :fundec).
   (((= :'a -> 'a -> bool) ($2 ((SEQfundec $1) $0))) (((($3 ($2 $1))
   ($2 $0)) $1) $0))))))))))))))))`),
 ((funbind_cases_thm),
  [],
  `((/\ ((! :(funbind -> bool) -> bool) (\(x1 :funbind).
   ((? :(funid -> bool) -> bool) (\(y :funid).
   ((? :(strid -> bool) -> bool) (\(y''''' :strid).
   ((? :(sigexp -> bool) -> bool) (\(y'''' :sigexp).
   ((? :(sigexp option -> bool) -> bool) (\(y''' :sigexp option).
   ((? :(strexp -> bool) -> bool) (\(y'' :strexp).
   ((? :(funbind option -> bool) -> bool) (\(y' :funbind option).
   (((= :funbind -> funbind -> bool) $6) ((((((BINDfunbind $5) $4) $3)
   $2) $1) $0))))))))))))))))) ((/\
   ((! :(funbind option -> bool) -> bool) (\(x2 :funbind option). ((\/
   (((= :funbind option -> funbind option -> bool) $0)
   (NONE :funbind option))) ((? :(funbind -> bool) -> bool)
   (\(y :funbind). (((= :funbind option -> funbind option -> bool) $1)
   ((SOME :funbind -> funbind option) $0))))))))
   ((! :(sigexp option -> bool) -> bool) (\(x3 :sigexp option). ((\/
   (((= :sigexp option -> sigexp option -> bool) $0)
   (NONE :sigexp option))) ((? :(sigexp -> bool) -> bool)
   (\(y :sigexp). (((= :sigexp option -> sigexp option -> bool) $1)
   ((SOME :sigexp -> sigexp option) $0)))))))))`),
 ((funbind_constructors_one_one),
  [],
  `((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp -> bool) -> bool) (\(x3 :sigexp).
   ((! :(sigexp option -> bool) -> bool) (\(x4 :sigexp option).
   ((! :(strexp -> bool) -> bool) (\(x5 :strexp).
   ((! :(funbind option -> bool) -> bool) (\(x6 :funbind option).
   ((! :(funid -> bool) -> bool) (\(x1' :funid).
   ((! :(strid -> bool) -> bool) (\(x2' :strid).
   ((! :(sigexp -> bool) -> bool) (\(x3' :sigexp).
   ((! :(sigexp option -> bool) -> bool) (\(x4' :sigexp option).
   ((! :(strexp -> bool) -> bool) (\(x5' :strexp).
   ((! :(funbind option -> bool) -> bool) (\(x6' :funbind option).
   (((= :bool -> bool -> bool) (((= :funbind -> funbind -> bool)
   ((((((BINDfunbind $11) $10) $9) $8) $7) $6)) ((((((BINDfunbind $5)
   $4) $3) $2) $1) $0))) ((/\ (((= :funid -> funid -> bool) $11) $5))
   ((/\ (((= :strid -> strid -> bool) $10) $4)) ((/\
   (((= :sigexp -> sigexp -> bool) $9) $3)) ((/\
   (((= :sigexp option -> sigexp option -> bool) $8) $2)) ((/\
   (((= :strexp -> strexp -> bool) $7) $1))
   (((= :funbind option -> funbind option -> bool) $6)
   $0)))))))))))))))))))))))))))))))) ((/\
   ((! :(funbind -> bool) -> bool) (\(x1 :funbind).
   ((! :(funbind -> bool) -> bool) (\(x1' :funbind).
   (((= :bool -> bool -> bool)
   (((= :funbind option -> funbind option -> bool)
   ((SOME :funbind -> funbind option) $1))
   ((SOME :funbind -> funbind option) $0)))
   (((= :funbind -> funbind -> bool) $1) $0)))))))
   ((! :(sigexp -> bool) -> bool) (\(x1 :sigexp).
   ((! :(sigexp -> bool) -> bool) (\(x1' :sigexp).
   (((= :bool -> bool -> bool)
   (((= :sigexp option -> sigexp option -> bool)
   ((SOME :sigexp -> sigexp option) $1))
   ((SOME :sigexp -> sigexp option) $0)))
   (((= :sigexp -> sigexp -> bool) $1) $0))))))))`),
 ((funbind_constructors_distinct),
  [],
  `((/\ ((! :(funbind -> bool) -> bool) (\(x1' :funbind). (~
   (((= :funbind option -> funbind option -> bool)
   (NONE :funbind option)) ((SOME :funbind -> funbind option) $0))))))
   ((! :(sigexp -> bool) -> bool) (\(x1' :sigexp). (~
   (((= :sigexp option -> sigexp option -> bool)
   (NONE :sigexp option)) ((SOME :sigexp -> sigexp option) $0))))))`),
 ((funbind_unique_thm),
  [],
  `((! :(('c -> 'b -> funid -> strid -> sigexp -> strexp ->
         sigexp option -> funbind option -> 'a) -> bool) -> bool)
   (\(BINDfunbind_case :'c -> 'b -> funid -> strid -> sigexp ->
                        strexp -> sigexp option -> funbind option ->
                        'a). ((! :('b -> bool) -> bool)
   (\(funbind_NONE_funbind_case :'b).
   ((! :(('a -> funbind -> 'b) -> bool) -> bool)
   (\(funbind_SOME_funbind_case :'a -> funbind -> 'b).
   ((! :('c -> bool) -> bool) (\(funbind_NONE_sigexp_case :'c).
   ((! :((sigexp -> 'c) -> bool) -> bool)
   (\(funbind_SOME_sigexp_case :sigexp -> 'c).
   ((! :((funbind -> 'a) -> bool) -> bool) (\(fn1 :funbind -> 'a).
   ((! :((funbind option -> 'b) -> bool) -> bool)
   (\(fn2 :funbind option -> 'b).
   ((! :((sigexp option -> 'c) -> bool) -> bool)
   (\(fn3 :sigexp option -> 'c).
   ((! :((funbind -> 'a) -> bool) -> bool) (\(fn1' :funbind -> 'a).
   ((! :((funbind option -> 'b) -> bool) -> bool)
   (\(fn2' :funbind option -> 'b).
   ((! :((sigexp option -> 'c) -> bool) -> bool)
   (\(fn3' :sigexp option -> 'c). ((==> ((/\
   ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(strid -> bool) -> bool) (\(y''''' :strid).
   ((! :(sigexp -> bool) -> bool) (\(y'''' :sigexp).
   ((! :(sigexp option -> bool) -> bool) (\(y''' :sigexp option).
   ((! :(strexp -> bool) -> bool) (\(y'' :strexp).
   ((! :(funbind option -> bool) -> bool) (\(y' :funbind option).
   (((= :'a -> 'a -> bool) ($11 ((((((BINDfunbind $5) $4) $3) $2) $1)
   $0))) (((((((($16 ($9 $2)) ($10 $0)) $5) $4) $3) $1) $2)
   $0))))))))))))))) ((/\ (((= :'b -> 'b -> bool) ($4
   (NONE :funbind option))) $9)) ((/\ ((! :(funbind -> bool) -> bool)
   (\(y :funbind). (((= :'b -> 'b -> bool) ($5
   ((SOME :funbind -> funbind option) $0))) (($9 ($6 $0)) $0))))) ((/\
   (((= :'c -> 'c -> bool) ($3 (NONE :sigexp option))) $7))
   ((! :(sigexp -> bool) -> bool) (\(y :sigexp).
   (((= :'c -> 'c -> bool) ($4 ((SOME :sigexp -> sigexp option) $0)))
   ($7 $0))))))))) ((==> ((/\ ((! :(funid -> bool) -> bool)
   (\(y :funid). ((! :(strid -> bool) -> bool) (\(y''''' :strid).
   ((! :(sigexp -> bool) -> bool) (\(y'''' :sigexp).
   ((! :(sigexp option -> bool) -> bool) (\(y''' :sigexp option).
   ((! :(strexp -> bool) -> bool) (\(y'' :strexp).
   ((! :(funbind option -> bool) -> bool) (\(y' :funbind option).
   (((= :'a -> 'a -> bool) ($8 ((((((BINDfunbind $5) $4) $3) $2) $1)
   $0))) (((((((($16 ($6 $2)) ($7 $0)) $5) $4) $3) $1) $2)
   $0))))))))))))))) ((/\ (((= :'b -> 'b -> bool) ($1
   (NONE :funbind option))) $9)) ((/\ ((! :(funbind -> bool) -> bool)
   (\(y :funbind). (((= :'b -> 'b -> bool) ($2
   ((SOME :funbind -> funbind option) $0))) (($9 ($3 $0)) $0))))) ((/\
   (((= :'c -> 'c -> bool) ($0 (NONE :sigexp option))) $7))
   ((! :(sigexp -> bool) -> bool) (\(y :sigexp).
   (((= :'c -> 'c -> bool) ($1 ((SOME :sigexp -> sigexp option) $0)))
   ($7 $0))))))))) ((/\
   (((= :(funbind -> 'a) -> (funbind -> 'a) -> bool) $5) $2)) ((/\
   (((= :(funbind option -> 'b) -> (funbind option -> 'b) -> bool) $4)
   $1)) (((= :(sigexp option -> 'c) -> (sigexp option -> 'c) -> bool)
   $3) $0)))))))))))))))))))))))))))`),
 ((funbind_induction_thm),
  [],
  `((! :((funbind -> bool) -> bool) -> bool)
   (\(funbind_Prop :funbind -> bool).
   ((! :((funbind option -> bool) -> bool) -> bool)
   (\(funbind_option_funbind_Prop :funbind option -> bool).
   ((! :((sigexp option -> bool) -> bool) -> bool)
   (\(sigexp_option_funbind_Prop :sigexp option -> bool). ((==> ((/\
   ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(strid -> bool) -> bool) (\(y''''' :strid).
   ((! :(sigexp -> bool) -> bool) (\(y'''' :sigexp).
   ((! :(sigexp option -> bool) -> bool) (\(y''' :sigexp option).
   ((! :(strexp -> bool) -> bool) (\(y'' :strexp).
   ((! :(funbind option -> bool) -> bool) (\(y' :funbind option).
   ((==> ($6 $2)) ((==> ($7 $0)) ($8 ((((((BINDfunbind $5) $4) $3) $2)
   $1) $0))))))))))))))))) ((/\ ($1 (NONE :funbind option))) ((/\
   ((! :(funbind -> bool) -> bool) (\(y :funbind). ((==> ($3 $0)) ($2
   ((SOME :funbind -> funbind option) $0)))))) ((/\ ($0
   (NONE :sigexp option))) ((! :(sigexp -> bool) -> bool)
   (\(y :sigexp). ($1 ((SOME :sigexp -> sigexp option) $0)))))))))
   ((/\ ((! :(funbind -> bool) -> bool) (\(x1 :funbind). ($3 $0))))
   ((/\ ((! :(funbind option -> bool) -> bool) (\(x2 :funbind option).
   ($2 $0)))) ((! :(sigexp option -> bool) -> bool)
   (\(x3 :sigexp option). ($1 $0))))))))))))`),
 ((funbind_rec_thm),
  [],
  `((! :(('c -> 'b -> funid -> strid -> sigexp -> strexp ->
         sigexp option -> funbind option -> 'a) -> bool) -> bool)
   (\(BINDfunbind_case :'c -> 'b -> funid -> strid -> sigexp ->
                        strexp -> sigexp option -> funbind option ->
                        'a). ((! :('b -> bool) -> bool)
   (\(funbind_NONE_funbind_case :'b).
   ((! :(('a -> funbind -> 'b) -> bool) -> bool)
   (\(funbind_SOME_funbind_case :'a -> funbind -> 'b).
   ((! :('c -> bool) -> bool) (\(funbind_NONE_sigexp_case :'c).
   ((! :((sigexp -> 'c) -> bool) -> bool)
   (\(funbind_SOME_sigexp_case :sigexp -> 'c).
   ((? :((funbind -> 'a) -> bool) -> bool) (\(y :funbind -> 'a).
   ((? :((funbind option -> 'b) -> bool) -> bool)
   (\(y'' :funbind option -> 'b).
   ((? :((sigexp option -> 'c) -> bool) -> bool)
   (\(y' :sigexp option -> 'c). ((/\ ((! :(funid -> bool) -> bool)
   (\(x1 :funid). ((! :(strid -> bool) -> bool) (\(x2 :strid).
   ((! :(sigexp -> bool) -> bool) (\(x3 :sigexp).
   ((! :(sigexp option -> bool) -> bool) (\(x4 :sigexp option).
   ((! :(strexp -> bool) -> bool) (\(x5 :strexp).
   ((! :(funbind option -> bool) -> bool) (\(x6 :funbind option).
   (((= :'a -> 'a -> bool) ($8 ((((((BINDfunbind $5) $4) $3) $2) $1)
   $0))) (((((((($13 ($6 $2)) ($7 $0)) $5) $4) $3) $1) $2)
   $0))))))))))))))) ((/\ (((= :'b -> 'b -> bool) ($1
   (NONE :funbind option))) $6)) ((/\ ((! :(funbind -> bool) -> bool)
   (\(x1 :funbind). (((= :'b -> 'b -> bool) ($2
   ((SOME :funbind -> funbind option) $0))) (($6 ($3 $0)) $0))))) ((/\
   (((= :'c -> 'c -> bool) ($0 (NONE :sigexp option))) $4))
   ((! :(sigexp -> bool) -> bool) (\(x1 :sigexp).
   (((= :'c -> 'c -> bool) ($1 ((SOME :sigexp -> sigexp option) $0)))
   ($4 $0))))))))))))))))))))))))`),
 ((joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind_Axiom),
  [],
  `((! :(('a -> 'a -> funid -> strid -> sigexp -> strexp ->
         joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         'a) -> bool) -> bool)
   (\(f0 :'a -> 'a -> funid -> strid -> sigexp -> strexp ->
          joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
          joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
          'a). ((! :('a -> bool) -> bool) (\(e0 :'a).
   ((! :(('a ->
         joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
         'a) -> bool) -> bool)
   (\(f1 :'a ->
          joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
          'a). ((! :('a -> bool) -> bool) (\(e1 :'a).
   ((! :((sigexp -> 'a) -> bool) -> bool) (\(f2 :sigexp -> 'a).
   ((?! :((joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
          'a) -> bool) -> bool)
   (\(fn :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
          'a). ((/\ ((! :(funid -> bool) -> bool) (\(f' :funid).
   ((! :(strid -> bool) -> bool) (\(s0 :strid).
   ((! :(sigexp -> bool) -> bool) (\(s1 :sigexp).
   ((! :(joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
        bool) -> bool)
   (\(j1 :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   ((! :(strexp -> bool) -> bool) (\(s2 :strexp).
   ((! :(joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
        bool) -> bool)
   (\(j2 :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((= :'a -> 'a -> bool) ($6 ((((((JOINT_int_BINDfunbind $5) $4) $3)
   $2) $1) $0))) (((((((($11 ($6 $2)) ($6 $0)) $5) $4) $3) $1) $2)
   $0))))))))))))))) ((/\ (((= :'a -> 'a -> bool) ($0
   JOINT_int_funbind_NONE_funbind)) $4)) ((/\
   ((! :(joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind ->
        bool) -> bool)
   (\(j :joint_ty_funbind_funbind_option_funbind_sigexp_option_funbind).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_funbind_SOME_funbind $0)))
   (($4 ($1 $0)) $0))))) ((/\ (((= :'a -> 'a -> bool) ($0
   JOINT_int_funbind_NONE_sigexp)) $2)) ((! :(sigexp -> bool) -> bool)
   (\(s :sigexp). (((= :'a -> 'a -> bool) ($1
   (JOINT_int_funbind_SOME_sigexp $0))) ($2 $0))))))))))))))))))))`),
 ((ModMLStructures_cases_thm),
  [],
  `((/\ ((! :(sigexp option -> bool) -> bool) (\(x1 :sigexp option).
   ((\/ (((= :sigexp option -> sigexp option -> bool) $0)
   (NONE :sigexp option))) ((? :(sigexp -> bool) -> bool)
   (\(y :sigexp). (((= :sigexp option -> sigexp option -> bool) $1)
   ((SOME :sigexp -> sigexp option) $0)))))))) ((/\
   ((! :(strbind -> bool) -> bool) (\(x2 :strbind).
   ((? :(strid -> bool) -> bool) (\(y :strid).
   ((? :(sigexp option -> bool) -> bool) (\(y''' :sigexp option).
   ((? :(strexp -> bool) -> bool) (\(y'' :strexp).
   ((? :(strbind option -> bool) -> bool) (\(y' :strbind option).
   (((= :strbind -> strbind -> bool) $4) ((((BINDstrbind $3) $2) $1)
   $0))))))))))))) ((/\ ((! :(strbind option -> bool) -> bool)
   (\(x3 :strbind option). ((\/
   (((= :strbind option -> strbind option -> bool) $0)
   (NONE :strbind option))) ((? :(strbind -> bool) -> bool)
   (\(y :strbind). (((= :strbind option -> strbind option -> bool) $1)
   ((SOME :strbind -> strbind option) $0)))))))) ((/\
   ((! :(strdec -> bool) -> bool) (\(x4 :strdec). ((\/
   ((? :(dec -> bool) -> bool) (\(y :dec).
   (((= :strdec -> strdec -> bool) $1) (DECstrdec $0))))) ((\/
   ((? :(strbind -> bool) -> bool) (\(y :strbind).
   (((= :strdec -> strdec -> bool) $1) (STRUCTUREstrdec $0))))) ((\/
   ((? :(strdec -> bool) -> bool) (\(y :strdec).
   ((? :(strdec -> bool) -> bool) (\(y' :strdec).
   (((= :strdec -> strdec -> bool) $2) ((LOCALstrdec $1) $0)))))))
   ((\/ (((= :strdec -> strdec -> bool) $0) EMPTYstrdec))
   ((? :(strdec -> bool) -> bool) (\(y :strdec).
   ((? :(strdec -> bool) -> bool) (\(y' :strdec).
   (((= :strdec -> strdec -> bool) $2) ((SEQstrdec $1) $0)))))))))))))
   ((! :(strexp -> bool) -> bool) (\(x5 :strexp). ((\/
   ((? :(strdec -> bool) -> bool) (\(y :strdec).
   (((= :strexp -> strexp -> bool) $1) (STRUCTstrexp $0))))) ((\/
   ((? :(strid long -> bool) -> bool) (\(y :strid long).
   (((= :strexp -> strexp -> bool) $1) (LONGSTRIDstrexp $0))))) ((\/
   ((? :(funid -> bool) -> bool) (\(y :funid).
   ((? :(strexp -> bool) -> bool) (\(y' :strexp).
   (((= :strexp -> strexp -> bool) $2) ((APPstrexp $1) $0)))))))
   ((? :(strdec -> bool) -> bool) (\(y :strdec).
   ((? :(strexp -> bool) -> bool) (\(y' :strexp).
   (((= :strexp -> strexp -> bool) $2) ((LETstrexp $1)
   $0)))))))))))))))`),
 ((ModMLStructures_constructors_one_one),
  [],
  `((/\ ((! :(sigexp -> bool) -> bool) (\(x1 :sigexp).
   ((! :(sigexp -> bool) -> bool) (\(x1' :sigexp).
   (((= :bool -> bool -> bool)
   (((= :sigexp option -> sigexp option -> bool)
   ((SOME :sigexp -> sigexp option) $1))
   ((SOME :sigexp -> sigexp option) $0)))
   (((= :sigexp -> sigexp -> bool) $1) $0))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp option -> bool) -> bool) (\(x2 :sigexp option).
   ((! :(strexp -> bool) -> bool) (\(x3 :strexp).
   ((! :(strbind option -> bool) -> bool) (\(x4 :strbind option).
   ((! :(strid -> bool) -> bool) (\(x1' :strid).
   ((! :(sigexp option -> bool) -> bool) (\(x2' :sigexp option).
   ((! :(strexp -> bool) -> bool) (\(x3' :strexp).
   ((! :(strbind option -> bool) -> bool) (\(x4' :strbind option).
   (((= :bool -> bool -> bool) (((= :strbind -> strbind -> bool)
   ((((BINDstrbind $7) $6) $5) $4)) ((((BINDstrbind $3) $2) $1) $0)))
   ((/\ (((= :strid -> strid -> bool) $7) $3)) ((/\
   (((= :sigexp option -> sigexp option -> bool) $6) $2)) ((/\
   (((= :strexp -> strexp -> bool) $5) $1))
   (((= :strbind option -> strbind option -> bool) $4)
   $0)))))))))))))))))))))) ((/\ ((! :(strbind -> bool) -> bool)
   (\(x1 :strbind). ((! :(strbind -> bool) -> bool) (\(x1' :strbind).
   (((= :bool -> bool -> bool)
   (((= :strbind option -> strbind option -> bool)
   ((SOME :strbind -> strbind option) $1))
   ((SOME :strbind -> strbind option) $0)))
   (((= :strbind -> strbind -> bool) $1) $0))))))) ((/\ ((/\
   ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(dec -> bool) -> bool) (\(x1' :dec).
   (((= :bool -> bool -> bool) (((= :strdec -> strdec -> bool)
   (DECstrdec $1)) (DECstrdec $0))) (((= :dec -> dec -> bool) $1)
   $0))))))) ((/\ ((! :(strbind -> bool) -> bool) (\(x1 :strbind).
   ((! :(strbind -> bool) -> bool) (\(x1' :strbind).
   (((= :bool -> bool -> bool) (((= :strdec -> strdec -> bool)
   (STRUCTUREstrdec $1)) (STRUCTUREstrdec $0)))
   (((= :strbind -> strbind -> bool) $1) $0))))))) ((/\
   ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x1' :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2' :strdec).
   (((= :bool -> bool -> bool) (((= :strdec -> strdec -> bool)
   ((LOCALstrdec $3) $2)) ((LOCALstrdec $1) $0))) ((/\
   (((= :strdec -> strdec -> bool) $3) $1))
   (((= :strdec -> strdec -> bool) $2) $0))))))))))))
   ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x1' :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2' :strdec).
   (((= :bool -> bool -> bool) (((= :strdec -> strdec -> bool)
   ((SEQstrdec $3) $2)) ((SEQstrdec $1) $0))) ((/\
   (((= :strdec -> strdec -> bool) $3) $1))
   (((= :strdec -> strdec -> bool) $2) $0))))))))))))))) ((/\
   ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x1' :strdec).
   (((= :bool -> bool -> bool) (((= :strexp -> strexp -> bool)
   (STRUCTstrexp $1)) (STRUCTstrexp $0)))
   (((= :strdec -> strdec -> bool) $1) $0))))))) ((/\
   ((! :(strid long -> bool) -> bool) (\(x1 :strid long).
   ((! :(strid long -> bool) -> bool) (\(x1' :strid long).
   (((= :bool -> bool -> bool) (((= :strexp -> strexp -> bool)
   (LONGSTRIDstrexp $1)) (LONGSTRIDstrexp $0)))
   (((= :strid long -> strid long -> bool) $1) $0))))))) ((/\
   ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   ((! :(funid -> bool) -> bool) (\(x1' :funid).
   ((! :(strexp -> bool) -> bool) (\(x2' :strexp).
   (((= :bool -> bool -> bool) (((= :strexp -> strexp -> bool)
   ((APPstrexp $3) $2)) ((APPstrexp $1) $0))) ((/\
   (((= :funid -> funid -> bool) $3) $1))
   (((= :strexp -> strexp -> bool) $2) $0))))))))))))
   ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   ((! :(strdec -> bool) -> bool) (\(x1' :strdec).
   ((! :(strexp -> bool) -> bool) (\(x2' :strexp).
   (((= :bool -> bool -> bool) (((= :strexp -> strexp -> bool)
   ((LETstrexp $3) $2)) ((LETstrexp $1) $0))) ((/\
   (((= :strdec -> strdec -> bool) $3) $1))
   (((= :strexp -> strexp -> bool) $2) $0))))))))))))))))))`),
 ((ModMLStructures_constructors_distinct),
  [],
  `((/\ ((! :(sigexp -> bool) -> bool) (\(x1' :sigexp). (~
   (((= :sigexp option -> sigexp option -> bool)
   (NONE :sigexp option)) ((SOME :sigexp -> sigexp option) $0))))))
   ((/\ ((! :(strbind -> bool) -> bool) (\(x1' :strbind). (~
   (((= :strbind option -> strbind option -> bool)
   (NONE :strbind option)) ((SOME :strbind -> strbind option) $0))))))
   ((/\ ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(strbind -> bool) -> bool) (\(x1' :strbind). (~
   (((= :strdec -> strdec -> bool) (DECstrdec $1)) (STRUCTUREstrdec
   $0)))))))) ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(strdec -> bool) -> bool) (\(x1' :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2' :strdec). (~
   (((= :strdec -> strdec -> bool) (DECstrdec $2)) ((LOCALstrdec $1)
   $0)))))))))) ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec). (~
   (((= :strdec -> strdec -> bool) (DECstrdec $0)) EMPTYstrdec)))))
   ((/\ ((! :(dec -> bool) -> bool) (\(x1 :dec).
   ((! :(strdec -> bool) -> bool) (\(x1' :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2' :strdec). (~
   (((= :strdec -> strdec -> bool) (DECstrdec $2)) ((SEQstrdec $1)
   $0)))))))))) ((/\ ((! :(strbind -> bool) -> bool) (\(x1 :strbind).
   ((! :(strdec -> bool) -> bool) (\(x1' :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2' :strdec). (~
   (((= :strdec -> strdec -> bool) (STRUCTUREstrdec $2)) ((LOCALstrdec
   $1) $0)))))))))) ((/\ ((! :(strbind -> bool) -> bool)
   (\(x1 :strbind). (~ (((= :strdec -> strdec -> bool)
   (STRUCTUREstrdec $0)) EMPTYstrdec))))) ((/\
   ((! :(strbind -> bool) -> bool) (\(x1 :strbind).
   ((! :(strdec -> bool) -> bool) (\(x1' :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2' :strdec). (~
   (((= :strdec -> strdec -> bool) (STRUCTUREstrdec $2)) ((SEQstrdec
   $1) $0)))))))))) ((/\ ((! :(strdec -> bool) -> bool)
   (\(x1 :strdec). ((! :(strdec -> bool) -> bool) (\(x2 :strdec). (~
   (((= :strdec -> strdec -> bool) ((LOCALstrdec $1) $0))
   EMPTYstrdec))))))) ((/\ ((! :(strdec -> bool) -> bool)
   (\(x1 :strdec). ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x1' :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2' :strdec). (~
   (((= :strdec -> strdec -> bool) ((LOCALstrdec $3) $2)) ((SEQstrdec
   $1) $0)))))))))))) ((! :(strdec -> bool) -> bool) (\(x1' :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2' :strdec). (~
   (((= :strdec -> strdec -> bool) EMPTYstrdec) ((SEQstrdec $1)
   $0))))))))))))))))) ((/\ ((! :(strdec -> bool) -> bool)
   (\(x1 :strdec). ((! :(strid long -> bool) -> bool)
   (\(x1' :strid long). (~ (((= :strexp -> strexp -> bool)
   (STRUCTstrexp $1)) (LONGSTRIDstrexp $0)))))))) ((/\
   ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(funid -> bool) -> bool) (\(x1' :funid).
   ((! :(strexp -> bool) -> bool) (\(x2' :strexp). (~
   (((= :strexp -> strexp -> bool) (STRUCTstrexp $2)) ((APPstrexp $1)
   $0)))))))))) ((/\ ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x1' :strdec).
   ((! :(strexp -> bool) -> bool) (\(x2' :strexp). (~
   (((= :strexp -> strexp -> bool) (STRUCTstrexp $2)) ((LETstrexp $1)
   $0)))))))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(x1 :strid long). ((! :(funid -> bool) -> bool) (\(x1' :funid).
   ((! :(strexp -> bool) -> bool) (\(x2' :strexp). (~
   (((= :strexp -> strexp -> bool) (LONGSTRIDstrexp $2)) ((APPstrexp
   $1) $0)))))))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(x1 :strid long). ((! :(strdec -> bool) -> bool) (\(x1' :strdec).
   ((! :(strexp -> bool) -> bool) (\(x2' :strexp). (~
   (((= :strexp -> strexp -> bool) (LONGSTRIDstrexp $2)) ((LETstrexp
   $1) $0)))))))))) ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   ((! :(strdec -> bool) -> bool) (\(x1' :strdec).
   ((! :(strexp -> bool) -> bool) (\(x2' :strexp). (~
   (((= :strexp -> strexp -> bool) ((APPstrexp $3) $2)) ((LETstrexp
   $1) $0)))))))))))))))))))`),
 ((ModMLStructures_unique_thm),
  [],
  `((! :('a -> bool) -> bool)
   (\(strbind_strdec_strexp_NONE_sigexp_case :'a).
   ((! :((sigexp -> 'a) -> bool) -> bool)
   (\(strbind_strdec_strexp_SOME_sigexp_case :sigexp -> 'a).
   ((! :(('a -> 'e -> 'c -> strid -> sigexp option -> strexp ->
         strbind option -> 'b) -> bool) -> bool)
   (\(BINDstrbind_case :'a -> 'e -> 'c -> strid -> sigexp option ->
                        strexp -> strbind option -> 'b).
   ((! :('c -> bool) -> bool)
   (\(strbind_strdec_strexp_NONE_strbind_case :'c).
   ((! :(('b -> strbind -> 'c) -> bool) -> bool)
   (\(strbind_strdec_strexp_SOME_strbind_case :'b -> strbind -> 'c).
   ((! :((dec -> 'd) -> bool) -> bool) (\(DECstrdec_case :dec -> 'd).
   ((! :(('b -> strbind -> 'd) -> bool) -> bool)
   (\(STRUCTUREstrdec_case :'b -> strbind -> 'd).
   ((! :(('d -> 'd -> strdec -> strdec -> 'd) -> bool) -> bool)
   (\(LOCALstrdec_case :'d -> 'd -> strdec -> strdec -> 'd).
   ((! :('d -> bool) -> bool) (\(EMPTYstrdec_case :'d).
   ((! :(('d -> 'd -> strdec -> strdec -> 'd) -> bool) -> bool)
   (\(SEQstrdec_case :'d -> 'd -> strdec -> strdec -> 'd).
   ((! :(('d -> strdec -> 'e) -> bool) -> bool)
   (\(STRUCTstrexp_case :'d -> strdec -> 'e).
   ((! :((strid long -> 'e) -> bool) -> bool)
   (\(LONGSTRIDstrexp_case :strid long -> 'e).
   ((! :(('e -> funid -> strexp -> 'e) -> bool) -> bool)
   (\(APPstrexp_case :'e -> funid -> strexp -> 'e).
   ((! :(('d -> 'e -> strdec -> strexp -> 'e) -> bool) -> bool)
   (\(LETstrexp_case :'d -> 'e -> strdec -> strexp -> 'e).
   ((! :((sigexp option -> 'a) -> bool) -> bool)
   (\(fn1 :sigexp option -> 'a).
   ((! :((strbind -> 'b) -> bool) -> bool) (\(fn2 :strbind -> 'b).
   ((! :((strbind option -> 'c) -> bool) -> bool)
   (\(fn3 :strbind option -> 'c).
   ((! :((strdec -> 'd) -> bool) -> bool) (\(fn4 :strdec -> 'd).
   ((! :((strexp -> 'e) -> bool) -> bool) (\(fn5 :strexp -> 'e).
   ((! :((sigexp option -> 'a) -> bool) -> bool)
   (\(fn1' :sigexp option -> 'a).
   ((! :((strbind -> 'b) -> bool) -> bool) (\(fn2' :strbind -> 'b).
   ((! :((strbind option -> 'c) -> bool) -> bool)
   (\(fn3' :strbind option -> 'c).
   ((! :((strdec -> 'd) -> bool) -> bool) (\(fn4' :strdec -> 'd).
   ((! :((strexp -> 'e) -> bool) -> bool) (\(fn5' :strexp -> 'e).
   ((==> ((/\ (((= :'a -> 'a -> bool) ($9 (NONE :sigexp option)))
   $23)) ((/\ ((! :(sigexp -> bool) -> bool) (\(y :sigexp).
   (((= :'a -> 'a -> bool) ($10 ((SOME :sigexp -> sigexp option) $0)))
   ($23 $0))))) ((/\ ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(sigexp option -> bool) -> bool) (\(y''''''' :sigexp option).
   ((! :(strexp -> bool) -> bool) (\(y'''''' :strexp).
   ((! :(strbind option -> bool) -> bool) (\(y''''' :strbind option).
   (((= :'b -> 'b -> bool) ($12 ((((BINDstrbind $3) $2) $1) $0)))
   ((((((($25 ($13 $2)) ($9 $1)) ($11 $0)) $3) $2) $1) $0)))))))))))
   ((/\ (((= :'c -> 'c -> bool) ($7 (NONE :strbind option))) $20))
   ((/\ ((! :(strbind -> bool) -> bool) (\(y :strbind).
   (((= :'c -> 'c -> bool) ($8 ((SOME :strbind -> strbind option)
   $0))) (($20 ($9 $0)) $0))))) ((/\ ((! :(dec -> bool) -> bool)
   (\(y :dec). (((= :'d -> 'd -> bool) ($7 (DECstrdec $0))) ($19
   $0))))) ((/\ ((! :(strbind -> bool) -> bool) (\(y :strbind).
   (((= :'d -> 'd -> bool) ($7 (STRUCTUREstrdec $0))) (($18 ($9 $0))
   $0))))) ((/\ ((! :(strdec -> bool) -> bool) (\(y :strdec).
   ((! :(strdec -> bool) -> bool) (\(y'''' :strdec).
   (((= :'d -> 'd -> bool) ($8 ((LOCALstrdec $1) $0))) (((($18 ($8
   $1)) ($8 $0)) $1) $0))))))) ((/\ (((= :'d -> 'd -> bool) ($6
   EMPTYstrdec)) $15)) ((/\ ((! :(strdec -> bool) -> bool)
   (\(y :strdec). ((! :(strdec -> bool) -> bool) (\(y''' :strdec).
   (((= :'d -> 'd -> bool) ($8 ((SEQstrdec $1) $0))) (((($16 ($8 $1))
   ($8 $0)) $1) $0))))))) ((/\ ((! :(strdec -> bool) -> bool)
   (\(y :strdec). (((= :'e -> 'e -> bool) ($6 (STRUCTstrexp $0)))
   (($14 ($7 $0)) $0))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(y :strid long). (((= :'e -> 'e -> bool) ($6 (LONGSTRIDstrexp
   $0))) ($13 $0))))) ((/\ ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(strexp -> bool) -> bool) (\(y'' :strexp).
   (((= :'e -> 'e -> bool) ($7 ((APPstrexp $1) $0))) ((($13 ($7 $0))
   $1) $0))))))) ((! :(strdec -> bool) -> bool) (\(y :strdec).
   ((! :(strexp -> bool) -> bool) (\(y' :strexp).
   (((= :'e -> 'e -> bool) ($7 ((LETstrexp $1) $0))) (((($12 ($8 $1))
   ($7 $0)) $1) $0)))))))))))))))))))) ((==> ((/\
   (((= :'a -> 'a -> bool) ($4 (NONE :sigexp option))) $23)) ((/\
   ((! :(sigexp -> bool) -> bool) (\(y :sigexp).
   (((= :'a -> 'a -> bool) ($5 ((SOME :sigexp -> sigexp option) $0)))
   ($23 $0))))) ((/\ ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(sigexp option -> bool) -> bool) (\(y''''''' :sigexp option).
   ((! :(strexp -> bool) -> bool) (\(y'''''' :strexp).
   ((! :(strbind option -> bool) -> bool) (\(y''''' :strbind option).
   (((= :'b -> 'b -> bool) ($7 ((((BINDstrbind $3) $2) $1) $0)))
   ((((((($25 ($8 $2)) ($4 $1)) ($6 $0)) $3) $2) $1) $0)))))))))))
   ((/\ (((= :'c -> 'c -> bool) ($2 (NONE :strbind option))) $20))
   ((/\ ((! :(strbind -> bool) -> bool) (\(y :strbind).
   (((= :'c -> 'c -> bool) ($3 ((SOME :strbind -> strbind option)
   $0))) (($20 ($4 $0)) $0))))) ((/\ ((! :(dec -> bool) -> bool)
   (\(y :dec). (((= :'d -> 'd -> bool) ($2 (DECstrdec $0))) ($19
   $0))))) ((/\ ((! :(strbind -> bool) -> bool) (\(y :strbind).
   (((= :'d -> 'd -> bool) ($2 (STRUCTUREstrdec $0))) (($18 ($4 $0))
   $0))))) ((/\ ((! :(strdec -> bool) -> bool) (\(y :strdec).
   ((! :(strdec -> bool) -> bool) (\(y'''' :strdec).
   (((= :'d -> 'd -> bool) ($3 ((LOCALstrdec $1) $0))) (((($18 ($3
   $1)) ($3 $0)) $1) $0))))))) ((/\ (((= :'d -> 'd -> bool) ($1
   EMPTYstrdec)) $15)) ((/\ ((! :(strdec -> bool) -> bool)
   (\(y :strdec). ((! :(strdec -> bool) -> bool) (\(y''' :strdec).
   (((= :'d -> 'd -> bool) ($3 ((SEQstrdec $1) $0))) (((($16 ($3 $1))
   ($3 $0)) $1) $0))))))) ((/\ ((! :(strdec -> bool) -> bool)
   (\(y :strdec). (((= :'e -> 'e -> bool) ($1 (STRUCTstrexp $0)))
   (($14 ($2 $0)) $0))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(y :strid long). (((= :'e -> 'e -> bool) ($1 (LONGSTRIDstrexp
   $0))) ($13 $0))))) ((/\ ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(strexp -> bool) -> bool) (\(y'' :strexp).
   (((= :'e -> 'e -> bool) ($2 ((APPstrexp $1) $0))) ((($13 ($2 $0))
   $1) $0))))))) ((! :(strdec -> bool) -> bool) (\(y :strdec).
   ((! :(strexp -> bool) -> bool) (\(y' :strexp).
   (((= :'e -> 'e -> bool) ($2 ((LETstrexp $1) $0))) (((($12 ($3 $1))
   ($2 $0)) $1) $0)))))))))))))))))))) ((/\
   (((= :(sigexp option -> 'a) -> (sigexp option -> 'a) -> bool) $9)
   $4)) ((/\ (((= :(strbind -> 'b) -> (strbind -> 'b) -> bool) $8)
   $3)) ((/\
   (((= :(strbind option -> 'c) -> (strbind option -> 'c) -> bool) $7)
   $2)) ((/\ (((= :(strdec -> 'd) -> (strdec -> 'd) -> bool) $6) $1))
   (((= :(strexp -> 'e) -> (strexp -> 'e) -> bool) $5)
   $0)))))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((ModMLStructures_induction_thm),
  [],
  `((! :((sigexp option -> bool) -> bool) -> bool)
   (\(sigexp_option_strbind_strdec_strexp_Prop :sigexp option ->
                                                bool).
   ((! :((strbind -> bool) -> bool) -> bool)
   (\(strbind_Prop :strbind -> bool).
   ((! :((strbind option -> bool) -> bool) -> bool)
   (\(strbind_option_strbind_strdec_strexp_Prop :strbind option ->
                                                 bool).
   ((! :((strdec -> bool) -> bool) -> bool)
   (\(strdec_Prop :strdec -> bool).
   ((! :((strexp -> bool) -> bool) -> bool)
   (\(strexp_Prop :strexp -> bool). ((==> ((/\ ($4
   (NONE :sigexp option))) ((/\ ((! :(sigexp -> bool) -> bool)
   (\(y :sigexp). ($5 ((SOME :sigexp -> sigexp option) $0))))) ((/\
   ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(sigexp option -> bool) -> bool) (\(y''''''' :sigexp option).
   ((! :(strexp -> bool) -> bool) (\(y'''''' :strexp).
   ((! :(strbind option -> bool) -> bool) (\(y''''' :strbind option).
   ((==> ($8 $2)) ((==> ($4 $1)) ((==> ($6 $0)) ($7 ((((BINDstrbind
   $3) $2) $1) $0)))))))))))))) ((/\ ($2 (NONE :strbind option))) ((/\
   ((! :(strbind -> bool) -> bool) (\(y :strbind). ((==> ($4 $0)) ($3
   ((SOME :strbind -> strbind option) $0)))))) ((/\
   ((! :(dec -> bool) -> bool) (\(y :dec). ($2 (DECstrdec $0))))) ((/\
   ((! :(strbind -> bool) -> bool) (\(y :strbind). ((==> ($4 $0)) ($2
   (STRUCTUREstrdec $0)))))) ((/\ ((! :(strdec -> bool) -> bool)
   (\(y :strdec). ((! :(strdec -> bool) -> bool) (\(y'''' :strdec).
   ((==> ($3 $1)) ((==> ($3 $0)) ($3 ((LOCALstrdec $1) $0)))))))))
   ((/\ ($1 EMPTYstrdec)) ((/\ ((! :(strdec -> bool) -> bool)
   (\(y :strdec). ((! :(strdec -> bool) -> bool) (\(y''' :strdec).
   ((==> ($3 $1)) ((==> ($3 $0)) ($3 ((SEQstrdec $1) $0))))))))) ((/\
   ((! :(strdec -> bool) -> bool) (\(y :strdec). ((==> ($2 $0)) ($1
   (STRUCTstrexp $0)))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(y :strid long). ($1 (LONGSTRIDstrexp $0))))) ((/\
   ((! :(funid -> bool) -> bool) (\(y :funid).
   ((! :(strexp -> bool) -> bool) (\(y'' :strexp). ((==> ($2 $0)) ($2
   ((APPstrexp $1) $0)))))))) ((! :(strdec -> bool) -> bool)
   (\(y :strdec). ((! :(strexp -> bool) -> bool) (\(y' :strexp). ((==>
   ((/\ ($3 $1)) ($2 $0))) ($2 ((LETstrexp $1) $0)))))))))))))))))))))
   ((/\ ((! :(sigexp option -> bool) -> bool) (\(x1 :sigexp option).
   ($5 $0)))) ((/\ ((! :(strbind -> bool) -> bool) (\(x2 :strbind).
   ($4 $0)))) ((/\ ((! :(strbind option -> bool) -> bool)
   (\(x3 :strbind option). ($3 $0)))) ((/\
   ((! :(strdec -> bool) -> bool) (\(x4 :strdec). ($2 $0))))
   ((! :(strexp -> bool) -> bool) (\(x5 :strexp). ($1
   $0))))))))))))))))))`),
 ((ModMLStructures_rec_thm),
  [],
  `((! :('a -> bool) -> bool)
   (\(strbind_strdec_strexp_NONE_sigexp_case :'a).
   ((! :((sigexp -> 'a) -> bool) -> bool)
   (\(strbind_strdec_strexp_SOME_sigexp_case :sigexp -> 'a).
   ((! :(('a -> 'e -> 'c -> strid -> sigexp option -> strexp ->
         strbind option -> 'b) -> bool) -> bool)
   (\(BINDstrbind_case :'a -> 'e -> 'c -> strid -> sigexp option ->
                        strexp -> strbind option -> 'b).
   ((! :('c -> bool) -> bool)
   (\(strbind_strdec_strexp_NONE_strbind_case :'c).
   ((! :(('b -> strbind -> 'c) -> bool) -> bool)
   (\(strbind_strdec_strexp_SOME_strbind_case :'b -> strbind -> 'c).
   ((! :((dec -> 'd) -> bool) -> bool) (\(DECstrdec_case :dec -> 'd).
   ((! :(('b -> strbind -> 'd) -> bool) -> bool)
   (\(STRUCTUREstrdec_case :'b -> strbind -> 'd).
   ((! :(('d -> 'd -> strdec -> strdec -> 'd) -> bool) -> bool)
   (\(LOCALstrdec_case :'d -> 'd -> strdec -> strdec -> 'd).
   ((! :('d -> bool) -> bool) (\(EMPTYstrdec_case :'d).
   ((! :(('d -> 'd -> strdec -> strdec -> 'd) -> bool) -> bool)
   (\(SEQstrdec_case :'d -> 'd -> strdec -> strdec -> 'd).
   ((! :(('d -> strdec -> 'e) -> bool) -> bool)
   (\(STRUCTstrexp_case :'d -> strdec -> 'e).
   ((! :((strid long -> 'e) -> bool) -> bool)
   (\(LONGSTRIDstrexp_case :strid long -> 'e).
   ((! :(('e -> funid -> strexp -> 'e) -> bool) -> bool)
   (\(APPstrexp_case :'e -> funid -> strexp -> 'e).
   ((! :(('d -> 'e -> strdec -> strexp -> 'e) -> bool) -> bool)
   (\(LETstrexp_case :'d -> 'e -> strdec -> strexp -> 'e).
   ((? :((sigexp option -> 'a) -> bool) -> bool)
   (\(y :sigexp option -> 'a). ((? :((strbind -> 'b) -> bool) -> bool)
   (\(y'''' :strbind -> 'b).
   ((? :((strbind option -> 'c) -> bool) -> bool)
   (\(y''' :strbind option -> 'c).
   ((? :((strdec -> 'd) -> bool) -> bool) (\(y'' :strdec -> 'd).
   ((? :((strexp -> 'e) -> bool) -> bool) (\(y' :strexp -> 'e). ((/\
   (((= :'a -> 'a -> bool) ($4 (NONE :sigexp option))) $18)) ((/\
   ((! :(sigexp -> bool) -> bool) (\(x1 :sigexp).
   (((= :'a -> 'a -> bool) ($5 ((SOME :sigexp -> sigexp option) $0)))
   ($18 $0))))) ((/\ ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp option -> bool) -> bool) (\(x2 :sigexp option).
   ((! :(strexp -> bool) -> bool) (\(x3 :strexp).
   ((! :(strbind option -> bool) -> bool) (\(x4 :strbind option).
   (((= :'b -> 'b -> bool) ($7 ((((BINDstrbind $3) $2) $1) $0)))
   ((((((($20 ($8 $2)) ($4 $1)) ($6 $0)) $3) $2) $1) $0)))))))))))
   ((/\ (((= :'c -> 'c -> bool) ($2 (NONE :strbind option))) $15))
   ((/\ ((! :(strbind -> bool) -> bool) (\(x1 :strbind).
   (((= :'c -> 'c -> bool) ($3 ((SOME :strbind -> strbind option)
   $0))) (($15 ($4 $0)) $0))))) ((/\ ((! :(dec -> bool) -> bool)
   (\(x1 :dec). (((= :'d -> 'd -> bool) ($2 (DECstrdec $0))) ($14
   $0))))) ((/\ ((! :(strbind -> bool) -> bool) (\(x1 :strbind).
   (((= :'d -> 'd -> bool) ($2 (STRUCTUREstrdec $0))) (($13 ($4 $0))
   $0))))) ((/\ ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   (((= :'d -> 'd -> bool) ($3 ((LOCALstrdec $1) $0))) (((($13 ($3
   $1)) ($3 $0)) $1) $0))))))) ((/\ (((= :'d -> 'd -> bool) ($1
   EMPTYstrdec)) $10)) ((/\ ((! :(strdec -> bool) -> bool)
   (\(x1 :strdec). ((! :(strdec -> bool) -> bool) (\(x2 :strdec).
   (((= :'d -> 'd -> bool) ($3 ((SEQstrdec $1) $0))) (((($11 ($3 $1))
   ($3 $0)) $1) $0))))))) ((/\ ((! :(strdec -> bool) -> bool)
   (\(x1 :strdec). (((= :'e -> 'e -> bool) ($1 (STRUCTstrexp $0)))
   (($9 ($2 $0)) $0))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(x1 :strid long). (((= :'e -> 'e -> bool) ($1 (LONGSTRIDstrexp
   $0))) ($8 $0))))) ((/\ ((! :(funid -> bool) -> bool) (\(x1 :funid).
   ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   (((= :'e -> 'e -> bool) ($2 ((APPstrexp $1) $0))) ((($8 ($2 $0))
   $1) $0))))))) ((! :(strdec -> bool) -> bool) (\(x1 :strdec).
   ((! :(strexp -> bool) -> bool) (\(x2 :strexp).
   (((= :'e -> 'e -> bool) ($2 ((LETstrexp $1) $0))) (((($7 ($3 $1))
   ($2 $0)) $1)
   $0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp_Axiom),
  [],
  `((! :('a -> bool) -> bool) (\(e0 :'a).
   ((! :((sigexp -> 'a) -> bool) -> bool) (\(f0 :sigexp -> 'a).
   ((! :(('a -> 'a -> 'a -> strid ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         'a) -> bool) -> bool)
   (\(f1 :'a -> 'a -> 'a -> strid ->
          joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
          joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
          joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
          'a). ((! :('a -> bool) -> bool) (\(e1 :'a).
   ((! :(('a ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         'a) -> bool) -> bool)
   (\(f2 :'a ->
          joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
          'a). ((! :((dec -> 'a) -> bool) -> bool) (\(f3 :dec -> 'a).
   ((! :(('a ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         'a) -> bool) -> bool)
   (\(f4 :'a ->
          joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
          'a).
   ((! :(('a -> 'a ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         'a) -> bool) -> bool)
   (\(f5 :'a -> 'a ->
          joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
          joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
          'a). ((! :('a -> bool) -> bool) (\(e2 :'a).
   ((! :(('a -> 'a ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         'a) -> bool) -> bool)
   (\(f6 :'a -> 'a ->
          joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
          joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
          'a).
   ((! :(('a ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         'a) -> bool) -> bool)
   (\(f7 :'a ->
          joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
          'a). ((! :((strid long -> 'a) -> bool) -> bool)
   (\(f8 :strid long -> 'a).
   ((! :(('a -> funid ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         'a) -> bool) -> bool)
   (\(f9 :'a -> funid ->
          joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
          'a).
   ((! :(('a -> 'a ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
         'a) -> bool) -> bool)
   (\(f10 :'a -> 'a ->
           joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
           joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
           'a).
   ((?! :((joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
          'a) -> bool) -> bool)
   (\(fn :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
          'a). ((/\ (((= :'a -> 'a -> bool) ($0
   JOINT_int_strbind_strdec_strexp_NONE_sigexp)) $14)) ((/\
   ((! :(sigexp -> bool) -> bool) (\(s :sigexp).
   (((= :'a -> 'a -> bool) ($1
   (JOINT_int_strbind_strdec_strexp_SOME_sigexp $0))) ($14 $0)))))
   ((/\ ((! :(strid -> bool) -> bool) (\(s :strid).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j3 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :'a -> 'a -> bool) ($4 ((((JOINT_int_BINDstrbind $3) $2) $1)
   $0))) ((((((($16 ($4 $2)) ($4 $1)) ($4 $0)) $3) $2) $1)
   $0))))))))))) ((/\ (((= :'a -> 'a -> bool) ($0
   JOINT_int_strbind_strdec_strexp_NONE_strbind)) $11)) ((/\
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :'a -> 'a -> bool) ($1
   (JOINT_int_strbind_strdec_strexp_SOME_strbind $0))) (($11 ($1 $0))
   $0))))) ((/\ ((! :(dec -> bool) -> bool) (\(d :dec).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_DECstrdec $0))) ($10 $0)))))
   ((/\
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_STRUCTUREstrdec $0))) (($9
   ($1 $0)) $0))))) ((/\
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_LOCALstrdec $1) $0)))
   (((($9 ($2 $1)) ($2 $0)) $1) $0))))))) ((/\ (((= :'a -> 'a -> bool)
   ($0 JOINT_int_EMPTYstrdec)) $6)) ((/\
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_SEQstrdec $1) $0))) (((($7
   ($2 $1)) ($2 $0)) $1) $0))))))) ((/\
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_STRUCTstrexp $0))) (($5 ($1
   $0)) $0))))) ((/\ ((! :(strid long -> bool) -> bool)
   (\(l :strid long). (((= :'a -> 'a -> bool) ($1
   (JOINT_int_LONGSTRIDstrexp $0))) ($4 $0))))) ((/\
   ((! :(funid -> bool) -> bool) (\(f' :funid).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_APPstrexp $1) $0))) ((($4
   ($2 $0)) $1) $0)))))))
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   ((! :(joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_option_strbind_strdec_strexp_strbind_strbind_option_strbind_strdec_strexp_strdec_strexp).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_LETstrexp $1) $0))) (((($3
   ($2 $1)) ($2 $0)) $1)
   $0)))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((sigdec_constructors_distinct),
  [],
  `((/\ ((! :(sigbind -> bool) -> bool) (\(s :sigbind). (~
   (((= :sigdec -> sigdec -> bool) (SIGNATUREsigdec $0))
   EMPTYsigdec))))) ((/\ ((! :(sigdec -> bool) -> bool)
   (\(s2 :sigdec). ((! :(sigdec -> bool) -> bool) (\(s1 :sigdec).
   ((! :(sigbind -> bool) -> bool) (\(s :sigbind). (~
   (((= :sigdec -> sigdec -> bool) (SIGNATUREsigdec $0)) ((SEQsigdec
   $1) $2)))))))))) ((! :(sigdec -> bool) -> bool) (\(s2 :sigdec).
   ((! :(sigdec -> bool) -> bool) (\(s1 :sigdec). (~
   (((= :sigdec -> sigdec -> bool) EMPTYsigdec) ((SEQsigdec $0)
   $1)))))))))`),
 ((sigdec_constructors_one_one),
  [],
  `((/\ ((! :(sigbind -> bool) -> bool) (\(s :sigbind).
   ((! :(sigbind -> bool) -> bool) (\(s' :sigbind).
   (((= :bool -> bool -> bool) (((= :sigdec -> sigdec -> bool)
   (SIGNATUREsigdec $1)) (SIGNATUREsigdec $0)))
   (((= :sigbind -> sigbind -> bool) $1) $0)))))))
   ((! :(sigdec -> bool) -> bool) (\(s1 :sigdec).
   ((! :(sigdec -> bool) -> bool) (\(s2 :sigdec).
   ((! :(sigdec -> bool) -> bool) (\(s1' :sigdec).
   ((! :(sigdec -> bool) -> bool) (\(s2' :sigdec).
   (((= :bool -> bool -> bool) (((= :sigdec -> sigdec -> bool)
   ((SEQsigdec $3) $2)) ((SEQsigdec $1) $0))) ((/\
   (((= :sigdec -> sigdec -> bool) $3) $1))
   (((= :sigdec -> sigdec -> bool) $2) $0))))))))))))`),
 ((sigdec_cases_thm),
  [],
  `((! :(sigdec -> bool) -> bool) (\(s :sigdec). ((\/
   ((? :(sigbind -> bool) -> bool) (\(s' :sigbind).
   (((= :sigdec -> sigdec -> bool) $1) (SIGNATUREsigdec $0))))) ((\/
   (((= :sigdec -> sigdec -> bool) $0) EMPTYsigdec))
   ((? :(sigdec -> bool) -> bool) (\(s1 :sigdec).
   ((? :(sigdec -> bool) -> bool) (\(s2 :sigdec).
   (((= :sigdec -> sigdec -> bool) $2) ((SEQsigdec $1) $0))))))))))`),
 ((sigdec_induction_thm),
  [],
  `((! :((sigdec -> bool) -> bool) -> bool) (\(P :sigdec -> bool).
   ((==> ((/\ ((! :(sigbind -> bool) -> bool) (\(s :sigbind). ($1
   (SIGNATUREsigdec $0))))) ((/\ ($0 EMPTYsigdec))
   ((! :(sigdec -> bool) -> bool) (\(s1 :sigdec).
   ((! :(sigdec -> bool) -> bool) (\(s2 :sigdec). ((==> ((/\ ($2 $1))
   ($2 $0))) ($2 ((SEQsigdec $1) $0))))))))))
   ((! :(sigdec -> bool) -> bool) (\(s :sigdec). ($1 $0))))))`),
 ((sigdec_Axiom),
  [],
  `((! :((sigbind -> 'a) -> bool) -> bool) (\(f0 :sigbind -> 'a).
   ((! :('a -> bool) -> bool) (\(e :'a).
   ((! :(('a -> 'a -> sigdec -> sigdec -> 'a) -> bool) -> bool)
   (\(f1 :'a -> 'a -> sigdec -> sigdec -> 'a).
   ((?! :((sigdec -> 'a) -> bool) -> bool) (\(fn :sigdec -> 'a). ((/\
   ((! :(sigbind -> bool) -> bool) (\(s :sigbind).
   (((= :'a -> 'a -> bool) ($1 (SIGNATUREsigdec $0))) ($4 $0))))) ((/\
   (((= :'a -> 'a -> bool) ($0 EMPTYsigdec)) $2))
   ((! :(sigdec -> bool) -> bool) (\(s1 :sigdec).
   ((! :(sigdec -> bool) -> bool) (\(s2 :sigdec).
   (((= :'a -> 'a -> bool) ($2 ((SEQsigdec $1) $0))) (((($3 ($2 $1))
   ($2 $0)) $1) $0))))))))))))))))`),
 ((sigbind_cases_thm),
  [],
  `((/\ ((! :(sigbind -> bool) -> bool) (\(x1 :sigbind).
   ((? :(sigid -> bool) -> bool) (\(y :sigid).
   ((? :(sigexp -> bool) -> bool) (\(y'' :sigexp).
   ((? :(sigbind option -> bool) -> bool) (\(y' :sigbind option).
   (((= :sigbind -> sigbind -> bool) $3) (((BINDsigbind $2) $1)
   $0))))))))))) ((! :(sigbind option -> bool) -> bool)
   (\(x2 :sigbind option). ((\/
   (((= :sigbind option -> sigbind option -> bool) $0)
   (NONE :sigbind option))) ((? :(sigbind -> bool) -> bool)
   (\(y :sigbind). (((= :sigbind option -> sigbind option -> bool) $1)
   ((SOME :sigbind -> sigbind option) $0))))))))`),
 ((sigbind_constructors_one_one),
  [],
  `((/\ ((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   ((! :(sigexp -> bool) -> bool) (\(x2 :sigexp).
   ((! :(sigbind option -> bool) -> bool) (\(x3 :sigbind option).
   ((! :(sigid -> bool) -> bool) (\(x1' :sigid).
   ((! :(sigexp -> bool) -> bool) (\(x2' :sigexp).
   ((! :(sigbind option -> bool) -> bool) (\(x3' :sigbind option).
   (((= :bool -> bool -> bool) (((= :sigbind -> sigbind -> bool)
   (((BINDsigbind $5) $4) $3)) (((BINDsigbind $2) $1) $0))) ((/\
   (((= :sigid -> sigid -> bool) $5) $2)) ((/\
   (((= :sigexp -> sigexp -> bool) $4) $1))
   (((= :sigbind option -> sigbind option -> bool) $3)
   $0))))))))))))))))) ((! :(sigbind -> bool) -> bool)
   (\(x1 :sigbind). ((! :(sigbind -> bool) -> bool) (\(x1' :sigbind).
   (((= :bool -> bool -> bool)
   (((= :sigbind option -> sigbind option -> bool)
   ((SOME :sigbind -> sigbind option) $1))
   ((SOME :sigbind -> sigbind option) $0)))
   (((= :sigbind -> sigbind -> bool) $1) $0)))))))`),
 ((sigbind_constructors_distinct),
  [],
  `((! :(sigbind -> bool) -> bool) (\(x1' :sigbind). (~
   (((= :sigbind option -> sigbind option -> bool)
   (NONE :sigbind option)) ((SOME :sigbind -> sigbind option)
   $0)))))`),
 ((sigbind_unique_thm),
  [],
  `((! :(('b -> sigid -> sigexp -> sigbind option -> 'a) -> bool) ->
        bool)
   (\(BINDsigbind_case :'b -> sigid -> sigexp -> sigbind option ->
                        'a). ((! :('b -> bool) -> bool)
   (\(sigbind_NONE_sigbind_case :'b).
   ((! :(('a -> sigbind -> 'b) -> bool) -> bool)
   (\(sigbind_SOME_sigbind_case :'a -> sigbind -> 'b).
   ((! :((sigbind -> 'a) -> bool) -> bool) (\(fn1 :sigbind -> 'a).
   ((! :((sigbind option -> 'b) -> bool) -> bool)
   (\(fn2 :sigbind option -> 'b).
   ((! :((sigbind -> 'a) -> bool) -> bool) (\(fn1' :sigbind -> 'a).
   ((! :((sigbind option -> 'b) -> bool) -> bool)
   (\(fn2' :sigbind option -> 'b). ((==> ((/\
   ((! :(sigid -> bool) -> bool) (\(y :sigid).
   ((! :(sigexp -> bool) -> bool) (\(y'' :sigexp).
   ((! :(sigbind option -> bool) -> bool) (\(y' :sigbind option).
   (((= :'a -> 'a -> bool) ($6 (((BINDsigbind $2) $1) $0))) (((($9 ($5
   $0)) $2) $1) $0))))))))) ((/\ (((= :'b -> 'b -> bool) ($2
   (NONE :sigbind option))) $5)) ((! :(sigbind -> bool) -> bool)
   (\(y :sigbind). (((= :'b -> 'b -> bool) ($3
   ((SOME :sigbind -> sigbind option) $0))) (($5 ($4 $0)) $0)))))))
   ((==> ((/\ ((! :(sigid -> bool) -> bool) (\(y :sigid).
   ((! :(sigexp -> bool) -> bool) (\(y'' :sigexp).
   ((! :(sigbind option -> bool) -> bool) (\(y' :sigbind option).
   (((= :'a -> 'a -> bool) ($4 (((BINDsigbind $2) $1) $0))) (((($9 ($3
   $0)) $2) $1) $0))))))))) ((/\ (((= :'b -> 'b -> bool) ($0
   (NONE :sigbind option))) $5)) ((! :(sigbind -> bool) -> bool)
   (\(y :sigbind). (((= :'b -> 'b -> bool) ($1
   ((SOME :sigbind -> sigbind option) $0))) (($5 ($2 $0)) $0)))))))
   ((/\ (((= :(sigbind -> 'a) -> (sigbind -> 'a) -> bool) $3) $1))
   (((= :(sigbind option -> 'b) -> (sigbind option -> 'b) -> bool) $2)
   $0))))))))))))))))))`),
 ((sigbind_induction_thm),
  [],
  `((! :((sigbind -> bool) -> bool) -> bool)
   (\(sigbind_Prop :sigbind -> bool).
   ((! :((sigbind option -> bool) -> bool) -> bool)
   (\(sigbind_option_sigbind_Prop :sigbind option -> bool). ((==> ((/\
   ((! :(sigid -> bool) -> bool) (\(y :sigid).
   ((! :(sigexp -> bool) -> bool) (\(y'' :sigexp).
   ((! :(sigbind option -> bool) -> bool) (\(y' :sigbind option).
   ((==> ($3 $0)) ($4 (((BINDsigbind $2) $1) $0)))))))))) ((/\ ($0
   (NONE :sigbind option))) ((! :(sigbind -> bool) -> bool)
   (\(y :sigbind). ((==> ($2 $0)) ($1
   ((SOME :sigbind -> sigbind option) $0)))))))) ((/\
   ((! :(sigbind -> bool) -> bool) (\(x1 :sigbind). ($2 $0))))
   ((! :(sigbind option -> bool) -> bool) (\(x2 :sigbind option). ($1
   $0)))))))))`),
 ((sigbind_rec_thm),
  [],
  `((! :(('b -> sigid -> sigexp -> sigbind option -> 'a) -> bool) ->
        bool)
   (\(BINDsigbind_case :'b -> sigid -> sigexp -> sigbind option ->
                        'a). ((! :('b -> bool) -> bool)
   (\(sigbind_NONE_sigbind_case :'b).
   ((! :(('a -> sigbind -> 'b) -> bool) -> bool)
   (\(sigbind_SOME_sigbind_case :'a -> sigbind -> 'b).
   ((? :((sigbind -> 'a) -> bool) -> bool) (\(y :sigbind -> 'a).
   ((? :((sigbind option -> 'b) -> bool) -> bool)
   (\(y' :sigbind option -> 'b). ((/\ ((! :(sigid -> bool) -> bool)
   (\(x1 :sigid). ((! :(sigexp -> bool) -> bool) (\(x2 :sigexp).
   ((! :(sigbind option -> bool) -> bool) (\(x3 :sigbind option).
   (((= :'a -> 'a -> bool) ($4 (((BINDsigbind $2) $1) $0))) (((($7 ($3
   $0)) $2) $1) $0))))))))) ((/\ (((= :'b -> 'b -> bool) ($0
   (NONE :sigbind option))) $3)) ((! :(sigbind -> bool) -> bool)
   (\(x1 :sigbind). (((= :'b -> 'b -> bool) ($1
   ((SOME :sigbind -> sigbind option) $0))) (($3 ($2 $0))
   $0))))))))))))))))`),
 ((joint_ty_sigbind_sigbind_option_sigbind_Axiom),
  [],
  `((! :(('a -> sigid -> sigexp ->
         joint_ty_sigbind_sigbind_option_sigbind -> 'a) -> bool) ->
        bool)
   (\(f0 :'a -> sigid -> sigexp ->
          joint_ty_sigbind_sigbind_option_sigbind -> 'a).
   ((! :('a -> bool) -> bool) (\(e :'a).
   ((! :(('a -> joint_ty_sigbind_sigbind_option_sigbind -> 'a) ->
        bool) -> bool)
   (\(f1 :'a -> joint_ty_sigbind_sigbind_option_sigbind -> 'a).
   ((?! :((joint_ty_sigbind_sigbind_option_sigbind -> 'a) -> bool) ->
         bool) (\(fn :joint_ty_sigbind_sigbind_option_sigbind -> 'a).
   ((/\ ((! :(sigid -> bool) -> bool) (\(s0 :sigid).
   ((! :(sigexp -> bool) -> bool) (\(s1 :sigexp).
   ((! :(joint_ty_sigbind_sigbind_option_sigbind -> bool) -> bool)
   (\(j :joint_ty_sigbind_sigbind_option_sigbind).
   (((= :'a -> 'a -> bool) ($3 (((JOINT_int_BINDsigbind $2) $1) $0)))
   (((($6 ($3 $0)) $2) $1) $0))))))))) ((/\ (((= :'a -> 'a -> bool)
   ($0 JOINT_int_sigbind_NONE_sigbind)) $2))
   ((! :(joint_ty_sigbind_sigbind_option_sigbind -> bool) -> bool)
   (\(j :joint_ty_sigbind_sigbind_option_sigbind).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_sigbind_SOME_sigbind $0)))
   (($2 ($1 $0)) $0))))))))))))))`),
 ((ModMLSignatures_cases_thm),
  [],
  `((/\ ((! :(sigexp -> bool) -> bool) (\(x1 :sigexp). ((\/
   ((? :(spec -> bool) -> bool) (\(y :spec).
   (((= :sigexp -> sigexp -> bool) $1) (SIGsigexp $0)))))
   ((? :(sigid -> bool) -> bool) (\(y :sigid).
   (((= :sigexp -> sigexp -> bool) $1) (SIGIDsigexp $0)))))))) ((/\
   ((! :(spec -> bool) -> bool) (\(x2 :spec). ((\/
   ((? :(valdesc -> bool) -> bool) (\(y :valdesc).
   (((= :spec -> spec -> bool) $1) (VALspec $0))))) ((\/
   ((? :(exdesc -> bool) -> bool) (\(y :exdesc).
   (((= :spec -> spec -> bool) $1) (EXCEPTIONspec $0))))) ((\/
   ((? :(strdesc -> bool) -> bool) (\(y :strdesc).
   (((= :spec -> spec -> bool) $1) (STRUCTUREspec $0))))) ((\/
   ((? :(spec -> bool) -> bool) (\(y :spec).
   ((? :(spec -> bool) -> bool) (\(y' :spec).
   (((= :spec -> spec -> bool) $2) ((LOCALspec $1) $0))))))) ((\/
   ((? :(strid long nonemptylist -> bool) -> bool)
   (\(y :strid long nonemptylist). (((= :spec -> spec -> bool) $1)
   (OPENspec $0))))) ((\/ ((? :(sigid nonemptylist -> bool) -> bool)
   (\(y :sigid nonemptylist). (((= :spec -> spec -> bool) $1)
   (INCLUDEspec $0))))) ((\/ (((= :spec -> spec -> bool) $0)
   EMPTYspec)) ((? :(spec -> bool) -> bool) (\(y :spec).
   ((? :(spec -> bool) -> bool) (\(y' :spec).
   (((= :spec -> spec -> bool) $2) ((SEQspec $1) $0))))))))))))))))
   ((/\ ((! :(strdesc -> bool) -> bool) (\(x3 :strdesc).
   ((? :(strid -> bool) -> bool) (\(y :strid).
   ((? :(sigexp -> bool) -> bool) (\(y'' :sigexp).
   ((? :(strdesc option -> bool) -> bool) (\(y' :strdesc option).
   (((= :strdesc -> strdesc -> bool) $3) (((STRIDstrdesc $2) $1)
   $0))))))))))) ((! :(strdesc option -> bool) -> bool)
   (\(x4 :strdesc option). ((\/
   (((= :strdesc option -> strdesc option -> bool) $0)
   (NONE :strdesc option))) ((? :(strdesc -> bool) -> bool)
   (\(y :strdesc). (((= :strdesc option -> strdesc option -> bool) $1)
   ((SOME :strdesc -> strdesc option) $0))))))))))`),
 ((ModMLSignatures_constructors_one_one),
  [],
  `((/\ ((/\ ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x1' :spec).
   (((= :bool -> bool -> bool) (((= :sigexp -> sigexp -> bool)
   (SIGsigexp $1)) (SIGsigexp $0))) (((= :spec -> spec -> bool) $1)
   $0))))))) ((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   ((! :(sigid -> bool) -> bool) (\(x1' :sigid).
   (((= :bool -> bool -> bool) (((= :sigexp -> sigexp -> bool)
   (SIGIDsigexp $1)) (SIGIDsigexp $0))) (((= :sigid -> sigid -> bool)
   $1) $0)))))))) ((/\ ((/\ ((! :(valdesc -> bool) -> bool)
   (\(x1 :valdesc). ((! :(valdesc -> bool) -> bool) (\(x1' :valdesc).
   (((= :bool -> bool -> bool) (((= :spec -> spec -> bool) (VALspec
   $1)) (VALspec $0))) (((= :valdesc -> valdesc -> bool) $1) $0)))))))
   ((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   ((! :(exdesc -> bool) -> bool) (\(x1' :exdesc).
   (((= :bool -> bool -> bool) (((= :spec -> spec -> bool)
   (EXCEPTIONspec $1)) (EXCEPTIONspec $0)))
   (((= :exdesc -> exdesc -> bool) $1) $0))))))) ((/\
   ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   ((! :(strdesc -> bool) -> bool) (\(x1' :strdesc).
   (((= :bool -> bool -> bool) (((= :spec -> spec -> bool)
   (STRUCTUREspec $1)) (STRUCTUREspec $0)))
   (((= :strdesc -> strdesc -> bool) $1) $0))))))) ((/\
   ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   ((! :(spec -> bool) -> bool) (\(x1' :spec).
   ((! :(spec -> bool) -> bool) (\(x2' :spec).
   (((= :bool -> bool -> bool) (((= :spec -> spec -> bool) ((LOCALspec
   $3) $2)) ((LOCALspec $1) $0))) ((/\ (((= :spec -> spec -> bool) $3)
   $1)) (((= :spec -> spec -> bool) $2) $0)))))))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1' :strid long nonemptylist). (((= :bool -> bool -> bool)
   (((= :spec -> spec -> bool) (OPENspec $1)) (OPENspec $0)))
   (((= :strid long nonemptylist -> strid long nonemptylist -> bool)
   $1) $0))))))) ((/\ ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist).
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1' :sigid nonemptylist). (((= :bool -> bool -> bool)
   (((= :spec -> spec -> bool) (INCLUDEspec $1)) (INCLUDEspec $0)))
   (((= :sigid nonemptylist -> sigid nonemptylist -> bool) $1)
   $0))))))) ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   ((! :(spec -> bool) -> bool) (\(x1' :spec).
   ((! :(spec -> bool) -> bool) (\(x2' :spec).
   (((= :bool -> bool -> bool) (((= :spec -> spec -> bool) ((SEQspec
   $3) $2)) ((SEQspec $1) $0))) ((/\ (((= :spec -> spec -> bool) $3)
   $1)) (((= :spec -> spec -> bool) $2) $0)))))))))))))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp -> bool) -> bool) (\(x2 :sigexp).
   ((! :(strdesc option -> bool) -> bool) (\(x3 :strdesc option).
   ((! :(strid -> bool) -> bool) (\(x1' :strid).
   ((! :(sigexp -> bool) -> bool) (\(x2' :sigexp).
   ((! :(strdesc option -> bool) -> bool) (\(x3' :strdesc option).
   (((= :bool -> bool -> bool) (((= :strdesc -> strdesc -> bool)
   (((STRIDstrdesc $5) $4) $3)) (((STRIDstrdesc $2) $1) $0))) ((/\
   (((= :strid -> strid -> bool) $5) $2)) ((/\
   (((= :sigexp -> sigexp -> bool) $4) $1))
   (((= :strdesc option -> strdesc option -> bool) $3)
   $0))))))))))))))))) ((! :(strdesc -> bool) -> bool)
   (\(x1 :strdesc). ((! :(strdesc -> bool) -> bool) (\(x1' :strdesc).
   (((= :bool -> bool -> bool)
   (((= :strdesc option -> strdesc option -> bool)
   ((SOME :strdesc -> strdesc option) $1))
   ((SOME :strdesc -> strdesc option) $0)))
   (((= :strdesc -> strdesc -> bool) $1) $0)))))))))`),
 ((ModMLSignatures_constructors_distinct),
  [],
  `((/\ ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(sigid -> bool) -> bool) (\(x1' :sigid). (~
   (((= :sigexp -> sigexp -> bool) (SIGsigexp $1)) (SIGIDsigexp
   $0)))))))) ((/\ ((/\ ((! :(valdesc -> bool) -> bool)
   (\(x1 :valdesc). ((! :(exdesc -> bool) -> bool) (\(x1' :exdesc). (~
   (((= :spec -> spec -> bool) (VALspec $1)) (EXCEPTIONspec $0))))))))
   ((/\ ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   ((! :(strdesc -> bool) -> bool) (\(x1' :strdesc). (~
   (((= :spec -> spec -> bool) (VALspec $1)) (STRUCTUREspec $0))))))))
   ((/\ ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   ((! :(spec -> bool) -> bool) (\(x1' :spec).
   ((! :(spec -> bool) -> bool) (\(x2' :spec). (~
   (((= :spec -> spec -> bool) (VALspec $2)) ((LOCALspec $1)
   $0)))))))))) ((/\ ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1' :strid long nonemptylist). (~ (((= :spec -> spec -> bool)
   (VALspec $1)) (OPENspec $0)))))))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1' :sigid nonemptylist). (~ (((= :spec -> spec -> bool)
   (VALspec $1)) (INCLUDEspec $0)))))))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc). (~
   (((= :spec -> spec -> bool) (VALspec $0)) EMPTYspec))))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   ((! :(spec -> bool) -> bool) (\(x1' :spec).
   ((! :(spec -> bool) -> bool) (\(x2' :spec). (~
   (((= :spec -> spec -> bool) (VALspec $2)) ((SEQspec $1)
   $0)))))))))) ((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   ((! :(strdesc -> bool) -> bool) (\(x1' :strdesc). (~
   (((= :spec -> spec -> bool) (EXCEPTIONspec $1)) (STRUCTUREspec
   $0)))))))) ((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   ((! :(spec -> bool) -> bool) (\(x1' :spec).
   ((! :(spec -> bool) -> bool) (\(x2' :spec). (~
   (((= :spec -> spec -> bool) (EXCEPTIONspec $2)) ((LOCALspec $1)
   $0)))))))))) ((/\ ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1' :strid long nonemptylist). (~ (((= :spec -> spec -> bool)
   (EXCEPTIONspec $1)) (OPENspec $0)))))))) ((/\
   ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1' :sigid nonemptylist). (~ (((= :spec -> spec -> bool)
   (EXCEPTIONspec $1)) (INCLUDEspec $0)))))))) ((/\
   ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc). (~
   (((= :spec -> spec -> bool) (EXCEPTIONspec $0)) EMPTYspec))))) ((/\
   ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   ((! :(spec -> bool) -> bool) (\(x1' :spec).
   ((! :(spec -> bool) -> bool) (\(x2' :spec). (~
   (((= :spec -> spec -> bool) (EXCEPTIONspec $2)) ((SEQspec $1)
   $0)))))))))) ((/\ ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   ((! :(spec -> bool) -> bool) (\(x1' :spec).
   ((! :(spec -> bool) -> bool) (\(x2' :spec). (~
   (((= :spec -> spec -> bool) (STRUCTUREspec $2)) ((LOCALspec $1)
   $0)))))))))) ((/\ ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1' :strid long nonemptylist). (~ (((= :spec -> spec -> bool)
   (STRUCTUREspec $1)) (OPENspec $0)))))))) ((/\
   ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1' :sigid nonemptylist). (~ (((= :spec -> spec -> bool)
   (STRUCTUREspec $1)) (INCLUDEspec $0)))))))) ((/\
   ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc). (~
   (((= :spec -> spec -> bool) (STRUCTUREspec $0)) EMPTYspec))))) ((/\
   ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   ((! :(spec -> bool) -> bool) (\(x1' :spec).
   ((! :(spec -> bool) -> bool) (\(x2' :spec). (~
   (((= :spec -> spec -> bool) (STRUCTUREspec $2)) ((SEQspec $1)
   $0)))))))))) ((/\ ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1' :strid long nonemptylist). (~ (((= :spec -> spec -> bool)
   ((LOCALspec $2) $1)) (OPENspec $0)))))))))) ((/\
   ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1' :sigid nonemptylist). (~ (((= :spec -> spec -> bool)
   ((LOCALspec $2) $1)) (INCLUDEspec $0)))))))))) ((/\
   ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec). (~
   (((= :spec -> spec -> bool) ((LOCALspec $1) $0)) EMPTYspec)))))))
   ((/\ ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec).
   ((! :(spec -> bool) -> bool) (\(x1' :spec).
   ((! :(spec -> bool) -> bool) (\(x2' :spec). (~
   (((= :spec -> spec -> bool) ((LOCALspec $3) $2)) ((SEQspec $1)
   $0)))))))))))) ((/\ ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist).
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1' :sigid nonemptylist). (~ (((= :spec -> spec -> bool)
   (OPENspec $1)) (INCLUDEspec $0)))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (~ (((= :spec -> spec -> bool)
   (OPENspec $0)) EMPTYspec))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). ((! :(spec -> bool) -> bool)
   (\(x1' :spec). ((! :(spec -> bool) -> bool) (\(x2' :spec). (~
   (((= :spec -> spec -> bool) (OPENspec $2)) ((SEQspec $1)
   $0)))))))))) ((/\ ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (~ (((= :spec -> spec -> bool)
   (INCLUDEspec $0)) EMPTYspec))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). ((! :(spec -> bool) -> bool)
   (\(x1' :spec). ((! :(spec -> bool) -> bool) (\(x2' :spec). (~
   (((= :spec -> spec -> bool) (INCLUDEspec $2)) ((SEQspec $1)
   $0)))))))))) ((! :(spec -> bool) -> bool) (\(x1' :spec).
   ((! :(spec -> bool) -> bool) (\(x2' :spec). (~
   (((= :spec -> spec -> bool) EMPTYspec) ((SEQspec $1)
   $0)))))))))))))))))))))))))))))))))))
   ((! :(strdesc -> bool) -> bool) (\(x1' :strdesc). (~
   (((= :strdesc option -> strdesc option -> bool)
   (NONE :strdesc option)) ((SOME :strdesc -> strdesc option)
   $0)))))))`),
 ((ModMLSignatures_unique_thm),
  [],
  `((! :(('b -> spec -> 'a) -> bool) -> bool)
   (\(SIGsigexp_case :'b -> spec -> 'a).
   ((! :((sigid -> 'a) -> bool) -> bool)
   (\(SIGIDsigexp_case :sigid -> 'a).
   ((! :((valdesc -> 'b) -> bool) -> bool)
   (\(VALspec_case :valdesc -> 'b).
   ((! :((exdesc -> 'b) -> bool) -> bool)
   (\(EXCEPTIONspec_case :exdesc -> 'b).
   ((! :(('c -> strdesc -> 'b) -> bool) -> bool)
   (\(STRUCTUREspec_case :'c -> strdesc -> 'b).
   ((! :(('b -> 'b -> spec -> spec -> 'b) -> bool) -> bool)
   (\(LOCALspec_case :'b -> 'b -> spec -> spec -> 'b).
   ((! :((strid long nonemptylist -> 'b) -> bool) -> bool)
   (\(OPENspec_case :strid long nonemptylist -> 'b).
   ((! :((sigid nonemptylist -> 'b) -> bool) -> bool)
   (\(INCLUDEspec_case :sigid nonemptylist -> 'b).
   ((! :('b -> bool) -> bool) (\(EMPTYspec_case :'b).
   ((! :(('b -> 'b -> spec -> spec -> 'b) -> bool) -> bool)
   (\(SEQspec_case :'b -> 'b -> spec -> spec -> 'b).
   ((! :(('a -> 'd -> strid -> sigexp -> strdesc option -> 'c) ->
        bool) -> bool)
   (\(STRIDstrdesc_case :'a -> 'd -> strid -> sigexp ->
                         strdesc option -> 'c).
   ((! :('d -> bool) -> bool)
   (\(sigexp_spec_strdesc_NONE_strdesc_case :'d).
   ((! :(('c -> strdesc -> 'd) -> bool) -> bool)
   (\(sigexp_spec_strdesc_SOME_strdesc_case :'c -> strdesc -> 'd).
   ((! :((sigexp -> 'a) -> bool) -> bool) (\(fn1 :sigexp -> 'a).
   ((! :((spec -> 'b) -> bool) -> bool) (\(fn2 :spec -> 'b).
   ((! :((strdesc -> 'c) -> bool) -> bool) (\(fn3 :strdesc -> 'c).
   ((! :((strdesc option -> 'd) -> bool) -> bool)
   (\(fn4 :strdesc option -> 'd).
   ((! :((sigexp -> 'a) -> bool) -> bool) (\(fn1' :sigexp -> 'a).
   ((! :((spec -> 'b) -> bool) -> bool) (\(fn2' :spec -> 'b).
   ((! :((strdesc -> 'c) -> bool) -> bool) (\(fn3' :strdesc -> 'c).
   ((! :((strdesc option -> 'd) -> bool) -> bool)
   (\(fn4' :strdesc option -> 'd). ((==> ((/\
   ((! :(spec -> bool) -> bool) (\(y :spec). (((= :'a -> 'a -> bool)
   ($8 (SIGsigexp $0))) (($21 ($7 $0)) $0))))) ((/\
   ((! :(sigid -> bool) -> bool) (\(y :sigid). (((= :'a -> 'a -> bool)
   ($8 (SIGIDsigexp $0))) ($20 $0))))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(y :valdesc).
   (((= :'b -> 'b -> bool) ($7 (VALspec $0))) ($19 $0))))) ((/\
   ((! :(exdesc -> bool) -> bool) (\(y :exdesc).
   (((= :'b -> 'b -> bool) ($7 (EXCEPTIONspec $0))) ($18 $0))))) ((/\
   ((! :(strdesc -> bool) -> bool) (\(y :strdesc).
   (((= :'b -> 'b -> bool) ($7 (STRUCTUREspec $0))) (($17 ($6 $0))
   $0))))) ((/\ ((! :(spec -> bool) -> bool) (\(y :spec).
   ((! :(spec -> bool) -> bool) (\(y'''' :spec).
   (((= :'b -> 'b -> bool) ($8 ((LOCALspec $1) $0))) (((($17 ($8 $1))
   ($8 $0)) $1) $0))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(y :strid long nonemptylist). (((= :'b -> 'b -> bool) ($7
   (OPENspec $0))) ($15 $0))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(y :sigid nonemptylist). (((= :'b -> 'b -> bool) ($7 (INCLUDEspec
   $0))) ($14 $0))))) ((/\ (((= :'b -> 'b -> bool) ($6 EMPTYspec))
   $12)) ((/\ ((! :(spec -> bool) -> bool) (\(y :spec).
   ((! :(spec -> bool) -> bool) (\(y''' :spec).
   (((= :'b -> 'b -> bool) ($8 ((SEQspec $1) $0))) (((($13 ($8 $1))
   ($8 $0)) $1) $0))))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(y :strid). ((! :(sigexp -> bool) -> bool) (\(y'' :sigexp).
   ((! :(strdesc option -> bool) -> bool) (\(y' :strdesc option).
   (((= :'c -> 'c -> bool) ($8 (((STRIDstrdesc $2) $1) $0))) ((((($13
   ($10 $1)) ($7 $0)) $2) $1) $0))))))))) ((/\ (((= :'d -> 'd -> bool)
   ($4 (NONE :strdesc option))) $9)) ((! :(strdesc -> bool) -> bool)
   (\(y :strdesc). (((= :'d -> 'd -> bool) ($5
   ((SOME :strdesc -> strdesc option) $0))) (($9 ($6 $0))
   $0))))))))))))))))) ((==> ((/\ ((! :(spec -> bool) -> bool)
   (\(y :spec). (((= :'a -> 'a -> bool) ($4 (SIGsigexp $0))) (($21 ($3
   $0)) $0))))) ((/\ ((! :(sigid -> bool) -> bool) (\(y :sigid).
   (((= :'a -> 'a -> bool) ($4 (SIGIDsigexp $0))) ($20 $0))))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(y :valdesc).
   (((= :'b -> 'b -> bool) ($3 (VALspec $0))) ($19 $0))))) ((/\
   ((! :(exdesc -> bool) -> bool) (\(y :exdesc).
   (((= :'b -> 'b -> bool) ($3 (EXCEPTIONspec $0))) ($18 $0))))) ((/\
   ((! :(strdesc -> bool) -> bool) (\(y :strdesc).
   (((= :'b -> 'b -> bool) ($3 (STRUCTUREspec $0))) (($17 ($2 $0))
   $0))))) ((/\ ((! :(spec -> bool) -> bool) (\(y :spec).
   ((! :(spec -> bool) -> bool) (\(y'''' :spec).
   (((= :'b -> 'b -> bool) ($4 ((LOCALspec $1) $0))) (((($17 ($4 $1))
   ($4 $0)) $1) $0))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(y :strid long nonemptylist). (((= :'b -> 'b -> bool) ($3
   (OPENspec $0))) ($15 $0))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(y :sigid nonemptylist). (((= :'b -> 'b -> bool) ($3 (INCLUDEspec
   $0))) ($14 $0))))) ((/\ (((= :'b -> 'b -> bool) ($2 EMPTYspec))
   $12)) ((/\ ((! :(spec -> bool) -> bool) (\(y :spec).
   ((! :(spec -> bool) -> bool) (\(y''' :spec).
   (((= :'b -> 'b -> bool) ($4 ((SEQspec $1) $0))) (((($13 ($4 $1))
   ($4 $0)) $1) $0))))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(y :strid). ((! :(sigexp -> bool) -> bool) (\(y'' :sigexp).
   ((! :(strdesc option -> bool) -> bool) (\(y' :strdesc option).
   (((= :'c -> 'c -> bool) ($4 (((STRIDstrdesc $2) $1) $0))) ((((($13
   ($6 $1)) ($3 $0)) $2) $1) $0))))))))) ((/\ (((= :'d -> 'd -> bool)
   ($0 (NONE :strdesc option))) $9)) ((! :(strdesc -> bool) -> bool)
   (\(y :strdesc). (((= :'d -> 'd -> bool) ($1
   ((SOME :strdesc -> strdesc option) $0))) (($9 ($2 $0))
   $0))))))))))))))))) ((/\
   (((= :(sigexp -> 'a) -> (sigexp -> 'a) -> bool) $7) $3)) ((/\
   (((= :(spec -> 'b) -> (spec -> 'b) -> bool) $6) $2)) ((/\
   (((= :(strdesc -> 'c) -> (strdesc -> 'c) -> bool) $5) $1))
   (((= :(strdesc option -> 'd) -> (strdesc option -> 'd) -> bool) $4)
   $0))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((ModMLSignatures_induction_thm),
  [],
  `((! :((sigexp -> bool) -> bool) -> bool)
   (\(sigexp_Prop :sigexp -> bool).
   ((! :((spec -> bool) -> bool) -> bool) (\(spec_Prop :spec -> bool).
   ((! :((strdesc -> bool) -> bool) -> bool)
   (\(strdesc_Prop :strdesc -> bool).
   ((! :((strdesc option -> bool) -> bool) -> bool)
   (\(strdesc_option_sigexp_spec_strdesc_Prop :strdesc option ->
                                               bool). ((==> ((/\
   ((! :(spec -> bool) -> bool) (\(y :spec). ((==> ($3 $0)) ($4
   (SIGsigexp $0)))))) ((/\ ((! :(sigid -> bool) -> bool)
   (\(y :sigid). ($4 (SIGIDsigexp $0))))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(y :valdesc). ($3 (VALspec
   $0))))) ((/\ ((! :(exdesc -> bool) -> bool) (\(y :exdesc). ($3
   (EXCEPTIONspec $0))))) ((/\ ((! :(strdesc -> bool) -> bool)
   (\(y :strdesc). ((==> ($2 $0)) ($3 (STRUCTUREspec $0)))))) ((/\
   ((! :(spec -> bool) -> bool) (\(y :spec).
   ((! :(spec -> bool) -> bool) (\(y'''' :spec). ((==> ($4 $1)) ((==>
   ($4 $0)) ($4 ((LOCALspec $1) $0))))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(y :strid long nonemptylist). ($3 (OPENspec $0))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(y :sigid nonemptylist). ($3 (INCLUDEspec $0))))) ((/\ ($2
   EMPTYspec)) ((/\ ((! :(spec -> bool) -> bool) (\(y :spec).
   ((! :(spec -> bool) -> bool) (\(y''' :spec). ((==> ($4 $1)) ((==>
   ($4 $0)) ($4 ((SEQspec $1) $0))))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(y :strid).
   ((! :(sigexp -> bool) -> bool) (\(y'' :sigexp).
   ((! :(strdesc option -> bool) -> bool) (\(y' :strdesc option).
   ((==> ($6 $1)) ((==> ($3 $0)) ($4 (((STRIDstrdesc $2) $1)
   $0))))))))))) ((/\ ($0 (NONE :strdesc option)))
   ((! :(strdesc -> bool) -> bool) (\(y :strdesc). ((==> ($2 $0)) ($1
   ((SOME :strdesc -> strdesc option) $0)))))))))))))))))) ((/\
   ((! :(sigexp -> bool) -> bool) (\(x1 :sigexp). ($4 $0)))) ((/\
   ((! :(spec -> bool) -> bool) (\(x2 :spec). ($3 $0)))) ((/\
   ((! :(strdesc -> bool) -> bool) (\(x3 :strdesc). ($2 $0))))
   ((! :(strdesc option -> bool) -> bool) (\(x4 :strdesc option). ($1
   $0)))))))))))))))`),
 ((ModMLSignatures_rec_thm),
  [],
  `((! :(('b -> spec -> 'a) -> bool) -> bool)
   (\(SIGsigexp_case :'b -> spec -> 'a).
   ((! :((sigid -> 'a) -> bool) -> bool)
   (\(SIGIDsigexp_case :sigid -> 'a).
   ((! :((valdesc -> 'b) -> bool) -> bool)
   (\(VALspec_case :valdesc -> 'b).
   ((! :((exdesc -> 'b) -> bool) -> bool)
   (\(EXCEPTIONspec_case :exdesc -> 'b).
   ((! :(('c -> strdesc -> 'b) -> bool) -> bool)
   (\(STRUCTUREspec_case :'c -> strdesc -> 'b).
   ((! :(('b -> 'b -> spec -> spec -> 'b) -> bool) -> bool)
   (\(LOCALspec_case :'b -> 'b -> spec -> spec -> 'b).
   ((! :((strid long nonemptylist -> 'b) -> bool) -> bool)
   (\(OPENspec_case :strid long nonemptylist -> 'b).
   ((! :((sigid nonemptylist -> 'b) -> bool) -> bool)
   (\(INCLUDEspec_case :sigid nonemptylist -> 'b).
   ((! :('b -> bool) -> bool) (\(EMPTYspec_case :'b).
   ((! :(('b -> 'b -> spec -> spec -> 'b) -> bool) -> bool)
   (\(SEQspec_case :'b -> 'b -> spec -> spec -> 'b).
   ((! :(('a -> 'd -> strid -> sigexp -> strdesc option -> 'c) ->
        bool) -> bool)
   (\(STRIDstrdesc_case :'a -> 'd -> strid -> sigexp ->
                         strdesc option -> 'c).
   ((! :('d -> bool) -> bool)
   (\(sigexp_spec_strdesc_NONE_strdesc_case :'d).
   ((! :(('c -> strdesc -> 'd) -> bool) -> bool)
   (\(sigexp_spec_strdesc_SOME_strdesc_case :'c -> strdesc -> 'd).
   ((? :((sigexp -> 'a) -> bool) -> bool) (\(y :sigexp -> 'a).
   ((? :((spec -> 'b) -> bool) -> bool) (\(y''' :spec -> 'b).
   ((? :((strdesc -> 'c) -> bool) -> bool) (\(y'' :strdesc -> 'c).
   ((? :((strdesc option -> 'd) -> bool) -> bool)
   (\(y' :strdesc option -> 'd). ((/\ ((! :(spec -> bool) -> bool)
   (\(x1 :spec). (((= :'a -> 'a -> bool) ($4 (SIGsigexp $0))) (($17
   ($3 $0)) $0))))) ((/\ ((! :(sigid -> bool) -> bool) (\(x1 :sigid).
   (((= :'a -> 'a -> bool) ($4 (SIGIDsigexp $0))) ($16 $0))))) ((/\
   ((! :(valdesc -> bool) -> bool) (\(x1 :valdesc).
   (((= :'b -> 'b -> bool) ($3 (VALspec $0))) ($15 $0))))) ((/\
   ((! :(exdesc -> bool) -> bool) (\(x1 :exdesc).
   (((= :'b -> 'b -> bool) ($3 (EXCEPTIONspec $0))) ($14 $0))))) ((/\
   ((! :(strdesc -> bool) -> bool) (\(x1 :strdesc).
   (((= :'b -> 'b -> bool) ($3 (STRUCTUREspec $0))) (($13 ($2 $0))
   $0))))) ((/\ ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec). (((= :'b -> 'b -> bool)
   ($4 ((LOCALspec $1) $0))) (((($13 ($4 $1)) ($4 $0)) $1) $0)))))))
   ((/\ ((! :(strid long nonemptylist -> bool) -> bool)
   (\(x1 :strid long nonemptylist). (((= :'b -> 'b -> bool) ($3
   (OPENspec $0))) ($11 $0))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(x1 :sigid nonemptylist). (((= :'b -> 'b -> bool) ($3
   (INCLUDEspec $0))) ($10 $0))))) ((/\ (((= :'b -> 'b -> bool) ($2
   EMPTYspec)) $8)) ((/\ ((! :(spec -> bool) -> bool) (\(x1 :spec).
   ((! :(spec -> bool) -> bool) (\(x2 :spec). (((= :'b -> 'b -> bool)
   ($4 ((SEQspec $1) $0))) (((($9 ($4 $1)) ($4 $0)) $1) $0))))))) ((/\
   ((! :(strid -> bool) -> bool) (\(x1 :strid).
   ((! :(sigexp -> bool) -> bool) (\(x2 :sigexp).
   ((! :(strdesc option -> bool) -> bool) (\(x3 :strdesc option).
   (((= :'c -> 'c -> bool) ($4 (((STRIDstrdesc $2) $1) $0))) ((((($9
   ($6 $1)) ($3 $0)) $2) $1) $0))))))))) ((/\ (((= :'d -> 'd -> bool)
   ($0 (NONE :strdesc option))) $5)) ((! :(strdesc -> bool) -> bool)
   (\(x1 :strdesc). (((= :'d -> 'd -> bool) ($1
   ((SOME :strdesc -> strdesc option) $0))) (($5 ($2 $0))
   $0))))))))))))))))))))))))))))))))))))))))))))))))))`),
 ((joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc_Axiom),
  [],
  `((! :(('a ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         'a) -> bool) -> bool)
   (\(f0 :'a ->
          joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
          'a). ((! :((sigid -> 'a) -> bool) -> bool)
   (\(f1 :sigid -> 'a). ((! :((valdesc -> 'a) -> bool) -> bool)
   (\(f2 :valdesc -> 'a). ((! :((exdesc -> 'a) -> bool) -> bool)
   (\(f3 :exdesc -> 'a).
   ((! :(('a ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         'a) -> bool) -> bool)
   (\(f4 :'a ->
          joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
          'a).
   ((! :(('a -> 'a ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         'a) -> bool) -> bool)
   (\(f5 :'a -> 'a ->
          joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
          joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
          'a). ((! :((strid long nonemptylist -> 'a) -> bool) -> bool)
   (\(f6 :strid long nonemptylist -> 'a).
   ((! :((sigid nonemptylist -> 'a) -> bool) -> bool)
   (\(f7 :sigid nonemptylist -> 'a). ((! :('a -> bool) -> bool)
   (\(e0 :'a).
   ((! :(('a -> 'a ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         'a) -> bool) -> bool)
   (\(f8 :'a -> 'a ->
          joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
          joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
          'a).
   ((! :(('a -> 'a -> strid ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         'a) -> bool) -> bool)
   (\(f9 :'a -> 'a -> strid ->
          joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
          joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
          'a). ((! :('a -> bool) -> bool) (\(e1 :'a).
   ((! :(('a ->
         joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
         'a) -> bool) -> bool)
   (\(f10 :'a ->
           joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
           'a).
   ((?! :((joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
          'a) -> bool) -> bool)
   (\(fn :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
          'a). ((/\
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_SIGsigexp $0))) (($14 ($1
   $0)) $0))))) ((/\ ((! :(sigid -> bool) -> bool) (\(s :sigid).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_SIGIDsigexp $0))) ($13
   $0))))) ((/\ ((! :(valdesc -> bool) -> bool) (\(v' :valdesc).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_VALspec $0))) ($12 $0)))))
   ((/\ ((! :(exdesc -> bool) -> bool) (\(e :exdesc).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_EXCEPTIONspec $0))) ($11
   $0))))) ((/\
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :'a -> 'a -> bool) ($1 (JOINT_int_STRUCTUREspec $0))) (($10
   ($1 $0)) $0))))) ((/\
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_LOCALspec $1) $0))) (((($10
   ($2 $1)) ($2 $0)) $1) $0))))))) ((/\
   ((! :(strid long nonemptylist -> bool) -> bool)
   (\(n :strid long nonemptylist). (((= :'a -> 'a -> bool) ($1
   (JOINT_int_OPENspec $0))) ($8 $0))))) ((/\
   ((! :(sigid nonemptylist -> bool) -> bool)
   (\(n :sigid nonemptylist). (((= :'a -> 'a -> bool) ($1
   (JOINT_int_INCLUDEspec $0))) ($7 $0))))) ((/\
   (((= :'a -> 'a -> bool) ($0 JOINT_int_EMPTYspec)) $5)) ((/\
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :'a -> 'a -> bool) ($2 ((JOINT_int_SEQspec $1) $0))) (((($6
   ($2 $1)) ($2 $0)) $1) $0))))))) ((/\ ((! :(strid -> bool) -> bool)
   (\(s :strid).
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j1 :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j2 :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :'a -> 'a -> bool) ($3 (((JOINT_int_STRIDstrdesc $2) $1) $0)))
   ((((($6 ($3 $1)) ($3 $0)) $2) $1) $0))))))))) ((/\
   (((= :'a -> 'a -> bool) ($0
   JOINT_int_sigexp_spec_strdesc_NONE_strdesc)) $2))
   ((! :(joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc ->
        bool) -> bool)
   (\(j :joint_ty_sigexp_spec_strdesc_strdesc_option_sigexp_spec_strdesc).
   (((= :'a -> 'a -> bool) ($1
   (JOINT_int_sigexp_spec_strdesc_SOME_strdesc $0))) (($2 ($1 $0))
   $0))))))))))))))))))))))))))))))))))))))))))))`)]
