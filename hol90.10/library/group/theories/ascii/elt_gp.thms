thid = (elt_gp, 942751867, 664070)
axioms = []
definitions =
[((INV_DEF),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(G :'a -> bool).
   ((! :(('a -> 'a -> 'a) -> bool) -> bool) (\(prod :'a -> 'a -> 'a).
   ((! :('a -> bool) -> bool) (\(x :'a). (((= :'a -> 'a -> bool)
   (((INV :('a -> bool) # ('a -> 'a -> 'a) -> 'a -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) $2) $1)) $0))
   ((@ :('a -> bool) -> 'a) (\(y :'a). ((/\ ($3 $0))
   (((= :'a -> 'a -> bool) (($2 $0) $1))
   ((ID :('a -> bool) # ('a -> 'a -> 'a) -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) $3) $2)))))))))))))`),
 ((ID_DEF),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(G :'a -> bool).
   ((! :(('a -> 'a -> 'a) -> bool) -> bool) (\(prod :'a -> 'a -> 'a).
   (((= :'a -> 'a -> bool)
   ((ID :('a -> bool) # ('a -> 'a -> 'a) -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) $1) $0)))
   ((@ :('a -> bool) -> 'a) (\(e :'a). ((/\ ($2 $0)) ((/\
   ((! :('a -> bool) -> bool) (\(x :'a). ((==> ($3 $0))
   (((= :'a -> 'a -> bool) (($2 $1) $0)) $0)))))
   ((! :('a -> bool) -> bool) (\(x :'a). ((==> ($3 $0))
   ((? :('a -> bool) -> bool) (\(y :'a). ((/\ ($4 $0))
   (((= :'a -> 'a -> bool) (($3 $0) $1)) $2))))))))))))))))`),
 ((GROUP_DEF),
  [],
  `((! :(('a -> bool) -> bool) -> bool) (\(G :'a -> bool).
   ((! :(('a -> 'a -> 'a) -> bool) -> bool) (\(prod :'a -> 'a -> 'a).
   (((= :bool -> bool -> bool)
   ((GROUP :('a -> bool) # ('a -> 'a -> 'a) -> bool)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) $1) $0))) ((/\
   ((! :('a -> bool) -> bool) (\(x :'a). ((! :('a -> bool) -> bool)
   (\(y :'a). ((==> ((/\ ($3 $1)) ($3 $0))) ($3 (($2 $1) $0))))))))
   ((/\ ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a -> bool) -> bool) (\(y :'a). ((! :('a -> bool) -> bool)
   (\(z :'a). ((==> ((/\ ($4 $2)) ((/\ ($4 $1)) ($4 $0))))
   (((= :'a -> 'a -> bool) (($3 (($3 $2) $1)) $0)) (($3 $2) (($3 $1)
   $0))))))))))) ((? :('a -> bool) -> bool) (\(e :'a). ((/\ ($2 $0))
   ((/\ ((! :('a -> bool) -> bool) (\(x :'a). ((==> ($3 $0))
   (((= :'a -> 'a -> bool) (($2 $1) $0)) $0)))))
   ((! :('a -> bool) -> bool) (\(x :'a). ((==> ($3 $0))
   ((? :('a -> bool) -> bool) (\(y :'a). ((/\ ($4 $0))
   (((= :'a -> 'a -> bool) (($3 $0) $1)) $2))))))))))))))))))`)]
theorems =
[((DIST_INV_LEMMA),
  [],
  `((==> ((GROUP :('a -> bool) # ('a -> 'a -> 'a) -> bool)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))) ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a -> bool) -> bool) (\(y :'a). ((==> ((/\ ((G :'a -> bool)
   $1)) ((G :'a -> bool) $0))) (((= :'a -> 'a -> bool)
   (((prod :'a -> 'a -> 'a)
   (((INV :('a -> bool) # ('a -> 'a -> 'a) -> 'a -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a))) $1))
   (((INV :('a -> bool) # ('a -> 'a -> 'a) -> 'a -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a))) $0)))
   (((INV :('a -> bool) # ('a -> 'a -> 'a) -> 'a -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a))) (((prod :'a -> 'a -> 'a) $0)
   $1)))))))))`),
 ((INV_INV_LEMMA),
  [],
  `((==> ((GROUP :('a -> bool) # ('a -> 'a -> 'a) -> bool)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))) ((! :('a -> bool) -> bool) (\(x :'a).
   ((==> ((G :'a -> bool) $0)) (((= :'a -> 'a -> bool)
   (((INV :('a -> bool) # ('a -> 'a -> 'a) -> 'a -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))
   (((INV :('a -> bool) # ('a -> 'a -> 'a) -> 'a -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a))) $0))) $0)))))`),
 ((INV_ID_LEMMA),
  [],
  `((==> ((GROUP :('a -> bool) # ('a -> 'a -> 'a) -> bool)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))) (((= :'a -> 'a -> bool)
   (((INV :('a -> bool) # ('a -> 'a -> 'a) -> 'a -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))
   ((ID :('a -> bool) # ('a -> 'a -> 'a) -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))))
   ((ID :('a -> bool) # ('a -> 'a -> 'a) -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))))`),
 ((UNIQUE_INV),
  [],
  `((==> ((GROUP :('a -> bool) # ('a -> 'a -> 'a) -> bool)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))) ((! :('a -> bool) -> bool) (\(x :'a).
   ((==> ((G :'a -> bool) $0)) ((! :('a -> bool) -> bool) (\(u :'a).
   ((==> ((/\ ((G :'a -> bool) $0)) (((= :'a -> 'a -> bool)
   (((prod :'a -> 'a -> 'a) $0) $1))
   ((ID :('a -> bool) # ('a -> 'a -> 'a) -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))))) (((= :'a -> 'a -> bool) $0)
   (((INV :('a -> bool) # ('a -> 'a -> 'a) -> 'a -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a))) $1)))))))))`),
 ((UNIQUE_ID),
  [],
  `((==> ((GROUP :('a -> bool) # ('a -> 'a -> 'a) -> bool)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))) ((! :('a -> bool) -> bool) (\(e :'a).
   ((==> ((/\ ((G :'a -> bool) $0)) ((\/ ((? :('a -> bool) -> bool)
   (\(x :'a). ((/\ ((G :'a -> bool) $0)) (((= :'a -> 'a -> bool)
   (((prod :'a -> 'a -> 'a) $1) $0)) $0)))))
   ((? :('a -> bool) -> bool) (\(x :'a). ((/\ ((G :'a -> bool) $0))
   (((= :'a -> 'a -> bool) (((prod :'a -> 'a -> 'a) $0) $1)) $0)))))))
   (((= :'a -> 'a -> bool) $0)
   ((ID :('a -> bool) # ('a -> 'a -> 'a) -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a))))))))`),
 ((LEFT_ONE_ONE_ONTO),
  [],
  `((==> ((GROUP :('a -> bool) # ('a -> 'a -> 'a) -> bool)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))) ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a -> bool) -> bool) (\(y :'a). ((==> ((/\ ((G :'a -> bool)
   $1)) ((G :'a -> bool) $0))) ((? :('a -> bool) -> bool) (\(z :'a).
   ((/\ ((G :'a -> bool) $0)) ((/\ (((= :'a -> 'a -> bool)
   (((prod :'a -> 'a -> 'a) $0) $2)) $1)) ((! :('a -> bool) -> bool)
   (\(u :'a). ((==> ((/\ ((G :'a -> bool) $0)) (((= :'a -> 'a -> bool)
   (((prod :'a -> 'a -> 'a) $0) $3)) $2))) (((= :'a -> 'a -> bool) $0)
   $1))))))))))))))`),
 ((RIGHT_ONE_ONE_ONTO),
  [],
  `((==> ((GROUP :('a -> bool) # ('a -> 'a -> 'a) -> bool)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))) ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a -> bool) -> bool) (\(y :'a). ((==> ((/\ ((G :'a -> bool)
   $1)) ((G :'a -> bool) $0))) ((? :('a -> bool) -> bool) (\(z :'a).
   ((/\ ((G :'a -> bool) $0)) ((/\ (((= :'a -> 'a -> bool)
   (((prod :'a -> 'a -> 'a) $2) $0)) $1)) ((! :('a -> bool) -> bool)
   (\(u :'a). ((==> ((/\ ((G :'a -> bool) $0)) (((= :'a -> 'a -> bool)
   (((prod :'a -> 'a -> 'a) $3) $0)) $2))) (((= :'a -> 'a -> bool) $0)
   $1))))))))))))))`),
 ((RIGHT_CANCELLATION),
  [],
  `((==> ((GROUP :('a -> bool) # ('a -> 'a -> 'a) -> bool)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))) ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a -> bool) -> bool) (\(y :'a). ((! :('a -> bool) -> bool)
   (\(z :'a). ((==> ((/\ ((G :'a -> bool) $2)) ((/\ ((G :'a -> bool)
   $1)) ((G :'a -> bool) $0)))) ((==> (((= :'a -> 'a -> bool)
   (((prod :'a -> 'a -> 'a) $1) $2)) (((prod :'a -> 'a -> 'a) $0)
   $2))) (((= :'a -> 'a -> bool) $1) $0))))))))))`),
 ((LEFT_CANCELLATION),
  [],
  `((==> ((GROUP :('a -> bool) # ('a -> 'a -> 'a) -> bool)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))) ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a -> bool) -> bool) (\(y :'a). ((! :('a -> bool) -> bool)
   (\(z :'a). ((==> ((/\ ((G :'a -> bool) $2)) ((/\ ((G :'a -> bool)
   $1)) ((G :'a -> bool) $0)))) ((==> (((= :'a -> 'a -> bool)
   (((prod :'a -> 'a -> 'a) $2) $1)) (((prod :'a -> 'a -> 'a) $2)
   $0))) (((= :'a -> 'a -> bool) $1) $0))))))))))`),
 ((INV_LEMMA),
  [],
  `((==> ((GROUP :('a -> bool) # ('a -> 'a -> 'a) -> bool)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))) ((! :('a -> bool) -> bool) (\(x :'a).
   ((==> ((G :'a -> bool) $0)) ((/\ (((= :'a -> 'a -> bool)
   (((prod :'a -> 'a -> 'a)
   (((INV :('a -> bool) # ('a -> 'a -> 'a) -> 'a -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a))) $0)) $0))
   ((ID :('a -> bool) # ('a -> 'a -> 'a) -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a))))) (((= :'a -> 'a -> bool)
   (((prod :'a -> 'a -> 'a) $0)
   (((INV :('a -> bool) # ('a -> 'a -> 'a) -> 'a -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a))) $0)))
   ((ID :('a -> bool) # ('a -> 'a -> 'a) -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))))))))`),
 ((LEFT_RIGHT_INV),
  [],
  `((==> ((GROUP :('a -> bool) # ('a -> 'a -> 'a) -> bool)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))) ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a -> bool) -> bool) (\(y :'a). ((==> ((/\ ((G :'a -> bool)
   $1)) ((G :'a -> bool) $0))) ((==> (((= :'a -> 'a -> bool)
   (((prod :'a -> 'a -> 'a) $0) $1))
   ((ID :('a -> bool) # ('a -> 'a -> 'a) -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a))))) (((= :'a -> 'a -> bool)
   (((prod :'a -> 'a -> 'a) $1) $0))
   ((ID :('a -> bool) # ('a -> 'a -> 'a) -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))))))))))`),
 ((INV_CLOSURE),
  [],
  `((==> ((GROUP :('a -> bool) # ('a -> 'a -> 'a) -> bool)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))) ((! :('a -> bool) -> bool) (\(x :'a).
   ((==> ((G :'a -> bool) $0)) ((G :'a -> bool)
   (((INV :('a -> bool) # ('a -> 'a -> 'a) -> 'a -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a))) $0))))))`),
 ((ID_LEMMA),
  [],
  `((==> ((GROUP :('a -> bool) # ('a -> 'a -> 'a) -> bool)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))) ((/\ ((G :'a -> bool)
   ((ID :('a -> bool) # ('a -> 'a -> 'a) -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a))))) ((/\ ((! :('a -> bool) -> bool)
   (\(x :'a). ((==> ((G :'a -> bool) $0)) (((= :'a -> 'a -> bool)
   (((prod :'a -> 'a -> 'a)
   ((ID :('a -> bool) # ('a -> 'a -> 'a) -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))) $0)) $0))))) ((/\
   ((! :('a -> bool) -> bool) (\(x :'a). ((==> ((G :'a -> bool) $0))
   (((= :'a -> 'a -> bool) (((prod :'a -> 'a -> 'a) $0)
   ((ID :('a -> bool) # ('a -> 'a -> 'a) -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a))))) $0))))) ((! :('a -> bool) -> bool)
   (\(x :'a). ((==> ((G :'a -> bool) $0)) ((? :('a -> bool) -> bool)
   (\(y :'a). ((/\ ((G :'a -> bool) $0)) (((= :'a -> 'a -> bool)
   (((prod :'a -> 'a -> 'a) $0) $1))
   ((ID :('a -> bool) # ('a -> 'a -> 'a) -> 'a)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a))))))))))))))`),
 ((GROUP_ASSOC),
  [],
  `((==> ((GROUP :('a -> bool) # ('a -> 'a -> 'a) -> bool)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))) ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a -> bool) -> bool) (\(y :'a). ((! :('a -> bool) -> bool)
   (\(z :'a). ((==> ((/\ ((G :'a -> bool) $2)) ((/\ ((G :'a -> bool)
   $1)) ((G :'a -> bool) $0)))) (((= :'a -> 'a -> bool)
   (((prod :'a -> 'a -> 'a) (((prod :'a -> 'a -> 'a) $2) $1)) $0))
   (((prod :'a -> 'a -> 'a) $2) (((prod :'a -> 'a -> 'a) $1)
   $0)))))))))))`),
 ((CLOSURE),
  [],
  `((==> ((GROUP :('a -> bool) # ('a -> 'a -> 'a) -> bool)
   (((, :('a -> bool) -> ('a -> 'a -> 'a) ->
         ('a -> bool) # ('a -> 'a -> 'a)) (G :'a -> bool))
   (prod :'a -> 'a -> 'a)))) ((! :('a -> bool) -> bool) (\(x :'a).
   ((! :('a -> bool) -> bool) (\(y :'a). ((==> ((/\ ((G :'a -> bool)
   $1)) ((G :'a -> bool) $0))) ((G :'a -> bool)
   (((prod :'a -> 'a -> 'a) $1) $0))))))))`)]
