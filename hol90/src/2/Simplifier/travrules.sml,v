head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	96.02.08.00.45.38;	author drs1004;	state Exp;
branches;
next	1.1;

1.1
date	96.01.04.14.06.53;	author drs1004;	state Exp;
branches;
next	;


desc
@@


1.2
log
@New theory mechanism, code reorganisation and other enhancements by Don Syme.
@
text
@(* ===================================================================== 
 * FILE          : $Id: travrules.sml,v 1.1 1996/01/04 14:06:53 drs1004 Exp $
 * DESCRIPTION   : A programmable term traversal engine for hol90
 *                                                                       
 * AUTHOR        : Donald Syme
 *                 Based loosely on original HOL rewriting by 
 *                 Larry Paulson et al.
 * ===================================================================== *)


(* =====================================================================
 * Traversal (opening) Rules
 * =====================================================================*)

structure Travrules : Travrules_sig = 
struct

    open Lib Pterms Trace Hol_pp;
	infix |>
    open Thm Drule Congprocs;

    val WRAP = Exception.WRAP_ERR "Travrules";
    val ERR = Exception.ERR "Travrules";

   (* ---------------------------------------------------------------------
    * preorders
    * ---------------------------------------------------------------------*)

   val equality = #const (const_decl "=");

   datatype preorder = 
       PREORDER of {relname : string,
		    TRANS : thm -> thm -> thm,
		    REFL : term -> thm};
       
   fun find_relation rel  =
       let val relname = fst (dest_const rel)
	   fun f ((h as PREORDER {relname=relname',...})::t) = 
	       if relname' = relname then h else f t
	     | f [] = ERR("find_relation","relation not found")
       in f
       end;

   fun ARB_TRANS thm c1 c2 = MATCH_MP thm (CONJ c1 c2);
       
   fun mk_preorder {TRANS_THM,REFL_THM} = 
       PREORDER {relname=fst(dest_const(rator(rator(snd(dest_forall(concl REFL_THM)))))),
		 TRANS=ARB_TRANS TRANS_THM, 
		 REFL=fn x => SPEC x REFL_THM};

   (* ---------------------------------------------------------------------
    * travrules objects and basic operations on them
    *
    * ---------------------------------------------------------------------*)

   type congproc' = 
       {name : string,
	relation : Term.term,
	proc : Congprocs.congproc};
       
   datatype travrules = TRAVRULES of {
       relations : preorder list,
       congprocs : congproc' list,
       weakenprocs : congproc' list
    };


   (* ---------------------------------------------------------------------
    * dest
    * ---------------------------------------------------------------------*)

   fun dest(TRAVRULES x)  = x;
   
   (* ---------------------------------------------------------------------
    * empty
    * ---------------------------------------------------------------------*)

   val empty_travrules = TRAVRULES {
        congprocs=[],
        weakenprocs=[],
        relations=[]
     };
   
   (* ---------------------------------------------------------------------
    * addcongproc
    * ---------------------------------------------------------------------*)

   fun addcongproc newproc (TRAVRULES tsdata) = TRAVRULES {
	   relations = #relations tsdata,
           congprocs=newproc:: #congprocs tsdata,
	   weakenprocs = #weakenprocs tsdata
       };
    
   (* ---------------------------------------------------------------------
    * addweakenproc
    * ---------------------------------------------------------------------*)

   fun addweakenproc newproc (TRAVRULES tsdata) = TRAVRULES {
	   relations = #relations tsdata,
           congprocs = #congprocs tsdata,
	   weakenprocs=newproc:: #weakenprocs tsdata
       };
    
   (* ---------------------------------------------------------------------
    * addrelation
    * ---------------------------------------------------------------------*)

   fun addrelation newrelation (TRAVRULES tsdata) = TRAVRULES {
	   relations=newrelation:: #relations tsdata,
           congprocs = #congprocs tsdata,
	   weakenprocs = #weakenprocs tsdata
       };
    


   (* ---------------------------------------------------------------------
    * addcongrule  (simpler interface to addcongproc)
    * ---------------------------------------------------------------------*)

   fun addcongrule thm (ts as TRAVRULES tsdata) =
       let val relation = Congprocs.rel_of_congrule thm
	   val PREORDER{REFL,...} = find_relation relation (#relations tsdata)
	   val name = thm_to_string (SPEC_ALL thm)
       in ts |> addcongproc {name=name,
			     relation=relation,
			     proc=CONGPROC REFL thm}
       end
   handle e => WRAP("addcongrule",e);

   val trav_addcongs = itlist addcongrule;
       
   (* ---------------------------------------------------------------------
    * addweakenrule  (simpler interface to addweakenproc)
    * ---------------------------------------------------------------------*)

   fun addweakenrule thm (ts as TRAVRULES tsdata) =
       let val relation = Congprocs.rel_of_congrule thm
	   val PREORDER{REFL,...} = find_relation relation (#relations tsdata)
	   val name = thm_to_string (SPEC_ALL thm)
       in ts |> addweakenproc {name=name,
			       relation=relation,
			       proc=CONGPROC REFL thm}
       end
   handle e => WRAP("addweakenrule",e);

   (* ---------------------------------------------------------------------
    * merge
    * 
     rewriters=op_union (curry reducer_eq) (#rewriters ts1) (#rewriters ts2),
     dprocs=op_union (curry reducer_eq) (#dprocs ts1) (#dprocs ts2),
    * ---------------------------------------------------------------------*)

   fun relation_eq (PREORDER rel1, PREORDER rel2) =
       (#relname rel1 = #relname rel2);
   fun congproc_eq (cp1:congproc',cp2:congproc') = (#name cp1 = #name cp2);
   fun weakenproc_eq (cp1:congproc',cp2:congproc') = (#name cp1 = #name cp2);
       
   fun merge_one (TRAVRULES ts1,TRAVRULES ts2) =
   TRAVRULES {
     relations=op_union (curry relation_eq) (#relations ts1) (#relations ts2),
     congprocs=op_union (curry congproc_eq) (#congprocs ts1) (#congprocs ts2),
     weakenprocs=op_union (curry weakenproc_eq) (#weakenprocs ts1) (#weakenprocs ts2)
   };
   val merge_travrules = foldr merge_one empty_travrules;
    

(* ---------------------------------------------------------------------
 * equality_travrules
 *  Nb. optimized!
 * ---------------------------------------------------------------------*)
   
val equality_travrules = empty_travrules
        |> addrelation (PREORDER{TRANS=TRANS,REFL=REFL,relname="="})
        |> addcongproc {name="(equality congruences)",
			proc=Congprocs.EQ_CONGPROC,
			relation=equality};
	 
(* ---------------------------------------------------------------------
 * Pretty printer for Travrules
 * ---------------------------------------------------------------------*)
   
open PP;

fun pp_travrules ppstrm (TRAVRULES ts) =
    let val {add_string,add_break,begin_block,end_block,add_newline,...} = 
               with_ppstream ppstrm
        val pp_thm = pp_thm ppstrm
        val pp_term = pp_term ppstrm
        val how_many_congprocs = length (#congprocs ts)
        val how_many_relations = length (#relations ts)
    in begin_block PP.CONSISTENT 0;
       add_string("Relations: ");
       if (how_many_relations = 0)
       then (add_string "<none>")
       else ( begin_block PP.INCONSISTENT 0;
              pr_list (fn PREORDER{relname,...} => add_string (quote relname))
                      (fn () => add_string",")
                      (fn () => add_break(1,0)) (#relations ts);
              end_block());
       add_newline();
       add_string("Congruence Rules, in order:");
       add_newline();
       if (how_many_congprocs = 0)
       then (add_string "<none>")
       else ( begin_block PP.INCONSISTENT 0;
              pr_list (fn congproc => add_string (#name congproc)) 
                      (fn () => add_string",")
                      (fn () => add_break(1,0)) (#congprocs ts);
              end_block());
	add_newline();
	end_block()
     end;





end;



@


1.1
log
@Added simplifier components, added drule files, added MK_ABS_CONV, better error messages
@
text
@d2 1
a2 1
 * FILE          : $Id$
d18 3
a20 5
   open Core;
     infix ORELSEQC THENQC;
   open Pterms;
   open Trace;
   open Congprocs;
d22 2
a23 2
   val WRAP = Exception.WRAP_ERR "Travrules";
   val ERR = Exception.ERR "Travrules";
d210 2
a211 1
       add_newline()
d220 1
@
