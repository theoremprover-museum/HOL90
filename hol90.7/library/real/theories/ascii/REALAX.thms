thid = (REALAX, 784060214, 722806)
axioms = []
definitions =
[((hreal_of_real),
  [],
  `((! :(real -> bool) -> bool) (\(T1 :real).
   (((= :hreal -> hreal -> bool) (hreal_of_real $0)) (hreal_of_treal
   ((@ :(hreal # hreal -> bool) -> hreal # hreal) (dest_real
   $0))))))`),
 ((real_of_hreal),
  [],
  `((! :(hreal -> bool) -> bool) (\(T1 :hreal).
   (((= :real -> real -> bool) (real_of_hreal $0)) (mk_real (treal_eq
   (treal_of_hreal $0))))))`),
 ((|<|),
  [],
  `((! :(real -> bool) -> bool) (\(T1 :real).
   ((! :(real -> bool) -> bool) (\(T2 :real).
   (((= :bool -> bool -> bool) ((|<| $1) $0)) ((treal_lt
   ((@ :(hreal # hreal -> bool) -> hreal # hreal) (dest_real $1)))
   ((@ :(hreal # hreal -> bool) -> hreal # hreal) (dest_real
   $0))))))))`),
 ((|*|),
  [],
  `((! :(real -> bool) -> bool) (\(T1 :real).
   ((! :(real -> bool) -> bool) (\(T2 :real).
   (((= :real -> real -> bool) ((|*| $1) $0)) (mk_real (treal_eq
   ((treal_mul ((@ :(hreal # hreal -> bool) -> hreal # hreal)
   (dest_real $1))) ((@ :(hreal # hreal -> bool) -> hreal # hreal)
   (dest_real $0))))))))))`),
 ((|+|),
  [],
  `((! :(real -> bool) -> bool) (\(T1 :real).
   ((! :(real -> bool) -> bool) (\(T2 :real).
   (((= :real -> real -> bool) ((|+| $1) $0)) (mk_real (treal_eq
   ((treal_add ((@ :(hreal # hreal -> bool) -> hreal # hreal)
   (dest_real $1))) ((@ :(hreal # hreal -> bool) -> hreal # hreal)
   (dest_real $0))))))))))`),
 ((real_inv),
  [],
  `((! :(real -> bool) -> bool) (\(T1 :real).
   (((= :real -> real -> bool) (real_inv $0)) (mk_real (treal_eq
   (treal_inv ((@ :(hreal # hreal -> bool) -> hreal # hreal)
   (dest_real $0))))))))`),
 ((real_neg),
  [],
  `((! :(real -> bool) -> bool) (\(T1 :real).
   (((= :real -> real -> bool) (real_neg $0)) (mk_real (treal_eq
   (treal_neg ((@ :(hreal # hreal -> bool) -> hreal # hreal)
   (dest_real $0))))))))`),
 ((r1),
  [],
  `(((= :real -> real -> bool) r1) (mk_real (treal_eq treal_1)))`),
 ((r0),
  [],
  `(((= :real -> real -> bool) r0) (mk_real (treal_eq treal_0)))`),
 ((real_tybij),
  [],
  `((/\ ((! :(real -> bool) -> bool) (\(a :real).
   (((= :real -> real -> bool) (mk_real (dest_real $0))) $0))))
   ((! :((hreal # hreal -> bool) -> bool) -> bool)
   (\(r :hreal # hreal -> bool). (((= :bool -> bool -> bool)
   ((\(c :hreal # hreal -> bool).
   ((? :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal).
   (((= :(hreal # hreal -> bool) -> (hreal # hreal -> bool) -> bool)
   $1) (treal_eq $0))))) $0))
   (((= :(hreal # hreal -> bool) -> (hreal # hreal -> bool) -> bool)
   (dest_real (mk_real $0))) $0)))))`),
 ((real_TY_DEF),
  [],
  `((? :((real -> hreal # hreal -> bool) -> bool) -> bool)
   (\(rep :real -> hreal # hreal -> bool).
   (((TYPE_DEFINITION :((hreal # hreal -> bool) -> bool) ->
                       (real -> hreal # hreal -> bool) -> bool)
   (\(c :hreal # hreal -> bool). ((? :(hreal # hreal -> bool) -> bool)
   (\(x :hreal # hreal).
   (((= :(hreal # hreal -> bool) -> (hreal # hreal -> bool) -> bool)
   $1) (treal_eq $0)))))) $0)))`),
 ((hreal_of_treal),
  [],
  `((! :(hreal -> bool) -> bool) (\(x :hreal).
   ((! :(hreal -> bool) -> bool) (\(y :hreal).
   (((= :hreal -> hreal -> bool) (hreal_of_treal
   (((, :hreal -> hreal -> hreal # hreal) $1) $0)))
   ((@ :(hreal -> bool) -> hreal) (\(d :hreal).
   (((= :hreal -> hreal -> bool) $2) ((hreal_add $1) $0)))))))))`),
 ((treal_of_hreal),
  [],
  `((! :(hreal -> bool) -> bool) (\(x :hreal).
   (((= :hreal # hreal -> hreal # hreal -> bool) (treal_of_hreal $0))
   (((, :hreal -> hreal -> hreal # hreal) ((hreal_add $0) hreal_1))
   hreal_1))))`),
 ((treal_eq),
  [],
  `((! :(hreal -> bool) -> bool) (\(x1 :hreal).
   ((! :(hreal -> bool) -> bool) (\(y1 :hreal).
   ((! :(hreal -> bool) -> bool) (\(x2 :hreal).
   ((! :(hreal -> bool) -> bool) (\(y2 :hreal).
   (((= :bool -> bool -> bool) ((treal_eq
   (((, :hreal -> hreal -> hreal # hreal) $3) $2))
   (((, :hreal -> hreal -> hreal # hreal) $1) $0)))
   (((= :hreal -> hreal -> bool) ((hreal_add $3) $0)) ((hreal_add $1)
   $2)))))))))))`),
 ((treal_inv),
  [],
  `((! :(hreal -> bool) -> bool) (\(x :hreal).
   ((! :(hreal -> bool) -> bool) (\(y :hreal).
   (((= :hreal # hreal -> hreal # hreal -> bool) (treal_inv
   (((, :hreal -> hreal -> hreal # hreal) $1) $0)))
   ((((COND :bool -> hreal # hreal -> hreal # hreal -> hreal # hreal)
   (((= :hreal -> hreal -> bool) $1) $0)) treal_0)
   ((((COND :bool -> hreal # hreal -> hreal # hreal -> hreal # hreal)
   ((hreal_lt $0) $1)) (((, :hreal -> hreal -> hreal # hreal)
   ((hreal_add (hreal_inv ((hreal_sub $1) $0))) hreal_1)) hreal_1))
   (((, :hreal -> hreal -> hreal # hreal) hreal_1) ((hreal_add
   (hreal_inv ((hreal_sub $0) $1))) hreal_1)))))))))`),
 ((treal_lt),
  [],
  `((! :(hreal -> bool) -> bool) (\(x1 :hreal).
   ((! :(hreal -> bool) -> bool) (\(y1 :hreal).
   ((! :(hreal -> bool) -> bool) (\(x2 :hreal).
   ((! :(hreal -> bool) -> bool) (\(y2 :hreal).
   (((= :bool -> bool -> bool) ((treal_lt
   (((, :hreal -> hreal -> hreal # hreal) $3) $2))
   (((, :hreal -> hreal -> hreal # hreal) $1) $0))) ((hreal_lt
   ((hreal_add $3) $0)) ((hreal_add $1) $2)))))))))))`),
 ((treal_mul),
  [],
  `((! :(hreal -> bool) -> bool) (\(x1 :hreal).
   ((! :(hreal -> bool) -> bool) (\(y1 :hreal).
   ((! :(hreal -> bool) -> bool) (\(x2 :hreal).
   ((! :(hreal -> bool) -> bool) (\(y2 :hreal).
   (((= :hreal # hreal -> hreal # hreal -> bool) ((treal_mul
   (((, :hreal -> hreal -> hreal # hreal) $3) $2))
   (((, :hreal -> hreal -> hreal # hreal) $1) $0)))
   (((, :hreal -> hreal -> hreal # hreal) ((hreal_add ((hreal_mul $3)
   $1)) ((hreal_mul $2) $0))) ((hreal_add ((hreal_mul $3) $0))
   ((hreal_mul $2) $1))))))))))))`),
 ((treal_add),
  [],
  `((! :(hreal -> bool) -> bool) (\(x1 :hreal).
   ((! :(hreal -> bool) -> bool) (\(y1 :hreal).
   ((! :(hreal -> bool) -> bool) (\(x2 :hreal).
   ((! :(hreal -> bool) -> bool) (\(y2 :hreal).
   (((= :hreal # hreal -> hreal # hreal -> bool) ((treal_add
   (((, :hreal -> hreal -> hreal # hreal) $3) $2))
   (((, :hreal -> hreal -> hreal # hreal) $1) $0)))
   (((, :hreal -> hreal -> hreal # hreal) ((hreal_add $3) $1))
   ((hreal_add $2) $0)))))))))))`),
 ((treal_neg),
  [],
  `((! :(hreal -> bool) -> bool) (\(x :hreal).
   ((! :(hreal -> bool) -> bool) (\(y :hreal).
   (((= :hreal # hreal -> hreal # hreal -> bool) (treal_neg
   (((, :hreal -> hreal -> hreal # hreal) $1) $0)))
   (((, :hreal -> hreal -> hreal # hreal) $0) $1))))))`),
 ((treal_1),
  [],
  `(((= :hreal # hreal -> hreal # hreal -> bool) treal_1)
   (((, :hreal -> hreal -> hreal # hreal) ((hreal_add hreal_1)
   hreal_1)) hreal_1))`),
 ((treal_0),
  [],
  `(((= :hreal # hreal -> hreal # hreal -> bool) treal_0)
   (((, :hreal -> hreal -> hreal # hreal) hreal_1) hreal_1))`)]
theorems =
[((REAL_LT_MUL),
  [],
  `((! :(real -> bool) -> bool) (\(x :real).
   ((! :(real -> bool) -> bool) (\(y :real). ((==> ((/\ ((|<| r0) $1))
   ((|<| r0) $0))) ((|<| r0) ((|*| $1) $0)))))))`),
 ((REAL_LT_IADD),
  [],
  `((! :(real -> bool) -> bool) (\(x :real).
   ((! :(real -> bool) -> bool) (\(y :real).
   ((! :(real -> bool) -> bool) (\(z :real). ((==> ((|<| $1) $0))
   ((|<| ((|+| $2) $1)) ((|+| $2) $0)))))))))`),
 ((REAL_LT_TRANS),
  [],
  `((! :(real -> bool) -> bool) (\(x :real).
   ((! :(real -> bool) -> bool) (\(y :real).
   ((! :(real -> bool) -> bool) (\(z :real). ((==> ((/\ ((|<| $2) $1))
   ((|<| $1) $0))) ((|<| $2) $0))))))))`),
 ((REAL_LT_REFL),
  [],
  `((! :(real -> bool) -> bool) (\(x :real). (~ ((|<| $0) $0))))`),
 ((REAL_LT_TOTAL),
  [],
  `((! :(real -> bool) -> bool) (\(x :real).
   ((! :(real -> bool) -> bool) (\(y :real). ((\/
   (((= :real -> real -> bool) $1) $0)) ((\/ ((|<| $1) $0)) ((|<| $0)
   $1)))))))`),
 ((REAL_MUL_LINV),
  [],
  `((! :(real -> bool) -> bool) (\(x :real). ((==> (~
   (((= :real -> real -> bool) $0) r0))) (((= :real -> real -> bool)
   ((|*| (real_inv $0)) $0)) r1))))`),
 ((REAL_ADD_LINV),
  [],
  `((! :(real -> bool) -> bool) (\(x :real).
   (((= :real -> real -> bool) ((|+| (real_neg $0)) $0)) r0)))`),
 ((REAL_MUL_LID),
  [],
  `((! :(real -> bool) -> bool) (\(x :real).
   (((= :real -> real -> bool) ((|*| r1) $0)) $0)))`),
 ((REAL_ADD_LID),
  [],
  `((! :(real -> bool) -> bool) (\(x :real).
   (((= :real -> real -> bool) ((|+| r0) $0)) $0)))`),
 ((REAL_LDISTRIB),
  [],
  `((! :(real -> bool) -> bool) (\(x :real).
   ((! :(real -> bool) -> bool) (\(y :real).
   ((! :(real -> bool) -> bool) (\(z :real).
   (((= :real -> real -> bool) ((|*| $2) ((|+| $1) $0))) ((|+| ((|*|
   $2) $1)) ((|*| $2) $0)))))))))`),
 ((REAL_MUL_ASSOC),
  [],
  `((! :(real -> bool) -> bool) (\(x :real).
   ((! :(real -> bool) -> bool) (\(y :real).
   ((! :(real -> bool) -> bool) (\(z :real).
   (((= :real -> real -> bool) ((|*| $2) ((|*| $1) $0))) ((|*| ((|*|
   $2) $1)) $0))))))))`),
 ((REAL_ADD_ASSOC),
  [],
  `((! :(real -> bool) -> bool) (\(x :real).
   ((! :(real -> bool) -> bool) (\(y :real).
   ((! :(real -> bool) -> bool) (\(z :real).
   (((= :real -> real -> bool) ((|+| $2) ((|+| $1) $0))) ((|+| ((|+|
   $2) $1)) $0))))))))`),
 ((REAL_MUL_SYM),
  [],
  `((! :(real -> bool) -> bool) (\(x :real).
   ((! :(real -> bool) -> bool) (\(y :real).
   (((= :real -> real -> bool) ((|*| $1) $0)) ((|*| $0) $1))))))`),
 ((REAL_ADD_SYM),
  [],
  `((! :(real -> bool) -> bool) (\(x :real).
   ((! :(real -> bool) -> bool) (\(y :real).
   (((= :real -> real -> bool) ((|+| $1) $0)) ((|+| $0) $1))))))`),
 ((REAL_10), [], `(~ (((= :real -> real -> bool) r1) r0))`),
 ((REAL_SUP_ALLPOS),
  [],
  `((! :((real -> bool) -> bool) -> bool) (\(P :real -> bool). ((==>
   ((/\ ((! :(real -> bool) -> bool) (\(x :real). ((==> ($1 $0)) ((|<|
   r0) $0))))) ((/\ ((? :(real -> bool) -> bool) (\(x :real). ($1
   $0)))) ((? :(real -> bool) -> bool) (\(z :real).
   ((! :(real -> bool) -> bool) (\(x :real). ((==> ($2 $0)) ((|<| $0)
   $1))))))))) ((? :(real -> bool) -> bool) (\(s :real).
   ((! :(real -> bool) -> bool) (\(y :real).
   (((= :bool -> bool -> bool) ((? :(real -> bool) -> bool)
   (\(x :real). ((/\ ($3 $0)) ((|<| $1) $0))))) ((|<| $0)
   $1)))))))))`),
 ((SUP_ALLPOS_LEMMA4),
  [],
  `((! :(real -> bool) -> bool) (\(y :real). ((==> (~ ((|<| r0) $0)))
   ((! :(hreal -> bool) -> bool) (\(x :hreal). ((|<| $1)
   (real_of_hreal $0)))))))`),
 ((SUP_ALLPOS_LEMMA3),
  [],
  `((! :((real -> bool) -> bool) -> bool) (\(P :real -> bool). ((==>
   ((/\ ((! :(real -> bool) -> bool) (\(x :real). ((==> ($1 $0)) ((|<|
   r0) $0))))) ((/\ ((? :(real -> bool) -> bool) (\(x :real). ($1
   $0)))) ((? :(real -> bool) -> bool) (\(z :real).
   ((! :(real -> bool) -> bool) (\(x :real). ((==> ($2 $0)) ((|<| $0)
   $1))))))))) ((/\ ((? :(hreal -> bool) -> bool) (\(X :hreal).
   ((\(h :hreal). ($2 (real_of_hreal $0))) $0))))
   ((? :(hreal -> bool) -> bool) (\(Y :hreal).
   ((! :(hreal -> bool) -> bool) (\(X :hreal). ((==> ((\(h :hreal).
   ($3 (real_of_hreal $0))) $0)) ((hreal_lt $0) $1))))))))))`),
 ((SUP_ALLPOS_LEMMA2),
  [],
  `((! :((real -> bool) -> bool) -> bool) (\(P :real -> bool).
   ((! :(hreal -> bool) -> bool) (\(X :hreal).
   (((= :bool -> bool -> bool) ($1 (real_of_hreal $0))) ((\(h :hreal).
   ($2 (real_of_hreal $0))) $0))))))`),
 ((SUP_ALLPOS_LEMMA1),
  [],
  `((! :((real -> bool) -> bool) -> bool) (\(P :real -> bool).
   ((! :(real -> bool) -> bool) (\(y :real). ((==>
   ((! :(real -> bool) -> bool) (\(x :real). ((==> ($2 $0)) ((|<| r0)
   $0))))) (((= :bool -> bool -> bool) ((? :(real -> bool) -> bool)
   (\(x :real). ((/\ ($2 $0)) ((|<| $1) $0)))))
   ((? :(hreal -> bool) -> bool) (\(X :hreal). ((/\ ($2 (real_of_hreal
   $0))) ((|<| $1) (real_of_hreal $0)))))))))))`),
 ((REAL_POS),
  [],
  `((! :(hreal -> bool) -> bool) (\(X :hreal). ((|<| r0)
   (real_of_hreal $0))))`),
 ((REAL_ISO_EQ),
  [],
  `((! :(hreal -> bool) -> bool) (\(h :hreal).
   ((! :(hreal -> bool) -> bool) (\(i :hreal).
   (((= :bool -> bool -> bool) ((hreal_lt $1) $0)) ((|<|
   (real_of_hreal $1)) (real_of_hreal $0)))))))`),
 ((TREAL_INV_WELLDEF),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x1 :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(x2 :hreal # hreal). ((==>
   ((treal_eq $1) $0)) ((treal_eq (treal_inv $1)) (treal_inv
   $0)))))))`),
 ((TREAL_LT_WELLDEF),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x1 :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(x2 :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y1 :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y2 :hreal # hreal). ((==>
   ((/\ ((treal_eq $3) $2)) ((treal_eq $1) $0)))
   (((= :bool -> bool -> bool) ((treal_lt $3) $1)) ((treal_lt $2)
   $0)))))))))))`),
 ((TREAL_LT_WELLDEFL),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y1 :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y2 :hreal # hreal). ((==>
   ((treal_eq $1) $0)) (((= :bool -> bool -> bool) ((treal_lt $2) $1))
   ((treal_lt $2) $0)))))))))`),
 ((TREAL_LT_WELLDEFR),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x1 :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(x2 :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y :hreal # hreal). ((==>
   ((treal_eq $2) $1)) (((= :bool -> bool -> bool) ((treal_lt $2) $0))
   ((treal_lt $1) $0)))))))))`),
 ((TREAL_MUL_WELLDEF),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x1 :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(x2 :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y1 :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y2 :hreal # hreal). ((==>
   ((/\ ((treal_eq $3) $2)) ((treal_eq $1) $0))) ((treal_eq
   ((treal_mul $3) $1)) ((treal_mul $2) $0)))))))))))`),
 ((TREAL_MUL_WELLDEFR),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x1 :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(x2 :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y :hreal # hreal). ((==>
   ((treal_eq $2) $1)) ((treal_eq ((treal_mul $2) $0)) ((treal_mul $1)
   $0)))))))))`),
 ((TREAL_ADD_WELLDEF),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x1 :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(x2 :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y1 :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y2 :hreal # hreal). ((==>
   ((/\ ((treal_eq $3) $2)) ((treal_eq $1) $0))) ((treal_eq
   ((treal_add $3) $1)) ((treal_add $2) $0)))))))))))`),
 ((TREAL_ADD_WELLDEFR),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x1 :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(x2 :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y :hreal # hreal). ((==>
   ((treal_eq $2) $1)) ((treal_eq ((treal_add $2) $0)) ((treal_add $1)
   $0)))))))))`),
 ((TREAL_NEG_WELLDEF),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x1 :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(x2 :hreal # hreal). ((==>
   ((treal_eq $1) $0)) ((treal_eq (treal_neg $1)) (treal_neg
   $0)))))))`),
 ((TREAL_BIJ_WELLDEF),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(h :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(i :hreal # hreal). ((==>
   ((treal_eq $1) $0)) (((= :hreal -> hreal -> bool) (hreal_of_treal
   $1)) (hreal_of_treal $0)))))))`),
 ((TREAL_ISO),
  [],
  `((! :(hreal -> bool) -> bool) (\(h :hreal).
   ((! :(hreal -> bool) -> bool) (\(i :hreal). ((==> ((hreal_lt $1)
   $0)) ((treal_lt (treal_of_hreal $1)) (treal_of_hreal $0)))))))`),
 ((TREAL_BIJ),
  [],
  `((/\ ((! :(hreal -> bool) -> bool) (\(h :hreal).
   (((= :hreal -> hreal -> bool) (hreal_of_treal (treal_of_hreal $0)))
   $0)))) ((! :(hreal # hreal -> bool) -> bool) (\(r :hreal # hreal).
   (((= :bool -> bool -> bool) ((treal_lt treal_0) $0)) ((treal_eq
   (treal_of_hreal (hreal_of_treal $0))) $0)))))`),
 ((TREAL_LT_MUL),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y :hreal # hreal). ((==>
   ((/\ ((treal_lt treal_0) $1)) ((treal_lt treal_0) $0))) ((treal_lt
   treal_0) ((treal_mul $1) $0)))))))`),
 ((TREAL_LT_ADD),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(z :hreal # hreal). ((==>
   ((treal_lt $1) $0)) ((treal_lt ((treal_add $2) $1)) ((treal_add $2)
   $0)))))))))`),
 ((TREAL_LT_TRANS),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(z :hreal # hreal). ((==>
   ((/\ ((treal_lt $2) $1)) ((treal_lt $1) $0))) ((treal_lt $2)
   $0))))))))`),
 ((TREAL_LT_REFL),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal). (~
   ((treal_lt $0) $0))))`),
 ((TREAL_LT_TOTAL),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y :hreal # hreal). ((\/
   ((treal_eq $1) $0)) ((\/ ((treal_lt $1) $0)) ((treal_lt $0)
   $1)))))))`),
 ((TREAL_MUL_LINV),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal). ((==>
   (~ ((treal_eq $0) treal_0))) ((treal_eq ((treal_mul (treal_inv $0))
   $0)) treal_1))))`),
 ((TREAL_ADD_LINV),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal).
   ((treal_eq ((treal_add (treal_neg $0)) $0)) treal_0)))`),
 ((TREAL_MUL_LID),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal).
   ((treal_eq ((treal_mul treal_1) $0)) $0)))`),
 ((TREAL_ADD_LID),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal).
   ((treal_eq ((treal_add treal_0) $0)) $0)))`),
 ((TREAL_LDISTRIB),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(z :hreal # hreal).
   (((= :hreal # hreal -> hreal # hreal -> bool) ((treal_mul $2)
   ((treal_add $1) $0))) ((treal_add ((treal_mul $2) $1)) ((treal_mul
   $2) $0)))))))))`),
 ((TREAL_MUL_ASSOC),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(z :hreal # hreal).
   (((= :hreal # hreal -> hreal # hreal -> bool) ((treal_mul $2)
   ((treal_mul $1) $0))) ((treal_mul ((treal_mul $2) $1))
   $0))))))))`),
 ((TREAL_ADD_ASSOC),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(z :hreal # hreal).
   (((= :hreal # hreal -> hreal # hreal -> bool) ((treal_add $2)
   ((treal_add $1) $0))) ((treal_add ((treal_add $2) $1))
   $0))))))))`),
 ((TREAL_MUL_SYM),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y :hreal # hreal).
   (((= :hreal # hreal -> hreal # hreal -> bool) ((treal_mul $1) $0))
   ((treal_mul $0) $1))))))`),
 ((TREAL_ADD_SYM),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y :hreal # hreal).
   (((= :hreal # hreal -> hreal # hreal -> bool) ((treal_add $1) $0))
   ((treal_add $0) $1))))))`),
 ((TREAL_10), [], `(~ ((treal_eq treal_1) treal_0))`),
 ((TREAL_EQ_AP),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(p :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(q :hreal # hreal). ((==>
   (((= :hreal # hreal -> hreal # hreal -> bool) $1) $0)) ((treal_eq
   $1) $0))))))`),
 ((TREAL_EQ_EQUIV),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(p :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(q :hreal # hreal).
   (((= :bool -> bool -> bool) ((treal_eq $1) $0))
   (((= :(hreal # hreal -> bool) -> (hreal # hreal -> bool) -> bool)
   (treal_eq $1)) (treal_eq $0)))))))`),
 ((TREAL_EQ_TRANS),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(z :hreal # hreal). ((==>
   ((/\ ((treal_eq $2) $1)) ((treal_eq $1) $0))) ((treal_eq $2)
   $0))))))))`),
 ((TREAL_EQ_SYM),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal).
   ((! :(hreal # hreal -> bool) -> bool) (\(y :hreal # hreal).
   (((= :bool -> bool -> bool) ((treal_eq $1) $0)) ((treal_eq $0)
   $1))))))`),
 ((TREAL_EQ_REFL),
  [],
  `((! :(hreal # hreal -> bool) -> bool) (\(x :hreal # hreal).
   ((treal_eq $0) $0)))`),
 ((HREAL_LT_LADD),
  [],
  `((! :(hreal -> bool) -> bool) (\(x :hreal).
   ((! :(hreal -> bool) -> bool) (\(y :hreal).
   ((! :(hreal -> bool) -> bool) (\(z :hreal).
   (((= :bool -> bool -> bool) ((hreal_lt ((hreal_add $2) $1))
   ((hreal_add $2) $0))) ((hreal_lt $1) $0))))))))`),
 ((HREAL_LT_ADD2),
  [],
  `((! :(hreal -> bool) -> bool) (\(x1 :hreal).
   ((! :(hreal -> bool) -> bool) (\(x2 :hreal).
   ((! :(hreal -> bool) -> bool) (\(y1 :hreal).
   ((! :(hreal -> bool) -> bool) (\(y2 :hreal). ((==> ((/\ ((hreal_lt
   $3) $1)) ((hreal_lt $2) $0))) ((hreal_lt ((hreal_add $3) $2))
   ((hreal_add $1) $0)))))))))))`),
 ((HREAL_LT_GT),
  [],
  `((! :(hreal -> bool) -> bool) (\(x :hreal).
   ((! :(hreal -> bool) -> bool) (\(y :hreal). ((==> ((hreal_lt $1)
   $0)) (~ ((hreal_lt $0) $1)))))))`),
 ((HREAL_LT_ADDR),
  [],
  `((! :(hreal -> bool) -> bool) (\(x :hreal).
   ((! :(hreal -> bool) -> bool) (\(y :hreal). (~ ((hreal_lt
   ((hreal_add $1) $0)) $1))))))`),
 ((HREAL_LT_NE),
  [],
  `((! :(hreal -> bool) -> bool) (\(x :hreal).
   ((! :(hreal -> bool) -> bool) (\(y :hreal). ((==> ((hreal_lt $1)
   $0)) (~ (((= :hreal -> hreal -> bool) $1) $0)))))))`),
 ((HREAL_LT_ADDL),
  [],
  `((! :(hreal -> bool) -> bool) (\(x :hreal).
   ((! :(hreal -> bool) -> bool) (\(y :hreal). ((hreal_lt $1)
   ((hreal_add $1) $0))))))`),
 ((HREAL_LT_REFL),
  [],
  `((! :(hreal -> bool) -> bool) (\(x :hreal). (~ ((hreal_lt $0)
   $0))))`),
 ((HREAL_EQ_LADD),
  [],
  `((! :(hreal -> bool) -> bool) (\(x :hreal).
   ((! :(hreal -> bool) -> bool) (\(y :hreal).
   ((! :(hreal -> bool) -> bool) (\(z :hreal).
   (((= :bool -> bool -> bool) (((= :hreal -> hreal -> bool)
   ((hreal_add $2) $1)) ((hreal_add $2) $0)))
   (((= :hreal -> hreal -> bool) $1) $0))))))))`),
 ((HREAL_EQ_ADDL),
  [],
  `((! :(hreal -> bool) -> bool) (\(x :hreal).
   ((! :(hreal -> bool) -> bool) (\(y :hreal). (~
   (((= :hreal -> hreal -> bool) $1) ((hreal_add $1) $0)))))))`),
 ((HREAL_EQ_ADDR),
  [],
  `((! :(hreal -> bool) -> bool) (\(x :hreal).
   ((! :(hreal -> bool) -> bool) (\(y :hreal). (~
   (((= :hreal -> hreal -> bool) ((hreal_add $1) $0)) $1))))))`),
 ((HREAL_RDISTRIB),
  [],
  `((! :(hreal -> bool) -> bool) (\(x :hreal).
   ((! :(hreal -> bool) -> bool) (\(y :hreal).
   ((! :(hreal -> bool) -> bool) (\(z :hreal).
   (((= :hreal -> hreal -> bool) ((hreal_mul ((hreal_add $2) $1)) $0))
   ((hreal_add ((hreal_mul $2) $0)) ((hreal_mul $1) $0)))))))))`)]
