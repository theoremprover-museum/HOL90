\DOC PWORDLEN_CONV

\TYPE {PWORDLEN_CONV : term list -> conv}

\KEYWORDS
conversion, word.

\LIBRARY word

\SYNOPSIS
Computes by inference the predicate asserting the size of a word.

\DESCRIBE
For any term {tm} of type {:(*)word}, the result of evaluating
{
   PWORDLEN_CONV tms "PWORDLEN n tm"
}
\noindent where {n} must be a numeric constant,
is the theorem
{
   A |- PWORDLEN n tm = T
}
\noindent where the new assumption(s) {A} depends on the actual form
of the term {tm}.

If {tm} is an application of the unary bitwise operator {WNOT}, i.e.,
{tm = WNOT tm'}, then {A} will be {PWORDLEN n tm'}.
If {tm} is an application of one of the binary bitwise operators:
{WAND}, {WOR} and {WXOR}, then {A} will be {PWORDLEN n tm'}, {PWORDLEN n tm''}.
If {tm} is  {WORD [b(n-1);...;b0]}, then {A} is empty. The length of
the list must agree with {n}.
In all above cases, the term list argument is irrelevant. An empty
list could be supplied.

If {tm} is {WSEG n k tm'}, then the term list {tms} should  be {[N]}
which indicates the size of {tm'},
and the assumption {A} will be {PWORDLEN N tm'}.

If {tm} is {WCAT(tm',tm'')}, then the term list {tms} should be
{[n1;n2]} which tells the sizes of the words to be concatenated. The
assumption will be {PWORDLEN n1 tm', PWORDLEN n2 tm''}. The value of
{n} must be the sum of {n1} and {n2}.

\FAILURE
{PWORDLEN_CONV tms tm} fails if {tm} is not of the form described above.

\SEEALSO
PWORDLEN_bitop_CONV, PWORDLEN_TAC

\ENDDOC

