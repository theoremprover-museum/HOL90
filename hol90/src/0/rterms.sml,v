head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	96.02.08.00.31.55;	author drs1004;	state Exp;
branches;
next	1.2;

1.2
date	96.01.04.13.45.47;	author drs1004;	state Exp;
branches;
next	1.1;

1.1
date	95.12.18.11.35.12;	author drs1004;	state Exp;
branches;
next	;


desc
@@


1.3
log
@New theory mechanism, by Donald Syme, and many other enhancements.
@
text
@signature Rterms_sig =
sig
    type term sharing type term = Term.term;                     
    type typ sharing type typ = Type.typ;                        

    val const_decl : string -> {const:term}
    val is_constant : string -> bool
    val is_polymorphic : string -> bool
    datatype lambda = VAR of {Name : string, Ty : typ}
      | CONST of {Name : string, Ty : typ}
      | COMB of {Rator : term, Rand : term}
      | LAMB of {Bvar : term, Body : term};

    val free_vars : term -> term list
    val free_in : term -> term -> bool
    val all_vars : term -> term list
    val free_varsl : term list -> term list
    val all_varsl : term list -> term list
    val term_lt : term -> term -> bool
    val term_ord : term * term -> order
    val genvar : typ -> term
    val genvars : typ -> int -> term list
    val variant : term list -> term -> term
    val type_of : term -> typ
    val type_vars_in_term : term -> typ list
    val mk_var : {Name:string, Ty:typ} -> term
    val mk_primed_var : {Name:string, Ty:typ} -> term
    val prim_mk_const : string * typ Lib.subst -> term
    val list_mk_comb : term * term list -> term
    val mk_comb : {Rand:term, Rator:term} -> term
    val mk_abs : {Body:term, Bvar:term} -> term
    val dest_var : term -> {Name:string, Ty:typ}
    val dest_const : term -> {Name:string, Ty:typ}
    val dest_comb : term -> {Rand:term, Rator:term}
    val dest_abs : term -> {Body:term, Bvar:term}
    val is_var : term -> bool
    val is_const : term -> bool
    val is_comb : term -> bool
    val is_abs : term -> bool
    val dest_term : term -> lambda
    val rator : term -> term
    val rand : term -> term
    val bvar : term -> term
    val body : term -> term
    val aconv : term -> term -> bool
    val subst : term Lib.subst -> term -> term
    val inst : typ Lib.subst -> term -> term
    val beta_conv : term -> term
    val hash_term : term -> int
    val optimize_term : term -> term
    val ty_antiq : typ -> term
    val extract_ty_antiq : term -> typ
    val is_type : string -> bool
    val type_subst : typ Lib.subst -> typ -> typ
    val type_vars : typ -> typ list
    val type_varsl : typ list -> typ list
    val mk_type : {Args:typ list, Tyop:string} -> typ
    val dest_type : typ -> {Args:typ list, Tyop:string}
    val mk_vartype : string -> typ
    val dest_vartype : typ -> string
    val is_vartype : typ -> bool
    val type_ord : typ * typ -> order
    val type_lt : typ -> typ -> bool
    val type_decl : string -> {arity:int, name:string}
    val hash_type : typ -> int
    val optimize_type : typ -> typ
    val mk_const : {Name:string, Ty:typ} -> term
    val bool_ty : typ
    val alpha_ty : typ
    val beta_ty : typ
    val --> : typ * typ -> typ
    val mk_fun_ty : {dom:typ, ran:typ} -> typ
    val dest_fun_ty : typ -> {dom:typ, ran:typ}
    val is_fun_ty : typ -> bool
    val mk_prod_ty : typ * typ -> typ
    val dest_prod_ty : typ -> typ * typ
    val is_prod_ty : typ -> bool
    val ### : typ * typ -> typ
    val mk_unop : string -> term * term -> term
    val is_unop : string -> term -> bool
    val dest_unop : string -> term -> term
    val mk_binop : string -> term * term -> term
    val is_binop : string -> term -> bool
    val dest_binop : string -> term -> term * term
    val strip_binop : string -> term -> term list * term
    val binops : string -> term -> term list
    val mk_eq : {lhs:term, rhs:term} -> term
    val dest_eq : term -> {lhs:term, rhs:term}
    val is_eq : term -> bool
    val lhs : term -> term
    val rhs : term -> term
    val strip_comb : term -> term * term list
    val list_mk_abs : term list * term -> term
    val strip_abs : term -> term list * term
    val mk_imp : {ant:term, conseq:term} -> term
    val dest_imp : term -> {ant:term, conseq:term}
    val is_imp : term -> bool
    val list_mk_imp : term list * term -> term
    val strip_imp : term -> term list * term
    val truth : term
    val falsity : term
    val implies : term
    val mk_neg : term -> term
    val is_neg : term -> bool
    val dest_neg : term -> term
    val negation : term
    val mk_conj : {conj1:term, conj2:term} -> term
    val mk_disj : {disj1:term, disj2:term} -> term
    val dest_conj : term -> {conj1:term, conj2:term}
    val dest_disj : term -> {disj1:term, disj2:term}
    val conjunction : term
    val disjunction : term
    val is_conj : term -> bool
    val is_disj : term -> bool
    val list_mk_conj : term list -> term
    val list_mk_disj : term list -> term
    val strip_conj : term -> term list
    val strip_disj : term -> term list
    val mk_select : {Body:term, Bvar:term} -> term
    val mk_forall : {Body:term, Bvar:term} -> term
    val mk_exists : {Body:term, Bvar:term} -> term
    val dest_select : term -> {Body:term, Bvar:term}
    val dest_forall : term -> {Body:term, Bvar:term}
    val dest_exists : term -> {Body:term, Bvar:term}
    val is_select : term -> bool
    val is_forall : term -> bool
    val is_exists : term -> bool
    val list_mk_forall : term list * term -> term
    val gen_all : term -> term
    val list_mk_exists : term list * term -> term
    val strip_forall : term -> term list * term
    val strip_exists : term -> term list * term
    val mk_cond : {cond:term, larm:term, rarm:term} -> term
    val mk_pair : {fst:term, snd:term} -> term
    val mk_let : {arg:term, func:term} -> term
    val dest_cond : term -> {cond:term, larm:term, rarm:term}
    val dest_pair : term -> {fst:term, snd:term}
    val dest_let : term -> {arg:term, func:term}
    val is_cond : term -> bool
    val is_pair : term -> bool
    val is_let : term -> bool
    val list_mk_pair : term list -> term
    val strip_pair : term -> term list
    val is_pabs : term -> bool
    val mk_pabs : {body:term, varstruct:term} -> term
    val dest_pabs : term -> {body:term, varstruct:term}
    val is_cons : term -> bool
    val is_list : term -> bool
    val mk_cons : {hd:term, tl:term} -> term
    val mk_list : {els:term list, ty:typ} -> term
    val dest_cons : term -> {hd:term, tl:term}
    val dest_list : term -> {els:term list, ty:typ}
    val find_term : (term -> bool) -> term -> term
    val find_terms : (term -> bool) -> term -> term list
    val subst_occs : int list list -> term Lib.subst -> term -> term
    val match_type : typ -> typ -> typ Lib.subst
    val match_term : term -> term -> (term Lib.subst * typ Lib.subst)
    
(*    val dest_abs : term -> {Body:term, Bvar:term}                *)
(*    val dest_comb : term -> {Rand:term, Rator:term}              *)
(*     val dest_cond : term -> {cond:term, larm:term, rarm:term}   *)
(*     val dest_conj : term -> {conj1:term, conj2:term}		   *)
(*    val dest_cons : term -> {hd:term, tl:term}                   *)
(*    val dest_const : term -> {Name:string, Ty:typ} 		   *)
(*    val dest_disj : term -> {disj1:term, disj2:term}             *)
(*    val dest_eq : term -> {lhs:term, rhs:term}		   *)
(*    val dest_exists : term -> {Body:term, Bvar:term}		   *)
(*    val dest_forall : term -> {Body:term, Bvar:term}		   *)
(*    val dest_fun_ty : typ -> {dom: typ, ran: typ}		   *)
(*    val dest_imp : term -> {ant:term, conseq:term}		   *)
(*    val dest_let : term -> {arg:term, func:term}                 *)
(*    val dest_list : term -> {els:term list, ty:typ}		   *)
(*    val dest_pabs : term -> {body:term, varstruct:term}	   *)
(*    val dest_pair : term -> {fst:term, snd:term}		   *)
(*    val dest_select : term -> {Body:term, Bvar:term}		   *)
(*    val dest_type : typ -> {Args:typ list, Tyop:string}	   *)
(*    val dest_var : term -> {Name:string, Ty:typ}                 *)


(*    val mk_abs : {Body:term, Bvar:term} -> term                  *)
(*    val mk_comb : {Rand:term, Rator:term} -> term                *)
(*    val mk_cond : {cond:term, larm:term, rarm:term} -> term      *)
(*    val mk_conj : {conj1:term, conj2:term} -> term		   *)
(*    val mk_cons : {hd:term, tl:term} -> term			   *)
(*    val mk_const : {Name:string, Ty:typ} -> term		   *)
(*    val mk_disj : {disj1:term, disj2:term} -> term		   *)
(*    val mk_eq : {lhs:term, rhs:term} -> term			   *)
(*    val mk_exists : {Body:term, Bvar:term} -> term               *)
(*    val mk_forall : {Body:term, Bvar:term} -> term		   *)
(*    val mk_fun_ty : {dom: typ, ran: typ} -> typ		   *)
(*    val mk_imp : {ant:term, conseq:term} -> term		   *)
(*    val mk_let : {arg:term, func:term} -> term		   *)
(*    val mk_list : {els:term list, ty:typ} -> term		   *)
(*    val mk_pabs : {body:term, varstruct:term} -> term            *)
(*    val mk_pair : {fst:term, snd:term} -> term		   *)
(*    val mk_primed_var : {Name:string, Ty:typ} -> term		   *)
(*    val mk_select : {Body:term, Bvar:term} -> term		   *)
(*    val mk_type : {Args:typ list, Tyop:string} -> typ 	   *)
(*    val mk_var : {Name:string, Ty:typ} -> term 		   *)
end;


structure Rterms :Rterms_sig = 
struct

open Dsyntax;
open Match;
open Type;
open Term;

end; (* Rterms *)
@


1.2
log
@Fixed types, pretypes, fixities, parsing.
@
text
@d2 33
a34 4
  sig
      type term sharing type term = Term.term;
      type typ sharing type typ = Type.typ;

d36 73
a108 2
    val dest_comb : term -> {Rand:term, Rator:term}
    val dest_cond : term -> {cond:term, larm:term, rarm:term}
a109 2
    val dest_cons : term -> {hd:term, tl:term}
    val dest_const : term -> {Name:string, Ty:typ}
d111 13
a123 1
    val dest_eq : term -> {lhs:term, rhs:term}
d125 13
a137 3
    val dest_forall : term -> {Body:term, Bvar:term}
    val dest_fun_ty : typ -> {dom: typ, ran: typ}
    val dest_imp : term -> {ant:term, conseq:term}
d139 7
a145 1
    val dest_list : term -> {els:term list, ty:typ}
d147 2
a148 10
    val dest_pair : term -> {fst:term, snd:term}
    val dest_select : term -> {Body:term, Bvar:term}
    val dest_type : typ -> {Args:typ list, Tyop:string}
    val dest_var : term -> {Name:string, Ty:typ}


    val mk_abs : {Body:term, Bvar:term} -> term
    val mk_comb : {Rand:term, Rator:term} -> term
    val mk_cond : {cond:term, larm:term, rarm:term} -> term
    val mk_conj : {conj1:term, conj2:term} -> term
a149 8
    val mk_const : {Name:string, Ty:typ} -> term
    val mk_disj : {disj1:term, disj2:term} -> term
    val mk_eq : {lhs:term, rhs:term} -> term
    val mk_exists : {Body:term, Bvar:term} -> term
    val mk_forall : {Body:term, Bvar:term} -> term
    val mk_fun_ty : {dom: typ, ran: typ} -> typ
    val mk_imp : {ant:term, conseq:term} -> term
    val mk_let : {arg:term, func:term} -> term
d151 50
a200 7
    val mk_pabs : {body:term, varstruct:term} -> term
    val mk_pair : {fst:term, snd:term} -> term
    val mk_primed_var : {Name:string, Ty:typ} -> term
    val mk_select : {Body:term, Bvar:term} -> term
    val mk_type : {Args:typ list, Tyop:string} -> typ
    val mk_var : {Name:string, Ty:typ} -> term
  end;
a205 1
open Term;
d207 1
d209 1
@


1.1
log
@Preterm and other changes, see 7.changes
@
text
@d3 2
a4 2
    type term sharing type term = Term.term;
    type typ sharing type typ = Type.typ;
@
