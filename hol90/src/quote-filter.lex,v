head	1.1;
access;
symbols
	HOL97:1.1.2.4.0.2
	bpHOL97:1.1.2.4
	hol90_9_alpha:1.1.2.3
	hol90_pre8_for_multiple_compilers:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	95.11.15.13.22.16;	author rjb;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.06.25.15.40.48;	author rjb;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	96.06.27.15.57.05;	author rjb;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	96.08.23.16.14.24;	author rjb;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	96.10.01.13.15.33;	author rjb;	state Exp;
branches
	1.1.2.4.2.1;
next	;

1.1.2.4.2.1
date	97.06.11.18.09.35;	author kxs;	state dead;
branches;
next	;


desc
@Filter to provide HOL90 quotations
@


1.1
log
@The HOL90 sources have been changed to allow for the use of different
Standard ML compilers (possibly simultaneously).

The main changes are:

 * Introduction of makefiles for different ML compilers.

   - The existing Makefile has become Makefile.njsml.108-cm and has been
     modified to be called from the new main Makefile.

   - New Makefile introduced. In addition to an entry for making the HOL90
     executable there are entries for making an architecture-independent
     script for running HOL and a filter for providing quotation and
     antiquotation for those ML compilers/interpretors that do not have the
     facility built-in. The Makefile has a variable for the name of the
     version, e.g. "pre8", which ultimately should be propagated to the build.

 * The "bin" subdirectory is the location for the new architecture-independent
   script and for the quotation filters for various architectures. The HOL90
   executables and heaps are now placed in subdirectories of "bin" based on
   the name of the SML compiler. The naming scheme is:

      njsml.108      Standard ML of New Jersey, Version 108
      njsml.108-cm   SML/NJ, Version 108, using the Compilation Manager
      njsml.93       Standard ML of New Jersey, Version 0.93
      polyml         Poly/ML
      mosml          Moscow ML

   The compiler-specific makefiles should write executables, heaps, and logs
   into these subdirectories. In addition, architecture-independent scripts
   (or symbolic links to them) for the SML compiler and (where appropriate)
   the CM version of the compiler should be placed in these directories under
   the names "sml" and "sml-cm".

 * A file called "script" has been added to the "src" subdirectory. This is
   the architecture-independent script for executing HOL90. The Makefile
   simply copies this to the "bin" subdirectory preceded by a few lines of
   parameter definitions. One of these parameters is the default SML version
   to use. So, the last version of HOL to be built using "make" or "make all"
   will become the default.

 * The Lex source for the quotation filter has been added to the "src"
   subdirectory under the name "quote-filter.lex".

 * Many files in "src/0" changed to make them more portable across different
   ML compilers. Various additions have been made to the Portable structure
   and files changed to access identifiers in the Portable structure rather
   than from the global environment. Worthy of special note are:

   - The pointer equality used in "src/0/term.sml" has been made into a
     function in the Portable structure.

   - The ML-Lex and ML-Yacc files for the various parsers have been changed
     to access the Portable structure. Both the source files and the SML
     produced from them have been changed but I have not verified that the
     source files would reproduce the new SML versions if ML-Lex and ML-Yacc
     were to be rerun on them. The changes involve some hacks that exploit the
     way ML-Lex and ML-Yacc work. See the sources for details.

R.J.Boulton, 15th November 1995.
@
text
@   /* quote-filter.lex */

   /* Filter to provide quotation and antiquotation for HOL90 */
   /* Written by R.J.Boulton, 13th November 1995.             */

   /* Expects the following Standard ML datatype to have been declared: */
   /*                                                                   */
   /*    datatype 'a frag = QUOTE of string | ANTIQUOTE of 'a;          */

%{
unsigned antiquote = 0;
%}

%s STRING COMMENT QUOTE ANTIQUOTE

letter [A-Za-z]
digit  [0-9]
symbol [!%&$+/:<=>?@@~|#*]|\\|\-|\^
id     {letter}({letter}|{digit}|_|')*|{symbol}+
ws     [ \t]+

%%

%{
int pardepth = 0;
int comdepth = 0;
%}

<INITIAL>\"     { ECHO; BEGIN STRING; }
<INITIAL>"(*"   { ECHO; ++comdepth; BEGIN COMMENT; }
<INITIAL>"("    { ECHO; ++pardepth; }
<INITIAL>")"    { ECHO; --pardepth; if (antiquote && pardepth < 1) return 0; }
<INITIAL>`      { printf("[QUOTE \""); BEGIN QUOTE; }
<INITIAL>\n     { ECHO; fflush(stdout); fflush(stdout); }

<STRING>\\\"    { ECHO; }
<STRING>\"      { ECHO; BEGIN INITIAL; }

<COMMENT>"(*"   { ECHO; ++comdepth; }
<COMMENT>"*)"   { ECHO; --comdepth; if (comdepth < 1) BEGIN INITIAL; }

<QUOTE>`        { printf("\"]"); BEGIN INITIAL; }
<QUOTE>\^       { printf("\",ANTIQUOTE "); BEGIN ANTIQUOTE; }
<QUOTE>\\       { printf("\\\\"); }
<QUOTE>\n       { putchar(' '); }

<ANTIQUOTE>{id} { ECHO; printf(",QUOTE \""); BEGIN QUOTE; }
<ANTIQUOTE>"("  { yyless(0); BEGIN INITIAL; anti();
                  printf(",QUOTE \""); BEGIN QUOTE; }
<ANTIQUOTE>{ws} { }
<ANTIQUOTE>\n   { }
<ANTIQUOTE>.    { yyless(0); printf(",QUOTE \""); BEGIN QUOTE; }

%%

#include <signal.h>

anti()
{ int x;
  unsigned old = antiquote;
  antiquote = 1;
  x = yylex();
  antiquote = old;
  return x;
}

main()
{ signal(SIGINT,SIG_IGN); /* Allows ^C to pass to the HOL90 process
                             -- thanks to J.R.Harrison for this code */
  return yylex();
}
@


1.1.2.1
log
@The core of hol90.9.alpha now builds successfully with SML/NJ 109,
SML/NJ 108.5 (using CM), SML/NJ 0.93, and Poly/ML 3.0.
I have not yet tried rebuilding the theory files.
@
text
@d1 1
a1 1
   /* hol-quote-filter.lex */
d3 2
a4 3
   /* Filter to provide quotation and antiquotation for the HOL system. */
   /* Written by R.J.Boulton, 13th November 1995.                       */
   /* Last modfied on 12th April 1996 by RJB.                           */
a8 26
   /*                                                                   */
   /* and also the functions term_parser, type_parser, and ty_antiq.    */

   /* This filter adds the following special features to Standard ML:   */
   /*                                                                   */
   /*    `...`        a HOL term quotation                              */
   /*    `:...`       a HOL type quotation                              */
   /*    ``...``      a generic quotation                               */
   /*    --`...`--    a HOL term quotation (for backward compatibility) */
   /*    ==`:...`==   a HOL type quotation (for backward compatibility) */
   /*                                                                   */
   /*    `... ^(...) ...`     term antiquotation in a HOL term          */
   /*    `... :^(...) ...`    type antiquotation in a HOL term          */
   /*    `:... ^(...) ...`    type antiquotation in a HOL type          */
   /*    ``... ^(...) ...``   antiquotation in a generic quotation      */
   /*                                                                   */
   /* where (...) may be an alphanumeric or symbolic ML identifier or a */
   /* parenthesized expression. The number of lines in the processed    */
   /* text remains unchanged.                                           */
   /*                                                                   */
   /* Limitations:                                                      */
   /*                                                                   */
   /*    o No carriage return or line feed may appear between the `--'  */
   /*      or `==' and the quotation marks in the old-style quotations. */
   /*    o Antiquotation in old-style quotations may not work as it     */
   /*      used to.                                                     */
d14 1
a14 1
%s STRING COMMENT QUOTE TMQUOTE TYQUOTE ANTIQUOTE
d20 1
a20 1
ws     [ \t]
a26 1
int prevstate = INITIAL;
d29 24
a52 50
<INITIAL>\"       { ECHO; BEGIN STRING; }
<INITIAL>"(*"     { ECHO; ++comdepth; BEGIN COMMENT; }
<INITIAL>"("      { ECHO; ++pardepth; }
<INITIAL>")"      { ECHO; --pardepth;
                    if (antiquote && pardepth < 1) return 0; }
<INITIAL>``       { printf("[QUOTE \""); BEGIN QUOTE; }
<INITIAL>=={ws}*` { printf("(type_parser [QUOTE \""); BEGIN TYQUOTE; }
<INITIAL>--{ws}*` { printf("(term_parser [QUOTE \""); BEGIN TMQUOTE; }
<INITIAL>`{ws}*:  { printf("(type_parser [QUOTE \":"); BEGIN TYQUOTE; }
<INITIAL>`        { printf("(term_parser [QUOTE \""); BEGIN TMQUOTE; }
<INITIAL>\n       { ECHO; fflush(stdout); fflush(stdout); }

<STRING>\\\\      { ECHO; }
<STRING>\\\"      { ECHO; }
<STRING>\"        { ECHO; BEGIN INITIAL; }

<COMMENT>"(*"     { ECHO; ++comdepth; }
<COMMENT>"*)"     { ECHO; --comdepth; if (comdepth < 1) BEGIN INITIAL; }

<QUOTE>``         { printf("\"]"); BEGIN INITIAL; }
<QUOTE>\^         { printf("\",ANTIQUOTE (");
                    prevstate = QUOTE; BEGIN ANTIQUOTE; }
<QUOTE>\\         { printf("\\\\"); }
<QUOTE>\t         { printf("\\t"); }
<QUOTE>\n         { printf("\",\nQUOTE \""); }

<TMQUOTE>`{ws}*-- { printf("\"])"); BEGIN INITIAL; }
<TMQUOTE>`        { printf("\"])"); BEGIN INITIAL; }
<TMQUOTE>:{ws}*\^ { printf(":\",ANTIQUOTE (ty_antiq ");
                    prevstate = TMQUOTE; BEGIN ANTIQUOTE; }
<TMQUOTE>\^       { printf("\",ANTIQUOTE (");
                    prevstate = TMQUOTE; BEGIN ANTIQUOTE; }
<TMQUOTE>\\       { printf("\\\\"); }
<TMQUOTE>\t       { printf("\\t"); }
<TMQUOTE>\n       { printf("\",\nQUOTE \""); }

<TYQUOTE>`{ws}*== { printf("\"])"); BEGIN INITIAL; }
<TYQUOTE>`        { printf("\"])"); BEGIN INITIAL; }
<TYQUOTE>\^       { printf("\",ANTIQUOTE (ty_antiq ");
                    prevstate = TYQUOTE; BEGIN ANTIQUOTE; }
<TYQUOTE>\\       { printf("\\\\"); }
<TYQUOTE>\t       { printf("\\t"); }
<TYQUOTE>\n       { printf("\",\nQUOTE \""); }

<ANTIQUOTE>{id}   { ECHO; printf("),QUOTE \""); BEGIN prevstate; }
<ANTIQUOTE>"("    { yyless(0); BEGIN INITIAL; anti();
                    printf("),QUOTE \""); BEGIN prevstate; }
<ANTIQUOTE>{ws}+  { }
<ANTIQUOTE>\n     { ECHO; }
<ANTIQUOTE>.      { yyless(0); printf("),QUOTE \""); BEGIN prevstate; }
d56 2
d66 6
@


1.1.2.2
log
@Theory files now build with SML/NJ 109, SML/NJ 108.5 (using CM), SML/NJ 0.93,
and Poly/ML 3.0.
The quotation filter has been modified so that antiquotation works correctly
in old-style quotations.
The quotation filter is now compiled using flex and gcc (by default).
The arguments to the script for running hol90 have been changed.
@
text
@d5 1
a5 1
   /* Last modfied on 26th June 1996 by RJB.                            */
d34 2
d41 1
a41 1
%s STRING COMMENT QUOTE TMQUOTE OLDTMQUOTE TYQUOTE OLDTYQUOTE ANTIQUOTE
d63 2
a64 2
<INITIAL>=={ws}*` { printf("(type_parser [QUOTE \""); BEGIN OLDTYQUOTE; }
<INITIAL>--{ws}*` { printf("(term_parser [QUOTE \""); BEGIN OLDTMQUOTE; }
d83 1
d93 1
a93 7
<OLDTMQUOTE>`{ws}*-- { printf("\"])"); BEGIN INITIAL; }
<OLDTMQUOTE>\^       { printf("\",ANTIQUOTE (");
                       prevstate = OLDTMQUOTE; BEGIN ANTIQUOTE; }
<OLDTMQUOTE>\\       { printf("\\\\"); }
<OLDTMQUOTE>\t       { printf("\\t"); }
<OLDTMQUOTE>\n       { printf("\",\nQUOTE \""); }

a100 7
<OLDTYQUOTE>`{ws}*== { printf("\"])"); BEGIN INITIAL; }
<OLDTYQUOTE>\^       { printf("\",ANTIQUOTE (");
                       prevstate = OLDTYQUOTE; BEGIN ANTIQUOTE; }
<OLDTYQUOTE>\\       { printf("\\\\"); }
<OLDTYQUOTE>\t       { printf("\\t"); }
<OLDTYQUOTE>\n       { printf("\",\nQUOTE \""); }

@


1.1.2.3
log
@Switched from using `...` for term and type quotations to using ``...`` so as
to retain compatibility with the use of raw quotations in earlier versions of
hol90.
@
text
@d5 1
a5 1
   /* Last modfied on 12th July 1996 by RJB.                            */
d15 3
a17 3
   /*    `...`        a generic quotation                               */
   /*    ``...``      a HOL term quotation                              */
   /*    ``:...``     a HOL type quotation                              */
d21 4
a24 4
   /*    `... ^(...) ...`      antiquotation in a generic quotation     */
   /*    ``... ^(...) ...``    term antiquotation in a HOL term         */
   /*    ``... :^(...) ...``   type antiquotation in a HOL term         */
   /*    ``:... ^(...) ...``   type antiquotation in a HOL type         */
d60 1
d63 2
a64 3
<INITIAL>``{ws}*: { printf("(type_parser [QUOTE \":"); BEGIN TYQUOTE; }
<INITIAL>``       { printf("(term_parser [QUOTE \""); BEGIN TMQUOTE; }
<INITIAL>`        { printf("[QUOTE \""); BEGIN QUOTE; }
d74 1
a74 1
<QUOTE>`          { printf("\"]"); BEGIN INITIAL; }
a77 1
<QUOTE>\"         { printf("\\\""); }
d81 1
a81 1
<TMQUOTE>``       { printf("\"])"); BEGIN INITIAL; }
a86 1
<TMQUOTE>\"       { printf("\\\""); }
a93 1
<OLDTMQUOTE>\"       { printf("\\\""); }
d97 1
a97 1
<TYQUOTE>``       { printf("\"])"); BEGIN INITIAL; }
a100 1
<TYQUOTE>\"       { printf("\\\""); }
a107 1
<OLDTYQUOTE>\"       { printf("\\\""); }
@


1.1.2.4
log
@Restored the code that makes the filter ignore ^C.
@
text
@d5 1
a5 1
   /* Last modfied on 1st October 1996 by RJB.                          */
a124 2
#include <signal.h>

a132 6

main()
{ signal(SIGINT,SIG_IGN); /* Allows ^C to pass to the HOL process
                             -- thanks to J.R.Harrison for this code */
  return yylex();
}
@


1.1.2.4.2.1
log
@Many minor changes in order to get HOL to build on SML/NJ 109.26. There are
several real changes, however.

  1. The reliance on hacked ML-Yacc support files is gone.

  2. After type inference, there is now a pass where new names are guessed for
     unconstrained type variables. This is experimental.

  3. All the grammars used in the basic HOL system are put in one place
     (the "src/Grammars" directory).

  4. The implementations of the "Portable" structure have been moved to
      src/portableML.

  5. All the makefiles used to build the system are in src/Makefiles.
@
text
@@
